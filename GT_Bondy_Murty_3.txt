1.1 Graphs and Their Representation
Definitions and Examples
Many real-world situations can conveniently be described by means of a diagram
consisting of a set of points together with lines joining certain pairs of these points.

2

1 Graphs

For example, the points could represent people, with lines joining pairs of friends; or
the points might be communication centres, with lines representing communication
links. Notice that in such diagrams one is mainly interested in whether two given
points are joined by a line; the manner in which they are joined is immaterial. A
mathematical abstraction of situations of this type gives rise to the concept of a
graph.
A graph G is an ordered pair (V (G), E(G)) consisting of a set V (G) of vertices
and a set E(G), disjoint from V (G), of edges, together with an incidence function
ψG that associates with each edge of G an unordered pair of (not necessarily
distinct) vertices of G. If e is an edge and u and v are vertices such that ψG (e) =
{u, v}, then e is said to join u and v, and the vertices u and v are called the ends
of e. We denote the numbers of vertices and edges in G by v(G) and e(G); these
two basic parameters are called the order and size of G, respectively.
Two examples of graphs should serve to clarify the deﬁnition. For notational
simplicity, we write uv for the unordered pair {u, v}.
Example 1.
G = (V (G), E(G))
where

V (G) = {u, v, w, x, y}
E(G) = {a, b, c, d, e, f, g, h}

and ψG is deﬁned by
ψG (a) = uv
ψG (e) = vx

ψG (b) = uu ψG (c) = vw ψG (d) = wx
ψG (f ) = wx ψG (g) = ux ψG (h) = xy

Example 2.
H = (V (H), E(H))
where

V (H) = {v0 , v1 , v2 , v3 , v4 , v5 }
E(H) = {e1 , e2 , e3 , e4 , e5 , e6 , e7 , e8 , e9 , e10 }

and ψH is deﬁned by
ψH (e1 ) = v1 v2 ψH (e2 ) = v2 v3 ψH (e3 ) = v3 v4 ψH (e4 ) = v4 v5 ψH (e5 ) = v5 v1
ψH (e6 ) = v0 v1 ψH (e7 ) = v0 v2 ψH (e8 ) = v0 v3 ψH (e9 ) = v0 v4 ψH (e10 ) = v0 v5
Drawings of Graphs
Graphs are so named because they can be represented graphically, and it is this
graphical representation which helps us understand many of their properties. Each
vertex is indicated by a point, and each edge by a line joining the points representing its ends. Diagrams of G and H are shown in Figure 1.1. (For clarity, vertices
are represented by small circles.)

1.1 Graphs and Their Representation

3

v1
u

a

e5
v

y

v5

h
b

g

c

e9

e1
v2

e7

e10
e4

e

e6

v0

e2

e8

f
x

w

d
G

v4

e3

v3

H

Fig. 1.1. Diagrams of the graphs G and H

There is no single correct way to draw a graph; the relative positions of points
representing vertices and the shapes of lines representing edges usually have no
signiﬁcance. In Figure 1.1, the edges of G are depicted by curves, and those of
H by straight-line segments. A diagram of a graph merely depicts the incidence
relation holding between its vertices and edges. However, we often draw a diagram
of a graph and refer to it as the graph itself; in the same spirit, we call its points
‘vertices’ and its lines ‘edges’.
Most of the deﬁnitions and concepts in graph theory are suggested by this
graphical representation. The ends of an edge are said to be incident with the
edge, and vice versa. Two vertices which are incident with a common edge are
adjacent, as are two edges which are incident with a common vertex, and two
distinct adjacent vertices are neighbours. The set of neighbours of a vertex v in a
graph G is denoted by NG (v).
An edge with identical ends is called a loop, and an edge with distinct ends a
link. Two or more links with the same pair of ends are said to be parallel edges. In
the graph G of Figure 1.1, the edge b is a loop, and all other edges are links; the
edges d and f are parallel edges.
Throughout the book, the letter G denotes a graph. Moreover, when there is
no scope for ambiguity, we omit the letter G from graph-theoretic symbols and
write, for example, V and E instead of V (G) and E(G). In such instances, we
denote the numbers of vertices and edges of G by n and m, respectively.
A graph is ﬁnite if both its vertex set and edge set are ﬁnite. In this book, we
mainly study ﬁnite graphs, and the term ‘graph’ always means ‘ﬁnite graph’. The
graph with no vertices (and hence no edges) is the null graph. Any graph with just
one vertex is referred to as trivial. All other graphs are nontrivial. We admit the
null graph solely for mathematical convenience. Thus, unless otherwise speciﬁed,
all graphs under discussion should be taken to be nonnull.
A graph is simple if it has no loops or parallel edges. The graph H in Example 2
is simple, whereas the graph G in Example 1 is not. Much of graph theory is
concerned with the study of simple graphs.

4

1 Graphs

A set V , together with a set E of two-element subsets of V , deﬁnes a simple
graph (V, E), where the ends of an edge uv are precisely the vertices u and v.
Indeed, in any simple graph we may dispense with the incidence function ψ by
renaming each edge as the unordered pair of its ends. In a diagram of such a
graph, the labels of the edges may then be omitted.
Special Families of Graphs
Certain types of graphs play prominent roles in graph theory. A complete graph
is a simple graph in which any two vertices are adjacent, an empty graph one in
which no two vertices are adjacent (that is, one whose edge set is empty). A graph
is bipartite if its vertex set can be partitioned into two subsets X and Y so that
every edge has one end in X and one end in Y ; such a partition (X, Y ) is called
a bipartition of the graph, and X and Y its parts. We denote a bipartite graph
G with bipartition (X, Y ) by G[X, Y ]. If G[X, Y ] is simple and every vertex in X
is joined to every vertex in Y , then G is called a complete bipartite graph. A star
is a complete bipartite graph G[X, Y ] with |X| = 1 or |Y | = 1. Figure 1.2 shows
diagrams of a complete graph, a complete bipartite graph, and a star.
y1

v1
v5

v2

x1

x2

x3

y5

y2
x1

v4

v3
(a)

y1

y2
(b)

y3

y4

y3
(c)

Fig. 1.2. (a) A complete graph, (b) a complete bipartite graph, and (c) a star

A path is a simple graph whose vertices can be arranged in a linear sequence in
such a way that two vertices are adjacent if they are consecutive in the sequence,
and are nonadjacent otherwise. Likewise, a cycle on three or more vertices is a
simple graph whose vertices can be arranged in a cyclic sequence in such a way
that two vertices are adjacent if they are consecutive in the sequence, and are
nonadjacent otherwise; a cycle on one vertex consists of a single vertex with a
loop, and a cycle on two vertices consists of two vertices joined by a pair of parallel
edges. The length of a path or a cycle is the number of its edges. A path or cycle
of length k is called a k-path or k-cycle, respectively; the path or cycle is odd or
even according to the parity of k. A 3-cycle is often called a triangle, a 4-cycle
a quadrilateral, a 5-cycle a pentagon, a 6-cycle a hexagon, and so on. Figure 1.3
depicts a 3-path and a 5-cycle.

1.1 Graphs and Their Representation

5

v1
u3

u1
v2

v5

u4

v4

u2
(a)

v3
(b)

Fig. 1.3. (a) A path of length three, and (b) a cycle of length ﬁve

A graph is connected if, for every partition of its vertex set into two nonempty
sets X and Y , there is an edge with one end in X and one end in Y ; otherwise the
graph is disconnected. In other words, a graph is disconnected if its vertex set can
be partitioned into two nonempty subsets X and Y so that no edge has one end
in X and one end in Y . (It is instructive to compare this deﬁnition with that of
a bipartite graph.) Examples of connected and disconnected graphs are displayed
in Figure 1.4.
1

2

6
5

1

4

7

4
(a)

5

3

3

7
2

6

(b)

Fig. 1.4. (a) A connected graph, and (b) a disconnected graph

As observed earlier, examples of graphs abound in the real world. Graphs also
arise naturally in the study of other mathematical structures such as polyhedra,
lattices, and groups. These graphs are generally deﬁned by means of an adjacency
rule, prescribing which unordered pairs of vertices are edges and which are not. A
number of such examples are given in the exercises at the end of this section and
in Section 1.3.
For the sake of clarity, we observe certain conventions in representing graphs by
diagrams: we do not allow an edge to intersect itself, nor let an edge pass through
a vertex that is not an end of the edge; clearly, this is always possible. However,
two edges may intersect at a point that does not correspond to a vertex, as in the
drawings of the ﬁrst two graphs in Figure 1.2. A graph which can be drawn in the
plane in such a way that edges meet only at points corresponding to their common
ends is called a planar graph, and such a drawing is called a planar embedding
of the graph. For instance, the graphs G and H of Examples 1 and 2 are both

6

1 Graphs

planar, even though there are crossing edges in the particular drawing of G shown
in Figure 1.1. The ﬁrst two graphs in Figure 1.2, on the other hand, are not planar,
as proved later.
Although not all graphs are planar, every graph can be drawn on some surface
so that its edges intersect only at their ends. Such a drawing is called an embedding
of the graph on the surface. Figure 1.21 provides an example of an embedding of a
graph on the torus. Embeddings of graphs on surfaces are discussed in Chapter 3
and, more thoroughly, in Chapter 10.
Incidence and Adjacency Matrices
Although drawings are a convenient means of specifying graphs, they are clearly
not suitable for storing graphs in computers, or for applying mathematical methods
to study their properties. For these purposes, we consider two matrices associated
with a graph, its incidence matrix and its adjacency matrix.
Let G be a graph, with vertex set V and edge set E. The incidence matrix of
G is the n × m matrix MG := (mve ), where mve is the number of times (0, 1, or 2)
that vertex v and edge e are incident. Clearly, the incidence matrix is just another
way of specifying the graph.
The adjacency matrix of G is the n × n matrix AG := (auv ), where auv is the
number of edges joining vertices u and v, each loop counting as two edges. Incidence
and adjacency matrices of the graph G of Figure 1.1 are shown in Figure 1.5.
u

a
v

y
h
b

g

c

e
f

x

w

d
G

u
v
w
x
y

a
1
1
0
0
0

b
2
0
0
0
0

c
0
1
1
0
0

d
0
0
1
1
0

e
0
1
0
1
0

f
0
0
1
1
0

g
1
0
0
1
0

h
0
0
0
1
1

u
v
w
x
y

M

u
2
1
0
1
0

v
1
0
1
1
0

w
0
1
0
2
0

x
1
1
2
0
1

y
0
0
0
1
0

A

Fig. 1.5. Incidence and adjacency matrices of a graph

Because most graphs have many more edges than vertices, the adjacency matrix
of a graph is generally much smaller than its incidence matrix and thus requires
less storage space. When dealing with simple graphs, an even more compact representation is possible. For each vertex v, the neighbours of v are listed in some
order. A list (N (v) : v ∈ V ) of these lists is called an adjacency list of the graph.
Simple graphs are usually stored in computers as adjacency lists.
When G is a bipartite graph, as there are no edges joining pairs of vertices
belonging to the same part of its bipartition, a matrix of smaller size than the

1.1 Graphs and Their Representation

7

adjacency matrix may be used to record the numbers of edges joining pairs of
vertices. Suppose that G[X, Y ] is a bipartite graph, where X := {x1 , x2 , . . . , xr }
and Y := {y1 , y2 , . . . , ys }. We deﬁne the bipartite adjacency matrix of G to be the
r × s matrix BG = (bij ), where bij is the number of edges joining xi and yj .
Vertex Degrees
The degree of a vertex v in a graph G, denoted by dG (v), is the number of edges of
G incident with v, each loop counting as two edges. In particular, if G is a simple
graph, dG (v) is the number of neighbours of v in G. A vertex of degree zero is called
an isolated vertex. We denote by δ(G) and ∆(G) the minimumand maximum
degrees of the vertices of G, and by d(G) their average degree, n1 v∈V d(v). The
following theorem establishes a fundamental identity relating the degrees of the
vertices of a graph and the number of its edges.
Theorem 1.1 For any graph G,


d(v) = 2m

(1.1)

v∈V

Proof Consider the incidence matrix M of G. The sum
 of the entries in the row
corresponding to vertex v is precisely d(v). Therefore v∈V d(v) is just the sum
of all the entries in M. But this sum is also 2m, because each of the m column
sums of M is 2, each edge having two ends.

Corollary 1.2 In any graph, the number of vertices of odd degree is even.
Proof Consider equation (1.1) modulo 2. We have

1 (mod 2) if d(v) is odd,
d(v) ≡
0 (mod 2) if d(v) is even.
Thus, modulo 2, the left-hand side is congruent to the number of vertices of odd
degree, and the right-hand side is zero. The number of vertices of odd degree is
therefore congruent to zero modulo 2.

A graph G is k-regular if d(v) = k for all v ∈ V ; a regular graph is one that
is k-regular for some k. For instance, the complete graph on n vertices is (n − 1)regular, and the complete bipartite graph with k vertices in each part is k-regular.
For k = 0, 1 and 2, k-regular graphs have very simple structures and are easily
characterized (Exercise 1.1.5). By contrast, 3-regular graphs can be remarkably
complex. These graphs, also referred to as cubic graphs, play a prominent role in
graph theory. We present a number of interesting examples of such graphs in the
next section.

8

1 Graphs

Proof Technique: Counting in Two Ways
In proving Theorem 1.1, we used a common proof technique in combinatorics,
known as counting in two ways. It consists of considering a suitable matrix
and computing the sum of its entries in two diﬀerent ways: ﬁrstly as the sum
of its row sums, and secondly as the sum of its column sums. Equating these
two quantities results in an identity. In the case of Theorem 1.1, the matrix
we considered was the incidence matrix of G. In order to prove the identity of
Exercise 1.1.9a, the appropriate matrix to consider is the bipartite adjacency
matrix of the bipartite graph G[X, Y ]. In both these cases, the choice of the
appropriate matrix is fairly obvious. However, in some cases, making the right
choice requires ingenuity.
Note that an upper bound on the sum of the column sums of a matrix is
clearly also an upper bound on the sum of its row sums (and vice versa).
The method of counting in two ways may therefore be adapted to establish
inequalities. The proof of the following proposition illustrates this idea.
Proposition 1.3 Let G[X, Y ] be a bipartite graph without isolated vertices
such that d(x) ≥ d(y) for all xy ∈ E, where x ∈ X and y ∈ Y . Then |X| ≤ |Y |,
with equality if and only if d(x) = d(y) for all xy ∈ E.
Proof The ﬁrst assertion follows if we can ﬁnd a matrix with |X| rows and
|Y | columns in which each row sum is one and each column sum is at most
one. Such a matrix can be obtained from the bipartite adjacency matrix B
of G[X, Y ] by dividing the row corresponding to vertex x by d(x), for each
x ∈ X. (This is possible since d(x) = 0.) Because the sum of the entries of B

in the row corresponding to x is d(x), all row sums of the resulting matrix B
are equal to one. On the other hand,
the sum of the entries in the column of
 corresponding to vertex y is  1/d(x), the sum being taken over all edges
B
xy incident to y, and this sum is at most one because 1/d(x) ≤ 1/d(y) for
each edge xy, by hypothesis, and because there are d(y) edges incident to y.
The above argument may be expressed more concisely as follows.
|X| =

 
x∈X y∈Y
xy∈E

  1
  1
  1
1
=
≤
=
= |Y |
d(x)
d(x)
d(y)
d(y)
x∈X xy∈E
y∈Y

x∈X xy∈E
y∈Y

y∈Y x∈X
xy∈E

Furthermore, if |X| = |Y |, the middle inequality must be an equality, implying that d(x) = d(y) for all xy ∈ E.

An application of this proof technique to a problem in set theory about geometric conﬁgurations is described in Exercise 1.3.15.

1.1 Graphs and Their Representation

9

Exercises
1.1.1 Let G be a simple graph. Show that m ≤
holds.

n
2 , and determine when equality

1.1.2 Let G[X, Y ] be a simple bipartite graph, where |X| = r and |Y | = s.
a) Show that m ≤ rs.
b) Deduce that m ≤ n2 /4.
c) Describe the simple bipartite graphs G for which equality holds in (b).
1.1.3 Show that:
a) every path is bipartite,
b) a cycle is bipartite if and only if its length is even.
1.1.4 Show that, for any graph G, δ(G) ≤ d(G) ≤ ∆(G).
1.1.5 For k = 0, 1, 2, characterize the k-regular graphs.
1.1.6
a) Show that, in any group of two or more people, there are always two who have
exactly the same number of friends within the group.
b) Describe a group of ﬁve people, any two of whom have exactly one friend in
common. Can you ﬁnd a group of four people with this same property?
1.1.7 n-Cube
The n-cube Qn (n ≥ 1) is the graph whose vertex set is the set of all n-tuples of 0s
and 1s, where two n-tuples are adjacent if they diﬀer in precisely one coordinate.
a) Draw Q1 , Q2 , Q3 , and Q4 .
b) Determine v(Qn ) and e(Qn ).
c) Show that Qn is bipartite for all n ≥ 1.
1.1.8 The boolean lattice BLn (n ≥ 1) is the graph whose vertex set is the set
of all subsets of {1, 2, . . . , n}, where two subsets X and Y are adjacent if their
symmetric diﬀerence has precisely one element.
a) Draw BL1 , BL2 , BL3 , and BL4 .
b) Determine v(BLn ) and e(BLn ).
c) Show that BLn is bipartite for all n ≥ 1.
1.1.9 Let G[X, Y ] be a bipartite graph.


a) Show that v∈X d(v) = v∈Y d(v).
b) Deduce that if G is k-regular, with k ≥ 1, then |X| = |Y |.

10

1 Graphs

1.1.10 k-Partite Graph
A k-partite graph is one whose vertex set can be partitioned into k subsets, or
parts, in such a way that no edge has both ends in the same part. (Equivalently,
one may think of the vertices as being colourable by k colours so that no edge joins
two vertices of the same colour.) Let G be a simple k-partite graph with parts of
k
sizes a1 , a2 , . . . , ak . Show that m ≤ 12 i=1 ai (n − ai ).
1.1.11 Turán Graph
A k-partite graph is complete if any two vertices in diﬀerent parts are adjacent. A
simple complete k-partite graph on n vertices whose parts are of equal or almost
equal sizes (that is, n/k or n/k ) is called a Turán graph and denoted Tk,n .
a) Show that Tk,n has more edges than any other simple complete k-partite graph
on n vertices.
b) Determine e(Tk,n ).
1.1.12



a) Show that if G is simple and m > n−1
2 , then G is connected.


b) For n > 1, ﬁnd a disconnected simple graph G with m = n−1
2 .

1.1.13
a) Show that if G is simple and δ > 12 (n − 2), then G is connected.
b) For n even, ﬁnd a disconnected 12 (n − 2)-regular simple graph.
1.1.14 For a simple graph G, show that the diagonal entries of both A2 and MMt
(where Mt denotes the transpose of M) are the degrees of the vertices of G.
1.1.15 Show that the rank over GF (2) of the incidence matrix of a graph G is at
most n − 1, with equality if and only if G is connected.
1.1.16 Degree Sequence
If G has vertices v1 , v2 , . . . , vn , the sequence (d(v1 ), d(v2 ), . . . , d(vn )) is called a
degree sequence of G. Let d := (d1 , d2 , . . . , dn ) be a nonincreasing sequence of
nonnegative integers, that is, d1 ≥ d2 ≥ · · · ≥ dn ≥ 0. Show that:
n
a) there is a graph with degree sequence d if and only if i=1 di 
is even,
n
b) there is a 
loopless graph with degree sequence d if and only if i=1 di is even
n
and d1 ≤ i=2 di .
1.1.17 Complement of a Graph
Let G be a simple graph. The complement G of G is the simple graph whose vertex
set is V and whose edges are the pairs of nonadjacent vertices of G.
a) Express the degree sequence of G in terms of the degree sequence of G.
b) Show that if G is disconnected, then G is connected. Is the converse true?
————— —————

1.1 Graphs and Their Representation

11

1.1.18 Graphic Sequence
A sequence d = (d1 , d2 , . . . , dn ) is graphic if there is a simple graph with degree
sequence d. Show that:
a) the sequences (7, 6, 5, 4, 3, 3, 2) and (6, 6, 5, 4, 3, 3, 1) are not graphic,
n
b) if d = (d1 , d2 , . . . , dn ) is graphic and d1 ≥ d2 ≥ · · · ≥ dn , then i=1 di is even
and
k
n


di ≤ k(k − 1) +
min{k, di }, 1 ≤ k ≤ n
i=1

i=k+1

(Erdős and Gallai (1960) showed that these necessary conditions for a sequence
to be graphic are also suﬃcient.)
1.1.19 Let d = (d1 , d2 , . . . , dn ) be a nonincreasing sequence of nonnegative integers. Set d := (d2 − 1, d3 − 1, . . . , dd1 +1 − 1, dd1 +2 , . . . , dn ).
a) Show that d is graphic if and only if d is graphic.
b) Using (a), describe an algorithm which accepts as input a nonincreasing sequence d of nonnegative integers, and returns either a simple graph with degree
sequence d, if such a graph exists, or else a proof that d is not graphic.
(V. Havel and S.L. Hakimi)
1.1.20 Let S be a set of n points in the plane, the distance between any two
of which is at least one. Show that there are at most 3n pairs of points of S at
distance exactly one.
1.1.21 Eigenvalues of a Graph
Recall that the eigenvalues of a square matrix A are the roots of its characteristic
polynomial det(A − xI). An eigenvalue of a graph is an eigenvalue of its adjacency
matrix. Likewise, the characteristic polynomial of a graph is the characteristic
polynomial of its adjacency matrix. Show that:
a) every eigenvalue of a graph is real,
b) every rational eigenvalue of a graph is integral.
1.1.22
a) Let G be a k-regular graph. Show that:
i) MMt = A + kI, where I is the n × n identity matrix,
ii) k is an eigenvalue of G, with corresponding eigenvector 1, the n-vector in
which each entry is 1.
b) Let G be a complete graph of order n. Denote by J the n × n matrix all of
whose entries are 1. Show that:
i) A = J − I,
ii) det (J − (1 + λ)I) = (1 + λ − n)(1 + λ)n−1 .
c) Derive from (b) the eigenvalues of a complete graph and their multiplicities,
and determine the corresponding eigenspaces.

12

1 Graphs

1.1.23 Let G be a simple graph.
a) Show that G has adjacency matrix J − I − A.
b) Suppose now that G is k-regular.
i) Deduce from Exercise 1.1.22 that n − k − 1 is an eigenvalue of G, with
corresponding eigenvector 1.
ii) Show that if λ is an eigenvalue of G diﬀerent from k, then −1 − λ is
an eigenvalue of G, with the same multiplicity. (Recall that eigenvectors
corresponding to distinct eigenvalues of a real symmetric matrix are orthogonal.)
1.1.24 Show that:
a) no eigenvalue of a graph G has absolute value greater than ∆,
b) if G is a connected graph and ∆ is an eigenvalue of G, then G is regular,
c) if G is a connected graph and −∆ is an eigenvalue of G, then G is both regular
and bipartite.
1.1.25 Strongly Regular Graph
A simple graph G which is neither empty nor complete is said to be strongly regular
with parameters (v, k, λ, µ) if:
 v(G) = v,
 G is k-regular,
 any two adjacent vertices of G have λ common neighbours,
 any two nonadjacent vertices of G have µ common neighbours.
Let G be a strongly regular graph with parameters (v, k, λ, µ). Show that:
a) G is strongly regular,
b) k(k − λ − 1) = (v − k − 1)µ,
c) A2 = k I + λ A + µ (J − I − A).

1.2 Isomorphisms and Automorphisms
Isomorphisms
Two graphs G and H are identical, written G = H, if V (G) = V (H), E(G) =
E(H), and ψG = ψH . If two graphs are identical, they can clearly be represented by
identical diagrams. However, it is also possible for graphs that are not identical to
have essentially the same diagram. For example, the graphs G and H in Figure 1.6
can be represented by diagrams which look exactly the same, as the second drawing
of H shows; the sole diﬀerence lies in the labels of their vertices and edges. Although
the graphs G and H are not identical, they do have identical structures, and are
said to be isomorphic.
In general, two graphs G and H are isomorphic, written G ∼
= H, if there are
bijections θ : V (G) → V (H) and φ : E(G) → E(H) such that ψG (e) = uv if and
only if ψH (φ(e)) = θ(u)θ(v); such a pair of mappings is called an isomorphism
between G and H.

1.2 Isomorphisms and Automorphisms
e3

a

f3

b

w

f1

w

x

13
z

f4
e1

e2

d

e4

f6

e5

c

e6

f3

f4

f1

f2
y

f5

G

z

x

f6
f2
H

H

f5

y

Fig. 1.6. Isomorphic graphs

In order to show that two graphs are isomorphic, one must indicate an isomorphism between them. The pair of mappings (θ, φ) deﬁned by




a bcd
e1 e2 e3 e4 e5 e6
θ :=
φ :=
f3 f4 f1 f6 f5 f2
wzyx
is an isomorphism between the graphs G and H in Figure 1.6.
In the case of simple graphs, the deﬁnition of isomorphism can be stated more
concisely, because if (θ, φ) is an isomorphism between simple graphs G and H, the
mapping φ is completely determined by θ; indeed, φ(e) = θ(u)θ(v) for any edge
e = uv of G. Thus one may deﬁne an isomorphism between two simple graphs G
and H as a bijection θ : V (G) → V (H) which preserves adjacency (that is, the
vertices u and v are adjacent in G if and only if their images θ(u) and θ(v) are
adjacent in H).
Consider, for example, the graphs G and H in Figure 1.7.
a
1

2

b

3
f

4

5

6

c

e

G

d
H

Fig. 1.7. Isomorphic simple graphs

The mapping


θ :=

123456
bdf cea

is an isomorphism between G and H, as is



14

1 Graphs





θ :=

123456
acedf b



Isomorphic graphs clearly have the same numbers of vertices and edges. On
the other hand, equality of these parameters does not guarantee isomorphism. For
instance, the two graphs shown in Figure 1.8 both have eight vertices and twelve
edges, but they are not isomorphic. To see this, observe that the graph G has four
mutually nonadjacent vertices, v1 , v3 , v6 , and v8 . If there were an isomorphism θ
between G and H, the vertices θ(v1 ), θ(v3 ), θ(v6 ), and θ(v8 ) of H would likewise
be mutually nonadjacent. But it can readily be checked that no four vertices of H
are mutually nonadjacent. We deduce that G and H are not isomorphic.
v1

v2

v1

v2

v5

v6

v8

v3

v8

v7

v7

v4

v4

v3
G

v6

v5
H

Fig. 1.8. Nonisomorphic graphs

It is clear from the foregoing discussion that if two graphs are isomorphic, then
they are either identical or diﬀer merely in the names of their vertices and edges,
and thus have the same structure. Because it is primarily in structural properties
that we are interested, we often omit labels when drawing graphs; formally, we may
deﬁne an unlabelled graph as a representative of an equivalence class of isomorphic
graphs. We assign labels to vertices and edges in a graph mainly for the purpose
of referring to them (in proofs, for instance).
Up to isomorphism, there is just one complete graph on n vertices, denoted Kn .
Similarly, given two positive integers m and n, there is a unique complete bipartite
graph with parts of sizes m and n (again, up to isomorphism), denoted Km,n .
In this notation, the graphs in Figure 1.2 are K5 , K3,3 , and K1,5 , respectively.
Likewise, for any positive integer n, there is a unique path on n vertices and a
unique cycle on n vertices. These graphs are denoted Pn and Cn , respectively. The
graphs depicted in Figure 1.3 are P4 and C5 .
Testing for Isomorphism
Given two graphs on n vertices, it is certainly possible in principle to determine
whether they are isomorphic. For instance, if G and H are simple, one could just
consider each of the n! bijections between V (G) and V (H) in turn, and check

1.2 Isomorphisms and Automorphisms

15

whether it is an isomorphism between the two graphs. If the graphs happen to be
isomorphic, an isomorphism might (with luck) be found quickly. On the other hand,
if they are not isomorphic, one would need to check all n! bijections to discover
this fact. Unfortunately, even for moderately small values of n (such as n = 100),
the number n! is unmanageably large (indeed, larger than the number of particles
in the universe!), so this ‘brute force’ approach is not feasible. Of course, if the
graphs are not regular, the number of bijections to be checked will be smaller, as an
isomorphism must map each vertex to a vertex of the same degree (Exercise 1.2.1a).
Nonetheless, except in particular cases, this restriction does not serve to reduce
their number suﬃciently. Indeed, no eﬃcient generally applicable procedure for
testing isomorphism is known. However, by employing powerful group-theoretic
methods, Luks (1982) devised an eﬃcient isomorphism-testing algorithm for cubic
graphs and, more generally, for graphs of bounded maximum degree.
There is another important matter related to algorithmic questions such as
graph isomorphism. Suppose that two simple graphs G and H are isomorphic.
It might not be easy to ﬁnd an isomorphism between them, but once such an
isomorphism θ has been found, it is a simple matter to verify
  that θ is indeed an
isomorphism: one need merely check that, for each of the n2 pairs uv of vertices
of G, uv ∈ E(G) if and only if θ(u)θ(v) ∈ E(H). On the other hand, if G and H
happen not to be isomorphic, how can one verify this fact, short of checking all
possible bijections between V (G) and V (H)? In certain cases, one might be able to
show that G and H are not isomorphic by isolating some structural property of G
that is not shared by H, as we did for the graphs G and H of Figure 1.8. However, in
general, verifying that two nonisomorphic graphs are indeed not isomorphic seems
to be just as hard as determining in the ﬁrst place whether they are isomorphic or
not.
Automorphisms
An automorphism of a graph is an isomorphism of the graph to itself. In the case
of a simple graph, an automorphism is just a permutation α of its vertex set which
preserves adjacency: if uv is an edge then so is α(u)α(v).
The automorphisms of a graph reﬂect its symmetries. For example, if u and
v are two vertices of a simple graph, and if there is an automorphism α which
maps u to v, then u and v are alike in the graph, and are referred to as similar
vertices. Graphs in which all vertices are similar, such as the complete graph
Kn , the complete bipartite graph Kn,n and the n-cube Qn , are called vertextransitive. Graphs in which no two vertices are similar are called asymmetric;
these are the graphs which have only the identity permutation as automorphism
(see Exercise 1.2.14).
Particular drawings of a graph may often be used to display its symmetries.
As an example, consider the three drawings shown in Figure 1.9 of the Petersen
graph, a graph which turns out to have many special properties. (We leave it as
an exercise (1.2.5) that they are indeed drawings of one and the same graph.) The
ﬁrst drawing shows that the ﬁve vertices of the outer pentagon are similar (under

16

1 Graphs

rotational symmetry), as are the ﬁve vertices of the inner pentagon. The third
drawing exhibits six similar vertices (under reﬂective or rotational symmetry),
namely the vertices of the outer hexagon. Combining these two observations, we
conclude that all ten vertices of the Petersen graph are similar, and thus that the
graph is vertex-transitive.

Fig. 1.9. Three drawings of the Petersen graph

We denote the set of all automorphisms of a graph G by Aut(G), and their
number by aut(G). It can be veriﬁed that Aut(G) is a group under the operation
of composition (Exercise 1.2.9). This group is called the automorphism group of
G. The automorphism group of Kn is the symmetric group Sn , consisting of all
permutations of its vertex set. In general, for any simple graph G on n vertices,
Aut(G) is a subgroup of Sn . For instance, the automorphism group of Cn is Dn ,
the dihedral group on n elements (Exercise 1.2.10).
Labelled Graphs
As we have seen, the edge set E of a simple graph G = (V, E) is usually considered
to be a subset of V2 , the set of all 2-subsets of V ; edge labels may then be omitted
in drawings of such graphs. A simple graph whose vertices are labelled, but whose
n
edges are not, is referred to as a labelled simple graph. If |V | = n, there are 2( 2 )
 
n
distinct subsets of V2 , so 2( 2 ) labelled simple graphs with vertex set V . We denote
by Gn the set of labelled simple graphs with vertex set V := {v1 , v2 , . . . , vn }. The
set G3 is shown in Figure 1.10.
A priori, there are n! ways of assigning the labels v1 , v2 , . . . , vn to the vertices
of an unlabelled simple graph on n vertices. But two of these will yield the same
labelled graph if there is an automorphism of the graph mapping one labelling to
the other. For example, all six labellings of K3 result in the same element of G3 ,
whereas the six labellings of P3 yield three distinct labelled graphs, as shown in
Figure 1.10. The number of distinct labellings of a given unlabelled simple graph
G on n vertices is, in fact, n!/aut(G) (Exercise 1.2.15). Consequently,

G

n
n!
= 2( 2 )
aut(G)

1.2 Isomorphisms and Automorphisms
v1

v3

v1

v2

v3

v1

v3

v1

v2

v3

v1

v2

v3

v1

v2

v3

v1

v3

v2

17

v2
v1

v2

v3

v2

Fig. 1.10. The eight labelled graphs on three vertices

where the sum is over all unlabelled simple graphs on n vertices. In particular, the
number of unlabelled simple graphs on n vertices is at least
n

2( 2 )
n!

(1.2)

For small values of n, this bound is not particularly good. For example, there
are four unlabelled simple graphs on three vertices, but the bound (1.2) is just
two. Likewise, the number of unlabelled simple graphs on four vertices is eleven
(Exercise 1.2.6), whereas the bound given by (1.2) is three. Nonetheless, when n
is large, this bound turns out to be a good approximation to the actual number
of unlabelled simple graphs on n vertices because the vast majority of graphs are
asymmetric (see Exercise 1.2.15d).

Exercises
1.2.1
a) Show that any isomorphism between two graphs maps each vertex to a vertex
of the same degree.
b) Deduce that isomorphic graphs necessarily have the same (nonincreasing) degree sequence.
1.2.2 Show that the graphs in Figure 1.11 are not isomorphic (even though they
have the same degree sequence).
1.2.3 Let G be a connected graph. Show that every graph which is isomorphic to
G is connected.
1.2.4 Determine:
a) the number of isomorphisms between the graphs G and H of Figure 1.7,

18

1 Graphs

Fig. 1.11. Nonisomorphic graphs

b) the number of automorphisms of each of these graphs.
1.2.5 Show that the three graphs in Figure 1.9 are isomorphic.
1.2.6 Draw:
a) all the labelled simple graphs on four vertices,
b) all the unlabelled simple graphs on four vertices,
c) all the unlabelled simple cubic graphs on eight or fewer vertices.
1.2.7 Show that the n-cube Qn and the boolean lattice BLn (deﬁned in Exercises 1.1.7 and 1.1.8) are isomorphic.
1.2.8 Show that two simple graphs G and H are isomorphic if and only if there
exists a permutation matrix P such that AH = PAG Pt .
1.2.9 Show that Aut(G) is a group under the operation of composition.
1.2.10
a) Show that, for n ≥ 2, Aut(Pn ) ∼
= S2 and Aut(Cn ) = Dn , the dihedral group on
n elements (where ∼
= denotes isomorphism of groups; see, for example, Herstein
(1996)).
b) Determine the automorphism group of the complete bipartite graph Km,n .
1.2.11 Show that, for any simple graph G, Aut(G) = Aut(G).
1.2.12 Consider the subgroup Γ of S3 with elements (1)(2)(3), (123), and (132).
a) Show that there is no simple graph whose automorphism group is Γ .
b) Find a simple graph whose automorphism group is isomorphic to Γ .
(Frucht (1938) showed that every abstract group is isomorphic to the automorphism group of some simple graph.)
1.2.13 Orbits of a Graph
a) Show that similarity is an equivalence relation on the vertex set of a graph.
b) The equivalence classes with respect to similarity are called the orbits of the
graph. Determine the orbits of the graphs in Figure 1.12.

1.2 Isomorphisms and Automorphisms

(a)

(b)

19

(c)

Fig. 1.12. Determine the orbits of these graphs (Exercise 1.2.13)

1.2.14
a) Show that there is no asymmetric simple graph on ﬁve or fewer vertices.
b) For each n ≥ 6, ﬁnd an asymmetric simple graph on n vertices.
————— —————
1.2.15 Let G and H be isomorphic members of Gn , let θ be an isomorphism
between G and H, and let α be an automorphism of G.
a) Show that θα is an isomorphism between G and H.
b) Deduce that the set of all isomorphisms between G and H is the coset θAut(G)
of Aut(G).
c) Deduce that the number of labelled graphs isomorphic to G is equal to
n!/aut(G).
d) Erdős and Rényi (1963) have shown that almost all simple graphs are asymmetric (that is, the proportion of simple graphs on n vertices that are asymmetric tends to one as n tends to inﬁnity). Using this fact, deduce from (c)
that the number of unlabelled graphs on n vertices is asymptotically equal to
n
(G. Pólya)
2( 2 ) /n!
1.2.16 Self-Complementary Graph
A simple graph is self-complementary if it is isomorphic to its complement. Show
that:
a) each of the graphs P4 and C5 (shown in Figure 1.3) is self-complementary,
b) every self-complementary graph is connected,
c) if G is self-complementary, then n ≡ 0, 1 (mod 4),
d) every self-complementary graph on 4k + 1 vertices has a vertex of degree 2k.
1.2.17 Edge-Transitive Graph
A simple graph is edge-transitive if, for any two edges uv and xy, there is an
automorphism α such that α(u)α(v) = xy.
a) Find a graph which is vertex-transitive but not edge-transitive.
b) Show that any graph without isolated vertices which is edge-transitive but not
vertex-transitive is bipartite.
(E. Dauber)

20

1 Graphs

1.2.18 The Folkman Graph
a) Show that the graph shown in Figure 1.13a is edge-transitive but not vertextransitive.

(a)

(b)

Fig. 1.13. Construction of the Folkman graph

b) The Folkman graph, depicted in Figure 1.13b, is the 4-regular graph obtained
from the graph of Figure 1.13a by replacing each vertex v of degree eight by
two vertices of degree four, both of which have the same four neighbours as v.
Show that the Folkman graph is edge-transitive but not vertex-transitive.
(J. Folkman)
1.2.19 Generalized Petersen Graph
Let k and n be positive integers, with n > 2k. The generalized Petersen graph
Pk,n is the simple graph with vertices x1 , x2 , . . . , xn , y1 , y2 , . . . , yn , and edges
xi xi+1 , yi yi+k , xi yi , 1 ≤ i ≤ n, indices being taken modulo n. (Note that P2,5
is the Petersen graph.)
a) Draw the graphs P2,7 and P3,8 .
b) Which of these two graphs are vertex-transitive, and which are edge-transitive?
1.2.20 Show that if G is simple and the eigenvalues of A are distinct, then every
automorphism of G is of order one or two.
(A. Mowshowitz)

1.3 Graphs Arising from Other Structures
As remarked earlier, interesting graphs can often be constructed from geometric
and algebraic objects. Such constructions are often quite straightforward, but in
some instances they rely on experience and insight.

1.3 Graphs Arising from Other Structures

21

Polyhedral Graphs
A polyhedral graph is the 1-skeleton of a polyhedron, that is, the graph whose
vertices and edges are just the vertices and edges of the polyhedron, with the
same incidence relation. In particular, the ﬁve platonic solids (the tetrahedron,
the cube, the octahedron, the dodecahedron, and the icosahedron) give rise to the
ﬁve platonic graphs shown in Figure 1.14. For classical polyhedra such as these,
we give the graph the same name as the polyhedron from which it is derived.

(a)

(b)

(d)

(c)

(e)

Fig. 1.14. The ﬁve platonic graphs: (a) the tetrahedron, (b) the octahedron, (c) the
cube, (d) the dodecahedron, (e) the icosahedron

Set Systems and Hypergraphs
A set system is an ordered pair (V, F ), where V is a set of elements and F is
a family of subsets of V . Note that when F consists of pairs of elements of V ,
the set system (V, F ) is a loopless graph. Thus set systems can be thought of as
generalizations of graphs, and are usually referred to as hypergraphs, particularly
when one seeks to extend properties of graphs to set systems (see Berge (1973)).
The elements of V are then called the vertices of the hypergraph, and the elements
of F its edges or hyperedges. A hypergraph is k-uniform if each edge is a k-set (a set
of k elements). As we show below, set systems give rise to graphs in two principal
ways: incidence graphs and intersection graphs.
Many interesting examples of hypergraphs are provided by geometric conﬁgurations. A geometric conﬁguration (P, L) consists of a ﬁnite set P of elements

22

1 Graphs

called points, and a ﬁnite family L of subsets of P called lines, with the property
that at most one line contains any given pair of points. Two classical examples
of geometric conﬁgurations are the Fano plane and the Desargues conﬁguration.
These two conﬁgurations are shown in Figure 1.15. In both cases, each line consists
of three points. These conﬁgurations thus give rise to 3-uniform hypergraphs; the
Fano hypergraph has seven vertices and seven edges, the Desargues hypergraph ten
vertices and ten edges.
c3
1

2

a2

3
c2

b2

6

b3
4

5
(a)

7

d

a3
c1

b1

a1

(b)

Fig. 1.15. (a) The Fano plane, and (b) the Desargues conﬁguration

The Fano plane is the simplest of an important family of geometric conﬁgurations, the projective planes (see Exercise 1.3.13). The Desargues conﬁguration
arises from a well-known theorem in projective geometry. Other examples of interesting geometric conﬁgurations are described in Coxeter (1950) and Godsil and
Royle (2001).
Incidence Graphs
A natural graph associated with a set system H = (V, F ) is the bipartite graph
G[V, F], where v ∈ V and F ∈ F are adjacent if v ∈ F . This bipartite graph G is
called the incidence graph of the set system H, and the bipartite adjacency matrix
of G the incidence matrix of H; these are simply alternative ways of representing a
set system. Incidence graphs of geometric conﬁgurations often give rise to interesting bipartite graphs; in this context, the incidence graph is sometimes called the
Levi graph of the conﬁguration. The incidence graph of the Fano plane is shown
in Figure 1.16. This graph is known as the Heawood graph.
Intersection Graphs
With each set system (V, F ) one may associate its intersection graph. This is the
graph whose vertex set is F , two sets in F being adjacent if their intersection is
nonempty. For instance, when V is the vertex set of a simple graph G and F := E,

1.3 Graphs Arising from Other Structures
1

2

3

4

5

6

7

124

235

346

457

156

267

137

23

Fig. 1.16. The incidence graph of the Fano plane: the Heawood graph

the edge set of G, the intersection graph of (V, F ) has as vertices the edges of G,
two edges being adjacent if they have an end in common. For historical reasons,
this graph is known as the line graph of G and denoted L(G). Figure 1.17 depicts
a graph and its line graph.
1

12

2

4

24

3
G

23

34
L(G)

Fig. 1.17. A graph and its line graph

It can be shown that the intersection graph of the Desargues conﬁguration is
isomorphic to the line graph of K5 , which in turn is isomorphic to the complement
of the Petersen graph (Exercise 1.3.2). As for the Fano plane, its intersection graph
is isomorphic to K7 , because any two of its seven lines have a point in common.
The deﬁnition of the line graph L(G) may be extended to all loopless graphs
G as being the graph with vertex set E in which two vertices are joined by just as
many edges as their number of common ends in G.
When V = R and F is a set of closed intervals of R, the intersection graph of
(V, F ) is called an interval graph. Examples of practical situations which give rise
to interval graphs can be found in the book by Berge (1973). Berge even wrote a
detective story whose resolution relies on the theory of interval graphs; see Berge
(1995).
It should be evident from the above examples that graphs are implicit in a
wide variety of structures. Many such graphs are not only interesting in their own
right but also serve to provide insight into the structures from which they arise.

24

1 Graphs

Exercises
1.3.1
a) Show that the graph in Figure 1.18 is isomorphic to the Heawood graph (Figure 1.16).

Fig. 1.18. Another drawing of the Heawood graph

b) Deduce that the Heawood graph is vertex-transitive.
1.3.2 Show that the following three graphs are isomorphic:
 the intersection graph of the Desargues conﬁguration,
 the line graph of K5 ,
 the complement of the Petersen graph.
1.3.3 Show that the line graph of K3,3 is self-complementary.
1.3.4 Show that neither of the graphs displayed in Figure 1.19 is a line graph.
1.3.5 Let H := (V, F ) be a hypergraph. The number of edges incident with a
vertex v of H is its degree, denoted d(v). A degree sequence of H is a vector
d := (d(v) : v ∈ V ). Let M be the incidence matrix of H and d the corresponding
degree sequence of H. Show that the sum of the columns of M is equal to d.
1.3.6 Let H := (V, F ) be a hypergraph. For v ∈ V , let Fv denote the set of edges
of H incident to v. The dual of H is the hypergraph H ∗ whose vertex set is F and
whose edges are the sets Fv , v ∈ V .

Fig. 1.19. Two graphs that are not line graphs

1.3 Graphs Arising from Other Structures

25

a) How are the incidence graphs of H and H ∗ related?
b) Show that the dual of H ∗ is isomorphic to H.
c) A hypergraph is self-dual if it is isomorphic to its dual. Show that the Fano
and Desargues hypergraphs are self-dual.
1.3.7 Helly Property
A family of sets has the Helly Property if the members of each pairwise intersecting
subfamily have an element in common.
a) Show that the family of closed intervals on the real line has the Helly Property.
(E. Helly)
b) Deduce that the graph in Figure 1.20 is not an interval graph.

Fig. 1.20. A graph that is not an interval graph

1.3.8 Kneser Graph
Let m and n be positive integers, where n > 2m. The Kneser graph KGm,n is
the graph whose vertices are the m-subsets of an n-set S, two such subsets being
adjacent if and only if their intersection is empty. Show that:
a) KG1,n ∼
= Kn , n ≥ 3,
b) KG2,n is isomorphic to the complement of L(Kn ), n ≥ 5.
1.3.9 Let G be a simple graph with incidence matrix M.
a) Show that the adjacency matrix of its line graph L(G) is Mt M − 2I, where I
is the m × m identity matrix.
b) Using the fact that Mt M is positive-semideﬁnite, deduce that:
i) each eigenvalue of L(G) is at least −2,
ii) if the rank of M is less than m, then −2 is an eigenvalue of L(G) .
————— —————
1.3.10
a) Consider the following two matrices B and C, where x is an indeterminate, M
is an arbitrary n × m matrix, and I is an identity matrix of the appropriate
dimension.
I M
xI −M
C :=
B :=
t
0 I
M xI

26

1 Graphs

By equating the determinants of BC and CB, derive the identity
det(xI − Mt M) = xm−n det(xI − MMt )
b) Let G be a simple k-regular graph with k ≥ 2. By appealing to Exercise 1.3.9
and using the above identity, establish the following relationship between the
characteristic polynomials of L(G) and G.
det(AL(G) − xI) = (−1)m−n (x + 2)m−n det(AG − (x + 2 − k)I)
c) Deduce that:
i) to each eigenvalue λ = −k of G, there corresponds an eigenvalue λ + k − 2
of L(G), with the same multiplicity,
ii) −2 is an eigenvalue of L(G) with multiplicity m − n + r, where r is the
multiplicity of the eigenvalue −k of G. (If −k is not an eigenvalue of G
then r = 0.)
(H. Sachs)
1.3.11
a) Using Exercises 1.1.22 and 1.3.10, show that the eigenvalues of L(K5 ) are
(6, 1, 1, 1, 1, −2, −2, −2, −2, −2)
b) Applying Exercise 1.1.23, deduce that the Petersen graph has eigenvalues
(3, 1, 1, 1, 1, 1, −2, −2, −2, −2)
1.3.12 Sperner’s Lemma
Let T be a triangle in the plane. A subdivision of T into triangles is simplicial if
any two of the triangles which intersect have either a vertex or an edge in common.
Consider an arbitrary simplicial subdivision of T into triangles. Assign the colours
red, blue, and green to the vertices of these triangles in such a way that each
colour is missing from one side of T but appears on the other two sides. (Thus, in
particular, the vertices of T are assigned the colours red, blue, and green in some
order.)
a) Show that the number of triangles in the subdivision whose vertices receive all
three colours is odd.
(E. Sperner)
b) Deduce that there is always at least one such triangle.
(Sperner’s Lemma, generalized to n-dimensional simplices, is the key ingredient in
a proof of Brouwer’s Fixed Point Theorem: every continuous mapping of a closed
n-disc to itself has a ﬁxed point; see Bondy and Murty (1976).)
1.3.13 Finite Projective Plane
A ﬁnite projective plane is a geometric conﬁguration (P, L) in which:
i) any two points lie on exactly one line,
ii) any two lines meet in exactly one point,

1.3 Graphs Arising from Other Structures

27

iii) there are four points no three of which lie on a line.
(Condition (iii) serves only to exclude two trivial conﬁgurations — the pencil, in
which all points are collinear, and the near-pencil, in which all but one of the
points are collinear.)
a) Let (P, L) be a ﬁnite projective plane. Show that there is an integer n ≥ 2
such that |P | = |L| = n2 + n + 1, each point lies on n + 1 lines, and each line
contains n + 1 points (the instance n = 2 being the Fano plane). This integer
n is called the order of the projective plane.
b) How many vertices has the incidence graph of a ﬁnite projective plane of order
n, and what are their degrees?
1.3.14 Consider the nonzero vectors in F3 , where F = GF (q) and q is a prime
power. Deﬁne two of these vectors to be equivalent if one is a multiple of the
other. One can form a ﬁnite projective plane (P, L) of order q by taking as points
and lines the (q 3 − 1)/(q − 1) = q 2 + q + 1 equivalence classes deﬁned by this
equivalence relation and deﬁning a point (a, b, c) and line (x, y, z) to be incident if
ax + by + cz = 0 (in GF (q)). This plane is denoted P G2,q .
a) Show that P G2,2 is isomorphic to the Fano plane.
b) Construct P G2,3 .
1.3.15 The de Bruijn–Erdős Theorem
a) Let G[X, Y ] be a bipartite graph, each vertex of which is joined to at least
one, but not all, vertices in the other part. Suppose that d(x) ≥ d(y) for all
xy ∈
/ E. Show that |Y | ≥ |X|, with equality if and only if d(x) = d(y) for all
xy ∈
/ E with x ∈ X and y ∈ Y .
b) Deduce the following theorem.
Let (P, L) be a geometric conﬁguration in which any two points lie on exactly
one line and not all points lie on a single line. Then |L| ≥ |P |. Furthermore, if
|L| = |P |, then (P, L) is either a ﬁnite projective plane or a near-pencil.
(N.G. de Bruijn and P. Erdős)
1.3.16 Show that:
a) the line graphs L(Kn ), n ≥ 4, and L(Kn,n ), n ≥ 2, are strongly regular,
b) the Shrikhande graph, displayed in Figure 1.21 (where vertices with the same
label are to be identiﬁed), is strongly regular, with the same parameters as
those of L(K4,4 ), but is not isomorphic to L(K4,4 ).
1.3.17
a) Show that:
 Aut(Kn ) for n = 2 and n = 4,
i) Aut(L(Kn )) ∼
=
ii) Aut(L(Kn )) ∼
= Aut(Kn ) for n = 3 and n ≥ 5.
b) Appealing to Exercises 1.2.11 and 1.3.2, deduce that the automorphism group
of the Petersen graph is isomorphic to the symmetric group S5 .

28

1 Graphs
00

10

20

30

00

03

03

02

02

01

01

00

10

20

30

00

Fig. 1.21. An embedding of the Shrikhande graph on the torus

1.3.18 Cayley Graph
Let Γ be a group, and let S be a set of elements of Γ not including the identity
element. Suppose, furthermore, that the inverse of every element of S also belongs
to S. The Cayley graph of Γ with respect to S is the graph CG(Γ, S) with vertex
set Γ in which two vertices x and y are adjacent if and only if xy −1 ∈ S. (Note
that, because S is closed under taking inverses, if xy −1 ∈ S, then yx−1 ∈ S.)
a) Show that the n-cube is a Cayley graph.
b) Let G be a Cayley graph CG(Γ, S) and let x be an element of Γ .
i) Show that the mapping αx deﬁned by the rule that αx (y) := xy is an
automorphism of G.
ii) Deduce that every Cayley graph is vertex-transitive.
c) By considering the Petersen graph, show that not every vertex-transitive graph
is a Cayley graph.
1.3.19 Circulant
A circulant is a Cayley graph CG(Zn , S), where Zn is the additive group of integers
modulo n. Let p be a prime, and let i and j be two nonzero elements of Zp .
a) Show that CG(Zp , {i, −i}) ∼
= CG(Zp , {j, −j}).
b) Determine when CG(Zp , {1, −1, i, −i}) ∼
= CG(Zp , {1, −1, j, −j}).
1.3.20 Paley Graph
Let q be a prime power, q ≡ 1 (mod 4). The Paley graph PGq is the graph whose
vertex set is the set of elements of the ﬁeld GF (q), two vertices being adjacent if
their diﬀerence is a nonzero square in GF (q).
a) Draw PG5 , PG9 , and PG13 .
b) Show that these three graphs are self-complementary.
c) Let a be a nonsquare in GF (q). By considering the mapping θ : GF (q) →
GF (q) deﬁned by θ(x) := ax, show that PGq is self-complementary for all q.

1.4 Constructing Graphs from Other Graphs

29

1.4 Constructing Graphs from Other Graphs
We have already seen a couple of ways in which we may associate with each graph
another graph: the complement (in the case of simple graphs) and the line graph.
If we start with two graphs G and H rather than just one, a new graph may be
deﬁned in several ways. For notational simplicity, we assume that G and H are
simple, so that each edge is an unordered pair of vertices; the concepts described
here can be extended without diﬃculty to the general context.
Union and Intersection
Two graphs are disjoint if they have no vertex in common, and edge-disjoint if
they have no edge in common. The most basic ways of combining graphs are by
union and intersection. The union of simple graphs G and H is the graph G ∪ H
with vertex set V (G) ∪ V (H) and edge set E(G) ∪ E(H). If G and H are disjoint,
we refer to their union as a disjoint union, and generally denote it by G + H.
These operations are associative and commutative, and may be extended to an
arbitrary number of graphs. It can be seen that a graph is disconnected if and
only if it is a disjoint union of two (nonnull) graphs. More generally, every graph
G may be expressed uniquely (up to order) as a disjoint union of connected graphs
(Exercise 1.4.1). These graphs are called the connected components, or simply the
components, of G. The number of components of G is denoted c(G). (The null
graph has the anomalous property of being the only graph without components.)
The intersection G ∩ H of G and H is deﬁned analogously. (Note that when
G and H are disjoint, their intersection is the null graph.) Figure 1.22 illustrates
these concepts. The graph G ∪ H shown in Figure 1.22 has just one component,
whereas the graph G ∩ H has two components.
1

2

1

2

4

3

3

5

G

H

1

4

2

3

1

5

G∪H

2

3
G∩H

Fig. 1.22. The union and intersection of two graphs

Cartesian Product
There are also several ways of forming from two graphs a new graph whose vertex
set is the cartesian product of their vertex sets. These constructions are consequently referred to as ‘products’. We now describe one of them.

30

1 Graphs

The cartesian product of simple graphs G and H is the graph G  H whose
vertex set is V (G) × V (H) and whose edge set is the set of all pairs (u1 , v1 )(u2 , v2 )
such that either u1 u2 ∈ E(G) and v1 = v2 , or v1 v2 ∈ E(H) and u1 = u2 . Thus,
for each edge u1 u2 of G and each edge v1 v2 of H, there are four edges in G  H,
namely (u1 , v1 )(u2 , v1 ), (u1 , v2 )(u2 , v2 ), (u1 , v1 )(u1 , v2 ), and (u2 , v1 )(u2 , v2 ) (see
Figure 1.23a); the notation used for the cartesian product reﬂects this fact. More
generally, the cartesian product Pm  Pn of two paths is the (m × n)-grid. An
example is shown in Figure 1.23b.

v2

(u1 , v2 )

(u2 , v2 )

v1

(u1 , v1 )

(u2 , v1 )

u1
(a)

u2
(b)

Fig. 1.23. (a) The cartesian product K2  K2 , and (b) the (5 × 4)-grid

For n ≥ 3, the cartesian product Cn  K2 is a polyhedral graph, the n-prism;
the 3-prism, 4-prism, and 5-prism are commonly called the triangular prism, the
cube, and the pentagonal prism (see Figure 1.24). The cartesian product is arguably
the most basic of graph products. There exist a number of others, each arising
naturally in various contexts. We encounter several of these in later chapters.

Fig. 1.24. The triangular and pentagonal prisms

1.5 Directed Graphs

31

Exercises
1.4.1 Show that every graph may be expressed uniquely (up to order) as a disjoint
union of connected graphs.
1.4.2 Show that the rank over GF (2) of the incidence matrix of a graph G is n − c.
1.4.3 Show that the cartesian product is both associative and commutative.
1.4.4 Find an embedding of the cartesian product Cm  Cn on the torus.
1.4.5
a) Show that the cartesian product of two vertex-transitive graphs is vertextransitive.
b) Give an example to show that the cartesian product of two edge-transitive
graphs need not be edge-transitive.
1.4.6
a) Let G be a self-complementary graph and let P be a path of length three
disjoint from G. Form a new graph H from G ∪ P by joining the ﬁrst and third
vertices of P to each vertex of G. Show that H is self-complementary.
b) Deduce (by appealing to Exercise 1.2.16) that there exists a self-complementary
graph on n vertices if and only if n ≡ 0, 1 (mod 4).

1.5 Directed Graphs
Although many problems lend themselves to graph-theoretic formulation, the concept of a graph is sometimes not quite adequate. When dealing with problems
of traﬃc ﬂow, for example, it is necessary to know which roads in the network
are one-way, and in which direction traﬃc is permitted. Clearly, a graph of the
network is not of much use in such a situation. What we need is a graph in which
each link has an assigned orientation, namely a directed graph.
Formally, a directed graph D is an ordered pair (V (D), A(D)) consisting of a set
V := V (D) of vertices and a set A := A(D), disjoint from V (D), of arcs, together
with an incidence function ψD that associates with each arc of D an ordered pair
of (not necessarily distinct) vertices of D. If a is an arc and ψD (a) = (u, v), then
a is said to join u to v; we also say that u dominates v. The vertex u is the
tail of a, and the vertex v its head; they are the two ends of a. Occasionally, the
orientation of an arc is irrelevant to the discussion. In such instances, we refer to
the arc as an edge of the directed graph. The number of arcs in D is denoted by
a(D). The vertices which dominate a vertex v are its in-neighbours, those which
−
(v)
are dominated by the vertex its outneighbours. These sets are denoted by ND
+
and ND (v), respectively.

32

1 Graphs

For convenience, we abbreviate the term ‘directed graph’ to digraph. A strict
digraph is one with no loops or parallel arcs (arcs with the same head and the
same tail).
With any digraph D, we can associate a graph G on the same vertex set
simply by replacing each arc by an edge with the same ends. This graph is the
underlying graph of D, denoted G(D). Conversely, any graph G can be regarded as
a digraph, by replacing each of its edges by two oppositely oriented arcs with the
same ends; this digraph is the associated digraph of G, denoted D(G). One may
also obtain a digraph from a graph G by replacing each edge by just one of the two
possible arcs with the same ends. Such a digraph is called an orientation of G. We
→
−
occasionally use the symbol G to specify an orientation of G (even though a graph
generally has many orientations). An orientation of a simple graph is referred to
as an oriented graph. One particularly interesting instance is an orientation of a
complete graph. Such an oriented graph is called a tournament, because it can be
viewed as representing the results of a round-robin tournament, one in which each
team plays every other team (and there are no ties).
Digraphs, like graphs, have a simple pictorial representation. A digraph is represented by a diagram of its underlying graph together with arrows on its edges,
each arrow pointing towards the head of the corresponding arc. The four unlabelled
tournaments on four vertices are shown in Figure 1.25 (see Exercise 1.5.3a).

Fig. 1.25. The four unlabelled tournaments on four vertices

Every concept that is valid for graphs automatically applies to digraphs too.
For example, the degree of a vertex v in a digraph D is simply the degree of v in
G(D), the underlying graph of D.1 Likewise, a digraph is said to be connected if
its underlying graph is connected.2 But there are concepts in which orientations
play an essential role. For instance, the indegree d−
D (v) of a vertex v in D is the
number of arcs with head v, and the outdegree d+
D (v) of v is the number of arcs
with tail v. The minimum indegree and outdegree of D are denoted by δ − (D)
and δ + (D), respectively; likewise, the maximum indegree and outdegree of D are
1

2

In such cases, we employ the same notation as for graphs (with G replaced by D).
Thus the degree of v in D is denoted by dD (v). These instances of identical notation
are recorded only once in the glossaries, namely for graphs.
The index includes only those deﬁnitions for digraphs which diﬀer substantively from
their analogues for graphs. Thus the term ‘connected digraph’ does not appear there,
only ‘connected graph’.

1.5 Directed Graphs

33

denoted ∆− (D) and ∆+ (D), respectively. A digraph is k-diregular if each indegree
and each outdegree is equal to k. A vertex of indegree zero is called a source, one
of outdegree zero a sink. A directed path or directed cycle is an orientation of a
path or cycle in which each vertex dominates its successor in the sequence. There
is also a notion of connectedness in digraphs which takes directions into account,
as we shall see in Chapter 2.
Two special digraphs are shown in Figure 1.26. The ﬁrst of these is a 2-diregular
digraph, the second a 3-diregular digraph (see Bondy (1978)); we adopt here the
convention of representing two oppositely oriented arcs by an edge. These digraphs
can both be constructed from the Fano plane (Exercise 1.5.9). They also possess
other unusual properties, to be described in Chapter 2.

(a)

(b)

Fig. 1.26. (a) the Koh–Tindell digraph, and (b) a directed analogue of the Petersen
graph

Further examples of interesting digraphs can be derived from other mathematical structures, such as groups. For example, there is a natural directed analogue
of a Cayley graph. If Γ is a group, and S a subset of Γ not including the identity element, the Cayley digraph of Γ with respect to S is the digraph, denoted
CD(Γ, S), whose vertex set is Γ and in which vertex x dominates vertex y if and
only if xy −1 ∈ S. A directed circulant is a Cayley digraph CD(Zn , S), where Zn
is the group of integers modulo n. The Koh–Tindell digraph of Figure 1.26a is a
directed circulant based on Z7 .
←
−
With each digraph D, one may associate another digraph, D , obtained by
←
−
reversing each arc of D. The digraph D is called the converse of D. Because the
converse of the converse is just the original digraph, the converse of a digraph can
be thought of as its ‘directional dual’. This point of view gives rise to a simple yet
useful principle.
Principle of Directional Duality
Any statement about a digraph has an accompanying ‘dual’ statement, obtained by
applying the statement to the converse of the digraph and reinterpreting it in terms
of the original digraph.

34

1 Graphs

For instance, the sum of the indegrees of the vertices of a digraph is equal to
the total number of arcs (Exercise 1.5.2). Applying the Principle of Directional
Duality, we immediately deduce that the sum of the outdegrees is also equal to
the number of arcs.
Apart from the practical aspect mentioned earlier, assigning suitable orientations to the edges of a graph is a convenient way of exploring properties of the
graph, as we shall see in Chapter 6.

Exercises
1.5.1 How many orientations are there of a labelled graph G?
1.5.2 Let D be a digraph.

a) Show that v∈V d− (v) = m.

b) Using the Principle of Directional Duality, deduce that v∈V d+ (v) = m.
1.5.3 Two digraphs D and D are isomorphic, written D ∼
= D , if there are bijec

tions θ : V (D) → V (D ) and φ : A(D) → A(D ) such that ψD (a) = (u, v) if and
only if ψD (φ(a)) = (θ(u), θ(v)). Such a pair of mappings is called an isomorphism
between D and D .
a) Show that the four tournaments in Figure 1.25 are pairwise nonisomorphic,
and that these are the only ones on four vertices, up to isomorphism.
b) How many tournaments are there on ﬁve vertices, up to isomorphism?
1.5.4
a) Deﬁne the notions of vertex-transitivity and arc-transitivity for digraphs.
b) Show that:
i) every vertex-transitive digraph is diregular,
ii) the Koh–Tindell digraph (Figure 1.26a) is vertex-transitive but not arctransitive.
1.5.5 A digraph is self-converse if it is isomorphic to its converse. Show that both
digraphs in Figure 1.26 are self-converse.
1.5.6 Incidence Matrix of a Digraph
Let D be a digraph with vertex set V and arc set A. The incidence matrix of
D (with respect to given orderings of its vertices and arcs) is the n × m matrix
MD := (mva ), where
⎧
⎨ 1 if arc a is a link and vertex v is the tail of a
mva = −1 if arc a is a link and vertex v is the head of a
⎩
0 otherwise
Let M be the incidence matrix of a connected digraph D. Show that the rank of
M is n − 1.

1.5 Directed Graphs

35

1.5.7 Totally Unimodular Matrix
A matrix is totally unimodular if each of its square submatrices has determinant
equal to 0, +1, or −1. Let M be the incidence matrix of a digraph.
a) Show that M is totally unimodular.
(H. Poincaré)
b) Deduce that the matrix equation Mx = b has a solution in integers provided
that it is consistent and the vector b is integral.
————— —————
1.5.8 Balanced Digraph
A digraph D is balanced if |d+ (v) − d− (v)| ≤ 1, for all v ∈ V . Show that every
graph has a balanced orientation.
1.5.9 Describe how the two digraphs in Figure 1.26 can be constructed from the
Fano plane.
1.5.10 Paley Tournament
Let q be a prime power, q ≡ 3 (mod 4). The Paley tournament PTq is the tournament whose vertex set is the set of elements of the ﬁeld GF (q), vertex i dominating
vertex j if and only if j − i is a nonzero square in GF (q).
a) Draw PT3 , PT7 , and PT11 .
b) Show that these three digraphs are self-converse.
1.5.11 Stockmeyer Tournament
For a nonzero integer k, let pow (k) denote the greatest integer p such that 2p
divides k, and set odd (k) := k/2p . (For example, pow (12) = 2 and odd (12) = 3,
whereas pow (−1) = 0 and odd (−1) = −1.) The Stockmeyer tournament STn ,
where n ≥ 1, is the tournament whose vertex set is {1, 2, 3, . . . , 2n } in which
vertex i dominates vertex j if odd (j − i) ≡ 1 (mod 4).
a) Draw ST2 and ST3 .
b) Show that STn is both self-converse and asymmetric (that is, has no nontrivial
automorphisms).
(P.K. Stockmeyer)
1.5.12 Arc-transitive Graph
An undirected graph G is arc-transitive if its associated digraph D(G) is arctransitive. (Equivalently, G is arc-transitive if, given any two ordered pairs (x, y)
and (u, v) of adjacent vertices, there exists an automorphism of G which maps
(x, y) to (u, v).)
a) Show that any graph which is arc-transitive is both vertex-transitive and edgetransitive.
b) Let G be a k-regular graph which is both vertex-transitive and edge-transitive,
but not arc-transitive. Show that k is even. (An example of such a graph with
k = 4 may be found in Godsil and Royle (2001).)

36

1 Graphs

1.5.13 Adjacency Matrix of a Digraph
The adjacency matrix of a digraph D is the n × n matrix AD = (auv ), where auv is
the number of arcs in D with tail u and head v. Let A be the adjacency matrix of
a tournament on n vertices. Show that rank A = n − 1 if n is odd and rank A = n
if n is even.

1.6 Inﬁnite Graphs
As already mentioned, the graphs studied in this book are assumed to be ﬁnite.
There is, however, an extensive theory of graphs deﬁned on inﬁnite sets of vertices and/or edges. Such graphs are known as inﬁnite graphs. An inﬁnite graph
is countable if both its vertex and edge sets are countable. Figure 1.27 depicts
three well-known countable graphs, the square lattice, the triangular lattice, and
the hexagonal lattice.

Fig. 1.27. The square, triangular and hexagonal lattices

Most notions that are valid for ﬁnite graphs are either directly applicable to
inﬁnite graphs or else require some simple modiﬁcation. Whereas the deﬁnition of
the degree of a vertex is essentially the same as for ﬁnite graphs (with ‘number’
replaced by ‘cardinality’), there are two types of inﬁnite path, one having an initial
but no terminal vertex (called a one-way inﬁnite path), and one having neither
initial nor terminal vertices (called a two-way inﬁnite path); the square lattice is
the cartesian product of two two-way inﬁnite paths. However, certain concepts for
ﬁnite graphs have no natural ‘inﬁnite’ analogue, the cycle for instance (although,
in some circumstances, a two-way inﬁnite path may be regarded as an inﬁnite
cycle).
While the focus of this book is on ﬁnite graphs, we include occasional remarks
and exercises on inﬁnite graphs, mainly to illustrate the diﬀerences between ﬁnite
and inﬁnite graphs. Readers interested in pursuing the topic are referred to the
survey article by Thomassen (1983a) or the book by Diestel (2005), which includes
a chapter on inﬁnite graphs.

1.7 Related Reading

37

Exercises
1.6.1 Locally Finite Graph
An inﬁnite graph is locally ﬁnite if every vertex is of ﬁnite degree. Give an example
of a locally ﬁnite graph in which no two vertices have the same degree.
1.6.2 For each positive integer d, describe a simple inﬁnite planar graph with
minimum degree d. (We shall see, in Chapter 10, that every simple ﬁnite planar
graph has a vertex of degree at most ﬁve.)
————— —————
1.6.3 Give an example of a self-complementary inﬁnite graph.
1.6.4 Unit Distance Graph
The unit distance graph on a subset V of R2 is the graph with vertex set V in
which two vertices (x1 , y1 ) and (x2 , y2 ) are adjacent if their euclidean distance is
equal to 1, that is, if (x1 − x2 )2 + (y1 − y2 )2 = 1. When V = Q2 , this graph is
called the rational unit distance graph, and when V = R2 , the real unit distance
graph. (Note that these are both inﬁnite graphs.)
a) Let V be a ﬁnite subset of the vertex set of the inﬁnite 2-dimensional integer
lattice (see Figure 1.27), and let d be an odd positive integer. Denote by G the
graph with vertex set V in which two vertices (x1 , y1 ) and (x2 , y2 ) are adjacent
if their euclidean distance is equal to d. Show that G is bipartite.
b) Deduce that the rational unit distance graph is bipartite.
c) Show, on the other hand, that the real unit distance graph is not bipartite.

1.7 Related Reading
History of Graph Theory
An attractive account of the history of graph theory up to 1936, complete with
annotated extracts from pivotal papers, can be found in Biggs et al. (1986). The
ﬁrst book on graph theory was published by König (1936). It led to the development of a strong school of graph theorists in Hungary which included P. Erdős and
T. Gallai. Also in the thirties, H. Whitney published a series of inﬂuential articles
(see Whitney (1992)).
As with every branch of mathematics, graph theory is best learnt by doing.
The book Combinatorial Problems and Exercises by Lovász (1993) is highly recommended as a source of stimulating problems and proof techniques. A general
guide to solving problems in mathematics is the very readable classic How to Solve
It by Pólya (2004). The delightful Proofs from the Book by Aigner and Ziegler
(2004) is a compilation of beautiful proofs in mathematics, many of which treat
combinatorial questions.

2
Subgraphs

Contents
2.1 Subgraphs and Supergraphs . . . . . . . . . . . . . . . . . . . . . . .
Edge and Vertex Deletion . . . . . . . . . . . . . . . . . . . . . . . . . .
Maximality and Minimality . . . . . . . . . . . . . . . . . . . . . . . . . .
Acyclic Graphs and Digraphs . . . . . . . . . . . . . . . . . . . . . . . .
Proof Technique: The Pigeonhole Principle . . . . . . . . .
2.2 Spanning and Induced Subgraphs . . . . . . . . . . . . . . . . . .
Spanning Subgraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Proof Technique: Induction . . . . . . . . . . . . . . . . . . . . . . . . .
Proof Technique: Contradiction . . . . . . . . . . . . . . . . . . . .
Induced Subgraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Weighted Graphs and Subgraphs . . . . . . . . . . . . . . . . . . . .
2.3 Modifying Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Vertex Identification and Edge Contraction . . . . . . . .
Vertex Splitting and Edge Subdivision . . . . . . . . . . . . . .
2.4 Decompositions and Coverings . . . . . . . . . . . . . . . . . . . .
Decompositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Proof Technique: Linear Independence . . . . . . . . . . . . . .
Coverings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.5 Edge Cuts and Bonds . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Edge Cuts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Bonds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Cuts in Directed Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.6 Even Subgraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
The Cycle and Bond Spaces . . . . . . . . . . . . . . . . . . . . . . . . .
2.7 Graph Reconstruction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
The Reconstruction Conjecture . . . . . . . . . . . . . . . . . . . . .
The Edge Reconstruction Conjecture . . . . . . . . . . . . . . .
Proof Technique: Möbius Inversion . . . . . . . . . . . . . . . . . .
2.8 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Path and Cycle Decompositions . . . . . . . . . . . . . . . . . . . . .
Legitimate Decks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Ultrahomogeneous Graphs . . . . . . . . . . . . . . . . . . . . . . . . . .

40
40
41
42
43
46
46
48
49
49
50
54
55
55
56
56
57
58
59
59
62
62
64
65
66
67
68
68
76
76
76
77

40

2 Subgraphs

2.1 Subgraphs and Supergraphs
Edge and Vertex Deletion
Given a graph G, there are two natural ways of deriving smaller graphs from G.
If e is an edge of G, we may obtain a graph on m − 1 edges by deleting e from
G but leaving the vertices and the remaining edges intact. The resulting graph is
denoted by G \ e. Similarly, if v is a vertex of G, we may obtain a graph on n − 1
vertices by deleting from G the vertex v together with all the edges incident with
v. The resulting graph is denoted by G − v. These operations of edge deletion and
vertex deletion are illustrated in Figure 2.1.

e
v

G

G\e

G−v

Fig. 2.1. Edge-deleted and vertex-deleted subgraphs of the Petersen graph

The graphs G \ e and G − v deﬁned above are examples of subgraphs of G. We
call G \ e an edge-deleted subgraph, and G − v a vertex-deleted subgraph. More
generally, a graph F is called a subgraph of a graph G if V (F ) ⊆ V (G), E(F ) ⊆
E(G), and ψF is the restriction of ψG to E(F ). We then say that G contains F or
that F is contained in G, and write G ⊇ F or F ⊆ G, respectively. Any subgraph
F of G can be obtained by repeated applications of the basic operations of edge
and vertex deletion; for instance, by ﬁrst deleting the edges of G not in F and
then deleting the vertices of G not in F . Note that the null graph is a subgraph
of every graph.
We remark in passing that in the special case where G is vertex-transitive, all
vertex-deleted subgraphs of G are isomorphic. In this case, the notation G − v is
used to denote any vertex-deleted subgraph. Likewise, we write G \ e to denote
any edge-deleted subgraph of an edge-transitive graph G.
A copy of a graph F in a graph G is a subgraph of G which is isomorphic
to F . Such a subgraph is also referred to as an F -subgraph of G; for instance, a
K3 -subgraph is a triangle in the graph. An embedding of a graph F in a graph G
is an isomorphism between F and a subgraph of G. For each copy of F in G, there
are aut(F ) embeddings of F in G.
A supergraph of a graph G is a graph H which contains G as a subgraph, that
is, H ⊇ G. Note that any graph is both a subgraph and a supergraph of itself.

2.1 Subgraphs and Supergraphs

41

All other subgraphs F and supergraphs H are referred to as proper; we then write
F ⊂ G or H ⊃ G, respectively.
The above deﬁnitions apply also to digraphs, with the obvious modiﬁcations.
In many applications of graph theory, one is interested in determining if a
given graph has a subgraph or supergraph with prescribed properties. The theorem below provides a suﬃcient condition for a graph to contain a cycle. In later
chapters, we study conditions under which a graph contains a long path or cycle, or
a complete subgraph of given order. Although supergraphs with prescribed properties are encountered less often, they do arise naturally in the context of certain
applications. One such is discussed in Chapter 16 (see also Exercises 2.2.17 and
2.2.24).
Theorem 2.1 Let G be a graph in which all vertices have degree at least two. Then
G contains a cycle.
Proof If G has a loop, it contains a cycle of length one, and if G has parallel
edges, it contains a cycle of length two. So we may assume that G is simple.
Let P := v0 v1 . . . vk−1 vk be a longest path in G. Because the degree of vk is
at least two, it has a neighbour v diﬀerent from vk−1 . If v is not on P , the path
v0 v1 . . . vk−1 vk v contradicts the choice of P as a longest path. Therefore, v = vi ,

for some i, 0 ≤ i ≤ k − 2, and vi vi+1 . . . vk vi is a cycle in G.

Maximality and Minimality
The proof of Theorem 2.1 proceeded by ﬁrst selecting a longest path in the graph,
and then ﬁnding a cycle based on this path. Of course, from a purely mathematical
point of view, this is a perfectly sound approach. The graph, being ﬁnite, must
certainly have a longest path. However, if we wished to actually ﬁnd a cycle in our
graph by tracing through the steps of the proof, we would ﬁrst have to ﬁnd such a
path, and this turns out to be a very hard task in general (in a sense to be made
precise in Chapter 8). Fortunately, the very same proof remains valid if ‘longest
path’ is replaced by ‘maximal path’, a maximal path being one that cannot be
extended to a longer path from either end. Moreover, a maximal path is easily
found: one simply starts at any vertex and grows a path until it can no longer
be extended either way. For reasons such as this, the concepts of maximality and
minimality (of subgraphs) turn out to be rather important.
Let F be a family of subgraphs of a graph G. A member F of F is maximal
in F if no member of F properly contains F ; likewise, F is minimal in F if no
member of F is properly contained in F . When F consists of the set of all paths
of G, we simply refer to a maximal member of F as a maximal path of G. We use
similar terminology for describing maximal and minimal members of other special
families of subgraphs. For instance, when F is the set of all connected subgraphs
of G, the maximal members of F are simply its components (Exercise 2.1.1).
Similarly, because an odd cycle is not bipartite, but each of its proper subgraphs
is bipartite (Exercise 1.1.3), the odd cycles of a graph are its minimal nonbipartite

42

2 Subgraphs

subgraphs (see Figure 2.2b). Indeed, as we shall see, the odd cycles are the only
minimal nonbipartite subgraphs.

(a)

(b)

(c)

Fig. 2.2. (a) A maximal path, (b) a minimal nonbipartite subgraph, and (c) a maximal
bipartite subgraph

The notions of maximality and minimality should not be confused with those
of maximum and minimum cardinality. Every cycle in a graph is a maximal cycle,
because no cycle is contained in another; by the same token, every cycle is a
minimal cycle. On the other hand, by a maximum cycle of a graph we mean one
of maximum length, that is, a longest cycle, and by a minimum cycle we mean
one of minimum length. In a graph G which has at least one cycle, the length of a
longest cycle is called its circumference and the length of a shortest cycle its girth.
Acyclic Graphs and Digraphs
A graph is acyclic if does not contain a cycle. It follows from Theorem 2.1 that an
acyclic graph must have a vertex of degree less than two. In fact, every nontrivial
acyclic graph has at least two vertices of degree less than two (Exercise 2.1.2).
Analogously, a digraph is acyclic if it has no directed cycle. One particularly
interesting class of acyclic digraphs are those associated with partially ordered sets.
A partially ordered set, or for short poset, is an ordered pair P = (X, ≺), where
X is a set and ≺ is a partial order on X, that is, an irreﬂexive, antisymmetric,
and transitive binary relation. Two elements u and v of X are comparable if either
u ≺ v or v ≺ u, and incomparable otherwise. A set of pairwise comparable elements
in P is a chain, a set of pairwise incomparable elements an antichain.
One can form a digraph D := D(P ) from a poset P = (X, ≺) by taking
X as the set of vertices, (u, v) being an arc of D if and only if u ≺ v. This
digraph is acyclic and transitive, where transitive here means that (u, w) is an arc
whenever both (u, v) and (v, w) are arcs. (It should be emphasized that, despite its
name, this notion of transitivity in digraphs has no connection whatsoever with the
group-theoretic notions of vertex-transitivity and edge-transitivity deﬁned earlier.)
Conversely, to every strict acyclic transitive digraph D there corresponds a poset
P on the vertex set of D. An acyclic tournament is frequently referred to as a

2.1 Subgraphs and Supergraphs

43

transitive tournament. It can be seen that chains in P correspond to transitive
subtournaments of D.

Proof Technique: The Pigeonhole Principle
If n + 1 letters are distributed among n pigeonholes, at least two of them will
end up in the same pigeonhole. This is known as the Pigeonhole Principle,
and is a special case of a simple statement concerning multisets (sets with
repetitions allowed) of real numbers.
Let S = (a1 , a2 , . . . , an ) be a multiset of real numbers and let a denote their
average. Clearly, the minimum of the ai is no larger than a, and the maximum
of the ai is at least as large as a. Thus, if all the elements of S are integers,
we may assert that there is an element that is no larger than a, and also
one that is at least as large as a . The Pigeonhole Principle merely amounts
to saying that if n integers sum to n + 1 or more, one of them is at least
(n + 1)/n = 2.
Exercise 1.1.6a is a simple example of a statement that can be proved by
applying this principle. As a second application, we establish a suﬃcient condition for the existence of a quadrilateral in a graph, due to Reiman (1958).
  n

> 2 contains a quadriTheorem 2.2 Any simple graph G with v∈V d(v)
2
lateral.
Proof Denote by p2 the number of paths of length two in G, and by p2 (v)
d(v)
the number of such paths whose central vertex is v. Clearly, p
2 (v) =
2 .
As each path of length two has a unique central vertex, p2 = v∈V p2 (v) =
d(v)

v∈V
2 . On the other hand, each such path also has a unique pair
n of ends.
Therefore the set of all paths of length two can be partitioned into 2 subsets
 
 

according to their ends. The hypothesis v∈V d(v)
> n2 now implies, by
2
virtue of the Pigeonhole Principle, that one of these subsets contains two or
more paths; that is, there exist two paths of length two with the same pair of
ends. The union of these paths is a quadrilateral.


Exercises
2.1.1 Show that the maximal connected subgraphs of a graph are its components.
2.1.2
a) Show that every nontrivial acyclic graph has at least two vertices of degree
less than two.
b) Deduce that every nontrivial connected acyclic graph has at least two vertices
of degree one. When does equality hold?

44

2 Subgraphs

2.1.3
a) Show that if m ≥ n, then G contains a cycle.
b) For each positive integer n, ﬁnd an acyclic graph with n vertices and n − 1
edges.
2.1.4
a) Show that every simple graph G contains a path of length δ.
b) For each k ≥ 0, ﬁnd a simple graph G with δ = k which contains no path of
length greater than k.
2.1.5
a) Show that every simple graph G with δ ≥ 2 contains a cycle of length at least
δ + 1.
b) For each k ≥ 2, ﬁnd a simple graph G with δ = k which contains no cycle of
length greater than k + 1.
2.1.6 Show that every simple graph has a vertex x and a family of  21 d(x) cycles
any two of which meet only in the vertex x.
2.1.7
a) Show that the Petersen graph has girth ﬁve and circumference nine.
b) How many cycles are there of length k in this graph, for 5 ≤ k ≤ 9?
2.1.8
a) Show that a k-regular graph of girth four has at least 2k vertices.
b) For k ≥ 2, determine all k-regular graphs of girth four on exactly 2k vertices.
2.1.9
a) Show that a k-regular graph of girth ﬁve has at least k 2 + 1 vertices.
b) Determine all k-regular graphs of girth ﬁve on exactly k2 + 1 vertices, k = 2, 3.
2.1.10 Show that the incidence graph of a ﬁnite projective plane has girth six.
2.1.11 A topological sort of a digraph D is an linear ordering of its vertices such
that, for every arc a of D, the tail of a precedes its head in the ordering.
a) Show that every acyclic digraph has at least one source and at least one sink.
b) Deduce that a digraph admits a topological sort if and only if it is acyclic.
2.1.12 Show that every strict acyclic digraph contains an arc whose reversal results
in an acyclic digraph.
2.1.13 Let D be a strict digraph. Setting k := max {δ − , δ + }, show that:
a) D contains a directed path of length at least k,
b) if k > 0, then D contains a directed cycle of length at least k + 1.

2.1 Subgraphs and Supergraphs

45

2.1.14
a) Let G be a graph all of whose vertex-deleted subgraphs are isomorphic. Show
that G is vertex-transitive.
b) Let G be a graph all of whose edge-deleted subgraphs are isomorphic. Is G
necessarily edge-transitive?
1
2.1.15 Using Theorem 2.2 and the Cauchy–Schwarz
√ Inequality , show that a sim1
(I. Reiman)
ple graph G contains a quadrilateral if m > 4 n( 4n − 3 + 1).

————— —————
2.1.16
a) Show that if m ≥ n + 4, then G contains two edge-disjoint cycles. (L. Pósa)
b) For each integer n ≥ 5, ﬁnd a graph with n vertices and n + 3 edges which
does not contain two edge-disjoint cycles.
2.1.17 Triangle-Free Graph
A triangle-free graph is one which contains no triangles. Let G be a simple trianglefree graph.
a) Show that d(x)
 + d(y) ≤ n for all xy ∈ E.
b) Deduce that v∈V d(v)2 ≤ mn.
c) Applying the Cauchy–Schwarz Inequality1 , deduce that m ≤ n2 /4.
(W. Mantel)
d) For each positive integer n, ﬁnd a simple triangle-free graph G with m =
n2 /4.
2.1.18
a) Let G be a triangle-free graph with δ > 2n/5. Show that G is bipartite.
b) For n ≡ 0 (mod 5), ﬁnd a nonbipartite triangle-free graph with δ = 2n/5.
(B. Andrásfai, P. Erdős, and V.T. Sós)
2.1.19 Let G be a simple graph with v(G) = kp and δ(G) ≥ kq. Show that G has
a subgraph F with v(F ) = p and δ(F ) ≥ q.
(C.St.J.A. Nash-Williams)
2.1.20 Show that the Kneser graph KGm,n has no odd cycle of length less than
n/(n − 2m).
2.1.21 Let Kn be a complete graph whose edges are coloured red or blue. Call
a subgraph of this graph monochromatic if all of its edges have the same colour,
and bichromatic if edges of both colours are present.
a) Let v be a vertex of Kn . Show that the number of bichromatic 2-paths in Kn
whose central vertex is v is at most (n − 1)2 /4. When does equality hold?
1

n
i=1

a2i

n
i=1

b2i ≥

n
i=1

ai b i

2

for real numbers ai , bi , 1 ≤ i ≤ n.

46

2 Subgraphs

b) Deduce that the total number of bichromatic 2-paths in Kn is at most n(n −
1)2 /4.
c) Observing that each bichromatic triangle contains exactly two bichromatic 2paths, deduce that the number of monochromatic triangles in Kn is at least
n(n − 1)(n − 5)/24. When does equality hold?
(A.W. Goodman)
d) How many monochromatic triangles must there be, at least, when n = 5 and
when n = 6?
2.1.22 Let T be a tournament on n vertices, and let v be a vertex of T .
a) Show that the number of directed 2-paths in T whose central vertex is v is at
most (n − 1)2 /4. When does equality hold?
b) Deduce that the total number of directed 2-paths in T is at most n(n − 1)2 /4.
c) Observing that each transitive triangle contains exactly one directed 2-path
and that each directed triangle contains exactly three directed
deduce
 2-paths,

.
When
does
that the number of directed triangles in T is at most 14 n+1
3
equality hold?
2.1.23 Let P = (X, ≺) be a poset. Show that the maximum number of elements
in a chain of P is equal to the minimum number of antichains into which X can
be partitioned.
(L. Mirsky)
2.1.24 Geometric Graph
A geometric graph is a graph embedded in the plane in such a way that each edge
is a line segment. Let G be a geometric graph in which any two edges intersect
(possibly at an end).
a) Show that G has at most n edges.
b) For each n ≥ 3, ﬁnd an example of such a graph G with n edges.
(H. Hopf and E. Pannwitz)

2.2 Spanning and Induced Subgraphs
Spanning Subgraphs
A spanning subgraph of a graph G is a subgraph obtained by edge deletions only,
in other words, a subgraph whose vertex set is the entire vertex set of G. If S is
the set of deleted edges, this subgraph of G is denoted G \ S. Observe that every
simple graph is a spanning subgraph of a complete graph.
Spanning supergraphs are deﬁned analogously. The inverse operation to edge
deletion is edge addition. Adding a set S of edges to a graph G yields a spanning
supergraph of G, denoted G + S. By starting with a disjoint union of two graphs
G and H and adding edges joining every vertex of G to every vertex of H, one
obtains the join of G and H, denoted G ∨ H. The join Cn ∨ K1 of a cycle Cn and a
single vertex is referred to as a wheel with n spokes and denoted Wn . (The graph

2.2 Spanning and Induced Subgraphs

(a)

47

(b)

Fig. 2.3. (a) A graph and (b) its underlying simple graph

H of Figure 1.1 is the wheel W5 .) One may also add a set X of vertices to a graph,
resulting in a supergraph of G denoted G + X.
Certain types of spanning subgraph occur frequently in applications of graph
theory and, for historical reasons, have acquired special names. For example, spanning paths and cycles are called Hamilton paths and Hamilton cycles, respectively,
and spanning k-regular subgraphs are referred to as k-factors. Rédei’s Theorem
(Theorem 2.3, see inset) tells us that every tournament has a directed Hamilton
path. Not every tournament (on three or more vertices) has a directed Hamilton
cycle, however; for instance, the transitive tournament has no directed cycles at
all. Nonetheless, Camion (1959) proved that every tournament in which any vertex can be reached from any other vertex by means of a directed path does indeed
have a directed Hamilton cycle (Exercise 3.4.12a).
By deleting from a graph G all loops and, for every pair of adjacent vertices, all
but one link joining them, we obtain a simple spanning subgraph called the underlying simple graph of G. Up to isomorphism, each graph has a unique underlying
simple graph. Figure 2.3 shows a graph and its underlying simple graph.
Given spanning subgraphs F1 = (V, E1 ) and F2 = (V, E2 ) of a graph G =
(V, E), we may form the spanning subgraph of G whose edge set is the symmetric
diﬀerence E1  E2 of E1 and E2 . This graph is called the symmetric diﬀerence of
F1 and F2 , and denoted F1  F2 . Figure 2.4 shows the symmetric diﬀerence of two
spanning subgraphs of a graph on ﬁve vertices.


F1

=
F2

F1  F 2

Fig. 2.4. The symmetric diﬀerence of two graphs

48

2 Subgraphs

Proof Technique: Induction
One of the most widely used proof techniques in mathematics is the Principle
of Mathematical Induction. Suppose that, for each nonnegative integer i, we
have a mathematical statement Si . One may prove that all assertions in the
sequence (S0 , S1 , . . .) are true by:
 directly verifying S0 (the basis of the induction),
 for each integer n ≥ 1, deducing that Sn is true (the inductive step) from
the assumption that Sn−1 is true (the inductive hypothesis).
The justiﬁcation for this technique is provided by the principle that each
nonempty subset of N has a minimal element: if not all Si were true, the set
{i ∈ N : Si is false} would be a nonempty subset of N, and would therefore
have a minimal element n. Thus Sn−1 would be true and Sn false.
We shall come across many examples of inductive proofs throughout the book.
Here, as a simple illustration of the technique, we prove a basic theorem on
tournaments due to Rédei (1934).
Theorem 2.3 Rédei’s Theorem
Every tournament has a directed Hamilton path.
Proof Clearly, the trivial tournament (on one vertex) has a directed Hamilton path. Assume that, for some integer n ≥ 2, every tournament on n − 1
vertices has a directed Hamilton path. Let T be a tournament on n vertices and
let v ∈ V (T ). The digraph T  := T −v is a tournament on n−1 vertices. By the
inductive hypothesis, T  has a directed Hamilton path P  := (v1 , v2 , . . . , vn−1 ).
If (v, v1 ) is an arc of T , the path (v, v1 , v2 , . . . , vn−1 ) is a directed Hamilton
path of T . Similarly, if (vn−1 , v) is an arc of T , the path (v1 , v2 , . . . , vn−1 , v)
is a directed Hamilton path of T . Because T is a tournament, v is adjacent to
each vertex of P  , so we may assume that both (v1 , v) and (v, vn−1 ) are arcs
of T . It follows that there exists an integer i, 1 ≤ i < n − 1, such that both
(vi , v) and (v, vi+1 ) are arcs of T . But now P := (v1 , . . . , vi , v, vi+1 , . . . , vn−1 )
is a directed Hamilton path of T .

Inductive proofs may be presented in a variety of ways. The above proof, for
example, may be recast as a ‘longest path’ proof. We take P to be a longest
directed path in the tournament T . Assuming that P is not a directed Hamilton path, we then obtain a contradiction by showing that T has a directed
path longer than P (Exercise 2.2.4).
Graph-theoretical statements generally assert that all graphs belonging to
some well-deﬁned class possess a certain property. Any ‘proof’ that fails to
cover all cases is false. This is a common mistake in attempts to prove statements of this sort by induction. Another common error is neglecting to verify
the basis of the induction. For an example of how not to use induction, see
Exercise 2.2.19.

2.2 Spanning and Induced Subgraphs

49

Proof Technique: Contradiction
A common approach to proving graph-theoretical statements is to proceed by
assuming that the stated assertion is false and analyse the consequences of
that assumption so as to arrive at a contradiction. As a simple illustration
of this method, we present an interesting and very useful result due to Erdős
(1965).
Theorem 2.4 Every loopless graph G contains a spanning bipartite subgraph
F such that dF (v) ≥ 12 dG (v) for all v ∈ V .
Proof Let G be a loopless graph. Certainly, G has spanning bipartite subgraphs, one such being the empty spanning subgraph. Let F := F [X, Y ] be a
spanning bipartite subgraph of G with the greatest possible number of edges.
We claim that F satisﬁes the required property. Suppose not. Then there is
some vertex v for which
1
(2.1)
dF (v) < dG (v)
2
Without loss of generality, we may suppose that v ∈ X. Consider the spanning
bipartite subgraph F  whose edge set consists of all edges of G with one end
in X \ {v} and the other in Y ∪ {v}. The edge set of F  is the same as that
of F except for the edges of G incident to v; those which were in F are not
in F  , and those which were not in F are in F  . We thus have:
e(F  ) = e(F ) − dF (v) + (dG (v) − dF (v)) = e(F ) + (dG (v) − 2dF (v)) > e(F )
the inequality following from (2.1). But this contradicts the choice of F . It
follows that F does indeed have the required property.

The method of contradiction is merely a convenient way of presenting the
idea underlying the above proof. Implicit in the proof is an algorithm which
ﬁnds, in any graph, a spanning bipartite subgraph with the stated property:
one starts with any spanning bipartite subgraph and simply moves vertices
between parts so as to achieve the desired objective (see also Exercises 2.2.2
and 2.2.18).

Induced Subgraphs
A subgraph obtained by vertex deletions only is called an induced subgraph. If X is
the set of vertices deleted, the resulting subgraph is denoted by G − X. Frequently,
it is the set Y := V \ X of vertices which remain that is the focus of interest. In
such cases, the subgraph is denoted by G[Y ] and referred to as the subgraph of G
induced by Y . Thus G[Y ] is the subgraph of G whose vertex set is Y and whose
edge set consists of all edges of G which have both ends in Y .
The following theorem, due to Erdős (1964/1965), tells us that every graph has
a induced subgraph whose minimum degree is relatively large.

50

2 Subgraphs

Theorem 2.5 Every graph with average degree at least 2k, where k is a positive
integer, has an induced subgraph with minimum degree at least k + 1.
Proof Let G be a graph with average degree d(G) ≥ 2k, and let F be an induced
subgraph of G with the largest possible average degree and, subject to this, the
smallest number of vertices. We show that δ(F ) ≥ k + 1. This is clearly true if
v(F ) = 1, since then δ(F ) = d(F ) ≥ d(G), by the choice of F . We may therefore
assume that v(F ) > 1.
Suppose, by way of contradiction, that dF (v) ≤ k for some vertex v of F .
Consider the vertex-deleted subgraph F  := F − v. Note that F  is also an induced
subgraph of G. Moreover
d(F  ) =

2(e(F ) − k)
2e(F ) − d(G)
2e(F ) − d(F )
2e(F  )
≥
≥
≥
= d(F )
v(F  )
v(F ) − 1
v(F ) − 1
v(F ) − 1

Because v(F  ) < v(F ), this contradicts the choice of F . Therefore δ(F ) ≥ k + 1. 
The bound on the minimum degree given in Theorem 2.5 is sharp (Exercise 3.1.6).
Subgraphs may also be induced by sets of edges. If S is a set of edges, the
edge-induced subgraph G[S] is the subgraph of G whose edge set is S and whose
vertex set consists of all ends of edges of S. Any edge-induced subgraph G[S] can
be obtained by ﬁrst deleting the edges in E \ S and then deleting all resulting
isolated vertices; indeed, an edge-induced subgraph is simply a subgraph without
isolated vertices.
Weighted Graphs and Subgraphs
When graphs are used to model practical problems, one often needs to take into
account additional factors, such as costs associated with edges. In a communications network, for example, relevant factors might be the cost of transmitting data
along a link, or of constructing a new link between communication centres. Such
situations are modelled by weighted graphs.
With each edge e of G, let there be associated a real number w(e), called its
weight. Then G, together with these weights on its edges, is called a weighted
graph, and denoted (G, w). One can regard a weighting w : E → R as a vector
whose coordinates are indexed by the edge set E of G; the set of all such vectors
is denoted by RE or, when the weights are rational numbers, by QE .
If F is a subgraph of a 
weighted graph, the weight w(F ) of F is the sum
of the weights on its edges, e∈E(F ) w(e). Many optimization problems amount
to ﬁnding, in a weighted graph, a subgraph of a certain type with minimum or
maximum weight. Perhaps the best known problem of this kind is the following
one.
A travelling salesman wishes to visit a number of towns and then return to his
starting point. Given the travelling times between towns, how should he plan his
itinerary so that he visits each town exactly once and minimizes his total travelling

2.2 Spanning and Induced Subgraphs

51

time? This is known as the Travelling Salesman Problem. In graph-theoretic terms,
it can be phrased as follows.
Problem 2.6 The travelling salesman problem (TSP)
Given: a weighted complete graph (G, w),
Find: a minimum-weight Hamilton cycle of G.
Note that it suﬃces to consider the TSP for complete graphs because nonadjacent vertices can be joined by edges whose weights are prohibitively high. We
discuss this problem, and others of a similar ﬂavour, in Chapters 6 and 8, as well
as in later chapters.

Exercises
2.2.1 Let G be a graph on n vertices and m edges and c components.
a) How many spanning subgraphs has G?
b) How many edges need to be added to G to obtain a connected spanning supergraph?
2.2.2
a) Deduce from Theorem 2.4 that every loopless graph G contains a spanning
bipartite subgraph F with e(F ) ≥ 12 e(G).
b) Describe an algorithm for ﬁnding such a subgraph by ﬁrst arranging the vertices in a linear order and then assigning them, one by one, to either X or Y ,
using a simple rule.
2.2.3 Determine the number of 1-factors in each of the following graphs: (a) the
Petersen graph, (b) the pentagonal prism, (c) K2n , (d) Kn,n .
2.2.4 Give a proof of Theorem 2.3 by means of a longest path argument.
(D. König and P. Veress)
2.2.5
a) Show that every Hamilton cycle of the k-prism uses either exactly two consecutive edges linking the two k-cycles or else all of them.
b) How many Hamilton cycles are there in the pentagonal prism?
2.2.6 Show that there is a Hamilton path between two vertices in the Petersen
graph if and only if these vertices are nonadjacent.
2.2.7
Which grids have Hamilton paths, and which have Hamilton cycles?
2.2.8 Give an example to show that the following simple procedure, known as the
Greedy Heuristic, is not guaranteed to solve the Travelling Salesman Problem.

52

2 Subgraphs

 Select an arbitrary vertex v.
 Starting with the trivial path v, grow a Hamilton path one edge at a time,
choosing at each iteration an edge of minimum weight between the terminal
vertex of the current path and a vertex not on this path.
 Form a Hamilton cycle by adding the edge joining the two ends of the Hamilton
path.
2.2.9 Let G be a graph on n vertices and m edges.
a) How many induced subgraphs has G?
b) How many edge-induced subgraphs has G?
2.2.10 Show that every shortest cycle in a simple graph is an induced subgraph.
2.2.11 Show that if G is simple and connected, but not complete, then G contains
an induced path of length two.
2.2.12 Let P and Q be distinct paths in a graph G with the same initial and
terminal vertices. Show that P ∪ Q contains a cycle by considering the subgraph
G[E(P )  E(Q)] and appealing to Theorem 2.1.
2.2.13
a) Show that any two longest paths in a connected graph have a vertex in common.
b) Deduce that if P is a longest path in a connected graph G, then no path in
G − V (P ) is as long as P .
2.2.14 Give a constructive proof of Theorem 2.5.
2.2.15
a) Show that an induced subgraph of a line graph is itself a line graph.
b) Deduce that no line graph can contain either of the graphs in Figure 1.19 as
an induced subgraph.
c) Show that these two graphs are minimal with respect to the above property.
Can you ﬁnd other such graphs? (There are nine in all.)
2.2.16
a) Show that an induced subgraph of an interval graph is itself an interval graph.
b) Deduce that no interval graph can contain the graph in Figure 1.20 as an
induced subgraph.
c) Show that this graph is minimal with respect to the above property.
2.2.17 Let G be a bipartite graph of maximum degree k.
a) Show that there is a k-regular bipartite graph H which contains G as an
induced subgraph.
b) Show, moreover, that if G is simple, then there exists such a graph H which
is simple.

2.2 Spanning and Induced Subgraphs

53

————— —————
2.2.18 Let G be a simple connected graph.
a) Show that there is an ordering v1 , v2 , . . . , vn of V such that at least 12 (n − 1)
vertices vj are adjacent to an odd number of vertices vi with i < j.
b) By starting with such an ordering and adopting the approach outlined in Exercise 2.2.2b, deduce that G has a bipartite subgraph with at least 12 m+ 14 (n−1)
edges.
(C. Edwards; P. Erdős)
2.2.19 Read the ‘Theorem’ and ‘Proof’ given below, and then answer the questions
which follow.
‘Theorem’. Let G be a simple graph with δ ≥ n/2, where n ≥ 3. Then G has a
Hamilton cycle.
‘Proof ’. By induction on n. The ‘Theorem’ is true for n = 3, because G = K3
in this case. Suppose that it holds for n = k, where k ≥ 3. Let G be a simple
graph on k vertices in which δ ≥ k/2, and let C  be a Hamilton cycle of G . Form
a graph G on k + 1 vertices in which δ ≥ (k + 1)/2 by adding a new vertex v and
joining v to at least (k + 1)/2 vertices of G . Note that v must be adjacent to two
consecutive vertices, u and w, of C  . Replacing the edge uw of C  by the path uvw,
we obtain a Hamilton cycle C of G. Thus the ‘Theorem’ is true for n = k + 1. By
the Principle of Mathematical Induction, it is true for all n ≥ 3.

a) Is the ‘Proof’ correct?
b) If you claim that the ‘Proof’ is incorrect, give reasons to support your claim.
c) Can you ﬁnd any graphs for which the ‘Theorem’ fails? Does the existence
or nonexistence of such graphs have any relationship to the correctness or
incorrectness of the ‘Proof’ ?
(D.R. Woodall)
2.2.20
a) Let D be an oriented graph with minimum outdegree k, where k ≥ 1.
i) Show that D has a vertex x whose indegree and outdegree are both at
least k.
ii) Let D be the digraph obtained from D by deleting N − (x) ∪ {x} and
adding an arc (u, v) from each vertex u of the set N −− (x) of in-neighbours
of N − (x) to each vertex v of N + (x), if there was no such arc in D. Show
that D is a strict digraph with minimum outdegree k.
b) Deduce, by induction on n, that every strict digraph D with minimum outdegree k, where k ≥ 1, contains a directed cycle of length at most 2n/k.
(V. Chvátal and E. Szemerédi)
2.2.21 The complement D of a strict digraph D is its complement in D(Kn ). Let
D = (V, A) be a strict digraph and let P be a directed Hamilton path of D. Form
a bipartite graph B[F , Sn ], where F is the family of spanning subgraphs of D each
component of which is a directed path and Sn is the set of permutations of V ,
a subgraph F ∈ F being adjacent in B to a permutation σ ∈ Sn if and only if
σ(F ) ⊆ σ(D) ∩ P .

54

2 Subgraphs

a) Which vertices F ∈ F are of odd degree in B?
b) Describe a bijection between the vertices σ ∈ Sn of odd degree in B and the
directed Hamilton paths of D.
c) Deduce that h(D) ≡ h(D) (mod 2), where h(D) denotes the number of directed
Hamilton paths in D.
2.2.22 Let D be a tournament, and let (x, y) be an arc of D. Set D− := D \ (x, y)
and D+ := D + (y, x).
a) Describe a bijection between the directed Hamilton paths of D− and those of
D+ .
b) Deduce from Exercise 2.2.21 that h(D− ) ≡ h(D+ ) (mod 2).
c) Consider the tournament D obtained from D on reversing the arc (x, y). Show
that h(D ) = h(D+ ) − h(D) + h(D− ).
d) Deduce that h(D ) ≡ h(D) (mod 2).
e) Conclude that every tournament has an odd number of directed Hamilton
paths.
(L. Rédei)
2.2.23
a) Let S be a set of n points in the plane, the distance between any two of which
is at most one. Show that there are at most n pairs of points of S at distance
exactly one.
(P. Erdős)
b) For each n ≥ 3, describe such a set S for which the number of pairs of points
at distance exactly one is n.
2.2.24 Let G be a simple graph on n vertices and m edges, with minimum degree
δ and maximum degree ∆.
a) Show that there is a simple ∆-regular graph H which contains G as an induced
subgraph.
b) Let H be such a graph, with v(H) = n + r. Show that:
i) r ≥ ∆ − δ,
ii) r∆ ≡ n∆ (mod 2),
iii) r∆ ≥ n∆ − 2m ≥ r∆ − r(r − 1).
(Erdős and Kelly (1967) showed that if r is the smallest positive integer which
satisﬁes the above three conditions, then there does indeed exist a simple ∆-regular
graph H on n + r vertices which contains G as an induced subgraph.)
2.2.25 Let G be a simple graph on n vertices, where n ≥ 4, and let k be an integer,
2 ≤ k ≤ n − 2. Suppose that all induced subgraphs of G on k vertices have the
same number of edges. Show that G is either empty or complete.

2.3 Modifying Graphs
We have already discussed some simple ways of modifying a graph, namely deleting
or adding vertices or edges. Here, we describe several other local operations on
graphs. Although they do not give rise to subgraphs or supergraphs, it is natural
and convenient to introduce them here.

2.3 Modifying Graphs

55

Vertex Identification and Edge Contraction
To identify nonadjacent vertices x and y of a graph G is to replace these vertices
by a single vertex incident to all the edges which were incident in G to either x or
y. We denote the resulting graph by G / {x, y} (see Figure 2.5a). To contract an
edge e of a graph G is to delete the edge and then (if the edge is a link) identify
its ends. The resulting graph is denoted by G / e (see Figure 2.5b).
x

y

e

G / {x, y}

G

G

G/e

(a)

(b)

Fig. 2.5. (a) Identifying two vertices, and (b) contracting an edge

Vertex Splitting and Edge Subdivision
The inverse operation to edge contraction is vertex splitting. To split a vertex v is
to replace v by two adjacent vertices, v  and v  , and to replace each edge incident
to v by an edge incident to either v  or v  (but not both, unless it is a loop at
v), the other end of the edge remaining unchanged (see Figure 2.6a). Note that a
vertex of positive degree can be split in several ways, so the resulting graph is not
unique in general.

v

v

(a)

e

v 

x

(b)

Fig. 2.6. (a) Splitting a vertex, and (b) subdividing an edge

A special case of vertex splitting occurs when exactly one link, or exactly one
end of a loop, is assigned to either v  or v  . The resulting graph can then be viewed
as having been obtained by subdividing an edge of the original graph, where to
subdivide an edge e is to delete e, add a new vertex x, and join x to the ends of
e (when e is a link, this amounts to replacing e by a path of length two, as in
Figure 2.6b).

56

2 Subgraphs

Exercises
2.3.1
a) Show that c(G / e) = c(G) for any edge e of a graph G.
b) Let G be an acyclic graph, and let e ∈ E.
i) Show that G / e is acyclic.
ii) Deduce that m = n − c.
————— —————

2.4 Decompositions and Coverings
Decompositions
A decomposition of a graph G is a family F of edge-disjoint subgraphs of G such
that
(2.2)
∪F ∈F E(F ) = E(G)
If the family F consists entirely of paths or entirely of cycles, we call F a path
decomposition or cycle decomposition of G.
Every loopless graph has a trivial path decomposition, into paths of length one.
On the other hand, not every graph has a cycle decomposition. Observe that if a
graph has a cycle decomposition C, the degree of each vertex is twice the number
of cycles of C to which it belongs, so is even. A graph in which each vertex has even
degree is called an even graph. Thus, a graph which admits a cycle decomposition is
necessarily even. Conversely, as was shown by Veblen (1912/13), every even graph
admits a cycle decomposition.
Theorem 2.7 Veblen’s Theorem
A graph admits a cycle decomposition if and only if it is even.
Proof We have already shown that the condition of evenness is necessary. We
establish the converse by induction on e(G).
Suppose that G is even. If G is empty, then E(G) is decomposed by the empty
family of cycles. If not, consider the subgraph F of G induced by its vertices of
positive degree. Because G is even, F also is even, so every vertex of F has degree
two or more. By Theorem 2.1, F contains a cycle C. The subgraph G := G \ E(C)
is even, and has fewer edges than G. By induction, G has a cycle decomposition

C  . Therefore G has the cycle decomposition C := C  ∪ {C}.
There is a corresponding version of Veblen’s Theorem for digraphs (see Exercise 2.4.2).

2.4 Decompositions and Coverings

57

Proof Technique: Linear Independence
Algebraic techniques can occasionally be used to solve problems where combinatorial methods fail. Arguments involving the ranks of appropriately chosen
matrices are particularly eﬀective. Here, we illustrate this technique by giving
a simple proof, due to Tverberg (1982), of a theorem of Graham and Pollak
(1971) on decompositions of complete graphs into complete bipartite graphs.
There are many ways in which a complete graph can be decomposed into
complete bipartite graphs. For example, K4 may be decomposed into six copies
of K2 , into three copies of K1,2 , into the stars K1,1 , K1,2 , and K1,3 , or into K2,2
and two copies of K2 . What Graham and Pollak showed is that, no matter
how Kn is decomposed into complete bipartite graphs, there must be at least
n − 1 of them in the decomposition. Observe that this bound can always be
achieved, for instance by decomposing Kn into the stars K1,k , 1 ≤ k ≤ n − 1.
Theorem 2.8 Let F := {F1 , F2 , . . . , Fk } be a decomposition of Kn into complete bipartite graphs. Then k ≥ n − 1.
Proof Let V := V (Kn ) and let Fi have bipartition (Xi , Yi ), 1 ≤ i ≤ k.
Consider the following system of k + 1 homogeneous linear equations in the
variables xv , v ∈ V :


xv = 0,
xv = 0, 1 ≤ i ≤ k
v∈V

v∈Xi

Suppose that k < n−1. Then this system, consisting of fewer than n equations
in n variables, has a solution xv = cv , v ∈ V , with cv = 0 for at least one
v ∈ V . Thus


cv = 0 and
cv = 0, 1 ≤ i ≤ k
v∈V

v∈Xi

Because F is a decomposition of Kn ,



k




cv cw =
cv
cw
i=1

vw∈E

Therefore

0=



v∈V

2
cv

=


v∈V

c2v

+2

k

i=1

v∈Xi





w∈Yi


cv

v∈Xi

a contradiction. We conclude that k ≥ n − 1.



w∈Yi


cw

=



c2v > 0

v∈V



Further proofs based on linear independence arguments are outlined in Exercises 2.4.9 and 14.2.15.

58

2 Subgraphs

Coverings
We now deﬁne the related concept of a covering. A covering or cover of a graph
G is a family F of subgraphs of G, not necessarily edge-disjoint, satisfying (2.2).
A covering is uniform if it covers each edge of G the same number of times; when
this number is k, the covering is called a k-cover. A 1-cover is thus simply a
decomposition. A 2-cover is usually called a double cover. If the family F consists
entirely of paths or entirely of cycles, the covering is referred to as a path covering
or cycle covering. Every graph which admits a cycle covering also admits a uniform
cycle covering (Exercise 3.5.7).
The notions of decomposition and covering crop up frequently in the study of
graphs. In Section 3.5, we discuss a famous unsolved problem concerning cycle
coverings, the Cycle Double Cover Conjecture. The concept of covering is also
useful in the study of another celebrated unsolved problem, the Reconstruction
Conjecture (see Section 2.7, in particular Exercise 2.7.11).

Exercises
2.4.1 Let e be an edge of an even graph G. Show that G / e is even.
2.4.2 Even Directed Graph
A digraph D is even if d− (v) = d+ (v) for each vertex v ∈ V . Prove the following directed version of Veblen’s Theorem (2.7): A directed graph admits a decomposition
into directed cycles if and only if it is even.
2.4.3 Find a decomposition of K13 into three copies of the circulant CG(Z13 , {1, −1,
5, −5}).
————— —————
2.4.4
a) Show that Kn can be decomposed into copies of Kp only if n − 1 is divisible
by p − 1 and n(n − 1) is divisible by p(p − 1). For which integers n do these
two conditions hold when p is a prime?
b) For k a prime power, describe a decomposition of Kk2 +k+1 into copies of Kk+1 ,
based on a ﬁnite projective plane of order k.
2.4.5 Let n be a positive integer.
a) Describe a decomposition of K2n+1 into Hamilton cycles.
b) Deduce that K2n admits a decomposition into Hamilton paths.
2.4.6 Consider the graph obtained from the Petersen graph by replacing each of
the ﬁve edges in a 1-factor by two parallel edges, as shown in Figure 2.7. Show
that every cycle decomposition of this 4-regular graph includes a 2-cycle.

2.5 Edge Cuts and Bonds

59

Fig. 2.7. The Petersen graph with a doubled 1-factor

2.4.7 Let G be a connected graph with an even number of edges.
a) Show that G can be oriented so that the outdegree of each vertex is even.
b) Deduce that G admits a decomposition into paths of length two.
2.4.8 Show that every loopless digraph admits a decomposition into two acyclic
digraphs.
2.4.9 Give an alternative proof of the de Bruijn–Erdős Theorem (see Exercise 1.3.15b) by proceeding as follows. Let M be the incidence matrix of a geometric conﬁguration (P, L) which has at least two lines and in which any two
points lie on exactly one line.
a) Show that the columns of M span Rn , where n := |P |.
b) Deduce that M has rank n.
c) Conclude that |L| ≥ |P |.

2.5 Edge Cuts and Bonds
Edge Cuts
Let X and Y be sets of vertices (not necessarily disjoint) of a graph G = (V, E).
We denote by E[X, Y ] the set of edges of G with one end in X and the other end
in Y , and by e(X, Y ) their number. If Y = X, we simply write E(X) and e(X) for
E[X, X] and e(X, X), respectively. When Y = V \ X, the set E[X, Y ] is called the
edge cut of G associated with X, or the coboundary of X, and is denoted by ∂(X);
note that ∂(X) = ∂(Y ) in this case, and that ∂(V ) = ∅. In this notation, a graph
G = (V, E) is bipartite if ∂(X) = E for some subset X of V , and is connected if
∂(X) = ∅ for every nonempty proper subset X of V . The edge cuts of a graph are
illustrated in Figure 2.8.
An edge cut ∂(v) associated with a single vertex v is a trivial edge cut; this is
simply the set of all links incident with v. If there are no loops incident with v, it
follows that |∂(v)| = d(v). Accordingly, in the case of loopless graphs, we refer to
|∂(X)| as the degree of X and denote it by d(X).

60

2 Subgraphs
u

u

u

u

v

v

v

v

x

y

x

∂(u)

y

x

∂(u, v)

y

x

∂(u, x)

y
∂(u, y)

u

u

u

u

v

v

v

v

x

y
∂(u, v, x)

x

y
∂(u, v, y)

x

y
∂(u, x, y)

x

y
∂(u, v, x, y)

Fig. 2.8. The edge cuts of a graph

The following theorem is a natural generalization of Theorem 1.1, the latter
theorem being simply the case where X = V . Its proof is based on the technique
of counting in two ways, and is left as an exercise (2.5.1a).
Theorem 2.9 For any graph G and any subset X of V ,

d(v) − 2e(X)
|∂(X)| =



v∈X

Veblen’s Theorem (2.7) characterizes even graphs in terms of cycles. Even
graphs may also be characterized in terms of edge cuts, as follows.
Theorem 2.10 A graph G is even if and only if |∂(X)| is even for every subset
X of V .
Proof Suppose that |∂(X)| is even for every subset X of V . Then, in particular,
|∂(v)| is even for every vertex v. But, as noted above, ∂(v) is just the set of all
links incident with v. Because loops contribute two to the degree, it follows that
all degrees are even. Conversely, if G is even, then Theorem 2.9 implies that all
edge cuts are of even cardinality.

The operation of symmetric diﬀerence of spanning subgraphs was introduced
in Section 2.1. The following propositions show how edge cuts behave with respect
to symmetric diﬀerence.
Proposition 2.11 Let G be a graph, and let X and Y be subsets of V . Then
∂(X)  ∂(Y ) = ∂(X  Y )

2.5 Edge Cuts and Bonds

61

Proof Consider the Venn diagram, shown in Figure 2.9, of the partition of V
(X ∩ Y, X \ Y, Y \ X, X ∩ Y )
determined by the partitions (X, X) and (Y, Y ), where X := V \ X and Y :=
V \ Y . The edges of ∂(X), ∂(Y ), and ∂(X  Y ) between these four subsets of V
are indicated schematically in Figure 2.10. It can be seen that ∂(X)  ∂(Y ) =
∂(X  Y ).

Y

Y

X

X ∩Y

X \Y

X

Y \X

X ∩Y

Fig. 2.9. Partition of V determined by the partitions (X, X) and (Y, Y )

Corollary 2.12 The symmetric diﬀerence of two edge cuts is an edge cut.



We leave the proof of the second proposition to the reader (Exercise 2.5.1b).
Proposition 2.13 Let F1 and F2 be spanning subgraphs of a graph G, and let X
be a subset of V . Then
∂F1 F2 (X) = ∂F1 (X)  ∂F2 (X)

Y

Y

Y

Y

X

Y

X

=
X

∂(X)

Y

X


X



X
∂(Y )

Fig. 2.10. The symmetric diﬀerence of two cuts

∂(X  Y )

62

2 Subgraphs

Bonds
A bond of a graph is a minimal nonempty edge cut, that is, a nonempty edge cut
none of whose nonempty proper subsets is an edge cut. The bonds of the graph
whose edge cuts are depicted in Figure 2.8 are shown in Figure 2.11.
The following two theorems illuminate the relationship between edge cuts and
bonds. The ﬁrst can be deduced from Proposition 2.11 (Exercise 2.5.1c). The
second provides a convenient way to check when an edge cut is in fact a bond.
Theorem 2.14 A set of edges of a graph is an edge cut if and only if it is a disjoint
union of bonds.

Theorem 2.15 In a connected graph G, a nonempty edge cut ∂(X) is a bond if
and only if both G[X] and G[V \ X] are connected.
Proof Suppose, ﬁrst, that ∂(X) is a bond, and let Y be a nonempty proper
subset of X. Because G is connected, both ∂(Y ) and ∂(X \ Y ) are nonempty. It
follows that E[Y, X \ Y ] is nonempty, for otherwise ∂(Y ) would be a nonempty
proper subset of ∂(X), contradicting the supposition that ∂(X) is a bond. We
conclude that G[X] is connected. Likewise, G[V \ X] is connected.
Conversely, suppose that ∂(X) is not a bond. Then there is a nonempty proper
subset Y of V such that X ∩ Y = ∅ and ∂(Y ) ⊂ ∂(X). But this implies (see
Figure 2.10) that E[X ∩ Y, X \ Y ] = E[Y \ X, X ∩ Y ] = ∅. Thus G[X] is not
connected if X \ Y = ∅. On the other hand, if X \ Y = ∅, then ∅ ⊂ Y \ X ⊂ V \ X,
and G[V \ X] is not connected.


Cuts in Directed Graphs
If X and Y are sets of vertices (not necessarily disjoint) of a digraph D = (V, A),
we denote the set of arcs of D whose tails lie in X and whose heads lie in Y
by A(X, Y ), and their number by a(X, Y ). This set of arcs is denoted by A(X)
when Y = X, and their number by a(X). When Y = V \ X, the set A(X, Y ) is
called the outcut of D associated with X, and denoted by ∂ + (X). Analogously,
the set A(Y, X) is called the incut of D associated with X, and denoted by ∂ − (X).
Observe that ∂ + (X) = ∂ − (V \ X). Note, also, that ∂(X) = ∂ + (X) ∪ ∂ − (X). In
u

u

u

u

v

v

v

v

x

y
∂(u)

x

y
∂(u, v)

x

y
∂(u, v, x)

Fig. 2.11. The bonds of a graph

x

y
∂(u, v, y)

2.5 Edge Cuts and Bonds

63

the case of loopless digraphs, we refer to |∂ + (X)| and |∂ − (X)| as the outdegree
and indegree of X, and denote these quantities by d+ (X) and d− (X), respectively.
A digraph D is called strongly connected or strong if ∂ + (X) = ∅ for every
nonempty proper subset X of V (and thus ∂ − (X) = ∅ for every nonempty proper
subset X of V , too).

Exercises
2.5.1
a) Prove Theorem 2.9.
b) Prove Proposition 2.13.
c) Deduce Theorem 2.14 from Proposition 2.11.
2.5.2 Let D be a digraph, and let X be a subset of V .

a) Show that |∂ + (X)| = v∈X d+ (v) − a(X).
b) Suppose that D is even. Using the Principle of Directional Duality, deduce
that |∂ + (X)| = |∂ − (X)|.
c) Deduce from (b) that every connected even digraph is strongly connected.
2.5.3 Let G be a graph, and let X and Y be subsets of V . Show that ∂(X ∪ Y ) 
∂(X ∩ Y ) = ∂(X  Y ).
2.5.4 Let G be a loopless graph, and let X and Y be subsets of V .
a) Show that:
d(X) + d(Y ) = d(X ∪ Y ) + d(X ∩ Y ) + 2e(X \ Y, Y \ X)
b) Deduce the following submodular inequality for degrees of sets of vertices.
d(X) + d(Y ) ≥ d(X ∪ Y ) + d(X ∩ Y )
c) State and prove a directed analogue of this submodular inequality.
2.5.5 An odd graph is one in which each vertex is of odd degree. Show that a
graph G is odd if and only if |∂(X)| ≡ |X| (mod 2) for every subset X of V .
2.5.6 Show that each arc of a strong digraph is contained in a directed cycle.
2.5.7 Directed Bond
A directed bond of a digraph is a bond ∂(X) such that ∂ − (X) = ∅ (in other words,
∂(X) is the outcut ∂ + (X)).
a) Show that an arc of a digraph is contained either in a directed cycle, or in a
directed bond, but not both.
(G.J. Minty)
b) Deduce that:
i) a digraph is acyclic if and only if every bond is a directed bond,

64

2 Subgraphs

ii) a digraph is strong if and only if no bond is a directed bond.
2.5.8 Feedback Arc Set
A feedback arc set of a digraph D is a set S of arcs such that D \ S is acyclic. Let S
be a minimal feedback arc set of a digraph D. Show that there is a linear ordering
of the vertices of D such that the arcs of S are precisely those arcs whose heads
precede their tails in the ordering.
————— —————

2.5.9 Let (D, w) be a weighted oriented graph. For v ∈ V , set w+ (v) := {w(a) :
a ∈ ∂ + (v)}. Suppose that w+ (v) ≥ 1 for all v ∈ V \ {y}, where y ∈ V . Show that
D contains a directed path of weight at least one, by proceeding as follows.
a) Consider an arc (x, y) ∈ ∂ − (y) of maximum weight. Contract this arc to a
vertex y  , delete all arcs with tail y  , and replace each pair {a, a } of multiple
arcs (with head y  ) by a single arc of weight w(a)+w(a ), all other arcs keeping
their original weights. Denote the resulting weighted digraph by (D , w ). Show
that if D contains a directed path of weight at least one, then so does D.
b) Deduce, by induction on V , that D contains a directed path of weight at least
one.
(B. Bollobás and A.D. Scott)

2.6 Even Subgraphs
By an even subgraph of a graph G we understand a spanning even subgraph of
G, or frequently just the edge set of such a subgraph. Observe that the ﬁrst two
subgraphs in Figure 2.4 are both even, as is their symmetric diﬀerence. Indeed, it
is an easy consequence of Proposition 2.13 that the symmetric diﬀerence of even
subgraphs is always even.
Corollary 2.16 The symmetric diﬀerence of two even subgraphs is an even subgraph.
Proof Let F1 and F2 be even subgraphs of a graph G, and let X be a subset of
V . By Proposition 2.13,
∂F1 F2 (X) = ∂F1 (X)  ∂F2 (X)
By Theorem 2.10, ∂F1 (X) and ∂F2 (X) are both of even cardinality, so their symmetric diﬀerence is too. Appealing again to Theorem 2.10, we deduce that F1  F2
is even.

As we show in Chapters 4 and 21, the even subgraphs of a graph play an important structural role. When discussing even subgraphs (and only in this context),
by a cycle we mean the edge set of a cycle. By the same token, we use the term
disjoint cycles to mean edge-disjoint cycles. With this convention, the cycles of a
graph are its minimal nonempty even subgraphs, and Theorem 2.7 may be restated
as follows.

2.6 Even Subgraphs

65

Theorem 2.17 A set of edges of a graph is an even subgraph if and only if it is a
disjoint union of cycles.


The Cycle and Bond Spaces
Even subgraphs and edge cuts are related in the following manner.
Proposition 2.18 In any graph, every even subgraph meets every edge cut in an
even number of edges.
Proof We ﬁrst show that every cycle meets every edge cut in an even number of
edges. Let C be a cycle and ∂(X) an edge cut. Each vertex of C is either in X or in
V \ X. As C is traversed, the number of times it crosses from X to V \ X must be
the same as the number of times it crosses from V \ X to X. Thus |E(C) ∩ ∂(X)|
is even.
By Theorem 2.17, every even subgraph is a disjoint union of cycles. It follows
that every even subgraph meets every edge cut in an even number of edges.

We denote the set of all subsets of the edge set E of a graph G by E(G).
This set forms a vector space of dimension m over GF (2) under the operation of
symmetric diﬀerence. We call E(G) the edge space of G. With each subset X of E,
we may associate its incidence vector fX , where fX (e) = 1 if e ∈ X and fX (e) = 0
if e ∈
/ X. The function which maps X to fX for all X ⊆ E is an isomorphism from
E to (GF (2))E (Exercise 2.6.2).
By Corollary 2.16, the set of all even subgraphs of a graph G forms a subspace
C(G) of the edge space of G. We call this subspace the cycle space of G, because it
is generated by the cycles of G. Likewise, by Corollary 2.12, the set of all edge cuts
of G forms a subspace B(G) of E(G), called the bond space (Exercise 2.6.4a,b).
Proposition 2.18 implies that these two subspaces are orthogonal. They are, in
fact, orthogonal complements (Exercise 2.6.4c).
In Chapter 20, we extend the above concepts to arbitrary ﬁelds, in particular
to the ﬁeld of real numbers.

Exercises
2.6.1 Show that:
a) a graph G is even if and only if E is an even subgraph of G,
b) a graph G is bipartite if and only if E is an edge cut of G.
2.6.2 Show that the edge space E(G) is a vector space over GF (2) with respect
to the operation of symmetric diﬀerence, and that it is isomorphic to (GF (2))E .
2.6.3
a) Draw all the elements of the cycle and bond spaces of the wheel W4 .

66

2 Subgraphs

b) How many elements are there in each of these two vector spaces?
2.6.4 Show that:
a) the cycles of a graph generate its cycle space,
b) the bonds of a graph generate its bond space,
c) the bond space of a graph G is the row space of its incidence matrix M over
GF (2), and the cycle space of G is its orthogonal complement.
2.6.5 How many elements are there in the cycle and bond spaces of a graph G?
————— —————
2.6.6 Show that every graph G has an edge cut [X, Y ] such that G[X] and G[Y ]
are even.

2.7 Graph Reconstruction
Two graphs G and H on the same vertex set V are called hypomorphic if, for
all v ∈ V , their vertex-deleted subgraphs G − v and H − v are isomorphic. Does
this imply that G and H are themselves isomorphic? Not necessarily: the graphs
2K1 and K2 , though not isomorphic, are clearly hypomorphic. However, these two
graphs are the only known nonisomorphic pair of hypomorphic simple graphs, and
it was conjectured in 1941 by Kelly (1942) (see also Ulam (1960)) that there are
no other such pairs. This conjecture was reformulated by Harary (1964) in the
more intuitive language of reconstruction. A reconstruction of a graph G is any

Fig. 2.12. The deck of a graph on six vertices

graph that is hypomorphic to G. We say that a graph G is reconstructible if every
reconstruction of G is isomorphic to G, in other words, if G can be ‘reconstructed’
up to isomorphism from its vertex-deleted subgraphs. Informally, one may think
of the (unlabelled) vertex-deleted subgraphs as being presented on cards, one per
card. The problem of reconstructing a graph is then that of determining the graph
from its deck of cards. The reader is invited to reconstruct the graph whose deck
of six cards is shown in Figure 2.12.

2.7 Graph Reconstruction

67

The Reconstruction Conjecture
Conjecture 2.19 Every simple graph on at least three vertices is reconstructible.

The Reconstruction Conjecture has been veriﬁed by computer for all graphs on up
to ten vertices by McKay (1977). In discussing it, we implicitly assume that our
graphs have at least three vertices.
One approach to the Reconstruction Conjecture is to show that it holds for
various classes of graphs. A class of graphs is reconstructible if every member
of the class is reconstructible. For instance, regular graphs are easily shown to
be reconstructible (Exercise 2.7.5). One can also prove that disconnected graphs
are reconstructible (Exercise 2.7.11). Another approach is to prove that speciﬁc
parameters are reconstructible. We call a graphical parameter reconstructible if
the parameter takes the same value on all reconstructions of G. A fundamental
result of this type was obtained by Kelly (1957). For graphs
F and G, we adopt
 
to
denote the number
the notation of Lauri and Scapellato (2003) and use G
 F
of copies of F in G. For instance, if F = K2 , then G
=
e(G),
if F = G, then
F
G 
 G
F = 1, and if v(F ) > v(G), then F = 0.
Lemma 2.20 Kelly’s Lemma
 
For any two graphs F and G such that v(F ) < v(G), the parameter G
F is reconstructible.
Proof Each copy of F in G occurs in exactly v(G) − v(F ) of the vertex-deleted
subgraphs G − v (namely, whenever the vertex v is not present in the copy).
Therefore
 
 G − v 
1
G
=
F
v(G) − v(F )
F
v∈V

Since the right-hand side of this identity is reconstructible, so too is the left-hand
side.

Corollary 2.21 For any two graphs F and G such that v(F ) < v(G), the number of subgraphs of G that are isomorphic to F and include a given vertex v is
reconstructible.
  G−v
Proof This number is G
, which is reconstructible by Kelly’s Lemma.
F −
F

Corollary 2.22 The size and the degree sequence are reconstructible parameters.

68

2 Subgraphs

Proof Take F = K2 in Kelly’s Lemma and Corollary 2.21, respectively.



An edge analogue of the Reconstruction Conjecture was proposed by Harary
(1964). A graph is edge-reconstructible if it can be reconstructed up to isomorphism
from its edge-deleted subgraphs.

The Edge Reconstruction Conjecture
Conjecture 2.23 Every simple graph on at least four edges is edgereconstructible.

Note that the bound on the number of edges is needed on account of certain
small counterexamples (see Exercise 2.7.2). The notions of edge reconstructibility
of classes of graphs and of graph parameters are deﬁned in an analogous manner
to those of reconstructibility, and there is an edge version of Kelly’s Lemma, whose
proof we leave as an exercise (Exercise 2.7.13a).
Lemma 2.24 Kelly’s Lemma: edge version
 
For any two graphs F and G such that e(F ) < e(G), the parameter G
F is edge
reconstructible.

Because edge-deleted subgraphs are much closer to the original graph than are
vertex-deleted subgraphs, it is intuitively clear (but not totally straightforward
to prove) that the Edge Reconstruction Conjecture is no harder than the Reconstruction Conjecture (Exercise 2.7.14). Indeed, a number of approaches have been
developed which are eﬀective for edge reconstruction, but not for vertex reconstruction. We describe below one of these approaches, Möbius Inversion.

Proof Technique: Möbius Inversion
We discussed earlier the proof technique of counting in two ways. Here, we
present a more subtle counting technique, that of Möbius Inversion. This is a
generalization of the Inclusion-Exclusion Formula, a formula which expresses
the cardinality of the union of a family of sets {Ai : i ∈ T } in terms of the
cardinalities of intersections of these sets:

(−1)|X|−1 | ∩i∈X Ai |
(2.3)
| ∪i∈T Ai | =
∅⊂X⊆T

the case of two sets being the formula |A ∪ B| = |A| + |B| − |A ∩ B|.

2.7 Graph Reconstruction

69

Möbius Inversion (continued)
Theorem 2.25 The Möbius Inversion Formula
Let f : 2T → R be a real-valued function deﬁned on the subsets of a ﬁnite set
T . Deﬁne the function g : 2T → R by

g(S) :=
f (X)
(2.4)
S⊆X⊆T

Then, for all S ⊆ T ,


f (S) =

(−1)|X|−|S| g(X)

(2.5)

S⊆X⊆T

Remark. Observe that (2.4) is a linear transformation of the vector space
of real-valued functions deﬁned on 2T . The Möbius Inversion Formula (2.5)
simply speciﬁes the inverse of this transformation.
Proof By the Binomial Theorem,




|Y | − |S|
|X|−|S|
(−1)|X|−|S| = (1 − 1)|Y |−|S|
(−1)
=
|X| − |S|
|S|≤|X|≤|Y |

S⊆X⊆Y

which is equal to 0 if S ⊂ Y , and to 1 if S = Y . Therefore,


f (S) =
f (Y )
(−1)|X|−|S|
S⊆Y ⊆T

=



S⊆X⊆T

S⊆X⊆Y
|X|−|S|

(−1)



X⊆Y ⊆T

f (Y ) =



(−1)|X|−|S| g(X)



S⊆X⊆T

We now show how the Möbius Inversion Formula can be applied to the problem of edge reconstruction. This highly eﬀective approach was introduced by
Lovász (1972c) and reﬁned successively by Müller (1977) and Nash-Williams
(1978).
The idea is to count the mappings between two simple graphs G and H on the
same vertex set V according to the intersection of the image of G with H. Each
such mapping is determined by a permutation σ of V , which one extends to
G = (V, E) by setting σ(G) := (V, σ(E)), where σ(E) := {σ(u)σ(v) : uv ∈ E}.
For each spanning subgraph F of G, we consider the permutations of G which
map the edges of F onto edges of H and the remaining edges of G onto edges
of H. We denote their number by |G → H|F , that is:
|G → H|F := |{σ ∈ Sn : σ(G) ∩ H = σ(F )}|

70

2 Subgraphs

Möbius Inversion (continued)
In particular, if F = G, then |G → H|F is simply the number of embeddings
of G in H, which we denote for brevity by |G → H|, and if F is empty,
|G → H|F is the number of embeddings of G in the complement of H; that
is, |G → H|. These concepts are illustrated in Figure 2.13 for all spanning
subgraphs F of G when G = K1 + K1,2 and H = 2K2 . Observe that, for any
subgraph F of G,

|G → H|X = |F → H|
(2.6)
F ⊆X⊆G

and that

 
H
|F → H| = aut(F )
F

(2.7)

where aut(F ) denotes the number of automorphisms of F , because the subgraph F of G can be mapped onto each copy of F in H in aut(F ) distinct
ways.
Lemma 2.26 Nash-Williams’ Lemma
Let G be a graph, F a spanning subgraph of G, and H an edge reconstruction
of G that is not isomorphic to G. Then
|G → G|F − |G → H|F = (−1)e(G)−e(F ) aut(G)

(2.8)

Proof By (2.6) and (2.7),


|G → H|X = aut(F )

F ⊆X⊆G

 
H
F

We invert this identity by applying the Möbius Inversion Formula (identifying
each spanning subgraph of G with its edge set), to obtain:
 

H
(−1)e(X)−e(F ) aut(X)
|G → H|F =
X
F ⊆X⊆G

Therefore,
|G → G|F − |G → H|F =


F ⊆X⊆G

(−1)e(X)−e(F ) aut(X)

   
H
G
−
X
X

G
H 
Because H is an edge reconstruction of G, we have X
= X
for every
proper spanning subgraph
X
of
G,
by
the
edge
version
of
Kelly’s
Lemma

H 
∼
 G. 
(2.24). Finally, G
G = 1, whereas G = 0 since e(H) = e(G) and H =

2.7 Graph Reconstruction

G

F

|G → G|F

10

6

6

2

|G → H|F

8

8

8

0

H

Fig. 2.13. Counting mappings

Möbius Inversion (continued)
Theorem 2.27 A graph G is edge reconstructible if there exists a spanning
subgraph F of G such that either of the following two conditions holds.
(i) |G → H|F takes the same value for all edge reconstructions H of G,
(ii) |F → G| < 2e(G)−e(F )−1 aut(G).
Proof Let H be an edge reconstruction of G. If condition (i) holds, the
left-hand side of (2.8) is zero whereas the right-hand side is nonzero. The
inequality of condition (ii) is equivalent, by (2.6), to the inequality

|G → G|X < 2e(G)−e(F )−1 aut(G)
F ⊆X⊆G

But this implies that |G → G|X < aut(G) for some spanning subgraph X of
G such that e(G) − e(X) is even, and identity (2.8) is again violated (with
F := X). Thus, in both cases, Nash-Williams’ Lemma implies that H is
isomorphic to G.

Choosing F as the empty graph in Theorem 2.27 yields two suﬃcient conditions for the edge reconstructibility of a graph in terms of its edge density,
due to Lovász (1972) and Müller (1977), respectively (Exercise 2.7.8).
 
Corollary 2.28 A graph G is edge reconstructible if either m > 12 n2 or
2m−1 > n!

Two other applications of the Möbius Inversion Formula to graph theory
are given in Exercises 2.7.17 and 14.7.12. For further examples, see Whitney
(1932b). Theorem 2.25 was extended by Rota (1964) to the more general
context of partially ordered sets.

71

72

2 Subgraphs

It is natural to formulate corresponding conjectures for digraphs (see Harary
(1964)). Tools such as Kelly’s Lemma apply to digraphs as well, and one might be
led to believe that the story is much the same here as for undirected graphs. Most
surprisingly, this is not so. Several inﬁnite families of nonreconstructible digraphs,
and even nonreconstructible tournaments, were constructed by Stockmeyer (1981)
(see Exercise 2.7.18). One such pair is shown in Figure 2.14. We leave its veriﬁcation
to the reader (Exercise 2.7.9).
0

0

4

1

3

2

4

1

3

2

Fig. 2.14. A pair of nonreconstructible tournaments

We remark that there also exist inﬁnite families of nonreconstructible hypergraphs (see Exercise 2.7.10 and Kocay (1987)) and nonreconstructible inﬁnite
graphs (see Exercise 4.2.10). Further information on graph reconstruction can be
found in the survey articles by Babai (1995), Bondy (1991), and Ellingham (1988),
and in the book by Lauri and Scapellato (2003).

Exercises
2.7.1 Find two nonisomorphic graphs on six vertices whose decks both include the
ﬁrst ﬁve cards displayed in Figure 2.12.
(P.K. Stockmeyer)
2.7.2 Find a pair of simple graphs on two edges, and also a pair of simple graphs
on three edges, which are not edge reconstructible.
2.7.3 Two dissimilar vertices u and v of a graph G are called pseudosimilar if the
vertex-deleted subgraphs G − u and G − v are isomorphic.
a) Find a pair of pseudosimilar vertices in the graph of Figure 2.15.
b) Construct a tree with a pair of pseudosimilar vertices.
(F. Harary and E.M. Palmer)
2.7.4 A class G of graphs is recognizable if, for each graph G ∈ G, every reconstruction of G also belongs to G. The class G is weakly reconstructible if, for each graph
G ∈ G, every reconstruction of G that belongs to G is isomorphic to G. Show that
a class of graphs is reconstructible if and only if it is both recognizable and weakly
reconstructible.

2.7 Graph Reconstruction

73

Fig. 2.15. A graph containing a pair of pseudosimilar vertices (Exercise 2.7.3)

2.7.5
a) Show that regular graphs are both recognizable and weakly reconstructible.
b) Deduce that this class of graphs is reconstructible.
2.7.6
a) Let G be a connected graph on at least two vertices, and let P be a maximal
path in G, starting at x and ending at y. Show that G − x and G − y are
connected.
b) Deduce that a graph on at least three vertices is connected if and only if at
least two vertex-deleted subgraphs are connected.
c) Conclude that the class of disconnected graphs is recognizable.
2.7.7 Verify identity (2.6) for the graphs G and H of Figure 2.13, and for all
spanning subgraphs F of G.
2.7.8 Deduce Corollary 2.28 from Theorem 2.27.
2.7.9 Show that the two tournaments displayed in Figure 2.14 form a pair of
nonreconstructible tournaments.
(P.K. Stockmeyer)
2.7.10 Consider the hypergraphs G and H with vertex set V := {1, 2, 3, 4, 5} and
respective edge sets
F(G) := {123, 125, 135, 234, 345}

and

F (H) := {123, 135, 145, 234, 235}

Show that (G, H) is a nonreconstructible pair.
————— —————
2.7.11 Let G be a graph, and let F := (F1 , F2 , . . . , Fk ) be a sequence of graphs
(not necessarily distinct). A covering of G by F is a sequence (G1 , G2 , . . . , Gk ) of
subgraphs of G such that Gi ∼
= Fi , 1 ≤ i ≤ k, and ∪ki=1 Gi = G. We denote the
number of coverings of G by F by c(F , G). For example, if F := (K2 , K1,2 ), the
coverings of G by F for each graph G such that c(F , G) > 0 are as indicated in
Figure 2.16 (where the edge of K2 is shown as a dotted line).
a) Show that, for any graph G and any sequence F := (F1 , F2 , . . . , Fk ) of graphs
such that v(Fi ) < v(G), 1 ≤ i ≤ k, the parameter
 

G
c(F, X)
X
X

is reconstructible, where the sum extends over all unlabelled graphs X such
that v(X) = v(G).
(W.L. Kocay)

74

2 Subgraphs

b) Applying Exercise 2.7.11a to all families F := (F1 , F2 , . . . , Fk ) such that
k
i=1 v(Fi ) = v(G), deduce that the class of disconnected graphs is weakly
reconstructible.
c) Applying Exercise 2.7.6c, conclude that this class is reconstructible.
(P.J.Kelly)
2.7.12 Let G and H be two graphs on the same vertex set V , where |V | ≥ 4.
Suppose that G − {x, y} ∼
= H − {x, y} for all x, y ∈ V . Show that G ∼
= H.
2.7.13
a) Prove the edge version of Kelly’s Lemma (Lemma 2.24).
b) Using the edge version of Kelly’s Lemma, show that the number of isolated
vertices is edge reconstructible.
c) Deduce that the Edge Reconstruction Conjecture is valid for all graphs provided that it is valid for all graphs without isolated vertices.
2.7.14
a) By applying Exercise 2.7.11a, show that the (vertex) deck of any graph without
isolated vertices is edge reconstructible.
b) Deduce from Exercise 2.7.13c that the Edge Reconstruction Conjecture is true
if the Reconstruction Conjecture is true.
(D.L. Greenwell)

G

Coverings of G by F = (K1 , K1,2 )

c(F, G)
2

3

2

3

1

Fig. 2.16. Covering a graph by a sequence of graphs (Exercise 2.7.11)

2.7 Graph Reconstruction

75

2.7.15 Let {Ai : i ∈ T } be a family of sets. For S ⊆ T , deﬁne f (S) := |(∩i∈S Ai ) \
(∪i∈T \S Ai )| and g(S) := | ∩i∈S Ai |, where, by convention, ∩i∈∅ Ai = ∪i∈T Ai .

a) Show that g(S) = S⊆X⊆T f (X).
b) Deduce from the Möbius Inversion Formula (2.5) that

(−1)|X| | ∩i∈X Ai | = 0.
∅⊆X⊆T

c) Show that this identity is equivalent to the Inclusion–Exclusion Formula (2.3).
2.7.16 Use the Binomial Theorem to establish the Inclusion-Exclusion Formula
(2.3) directly, without appealing to Möbius Inversion.
2.7.17 Consider the lower-triangular matrix An whose rows and columns are indexed by the isomorphism types of the graphs
on n vertices, listed in increasing

.
order of size, and whose (X, Y ) entry is X
Y
a) Compute A3 and A4 .
 
b) For k ∈ Z, show that the (X, Y ) entry of (An )k is k e(X)−e(Y ) X
Y .
(X. Buchwalder)
2.7.18 Consider the Stockmeyer tournament STn , deﬁned in Exercise 1.5.11.
a) Show that each vertex-deleted subgraph of STn is self-converse.
b) Denote by odd(STn ) and even(STn ) the subtournaments of STn induced by its
odd and even vertices, respectively. For n ≥ 1, show that odd(STn ) ∼
=
= STn−1 ∼
even(STn ).
c) Deduce, by induction on n, that STn −k ∼
= STn −(2n −k+1) for all k ∈ V (STn ).
(W. Kocay)
d) Consider the following two tournaments obtained from STn by adding a new
vertex 0. In one of these tournaments, 0 dominates the odd vertices and is
dominated by the even vertices; in the other, 0 dominates the even vertices
and is dominated by the odd vertices. Show that these two tournaments on
2n + 1 vertices form a pair of nonreconstructible digraphs.
(P.K. Stockmeyer)
2.7.19 To switch a vertex of a simple graph is to exchange its sets of neighbours
and non-neighbours. The graph so obtained is called a switching of the graph. The
collection of switchings of a graph G is called the (switching) deck of G. A graph
is switching-reconstructible if every graph with the same deck as G is isomorphic
to G.
a) Find four pairs of graphs on four vertices which are not switching-reconstruct
-ible.
b) Let G be a graph with n odd. Consider the collection G consisting of the n2
graphs in the decks of the graphs which comprise the deck of G.
i) Show that G is the only graph which occurs an odd number of times in G.
ii) Deduce that G is switching-reconstructible.
c) Let G be a graph with n ≡ 2 (mod 4). Show that G is switching-reconstructible.
(R.P. Stanley; N. Alon)

76

2 Subgraphs

2.8 Related Reading
Path and Cycle Decompositions
Veblen’s Theorem (2.7) tells us that every even graph can be decomposed into
cycles, but it says nothing about the number of cycles in the decomposition. One
may ask how many or how few cycles there can be in a cycle decomposition of
a given even graph. These questions are not too hard to answer in special cases,
such as when the graph is complete (see Exercises 2.4.4 and 2.4.5a). Some forty
years ago, G. Hajós conjectured that every simple even graph on n vertices admits a
decomposition into at most (n−1)/2 cycles (see Lovász (1968b)). Surprisingly little
progress has been made on this simply stated problem. An analogous conjecture
on path decompositions was proposed by T. Gallai at about the same time (see
Lovász (1968b)), namely that every simple connected graph on n vertices admits a
decomposition into at most (n + 1)/2 paths. This bound is sharp if all the degrees
are odd, because in any path decomposition each vertex must be an end of at least
one path. Lovász (1968b) established the truth of Gallai’s conjecture in this case
(see also Donald (1980)).
Legitimate Decks
In the Reconstruction Conjecture (2.19), the deck of vertex-deleted subgraphs of
a graph is supplied, the goal being to determine the graph. A natural problem,
arguably even more fundamental, is to characterize such decks. A family G :=
{G1 , G2 , . . . , Gn } of n graphs, each of order n − 1, is called a legitimate deck if
there is at least one graph G with vertex set {v1 , v2 , . . . , vn } such that Gi ∼
= G−vi ,
1 ≤ i ≤ n. The Legitimate Deck Problem asks for a characterization of legitimate
decks. This problem was raised by Harary (1964). It was shown by Harary et al.
(1982) and Mansﬁeld (1982) that the problem of recognizing whether a deck is
legitimate is as hard (in a sense to be discussed in Chapter 8) as that of deciding
whether two graphs are isomorphic.
The various counting arguments deployed to attack the Reconstruction Conjecture provide natural necessary conditions for legitimacy. For instance, the
proof
Lemma (2.20) tells us that if G is the deck of a graph G, then
G of
Kelly’s
n  Gi 
=
/(n
− v(F )) for every graph F on fewer than n vertices. Because
i=1 F
F
n  
the left-hand side is an integer, i=1 GFi must be a multiple of n − v(F ). It is
not hard to come up with an illegitimate deck which passes this test. Indeed, next
to nothing is known on the Legitimate Deck Problem. A more
 general problem
would be to characterize, for a ﬁxed integer k, the vectors ( G
F : v(F ) = k), where
G ranges over all graphs on n vertices. Although trivial for k = 2, the problem
is unsolved already for k = 3 and appears to be very hard. Even determining the
minimum number of triangles in a graph on n vertices with a speciﬁed number
of edges is a major challenge (see Razborov (2006), where a complex asymptotic
formula, derived by highly nontrivial methods, is given).

2.8 Related Reading

77

Ultrahomogeneous Graphs
A simple graph is said to be k-ultrahomogeneous if any isomorphism between two
of its isomorphic induced subgraphs on k or fewer vertices can be extended to
an automorphism of the entire graph. It follows directly from the deﬁnition that
every graph is 0-ultrahomogeneous, that 1-ultrahomogeneous graphs are the same
as vertex-transitive graphs, and that complements of k-ultrahomogeneous graphs
are k-ultrahomogeneous.
Cameron (1980) showed that any graph which is 5-ultrahomogeneous is kultrahomogeneous for all k. Thus it is of interest to classify the k-ultrahomogeneous
graphs for 1 ≤ k ≤ 5. The 5-ultrahomogeneous graphs were completely described
by Gardiner (1976). They are the self-complementary graphs C5 and L(K3,3 ), and
the Turán graphs Tk,rk , for all k ≥ 1 and r ≥ 1, as well as their complements.
These graphs all have rather simple structures. There is, however, a remarkable
4-ultrahomogeneous graph. It arises from a very special geometric conﬁguration,
discovered by Schläﬂi (1858), consisting of twenty-seven lines on a cubic surface,
and is known as the Schläﬂi graph. Here is a description due to Chudnovsky and
Seymour (2005).
The vertex set of the graph is Z33 , two distinct vertices (a, b, c) and (a , b , c )
being joined by an edge if a = a and either b = b or c = c, or if a = a + 1 and
b = c. This construction results in a 16-regular graph on twenty-seven vertices.
The subgraph induced by the sixteen neighbours of a vertex of the Schläﬂi graph
is isomorphic to the complement of the Clebsch graph, shown in Figure 12.9. In
turn, the subgraph induced by the neighbour set of a vertex of the complement of
the Clebsch graph is isomorphic to the complement of the Petersen graph. Thus,
one may conclude that the Clebsch graph is 3-ultrahomogeneous and that the
Petersen graph is 2-ultrahomogeneous. By employing the classiﬁcation theorem
for ﬁnite simple groups, Buczak (1980) showed that the the Schläﬂi graph and its
complement are the only two graphs which are 4-ultrahomogeneous without being
5-ultrahomogeneous.
The notion of ultrahomogeneity may be extended to inﬁnite graphs. The countable random graph G described in Exercise 13.2.18 has the property that if F and
F  are isomorphic induced subgraphs of G, then any isomorphism between F and
F  can be extended to an automorphism of G. Further information about ultrahomogeneous graphs may be found in Cameron (1983) and Devillers (2002).

3
Connected Graphs

Contents
3.1 Walks and Connection . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Walks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Connection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Proof Technique: Eigenvalues . . . . . . . . . . . . . . . . . . . . . . .
3.2 Cut Edges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.3 Euler Tours . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Fleury’s Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.4 Connection in Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.5 Cycle Double Covers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
The Cycle Double Cover Conjecture . . . . . . . . . . . . . . . .
The Circular Embedding Conjecture . . . . . . . . . . . . . . . .
Double Covers by Even Subgraphs . . . . . . . . . . . . . . . . . . .
3.6 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Cages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

79
79
80
81
85
86
86
90
93
94
95
95
98
98

3.1 Walks and Connection
Walks
In Section 1.1, the notion of connectedness was deﬁned in terms of edge cuts. Here,
we give an alternative deﬁnition based on the notion of a walk in a graph.
A walk in a graph G is a sequence W := v0 e1 v1 . . . v−1 e v , whose terms are
alternately vertices and edges of G (not necessarily distinct), such that vi−1 and
vi are the ends of ei , 1 ≤ i ≤ . (We regard loops as giving rise to distinct walks
with the same sequence, because they may be traversed in either sense. Thus if e
is a loop incident with a vertex v, we count the walk vev not just once, but twice.)
If v0 = x and v = y, we say that W connects x to y and refer to W as an xy-walk.
The vertices x and y are called the ends of the walk, x being its initial vertex and

80

3 Connected Graphs

y its terminal vertex; the vertices v1 , . . . ,v−1 are its internal vertices. The integer
(the number of edge terms) is the length of W . An x-walk is a walk with initial
vertex x. If u and v are two vertices of a walk W , where u precedes v on W , the
subsequence of W starting with u and ending with v is denoted by uW v and called
the segment of W from u to v. The notation uW v is also used simply to signify a
uv-walk W .
In a simple graph, a walk v0 e1 v1 . . . v−1 e v is determined, and is commonly
speciﬁed, by the sequence v0 v1 . . . v of its vertices. Indeed, even if a graph is not
simple, we frequently refer to a sequence of vertices in which consecutive terms
are adjacent vertices as a ‘walk’. In such cases, it should be understood that the
discussion is valid for any walk with that vertex sequence. This convention is
especially useful in discussing paths, which may be viewed as walks whose vertices
(and edges) are distinct.
A walk in a graph is closed if its initial and terminal vertices are identical, and
is a trail if all its edge terms are distinct. A closed trail of positive length whose
initial and internal vertices are distinct is simply the sequence of vertices and edges
of a cycle. Reciprocally, with any cycle one may associate a closed trail whose terms
are just the vertices and edges of the cycle. Even though this correspondence is
not one-to-one (the trail may start and end at any vertex of the cycle, and traverse
it in either sense), we often specify a cycle by describing an associated closed trail
and refer to that trail as the cycle itself.
Connection
Connectedness of pairs of vertices in a graph G is an equivalence relation on V .
Clearly, each vertex x is connected to itself by the trivial walk W := x; also, if
x is connected to y by a walk W , then y is connected to x by the walk obtained
on reversing the sequence W ; ﬁnally, for any three vertices, x, y, and z of G,
if xW y and yW  z are walks, the sequence xW yW  z, obtained by concatenating
W and W  at y, is a walk; thus, if x is connected to y and y is connected to z,
then x is connected to z. The equivalence classes determined by this relation of
connectedness are simply the vertex sets of the components of G (Exercise 3.1.3).
If there is an xy-walk in a graph G, then there is also an xy-path (Exercise 3.1.1). The length of a shortest such path is called the distance between x and
y and denoted dG (x, y). If there is no path connecting x and y (that is, if x and y
lie in distinct components of G), we set dG (x, y) := ∞.
We may extend the notion of an xy-path to paths connecting subsets X and
Y of V . An (X, Y )-path is a path which starts at a vertex of X, ends at a vertex
of Y , and whose internal vertices belong to neither X nor Y ; if F1 and F2 are
subgraphs of a graph G, we write (F1 , F2 )-path instead of (V (F1 ), V (F2 ))-path. A
useful property of connected graphs is that any two nonempty sets of vertices (or
subgraphs) are connected by such a path (Exercise 3.1.4).

3.1 Walks and Connection

Proof Technique: Eigenvalues
We saw in Chapter 2 how certain problems can be solved by making use of
arguments involving linear independence. Another powerful linear algebraic
tool involves the computation of eigenvalues of appropriate matrices. Although this technique is suitable only for certain rather special problems, it
is remarkably eﬀective when applicable. Here is an illustration.
A friendship graph is a simple graph in which any two vertices have exactly
one common neighbour. By using a clever mixture of graph-theoretical and
eigenvalue arguments, Erdős et al. (1966) proved that all friendship graphs
have a very simple structure.
Theorem 3.1 The Friendship Theorem
Let G be a simple graph in which any two vertices (people) have exactly one
common neighbour (friend). Then G has a vertex of degree n − 1 (a politician,
everyone’s friend).
Proof Suppose the theorem false, and let G be a friendship graph with
∆ < n − 1. Let us show ﬁrst of all that G is regular. Consider two nonadjacent vertices x and y, where, without loss of generality, d(x) ≥ d(y). By
assumption, x and y have exactly one common neighbour, z. For each neighbour v of x other than z, denote by f (v) the common neighbour of v and
y. Then f is a one-to-one mapping from N (x) \ {z} to N (y) \ {z}. Because
|N (x)| = d(x) ≥ d(y) = |N (y)|, we conclude that f is a bijection and hence
that d(x) = d(y). Thus any two nonadjacent vertices of G have the same
degree; equivalently, any two adjacent vertices of G have the same degree.
In order to prove that G is regular, it therefore suﬃces to show that G is connected. But G has no singleton component, because δ(G) = n − 1 − ∆(G) > 0,
and cannot have two components of order two or more, because G would then
contain a 4-cycle, thus two vertices with two common neighbours. Therefore
G is k-regular for some positive integer k.Moreover,
by counting the number
 
of 2-paths in G in two ways, we have n k2 = n2 ; that is, n = k 2 − k + 1.
Let A be the adjacency matrix of G. Then (Exercise 3.1.2) A2 = J + (k − 1)I,
where J is the n × n matrix all of whose entries are 1, and I is the n × n
identity matrix. Because the eigenvalues of J are 0, with multiplicity n − 1,
and n, with multiplicity 1, the eigenvalues of A2 are k − 1, with multiplicity
n − 1, and n √
+ k − 1 = k 2 , with multiplicity 1. The graph G therefore has
eigenvalues ± k − 1, with total multiplicity n − 1, and k, with multiplicity 1
(see Exercise 1.1.22a).
Because
G is simple, the sum of its eigenvalues, the trace of A, is zero. Thus
√
t k − 1 = k for some integer t. But this implies that k = 2 and n = 3,
contradicting the assumption that ∆ < n − 1.

Further applications of eigenvalues are outlined in Exercises 3.1.11 and 3.1.12.

81

82

3 Connected Graphs

The above notions apply equally to digraphs. If W := v0 a1 v1 . . . v−1 a v is a
walk in a digraph, an arc ai of W is a forward arc if vi−1 is the tail of ai and vi
is its head, and a reverse arc if vi is the tail of ai and vi−1 its head. The sets of
forward and reverse arcs of W are denoted by W + and W − , respectively. Walks in
which all arcs are forward arcs, called directed walks, are discussed in Section 3.4.
Connectedness plays an essential role in applications of graph theory. For example, the graph representing a communications network needs to be connected
for communication to be possible between all vertices. Connectedness also plays a
basic role in theoretical considerations. For instance, in developing an algorithm
to determine whether a given graph is planar, we may restrict our attention to
connected graphs, because a graph is planar if and only if each of its components
is planar.

Exercises
3.1.1 If there is an xy-walk in a graph G, show that there is also an xy-path in G.
3.1.2 Let G be a graph with vertex set V and adjacency matrix A = (auv ). Show
that the number of uv-walks of length k in G is the (u, v) entry of Ak .
3.1.3 Show that the equivalence classes determined by the relation of connectedness between vertices are precisely the vertex sets of the components of the
graph.
3.1.4 Show that a graph G is connected if and only if there is an (X, Y )-path in
G for any two nonempty subsets X and Y of V .
3.1.5 Show that, in any graph G, the distance function satisﬁes the triangle inequality: for any three vertices x, y, and z, d(x, y) + d(y, z) ≥ d(x, z).
3.1.6 Power of a Graph
The kth power of a simple graph G = (V, E) is the graph Gk whose vertex set is
V , two distinct vertices being adjacent in Gk if and only if their distance in G is
at most k. The graph G2 is referred to as the square of G, the graph G3 as the
cube of G. Consider Pnk , the kth power of a path on n vertices, where n > k 2 + k.
Show that:
a) d(Pnk ) > 2k − 1,
b) δ(F ) ≤ k for every induced subgraph F of Pnk .
3.1.7 Diameter
The diameter of a graph G is the greatest distance between two vertices of G.
a) Let G be a simple graph of diameter greater than three. Show that G has
diameter less than three.
b) Deduce that every self-complementary graph has diameter at most three.

3.1 Walks and Connection

83

c) For k = 0, 1, 2, 3, give an example of a self-complementary graph of diameter
k, if there is one.
3.1.8 Show that if G is a simple graph of diameter two with ∆ = n − 2, then
m ≥ 2n − 4.
3.1.9 Show that the incidence graph of a ﬁnite projective plane has diameter three.
3.1.10 If the girth of a graph is at least 2k, show that its diameter is at least k.
————— —————
3.1.11
a) Let G1 and G2 be edge-disjoint copies of the Petersen graph on the same vertex
set. Show that 2 is an eigenvalue of G1 ∪ G2 by proceeding as follows.
i) Observe that 1 is an eigenvector of both G1 and G2 corresponding to the
eigenvalue 3.
ii) Let S1 and S2 denote the eigenspaces of G1 and G2 , respectively, corresponding to the eigenvalue 1. (Since 1 is an eigenvalue of the Petersen
graph with multiplicity ﬁve, S1 and S2 are 5-dimensional subspaces of
R10 .) Using the fact that 1 is orthogonal to both S1 and S2 , show that the
dimension of S1 ∩ S2 is at least one.
iii) Noting that AG1 ∪G2 = AG1 +AG2 , show that any nonzero vector in S1 ∩S2
is an eigenvector of G1 ∪ G2 corresponding to the eigenvalue 2.
b) Appealing now to Exercises 1.3.2 and 1.3.11, conclude that K10 cannot be
decomposed into three copies of the Petersen graph.
(A.J. Schwenk)
3.1.12 Moore Graph
A Moore graph of diameter d is a regular graph of diameter d and girth 2d + 1.
Consider a k-regular Moore graph G of diameter two.
a) Show that n = k 2 + 1.
b) Let A be the adjacency matrix of G and tr(A) its trace.
i) Show that tr(A) = 0.
ii) Evaluate the matrix A2 +A, determine its eigenvalues and their multiplicities, and deduce the possible eigenvalues of A (but not their multiplicities).
iii) Expressing tr(A) in terms of the eigenvalues of A and their multiplicities,
and noting that these multiplicities are necessarily integers, conclude that
such a graph G can exist only if k = 2, 3, 7, or 57.
(A.J. Hoffman and R.R. Singleton)
c) Find such a graph G for k = 2 and k = 3.
(A 7-regular example, the Hoﬀman–Singleton graph, discovered by Hoﬀman
and Singleton (1960), is depicted in Figure 3.1; vertex i of Pj is joined to
vertex i + jk (mod 5) of Qk . A 57-regular example would have 3250 vertices.
No such graph is known.)

84

3 Connected Graphs
0

4
P0

3

0

4
P1

1 3

0

4
P2

1 3

0

4
P3

1 3

0

4
P4

1 3

1

2

2

2

2

1

1
0 2

Q0
3

4

1
0 2

Q1
3

4

0 2

Q2
3

4

2

2

1

1
0 2

Q3
3

4

0

Q4
3

4

Fig. 3.1. The Hoﬀman–Singleton graph

3.1.13 Cage
A k-regular graph of girth g with the least possible number of vertices is called a
(k, g)-cage. A (3, g)-cage is often simply referred to as a g-cage. Let f (k, g) denote
the number of vertices in a (k, g)-cage. Observe that f (2, g) = g.
a) For k ≥ 3, show that:
i) f (k, 2r) ≥ (2(k − 1)r − 2)/(k − 2),
ii) f (k, 2r + 1) ≥ (k(k − 1)r − 2)/(k − 2).
b) Determine all g-cages, g = 3, 4, 5, 6.
c) Show that the incidence graph of a projective plane of order k − 1 is a (k, 6)cage.
(Singleton (1966) showed, conversely, that any (k, 6)-cage of order 2(k2 − k + 1) is
necessarily the incidence graph of a projective plane of order k − 1.)
3.1.14 The Tutte–Coxeter Graph
A highly symmetric cubic graph, known as the Tutte–Coxeter graph, is shown in
Figure 3.2. Show that:
a) the Tutte–Coxeter graph is isomorphic to the bipartite graph G[X, Y ] derived
from K6 in the following manner. The vertices of X are the ﬁfteen edges of K6
and the vertices of Y are the ﬁfteen 1-factors of K6 , an element e of X being
adjacent to an element F of Y whenever e is an edge of the 1-factor F .
(H.S.M. Coxeter)
b) the Tutte–Coxeter graph is an 8-cage.
(Tutte (1947b) showed that this graph is, in fact, the unique 8-cage.)
3.1.15 t-Arc-Transitive Graph
A walk (v0 , v1 , . . . , vt ) in a graph such that vi−1 = vi+1 , for 1 ≤ i ≤ t − 1, is called
a t-arc. A simple connected graph G is t-arc-transitive if, given any two t-arcs
(v0 , v1 , . . . , vt ) and (w0 , w1 , . . . , wt ), there is an automorphism of G which maps vi
to wi , for 0 ≤ i ≤ t. (Thus a 1-arc-transitive graph is the same as an arc-transitive
graph, deﬁned in Exercise 1.5.12.) Show that:

3.2 Cut Edges

85

Fig. 3.2. The Tutte–Coxeter graph: the 8-cage

a) K3,3 is 2-arc-transitive,
b) the Petersen graph is 3-arc-transitive,
c) the Heawood graph is 4-arc-transitive,
d) the Tutte–Coxeter graph is 5-arc-transitive.
(Tutte (1947b) showed that there are no t-arc-transitive cubic graphs when t > 5.)

3.2 Cut Edges
For any edge e of a graph G, it is easy to see that either c(G \ e) = c(G) or
c(G \ e) = c(G) + 1 (Exercise 3.2.1). If c(G \ e) = c(G) + 1, the edge e is called a
cut edge of G. Thus a cut edge of a connected graph is one whose deletion results
in a disconnected graph. More generally, the cut edges of a graph correspond to
its bonds of size one (Exercise 3.2.2).
The graph in Figure 3.3 has three cut edges.

Fig. 3.3. The cut edges of a graph

86

3 Connected Graphs

If e is a cut edge of a graph G, its ends x and y belong to diﬀerent components
of G \ e, and so are not connected by a path in G \ e; equivalently, e lies in no cycle
of G. Conversely, if e = xy is not a cut edge of G, the vertices x and y belong to
the same component of G \ e, so there is an xy-path P in G \ e, and P + e is a
cycle in G through e. Hence we have the following characterization of cut edges.
Proposition 3.2 An edge e of a graph G is a cut edge if and only if e belongs to
no cycle of G.


Exercises
3.2.1 Show that if e ∈ E, then either c(G \ e) = c(G) or c(G \ e) = c(G) + 1.
3.2.2 Show that an edge e is a cut edge of a graph G if and only if {e} is a bond
of G.
3.2.3 Let G be a connected even graph. Show that:
a) G has no cut edge,
b) for any vertex v ∈ V , c(G − v) ≤ 12 d(v).
3.2.4 Let G be a k-regular bipartite graph with k ≥ 2. Show that G has no cut
edge.
————— —————

3.3 Euler Tours
A trail that traverses every edge of a graph is called an Euler trail, because Euler
(1736) was the ﬁrst to investigate the existence of such trails. In the earliest known
paper on graph theory, he showed that it was impossible to cross each of the seven
bridges of Königsberg once and only once during a walk through the town. A plan
of Königsberg and the river Pregel is shown in Figure 3.4a. As can be seen, proving
that such a walk is impossible amounts to showing that the graph in Figure 3.4b
has no Euler trail.
A tour of a connected graph G is a closed walk that traverses each edge of G at
least once, and an Euler tour one that traverses each edge exactly once (in other
words, a closed Euler trail). A graph is eulerian if it admits an Euler tour.
Fleury’s Algorithm
Let G be an eulerian graph, and let W be an Euler tour of G with initial and
terminal vertex u. Each time a vertex v occurs as an internal vertex of W , two
edges incident with v are accounted for. Since an Euler tour traverses each edge

3.3 Euler Tours
C

C

A

87

B

A

B

D

D

(a)

(b)

Fig. 3.4. The bridges of Königsberg and their graph

exactly once, d(v) is even for all v = u. Similarly, d(u) is even, because W both
starts and ends at u. Thus an eulerian graph is necessarily even.
The above necessary condition for the existence of an Euler tour in a connected
graph also turns out to be suﬃcient. Moreover, there is a simple algorithm, due to
Fleury (1883), which ﬁnds an Euler tour in an arbitrary connected even graph G
(see also Lucas (1894)). Fleury’s Algorithm constructs such a tour of G by tracing
out a trail subject to the condition that, at any stage, a cut edge of the untraced
subgraph F is taken only if there is no alternative.
Algorithm 3.3 Fleury’s Algorithm
Input: a connected even graph G and a speciﬁed vertex u of G
Output: an Euler tour W of G starting (and ending) at u
1: set W := u, x := u, F := G
2: while ∂F (x) = ∅ do
3:
choose an edge e := xy ∈ ∂F (x), where e is not a cut edge of F unless
there is no alternative
4:
replace uW x by uW xey, x by y, and F by F \ e
5: end while
6: return W
Theorem 3.4 If G is a connected even graph, the walk W returned by Fleury’s
Algorithm is an Euler tour of G.
Proof The sequence W is initially a trail, and remains one throughout the procedure, because Fleury’s Algorithm always selects an edge of F (that is, an as yet
unchosen edge) which is incident to the terminal vertex x of W . Moreover, the
algorithm terminates when ∂F (x) = ∅, that is, when all the edges incident to the
terminal vertex x of W have already been selected. Because G is even, we deduce
that x = u; in other words, the trail W returned by the algorithm is a closed trail
of G.
Suppose that W is not an Euler tour of G. Denote by X the set of vertices of
positive degree in F when the algorithm terminates. Then X = ∅, and F [X] is an

88

3 Connected Graphs

even subgraph of G. Likewise V \ X = ∅, because u ∈ V \ X. Since G is connected,
∂G (X) = ∅. On the other hand, ∂F (X) = ∅. The last edge of ∂G (X) selected for
inclusion in W was therefore a cut edge e = xy of F at the time it was chosen, with
x ∈ X and y ∈ V \ X (see Figure 3.5). But this violates the rule for choosing the
next edge of the trail W , because the edges in ∂F (x), which were also candidates
for selection at the time, were not cut edges of F , by Theorem 2.10.


V \X

F [X]
e
x

y

Fig. 3.5. Choosing a cut edge in Fleury’s Algorithm

The validity of Fleury’s Algorithm provides the following characterization of
eulerian graphs.
Theorem 3.5 A connected graph is eulerian if and only if it is even.



Let now x and y be two distinct vertices of a graph G. Suppose that we wish
to ﬁnd an Euler xy-trail of G, if one exists. We may do so by adding a new edge e
joining x and y. The graph G has an Euler trail connecting x and y if and only if
G + e has an Euler tour (Exercise 3.3.3). Thus Fleury’s Algorithm may be adapted
easily to ﬁnd an Euler xy-trail in G, if one exists.
We remark that Fleury’s Algorithm is an eﬃcient algorithm, in a sense to be
made precise in Chapter 8. When an edge is considered for inclusion in the current
trail W , it must be examined to determine whether or not it is a cut edge of the
remaining subgraph F . If it is not, it is appended to W right away. On the other
hand, if it is found to be a cut edge of F , it remains a cut edge of F until it is
eventually selected for inclusion in W ; therefore, each edge needs to be examined
only once. In Chapter 7, we present an eﬃcient algorithm for determining whether
or not an edge is a cut edge of a graph.
A comprehensive treatment of eulerian graphs and related topics can be found
in Fleischner (1990, 1991).

Exercises
3.3.1 Which of the pictures in Figure 3.6 can be drawn without lifting one’s pen
from the paper and without tracing a line more than once?

3.3 Euler Tours

89

Fig. 3.6. Tracing pictures

3.3.2 If possible, give an example of an eulerian graph G with n even and m odd.
Otherwise, explain why there is no such graph.
3.3.3 Let G be a graph with two distinct speciﬁed vertices x and y, and let G + e
be the graph obtained from G by the addition of a new edge e joining x and y.
a) Show that G has an Euler trail connecting x and y if and only if G + e has an
Euler tour.
b) Deduce that G has an Euler trail connecting x and y if and only if d(x) and
d(y) are odd and d(v) is even for all v ∈ V \ {x, y}.
3.3.4 Let G be a connected graph, and let X be the set of vertices of G of odd
degree. Suppose that |X| = 2k, where k ≥ 1.
a) Show that there are k edge-disjoint trails Q1 , Q2 , . . . , Qk in G such that
E(G) = E(Q1 ) ∪ E(Q2 ) ∪ . . . ∪ E(Qk ).
b) Deduce that G contains k edge-disjoint paths connecting the vertices of X in
pairs.
————— —————
3.3.5 Let G be a nontrivial eulerian graph, and let v ∈ V . Show that each v-trail
in G can be extended to an Euler tour of G if and only if G − v is acyclic.
(O. Ore)
3.3.6 Dominating Subgraph
A subgraph F of a graph G is dominating if every edge of G has at least one end
in F . Let G be a graph with at least three edges. Show that L(G) is hamiltonian
if and only if G has a dominating eulerian subgraph.
(F. Harary and C.St.J.A. Nash-Williams)
3.3.7 A cycle decomposition of a loopless eulerian graph G induces a family of
pairs of edges of G, namely the consecutive pairs of edges in the cycles comprising
the decomposition. Each edge thus appears in two pairs, and each trivial edge cut
∂(v), v ∈ V , is partitioned into pairs. An Euler tour of G likewise induces a family
of pairs of edges with these same two properties. A cycle decomposition and Euler tour are said to be compatible if, for all vertices v, the resulting partitions of

90

3 Connected Graphs

∂(v) have no pairs in common. Show that every cycle decomposition of a loopless
eulerian graph of minimum degree at least four is compatible with some Euler
tour.
(A. Kotzig)
(G. Sabidussi has conjectured that, conversely, every Euler tour of a loopless eulerian graph of minimum degree at least four is compatible with some cycle decomposition; see Appendix A.)

3.4 Connection in Digraphs
As we saw earlier, in Section 3.1, the property of connection in graphs may be
expressed not only in terms of edge cuts but also in terms of walks. By the same
token, the property of strong connection, deﬁned in terms of outcuts in Section 2.5,
may be expressed alternatively in terms of directed walks. This is an immediate
consequence of Theorem 3.6 below.
A directed walk in a digraph D is an alternating sequence of vertices and arcs
W := (v0 , a1 , v1 , . . . , v−1 , a , v )
such that vi−1 and vi are the tail and head of ai , respectively, 1 ≤ i ≤ .1 If x and
y are the initial and terminal vertices of W , we refer to W as a directed (x, y)-walk.
Directed trails, tours, paths, and cycles in digraphs are deﬁned analogously. As for
undirected graphs, the (u, v)-segment of a directed walk W , where u and v are two
vertices of W , u preceding v, is the subsequence of W starting with u and ending
with v, and is denoted uW v (the same notation as for undirected graphs).
We say that a vertex y is reachable from a vertex x if there is a directed (x, y)path. The property of reachability can be expressed in terms of outcuts, as follows.
Theorem 3.6 Let x and y be two vertices of a digraph D. Then y is reachable
from x in D if and only if ∂ + (X) = ∅ for every subset X of V which contains x
but not y.
Proof Suppose, ﬁrst, that y is reachable from x by a directed path P . Consider
any subset X of V which contains x but not y. Let u be the last vertex of P which
belongs to X and let v be its successor on P . Then (u, v) ∈ ∂ + (X), so ∂ + (X) = ∅.
Conversely, suppose that y is not reachable from x, and let X be the set of
vertices which are reachable from x. Then x ∈ X and y ∈
/ X. Furthermore, because

no vertex of V \ X is reachable from x, the outcut ∂ + (X) is empty.
In a digraph D, two vertices x and y are strongly connected if there is a directed
(x, y)-walk and also a directed (y, x)-walk (that is, if each of x and y is reachable
from the other). Just as connection is an equivalence relation on the vertex set
of a graph, strong connection is an equivalence relation on the vertex set of a
digraph (Exercise 3.4.1). The subdigraphs of D induced by the equivalence classes
1

Thus a walk in a graph corresponds to a directed walk in its associated digraph. This
is consistent with our convention regarding the traversal of loops in walks.

3.4 Connection in Digraphs

91

with respect to this relation are called the strong components of D. The strong
components of the digraph shown in Figure 3.7a are indicated in Figure 3.7b. We
leave it to the reader to verify that a digraph is strong if and only if it has exactly
one strong component (Exercise 3.4.2).

(a)

(b)

Fig. 3.7. (a) A digraph and (b) its strong components

A directed Euler trail is a directed trail which traverses each arc of the digraph
exactly once, and a directed Euler tour is a directed tour with this same property.
A digraph is eulerian if it admits a directed Euler tour. There is a directed version
of Theorem 3.5, whose proof we leave as an exercise (3.4.8).
Theorem 3.7 A connected digraph is eulerian if and only if it is even.



Exercises
3.4.1 Show that strong connection is an equivalence relation on the vertex set of
a digraph.
3.4.2 Show that a digraph is strong if and only if it has exactly one strong component.
3.4.3 Let C be a strong component of a digraph D, and let P be a directed path
in D connecting two vertices of C. Show that P is contained in C.
3.4.4 Let D be a digraph with adjacency matrix A = (auv ). Show that the number
of directed (u, v)-walks of length k in D is the (u, v) entry of Ak .
3.4.5 Show that every tournament is either strong or can be transformed into a
strong tournament by the reorientation of just one arc.
3.4.6 Condensation of a Digraph
a) Show that all the arcs linking two strong components of a digraph have their
tails in one strong component (and their heads in the other).

92

3 Connected Graphs

b) The condensation C(D) of a digraph D is the digraph whose vertices correspond to the strong components of D, two vertices of C(D) being linked by
an arc if and only if there is an arc in D linking the corresponding strong
components, and with the same orientation. Draw the condensations of:
i) the digraph of Figure 3.7a,
ii) the four tournaments of Figure 1.25.
c) Show that the condensation of any digraph is acyclic.
d) Deduce that:
i) every digraph has a minimal strong component, namely one that dominates
no other strong component,
ii) the condensation of any tournament is a transitive tournament.
3.4.7 A digraph is unilateral if any two vertices x and y are connected either by a
directed (x, y)-path or by a directed (y, x)-path, or both. Show that a digraph is
unilateral if and only if its condensation has a directed Hamilton path.
3.4.8 Prove Theorem 3.7.
3.4.9 de Bruijn–Good Digraph
The de Bruijn–Good digraph BGn has as vertex set the set of all binary sequences of
length n, vertex a1 a2 . . . an being joined to vertex b1 b2 . . . bn if and only if ai+1 = bi
for 1 ≤ i ≤ n − 1. Show that BGn is an eulerian digraph of order 2n and directed
diameter n.
3.4.10 de Bruijn–Good Sequence
A circular sequence s1 s2 . . . s2n of zeros and ones is called a de Bruijn–Good sequence of order n if the 2n subsequences si si+1 . . . si+n−1 , 1 ≤ i ≤ 2n (where
subscripts are taken modulo 2n ) are distinct, and so constitute all possible binary sequences of length n. For example, the sequence 00011101 is a de Bruijn–
Good sequence of order three. Show how to derive such a sequence of any
order n by considering a directed Euler tour in the de Bruijn–Good digraph
(N.G. de Bruijn; I.J. Good)
BGn−1 .
(An application of de Bruijn–Good sequences can be found in Chapter 10 of Bondy
and Murty (1976).)
3.4.11
a) Show that a digraph which has a closed directed walk of odd length contains
a directed odd cycle.
b) Deduce that a strong digraph which contains an odd cycle contains a directed
odd cycle.
————— —————
3.4.12 Show that:
a) every nontrivial strong tournament has a directed Hamilton cycle,
(P. Camion)

3.5 Cycle Double Covers

93

b) each vertex of a nontrivial strong tournament D is contained in a directed
cycle of every length l, 3 ≤ l ≤ n,
(J.W. Moon)
c) each arc of an even tournament D is contained in a directed cycle of every
length l, 3 ≤ l ≤ n.
(B. Alspach)

3.5 Cycle Double Covers
In this section, we discuss a beautiful conjecture concerning cycle coverings of
graphs. In order for a graph to admit a cycle covering, each of its edges must
certainly lie in some cycle. On the other hand, once this requirement is fulﬁlled, the
set of all cycles of the graph clearly constitutes a covering. Thus, by Proposition 3.2,
a graph admits a cycle covering if and only if it has no cut edge. We are interested
here in cycle coverings which cover no edge too many times.
Recall that a decomposition is a covering in which each edge is covered exactly
once. According to Veblen’s Theorem (2.7), the only graphs which admit such
cycle coverings are the even graphs. Thus, if a graph has vertices of odd degree,
some edges will necessarily be covered more than once in a cycle covering. One is
led to ask whether every graph without cut edges admits a cycle covering in which
no edge is covered more than twice.
All the known evidence suggests that this is indeed so. For example, each of
the platonic graphs (shown in Figure 1.14) has such a cycle covering consisting of
its facial cycles, those which bound its regions, or faces, as in Figure 3.8. More
generally, the same is true of all polyhedral graphs, and indeed of all planar graphs
without cut edges, as we show in Chapter 10.

Fig. 3.8. A double covering of the cube by its facial cycles

In the example of Figure 3.8, observe that any ﬁve of the six facial cycles
already constitute a cycle covering. Indeed, the covering shown, consisting of all
six facial cycles, covers each edge exactly twice. Such a covering is called a cycle
double cover of the graph. It turns out that cycle coverings and cycle double covers
are closely related.
Proposition 3.8 If a graph has a cycle covering in which each edge is covered at
most twice, then it has a cycle double cover.

94

3 Connected Graphs

Proof Let C be a cycle covering of a graph G in which each edge is covered at
most twice. The symmetric diﬀerence {E(C)|C ∈ C} of the edge sets of the cycles
in C is then the set of edges of G which are covered just once by C. Moreover, by
Corollary 2.16, this set of edges is an even subgraph C  of G. By Veblen’s Theorem
(2.7), C  has a cycle decomposition C  . It is now easily checked that C ∪ C  is a
cycle double cover of G.

Motivated by quite diﬀerent considerations, Szekeres (1973) and Seymour
(1979b) each put forward the conjecture that every graph without cut edges admits
a cycle double cover.

The Cycle Double Cover Conjecture
Conjecture 3.9 Every graph without cut edges has a cycle double cover.

A graph has a cycle double cover if and only if each of its components has one.
Thus, in order to prove the Cycle Double Cover Conjecture, it is enough to prove
it for nontrivial connected graphs. Indeed, one may restrict one’s attention even
further, to nonseparable graphs. Roughly speaking, these are the connected graphs
which cannot be obtained by piecing together two smaller connected graphs at a
single vertex. (Nonseparable graphs are deﬁned and discussed in Chapter 5.) In
the case of planar graphs, the boundaries of the faces in any planar embedding
are then cycles, as we show in Chapter 10, and these facial cycles constitute a
cycle double cover of the graph. This suggests one natural approach to the Cycle
Double Cover Conjecture: ﬁnd a suitable embedding of the graph on some surface,
an embedding in which each face is bounded by a cycle; the facial cycles then form
a cycle double cover.
Consider, for example, the toroidal embeddings of the complete graph K7 and
the Petersen graph shown in Figure 3.9. The torus is represented here by a rectangle whose opposite sides are identiﬁed; identifying one pair of sides yields a
cylinder, and identifying the two open ends of the cylinder results in a torus. In
the embedding of K7 , there are fourteen faces, each bounded by a triangle; these
triangles form a cycle double cover of K7 . In the embedding of the Petersen graph,
there are ﬁve faces; three are bounded by cycles of length ﬁve (faces A, B, C), one
by a cycle of length six (face D), and one by a cycle of length nine (face E). These
ﬁve cycles constitute a cycle double cover of the Petersen graph.
The above approach to the Cycle Double Cover Conjecture, via surface embeddings, is supported by the following conjecture, which asserts that every loopless
nonseparable graph can indeed be embedded in some surface in an appropriate
fashion.

3.5 Cycle Double Covers
1

2

3

1
D

E
4

7

5

5

C
D
E

1

2

3

E

A

4

6

95

B
D

1

Fig. 3.9. Toroidal embeddings of (a) the complete graph K7 , and (b) the Petersen graph

The Circular Embedding Conjecture
Conjecture 3.10 Every loopless nonseparable graph can be embedded in some
surface in such a way that each face in the embedding is bounded by a cycle.

The origins of Conjecture 3.10 are uncertain. It was mentioned by W.T. Tutte
(unpublished) in the mid-1960s, but was apparently already known at the time to
several other graph-theorists, according to Robertson (2007). We discuss surface
embeddings of graphs in greater detail in Chapter 10, and describe there a stronger
conjecture on embeddings of graphs.
Apart from its intrinsic beauty, due to the simplicity of its statement and the
fact that it applies to essentially all graphs, the Cycle Double Cover Conjecture
is of interest because it is closely related to a number of other basic problems in
graph theory, including the Circular Embedding Conjecture. We encounter several
more in future chapters.
Double Covers by Even Subgraphs
There is another attractive formulation of the Cycle Double Cover Conjecture, in
terms of even subgraphs; here, by an even subgraph we mean the edge set of such
a subgraph.
If a graph has a cycle covering, then it has a covering by even subgraphs because
cycles are even subgraphs. Conversely, by virtue of Theorem 2.17, any covering by
even subgraphs can be converted into a cycle covering by simply decomposing
each even subgraph into cycles. It follows that a graph has a cycle double cover if
and only if it has a double cover by even subgraphs. Coverings by even subgraphs
therefore provide an alternative approach to the Cycle Double Cover Conjecture.
If every graph without cut edges had a covering by at most two even subgraphs,
such a covering would yield a cycle covering in which each edge was covered at
most twice, thereby establishing the Cycle Double Cover Conjecture by virtue

96

3 Connected Graphs

of Proposition 3.8. Unfortunately, this is not the case. Although many graphs
do indeed admit such coverings, many do not. The Petersen graph, for instance,
cannot be covered by two even subgraphs (Exercise 3.5.3a). On the other hand,
it may be shown that every graph without cut edges admits a covering by three
even subgraphs (Theorem 21.21).
Suppose, now, that every graph without cut edges does indeed have a cycle
double cover. It is then natural to ask how few cycles there can be in such a
covering; a covering with few cycles may be thought of as an eﬃcient covering,
in some sense. Let C be a cycle double cover of a graph G. As each edge of G is
covered exactly twice,

e(C) = 2m
C∈C

Because e(C) ≤ n for all C ∈ C, we deduce that |C| ≥ 2m/n, the average degree
of G. In particular, if G is a complete graph Kn , the number of cycles in a cycle
double cover of G must be at least n − 1. A cycle double cover consisting of no
more than this number of cycles is called a small cycle double cover. Bondy (1990)
conjectures that every simple graph G without cut edges admits such a covering.
Conjecture 3.11 The Small Cycle Double Cover Conjecture
Every simple graph without cut edges has a small cycle double cover.
Several other strengthenings of the Cycle Double Cover Conjecture have been
proposed. One of these is a conjecture put forward by Jaeger (1988).
Conjecture 3.12 The Oriented Cycle Double Cover Conjecture
Let G be a graph without cut edges. Then the associated digraph D(G) of G admits
a decomposition into directed cycles of length at least three.
Further information on these and a number of related conjectures can be found
in the book by Zhang (1997).

Exercises
3.5.1 Show that every loopless graph has a double covering by bonds.
3.5.2 Let {C1 , C2 , C3 } be a covering of a graph G by three even subgraphs such
that C1 ∩ C2 ∩ C3 = ∅. Show that {C1  C2 , C1  C3 } is a covering of G by two
even subgraphs.
3.5.3
a) Show that the Petersen graph has no covering by two even subgraphs.
b) Deduce, using Exercise 3.5.2, that this graph has no double cover by four even
subgraphs.
c) Find a covering of the Petersen graph by three even subgraphs, and a double
cover by ﬁve even subgraphs.

3.5 Cycle Double Covers

97

3.5.4
a)

i) Let {C1 , C2 } be a covering of a graph G by two even subgraphs. Show that
{C1 , C2 , C1  C2 } is a double cover of G by three even subgraphs.
ii) Deduce that a graph has a covering by two even subgraphs if and only if
it has a double cover by three even subgraphs.

.
b) Let {C1 , C2 , C3 } be a covering of a graph G by three even subgraphs. Show
that G has a quadruple cover (a covering in which each edge is covered exactly
four times) by seven even subgraphs.
(We show in Theorem 21.25 that every graph without cut edges has a covering by three even subgraphs, and hence a quadruple cover by seven even
subgraphs.)
3.5.5 Find a small cycle double cover of K6 .
3.5.6 Find a decomposition of D(K6 ) into directed cycles of length at least three.
————— —————
3.5.7 Show that every graph without cut edges has a uniform cycle covering.
3.5.8 Let G be a graph, and let C be the set of all cycles of G. For C ∈ C, denote
by fC the incidence vector of C, and set FC := {fC : C ∈ C}.
a) Let x ∈ RE . Show that:
i) the vector x lies in the vector space generated by FC if and only if the
following two conditions hold:
 x(e) = 0 for every cut edge e,
 x(e) = x(f ) for every edge cut {e, f } of cardinality two,
ii) if x is a nonnegative linear combination of vectors in FC , then for any bond
B of G and any edge e of B:

x(e) ≤
x(f )
(3.1)
f ∈B\{e}

(Seymour (1979b) showed that this necessary condition is also suﬃcient for
a nonnegative vector x to be a nonnegative linear combination of vectors
in FC .)
iii) if x is a nonnegative integer linear combination of vectors in FC , then for
any bond B, in addition to (3.1), x must satisfy the condition:

x(e) ≡ 0 (mod 2)
(3.2)
e∈B

b) With the aid of Exercise 2.4.6, give an example showing that conditions (3.1)
and (3.2) are not suﬃcient for a nonnegative integer vector x in RE to be a
nonnegative integer linear combination of vectors in FC .

98

3 Connected Graphs

(Seymour (1979b) showed, however, that these two conditions are suﬃcient
when G is a planar graph. Furthermore, he conjectured that they are suﬃcient
in any graph if each component of x is an even integer. This conjecture clearly
implies the Cycle Double Cover Conjecture. For related work, see Alspach et al.
(1994).)

3.6 Related Reading
Cages
Cages were introduced in Exercise 3.1.13. There are many interesting examples of
such graphs, the Petersen graph and the Heawood graph being but two. Numerous
others are described in the survey by Wong (1982). Two particularly interesting
inﬁnite families of examples are those constructed from projective geometries by
Benson (1966), namely the (k, 8)- and (k, 12)-cages, where k − 1 is a prime power.
For = 3, 5, the Benson cages furnish examples of dense graphs (graphs with many
edges) containing no 2 -cycles. For = 2, examples are provided by polarity graphs
of projective planes (see Exercises 12.2.12, 12.2.13, and 12.2.14.) The question as
to how many edges a graph on n vertices can have without containing a 2 -cycle
is unsolved for other values of , and in particular for = 4; see Appendix A.
The study of directed cages, smallest k-diregular digraphs with speciﬁed directed girth g, was initiated by Behzad et al. (1970). They conjectured that the
directed circulants on k(g − 1) + 1 vertices in which each vertex dominates the k
vertices succeeding it are directed cages. This conjecture remains open; see Appendix A.

4
Trees

Contents
4.1 Forests and Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
Rooted Trees and Branchings . . . . . . . . . . . . . . . . . . . . . . . 100
Proof Technique: Ordering Vertices . . . . . . . . . . . . . . . . 101
4.2 Spanning Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
Cayley’s Formula . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
4.3 Fundamental Cycles and Bonds . . . . . . . . . . . . . . . . . . . . 110
Cotrees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
4.4 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
Matroids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114

4.1 Forests and Trees
Recall that an acyclic graph is one that contains no cycles. A connected acyclic
graph is called a tree. The trees on six vertices are shown in Figure 4.1. According
to these deﬁnitions, each component of an acyclic graph is a tree. For this reason,
acyclic graphs are usually called forests.
In order for a graph to be connected, there must be at least one path between
any two of its vertices. The following proposition, an immediate consequence of
Exercise 2.2.12, says that trees are the connected graphs which just meet this
requirement.
Proposition 4.1 In a tree, any two vertices are connected by exactly one path. 
Following Diestel (2005), we denote the unique path connecting vertices x and
y in a tree T by xT y.
By Theorem 2.1, any graph in which all degrees are at least two contains a cycle.
Thus, every tree contains a vertex of degree at most one; moreover, if the tree is
nontrivial, it must contain a vertex of degree exactly one. Such a vertex is called
a leaf of the tree. In fact, the following stronger assertion is true (Exercise 2.1.2).

100

4 Trees

Fig. 4.1. The trees on six vertices

Proposition 4.2 Every nontrivial tree has at least two leaves.



If x is a leaf of a tree T , the subgraph T −x is a tree with v(T −x) = v(T )−1 and
e(T − x) = e(T ) − 1. Because the trivial tree has no edges, we have, by induction
on the number of vertices, the following relationship between the numbers of edges
and vertices of a tree.
Theorem 4.3 If T is a tree, then e(T ) = v(T ) − 1.



Rooted Trees and Branchings
A rooted tree T (x) is a tree T with a speciﬁed vertex x, called the root of T . An
orientation of a rooted tree in which every vertex but the root has indegree one is
called a branching. We refer to a rooted tree or branching with root x as an x-tree
or x-branching, respectively.
There is an evident bijection between x-trees and x-branchings. An x-path thus
give rise to a simple example of a branching, a directed x-path. Another example
of a branching is shown in Figure 4.2.
Observe that the root of this branching is a source. This is always so, because
the sum of the indegrees of a digraph is equal to its number of arcs (Exercise 1.5.2)

Fig. 4.2. A branching

4.1 Forests and Trees

101

which, in the case of a branching B, is v(B) − 1 by Theorem 4.3. Observe, also,
that every vertex of a branching is reachable from its root by a unique directed
path. Conversely, in any digraph, reachability from a vertex may be expressed in
terms of its branchings. We leave the proof of this fact as an exercise (4.1.6).
Theorem 4.4 Let x be a vertex of a digraph D, and let X be the set of vertices
of D which are reachable from x. Then there is an x-branching in D with vertex
set X.


Proof Technique: Ordering Vertices
Among the n! linear orderings of the n vertices of a graph, certain ones are
especially interesting because they encode particular structural properties. An
elementary example is an ordering of the vertices according to their degrees,
in decreasing order. More interesting orderings can be obtained by considering
the global structure of the graph, rather than just its local structure, as in
Exercise 2.2.18. We describe a second example here. Others will be encountered in Chapters 6, 14, and 19, as well as in a number of exercises.
In general, graphs contain copies of many diﬀerent trees. Indeed, every simple
graph with minimum degree k contains a copy of each rooted tree on k + 1
vertices, rooted at any given vertex of the graph (Exercise 4.1.9). The analogous question for digraphs (with rooted trees replaced by branchings) is much
more diﬃcult. However, in the case of tournaments it can be answered by
considering a rather natural ordering of the vertices of the tournament.
A median order of a digraph D = (V, A) is a linear order v1 , v2 , . . . , vn of its
vertex set V such that |{(vi , vj ) : i < j}| (the number of arcs directed from
left to right) is as large as possible. In the case of a tournament, such an
order can be viewed as a ranking of the players which minimizes the number
of upsets (matches won by the lower-ranked player). As we shall see, median
orders of tournaments reveal a number of interesting structural properties.
Let us ﬁrst note two basic properties of median orders of tournaments (Exercise 4.1.10). Let T be a tournament and v1 , v2 , . . . , vn a median order of T .
Then, for any two indices i, j with 1 ≤ i < j ≤ n:
(M1) the interval vi , vi+1 , . . . , vj is a median order of the induced subtournament T [{vi , vi+1 , . . . , vj }],
(M2) vertex vi dominates at least half of the vertices vi+1 , vi+2 , . . . , vj , and
vertex vj is dominated by at least half of the vertices vi , vi+1 , . . . , vj−1 .
In particular, each vertex vi , 1 ≤ i < n, dominates its successor vi+1 . The
sequence (v1 , v2 , . . . , vn ) is thus a directed Hamilton path, providing an alternative proof (see Locke (1995)) of Rédei’s Theorem (2.3): every tournament
has a directed Hamilton path.

102

4 Trees

Ordering Vertices (continued)
By exploiting the properties of median orders, Havet and Thomassé (2000)
showed that large tournaments contain all large branchings.
Theorem 4.5 Any tournament on 2k vertices contains a copy of each branching on k + 1 vertices.
Proof Let v1 , v2 , . . . , v2k be a median order of a tournament T on 2k vertices,
and let B be a branching on k +1 vertices. Consider the intervals v1 , v2 , . . . , vi ,
1 ≤ i ≤ 2k. We show, by induction on k, that there is a copy of B in T whose
vertex set includes at least half the vertices of any such interval.
This is clearly true for k = 1. Suppose, then, that k ≥ 2. Delete a leaf y of B to
obtain a branching B  on k vertices, and set T  := T − {v2k−1 , v2k }. By (M1),
v1 , v2 , . . . , v2k−2 is a median order of the tournament T  , so there is a copy
of B  in T  whose vertex set includes at least half the vertices of any interval
v1 , v2 , . . . , vi , 1 ≤ i ≤ 2k − 2. Let x be the predecessor of y in B. Suppose that
x is located at vertex vi of T  . In T , by (M2), vi dominates at least half of
the vertices vi+1 , vi+2 , . . . , v2k , thus at least k − i/2 of these vertices. On the
other hand, B  includes at least (i − 1)/2 of the vertices v1 , v2 , . . . , vi−1 , thus
at most k − (i + 1)/2 of the vertices vi+1 , vi+2 , . . . , v2k . It follows that, in T ,
there is an outneighbour vj of vi , where i + 1 ≤ j ≤ 2k, which is not in B  .
Locating y at vj , and adding the vertex y and arc (x, y) to B  , we now have a
copy of B in T . It is readily checked that this copy of B satisﬁes the required
additional property.

Three further applications of median orders are described in Exercises 4.1.16, 4.1.17, and 4.1.18.
Rooted trees and branchings turn out to be basic tools in the design of eﬃcient
algorithms for solving a variety of problems involving reachability, as we shall show
in Chapter 6.

Exercises
4.1.1
a) Show that every tree with maximum degree k has at least k leaves.
b) Which such trees have exactly k leaves?
4.1.2 Show that the following three statements are equivalent.
a) G is connected and has n − 1 edges.
b) G is a forest and has n − 1 edges.
c) G is a tree.

4.1 Forests and Trees

103

4.1.3 A saturated hydrocarbon is a molecule Cm Hn in which every carbon atom
(C) has four bonds, every hydrogen atom (H) has one bond, and no sequence of
bonds forms a cycle. Show that, for any positive integer m, the molecule Cm Hn
can exist only if n = 2m + 2.
4.1.4 Let G be a graph and F a maximal forest of G. Show that e(F ) = v(G) −
c(G).
4.1.5 Prove Theorem 4.3 by induction on the number of edges of G.
4.1.6 Prove Theorem 4.4.
4.1.7 Show that a sequence
n (d1 , d2 , . . . , dn ) of positive integers is a degree sequence
of a tree if and only if i=1 di = 2(n − 1).
4.1.8 Centre of a Graph
A centre of a graph G is a vertex u such that max{d(u, v) : v ∈ V } is as small as
possible.
a) Let T be a tree on at least three vertices, and let T  be the tree obtained from
T by deleting all its leaves. Show that T and T  have the same centres.
b) Deduce that every tree has either exactly one centre or two, adjacent, centres.
4.1.9
a) Show that any simple graph with minimum degree k contains a copy of each
rooted tree on k + 1 vertices, rooted at any given vertex of the graph.
b) Deduce that any simple graph with average degree at least 2(k − 1), where
k − 1 is a positive integer, contains a copy of each tree on k + 1 vertices.
(P. Erdős and V.T. Sós (see Erdős (1964)) have conjectured that any simple graph
with average degree greater than k−1 contains a copy of each tree on k+1 vertices;
see Appendix A.)
4.1.10 Verify the properties (M1) and (M2) of median orders of tournaments.
————— —————
4.1.11 Let G be a simple graph with vertex set V := {1, 2, . . . , n}.
a) Show that the set of transpositions S := {(i, j) : ij ∈ E} generates all permutations of V if and only if G is connected.
b) Deduce that S is a minimal set of transpositions that generates all permutations of V if and only if G is a tree.
4.1.12 Let S := {x1 , x2 , . . . , xn } be an n-set, and let A := {A1 , A2 , . . . , An } be
a family of n distinct subsets of S. Construct a graph G with vertex set A, two
vertices Ai and Aj being joined by an edge if their symmetric diﬀerence Ai  Aj
is a singleton. Label the edge Ai Aj by this singleton. By studying this labelled
graph, prove that there is an element xm ∈ S such that the sets A1 ∪ {xm }, A2 ∪
(J.A. Bondy)
{xm }, . . . , An ∪ {xm } are distinct.

104

4 Trees

4.1.13 Give an alternative proof of Exercise 4.1.12 by proceeding as follows.
Suppose, by way of contradiction, that there is no such element xm ∈ S, so that, for
all i ∈ [1, n], there exist distinct indices j(i) and k(i) such that Aj(i) ∪{xi } = Ak(i) .
Let M be the incidence matrix of the hypergraph (S, A) (so that mij = 1
if xi ∈ Aj and mij = 0 otherwise), let ci denote the column vector with −1 in
position j(i), 1 in position k(i), and 0s elsewhere, let C denote the n × n matrix
whose ith column is ci , and let j be the row vector all of whose entries are 1. Show
that M C = I and j C = 0, and derive a contradiction.
(J. Greene)
4.1.14 m identical pizzas are to be shared equally amongst n students.
a) Show how this goal can be achieved by dividing the pizzas into a total of
m + n − d pieces, where d is the greatest common divisor of m and n.
b) By considering a suitable bipartite graph, show that no division into a smaller
number of pieces will achieve the same objective.
(H. Bass)
4.1.15 Rooted trees T1 (x1 ) and T2 (x2 ) are isomorphic if there is an isomorphism
from T1 to T2 mapping x1 to x2 . A rooted tree is uniform if the degree of a vertex
depends only on its distance from the root. Prove that every x-tree on n vertices
has exactly n nonisomorphic uniform x-subtrees.
(M.K. Goldberg and I.A. Klipker)
4.1.16 Let v1 , v2 , . . . , vn be a median order of an even tournament T . Show that
(S. Thomassé)
(v1 , v2 , . . . , vn , v1 ) is a directed Hamilton cycle of T .
4.1.17 A king in a tournament is a vertex v from which every vertex is reachable
by a directed path of length at most two. Show that every tournament T has a
king by proceeding as follows.
Let v1 , v2 , . . . , vn be a median order of T .
a) Suppose that vj dominates vi , where i < j. Show that there is an index k with
i < k < j such that vi dominates vk and vk dominates vj .
(F. Havet and S. Thomassé)
b) Deduce that v1 is a king in T .
4.1.18 A second outneighbour of a vertex v in a digraph is a vertex whose distance
from v is exactly two. Show that every tournament T has a vertex with at least
as many second outneighbours as (ﬁrst) outneighbours, by proceeding as follows.
Let v1 , v2 , . . . , vn be a median order of a tournament T . Colour the outneighbours of vn red, both vn and those of its in-neighbours which dominate every red
vertex preceding them in the median order black, and the remaining in-neighbours
of vn blue. (Note that every vertex of T is thereby coloured, because T is a tournament.)
a) Show that every blue vertex is a second outneighbour of vn .
b) Consider the intervals of the median order into which it is subdivided by the
black vertices. Using property (M 2), show that each such interval includes at
least as many blue vertices as red vertices.

4.2 Spanning Trees

105

c) Deduce that vn has at least as many second outneighbours as outneighbours.
(F. Havet and S. Thomassé)
(P. D. Seymour has conjectured that every oriented graph has a vertex with at
least as many second outneighbours as outneighbours; see Appendix A)
4.1.19
a) Show that the cube of a tree on at least three vertices has a Hamilton cycle.
(M. Sekanina)
b) Find a tree whose square has no Hamilton cycle.
(Fleischner (1974) characterized the graphs whose squares have Hamilton cycles;
see also Řı́ha (1991).)
4.1.20
a) Let T1 and T2 be subtrees of a tree T . Show that T1 ∩ T2 and T1 ∪ T2 are
subtrees of T if and only if T1 ∩ T2 = ∅.
b) Let T be a family of subtrees of a tree T . Deduce, by induction on |T |, that if
any two members of T have a vertex in common, then there is a vertex of T
which belongs to all members of T . (In other words, show that the family of
subtrees of a tree have the Helly Property (deﬁned in Exercise 1.3.7).)
4.1.21 König’s Lemma
Show that every locally-ﬁnite inﬁnite tree contains a one-way inﬁnite path.
(D. König)

4.2 Spanning Trees
A subtree of a graph is a subgraph which is a tree. If this tree is a spanning
subgraph, it is called a spanning tree of the graph. Figure 4.3 shows a decomposition
of the wheel W4 into two spanning trees.

Fig. 4.3. Two spanning trees of the wheel W4

If a graph G has a spanning tree T , then G is connected because any two
vertices of G are connected by a path in T , and hence in G. On the other hand, if
G is a connected graph which is not a tree, and e is an edge of a cycle of G, then
G \ e is a spanning subgraph of G which is also connected because, by Proposition

106

4 Trees

3.2, e is not a cut edge of G. By repeating this process of deleting edges in cycles
until every edge which remains is a cut edge, we obtain a spanning tree of G.
Thus we have the following theorem, which provides yet another characterization
of connected graphs.
Theorem 4.6 A graph is connected if and only if it has a spanning tree.



It is easy to see that every tree is bipartite. We now use Theorem 4.6 to derive
a characterization of bipartite graphs.
Theorem 4.7 A graph is bipartite if and only if it contains no odd cycle.
Proof Clearly, a graph is bipartite if and only if each of its components is bipartite, and contains an odd cycle if and only if one of its components contains an
odd cycle. Thus, it suﬃces to prove the theorem for connected graphs.
Let G[X, Y ] be a connected bipartite graph. Then the vertices of any path in G
belong alternately to X and to Y . Thus, all paths connecting vertices in diﬀerent
parts are of odd length and all paths connecting vertices in the same part are of
even length. Because, by deﬁnition, each edge of G has one end in X and one end
in Y , it follows that every cycle of G is of even length.
Conversely, suppose that G is a connected graph without odd cycles. By Theorem 4.6, G has a spanning tree T . Let x be a vertex of T . By Proposition 4.1,
any vertex v of T is connected to x by a unique path in T . Let X denote the set of
vertices v for which this path is of even length, and set Y := V \ X. Then (X, Y )
is a bipartition of T . We claim that (X, Y ) is also a bipartition of G.
To see this, consider an edge e = uv of E(G) \ E(T ), and let P := uT v be the
unique uv-path in T . By hypothesis, the cycle P + e is even, so P is odd. Therefore
the ends of P , and hence the ends of e, belong to distinct parts. It follows that
(X, Y ) is indeed a bipartition of G.

According to Theorem 4.7, either a graph is bipartite, or it contains an odd
cycle, but not both. An eﬃcient algorithm which ﬁnds, in a given graph, either a
bipartition or an odd cycle is presented in Chapter 6.
Cayley’s Formula
There is a remarkably simple formula for the number of labelled trees on n vertices
(or, equivalently, for the number of spanning trees in the complete graph Kn ).
This formula was discovered by Cayley (1889), who was interested in representing
certain hydrocarbons by graphs and, in particular, by trees (see Exercise 4.1.3).
A wide variety of proofs have since been found for Cayley’s Formula (see Moon
(1967)). We present here a particularly elegant one, due to Pitman (1999). It
makes use of the concept of a branching forest, that is, a digraph each of whose
components is a branching.

4.2 Spanning Trees

107

Theorem 4.8 Cayley’s Formula
The number of labelled trees on n vertices is nn−2 .
Proof We show, by counting in two ways, that the number of labelled branchings
on n vertices is nn−1 . Cayley’s Formula then follows directly, because each labelled
tree on n vertices gives rise to n labelled branchings, one for each choice of the
root vertex.
Consider, ﬁrst, the number of ways in which a labelled branching on n vertices
can be built up, one edge at a time, starting with the empty graph on n vertices. In
order to end up with a branching, the subgraph constructed at each stage must be a
branching forest. Initially, this branching forest has n components, each consisting
of an isolated vertex. At each stage, the number of components decreases by one. If
there are k components, the number of choices for the new edge (u, v) is n(k − 1):
any one of the n vertices may play the role of u, whereas v must be the root of
one of the k − 1 components which do not contain u. The total number of ways of
constructing a branching on n vertices in this way is thus
n−1


n(n − i) = nn−1 (n − 1)!

i=1

On the other hand, any individual branching on n vertices is constructed exactly
(n − 1)! times by this procedure, once for each of the orders in which its n − 1
edges are selected. It follows that the number of labelled branchings on n vertices

is nn−1 .
Another proof of Cayley’s Formula is outlined in Exercise 4.2.11.
We denote the number of spanning trees in an arbitrary graph G by t(G).
Cayley’s Formula says that t(Kn ) = nn−2 . There is a simple recursive formula
relating the number of spanning trees of a graph G to the numbers of spanning
trees in the two graphs G\e and G / e obtained from G by deleting and contracting
a link e (Exercise 4.2.1).
Proposition 4.9 Let G be a graph and e a link of G. Then
t(G) = t(G \ e) + t(G / e)



Exercises
4.2.1 Let G be a connected graph and e a link of G.
a) Describe a one-to-one correspondence between the set of spanning trees of G
that contain e and the set of spanning trees of G / e.
b) Deduce Proposition 4.9.
4.2.2
a) Let G be a graph with no loops or cut edges. Show that t(G) ≥ e(G).

108

4 Trees

b) For which such graphs does equality hold?
4.2.3 Let G be a connected graph and let x be a speciﬁed vertex of G. A spanning
x-tree T of G is called a distance tree of G with root x if dT (x, v) = dG (x, v) for
all v ∈ V .
a) Show that G has a distance tree with root x.
b) Deduce that a connected graph of diameter d has a spanning tree of diameter
at most 2d.
4.2.4 Show that the incidence matrix of a graph is totally unimodular (deﬁned
in Exercise 1.5.7) if and only if the graph is bipartite.
4.2.5 A fan is the join P ∨ K1 of a path P and a single vertex. Determine the
numbers of spanning trees in:
a) the fan Fn on n vertices, n ≥ 2,
b) the wheel Wn with n spokes, n ≥ 3.
4.2.6 Let G be an edge-transitive graph.
a) Show that each edge of G lies in exactly (n − 1)t(G)/m spanning trees of G.
b) Deduce that t(G \ e) = (m − n + 1)t(G)/m and t(G / e) = (n − 1)t(G)/m.
c) Deduce that t(Kn ) is divisible by n, if n ≥ 3, and that t(Kn,n ) is divisible by
n2 .
d) Without appealing to Cayley’s Formula (Theorem 4.8), determine t(K4 ),
t(K5 ), and t(K3,3 ).
4.2.7
a) Let G be a simple graph on n vertices, and let H be the graph obtained from G
by replacing each edge of G by k multiple edges. Show that t(H) = k n−1 t(G).
b) Let G be a graph on n vertices and m edges, and let H be the graph
obtained from G by subdividing each edge of G k − 1 times. Show that
t(H) = km−n+1 t(G).
4.2.8 Using Theorem 4.7 and Exercise 3.4.11b, show that a digraph contains a
directed odd cycle if and only if some strong component is not bipartite.
4.2.9 A branching in a digraph is a spanning branching if it includes all vertices
of the digraph.
a) Show that a digraph D has a spanning x-branching if and only if ∂ + (X) = ∅
for every proper subset X of V that includes x.
b) Deduce that a digraph is strongly connected if and only if it has a spanning
v-branching for every vertex v.
4.2.10 Nonreconstructible Infinite Graphs
Let T := T∞ denote the inﬁnite tree in which each vertex is of countably inﬁnite
degree, and let F := 2T∞ denote the forest consisting of two disjoint copies of T∞ .
Show that (T, F ) is a nonreconstructible pair.

4.2 Spanning Trees

109

————— —————
4.2.11 Prüfer Code
Let Kn be the labelled complete graph with vertex set {1, 2, . . . , n}, where
n ≥ 3. With each spanning tree T of Kn one can associate a unique sequence
(t1 , t2 , . . . , tn−2 ), known as the Prüfer code of T , as follows. Let s1 denote the ﬁrst
vertex (in the the ordered set (1, 2, . . . , n)) which is a leaf of T , and let t1 be the
neighbour of s1 in T . Now let s2 denote the ﬁrst vertex which is a leaf of T − s1 ,
and t2 the neighbour of s2 in T − s1 . Repeat this operation until tn−2 is deﬁned
and a tree with just two vertices remains. (If n ≤ 2, the Prüfer code of T is taken
to be the empty sequence.)
a) List all the spanning trees of K4 and their Prüfer codes.
b) Show that every sequence (t1 , t2 , . . . , tn−2 ) of integers from the set {1, 2, . . . , n}
is the Prüfer code of a unique spanning tree of Kn .
c) Deduce Cayley’s Formula (see Theorem 4.8).
(H. Prüfer)
4.2.12
a) For a sequence d1 , d2 , . . . , dn of n positive integers whose sum is equal to 2n−2,
let t(n; d1 , d2 , . . . , dn ) denote the number of trees on n vertices v1 , v2 , . . . , vn
such that d(vi ) = di , 1 ≤ i ≤ n. Show that


n−2
t(n; d1 , d2 , . . . , dn ) =
d1 − 1, d2 − 1, . . . , dn − 1
b) Apply the Multinomial Theorem to deduce Cayley’s Formula.
4.2.13 By counting the number of branchings whose root lies in the m-set of Km,n ,
show that t(Km,n ) = mn−1 nm−1 .
4.2.14 Show that the Petersen graph has 2000 spanning trees.
4.2.15 Let T be a tree with vertex set V , and let f : V → V be a mapping with
no ﬁxed point. For v ∈ V , denote by v + the successor of v on the path vT f (v),
and by Df the digraph with vertex set V and arc set {(v, v + ) : v ∈ V }.
a) Show that each component of Df contains a unique directed 2-cycle.
b) The centroid of T is the set of all vertices v for which the largest component
of T − v has as few vertices as possible. For v ∈ V , let f (v) be a vertex of a
largest component of T − v, and let (x, y, x) be a directed 2-cycle of Df . Show
that the centroid of T is contained in the set {x, y}, and hence consists either
of one vertex or of two adjacent vertices.
(C. Jordan)
c) An endomorphism of a simple graph G is a mapping f : V → V such that, for
every xy ∈ E, either f (x) = f (y) or f (x)f (y) ∈ E. Let f be an endomorphism
of T , and let (x, y, x) be a directed 2-cycle of Df .
i) Show that f (x) = y and f (y) = x.
ii) Deduce that every endomorphism of a tree T ﬁxes either a vertex or an
edge of T .
(L. Lovász)

110

4 Trees

d) Let T be a spanning tree of the n-cube Qn , let f (v) be the antipodal vertex
of vertex v in Qn (that is, the unique vertex whose distance from v is n), and
let (x, y, x) be a directed 2-cycle of Df .
i) Show that dT (f (x), f (y)) ≥ 2n − 1.
ii) Deduce that every spanning tree of Qn has a fundamental cycle of length
at least 2n.
(R.L. Graham)
4.2.16 Let G be a connected
 simple graph and T a spanning tree of G. Consider
the mapping φ : V2 \ T → T2 (where T is regarded as a subset of E) deﬁned by
φ(xy) := {e, f }, where e and f are the ﬁrst and last edges of the path xT y.
a) Show that the mapping φ is a bijection.
 
 
b) Deduce that n2 − |T | = |T2 | .
c) Deduce Theorem 4.3. (N. Graham, R.C. Entringer, and L. Székely)

4.3 Fundamental Cycles and Bonds
The spanning trees of a connected graph, its even subgraphs, and its edge cuts
are intimately related. We describe these relationships here. Recall that, in the
context of even subgraphs, when we speak of a cycle we typically mean its edge
set. Likewise, by a spanning tree, we understand in this context the edge set of the
tree. Throughout this section, G denotes a connected graph and T a spanning tree
of G.
Cotrees
The complement E \ T of a spanning tree T is called a cotree, and is denoted T .
Consider, for example, the wheel W4 shown in Figure 4.4a, and the spanning tree
T := {1, 2, 4, 5} indicated by solid lines. The cotree T is simply the set of light
edges, namely {3, 6, 7, 8}.
By Proposition 4.1, for every edge e := xy of a cotree T of a graph G, there is a
unique xy-path in T connecting its ends, namely P := xT y. Thus T + e contains a
unique cycle. This cycle is called the fundamental cycle of G with respect to T and
e. For brevity, we denote it by Ce , the role of the tree T being implicit. Figure 4.4b
shows the fundamental cycles of W4 with respect to the spanning tree {1, 2, 4, 5},
namely C3 = {1, 2, 3, 4}, C6 = {1, 5, 6}, C7 = {1, 2, 5, 7}, and C8 = {4, 5, 8}.
One can draw interesting conclusions about the structure of a graph from the
properties of its fundamental cycles with respect to a spanning tree. For example,
if all the fundamental cycles are even, then every cycle of the graph is even and
hence, by Theorem 4.7, the graph is bipartite. (This is the idea behind the proof
of Theorem 4.7.) The following theorem and its corollaries show why fundamental
cycles are important.
Theorem 4.10 Let T be a spanning tree of a connected graph G, and let S be
a subset of its cotree T . Then C := {Ce : e ∈ S} is an even subgraph of G.
Moreover, C ∩ T = S, and C is the only even subgraph of G with this property.

4.3 Fundamental Cycles and Bonds

111

1
5

6
2

4
8

7
3
T

(a)

C3

C6

C7

C8

(b)

Fig. 4.4. (a) A spanning tree T of the wheel W4 , and (b) the fundamental cycles with
respect to T

Proof As each fundamental cycle Ce is an even subgraph, it follows from Corollary 2.16 that C is an even subgraph, too. Furthermore, C ∩ T = S, because each
edge of S appears in exactly one member of the family {Ce : e ∈ S}.
Let C  be any even subgraph of G such that C  ∩ T = S. Then
(C  C  ) ∩ T = (C ∩ T )  (C  ∩ T ) = S  S = ∅
Therefore the even subgraph C  C  is contained in T . Because the only even
subgraph contained in a tree is the empty even subgraph, we deduce that C  = C.

Corollary 4.11 Let T be a spanning tree of a connected graph G. Every even
subgraph of G can be expressed uniquely as a symmetric diﬀerence of fundamental
cycles with respect to T .
Proof Let C be an even subgraph of G and let S := C ∩ T . It follows from
Theorem 4.10 that C = {Ce : e ∈ S} and that this is the only way of expressing
C as a symmetric diﬀerence of fundamental cycles with respect to T .

The next corollary, which follows from Theorem 4.10 by taking S := T , has
several interesting applications (see, for example, Exercises 4.3.9 and 4.3.10).
Corollary 4.12 Every cotree of a connected graph is contained in a unique even
subgraph of the graph.

We now discuss the relationship between spanning trees and edge cuts. We
show that, for each of the above statements concerning even subgraphs, there is
an analogous statement concerning edge cuts. As before, let G be a connected
graph and let T be a spanning tree of G. Note that, because T is connected and
spanning, every nonempty edge cut of G contains at least one edge of T . Thus the
only edge cut contained in the cotree T is the empty edge cut (just as the only
even subgraph contained in T is the empty even subgraph).
In order to be able to state the cut-analogue of Theorem 4.10, we need the
notion of a fundamental bond. Let e := xy be an edge of T . Then T \ e has exactly

112

4 Trees

two components, one containing x and the other containing y. Let X denote the
vertex set of the component containing x. The bond Be := ∂(X) is contained in
T ∪ {e} and includes e. Moreover, it is the only such bond. For, let B be any
bond contained in T ∪ {e} and including e. By Corollary 2.12, B  Be is an edge
cut. Moreover, this edge cut is contained in T . But, as remarked above, the only
such edge cut is the empty edge cut. This shows that B = Be . The bond Be
is called the fundamental bond of G with respect to T and e. For instance, the
fundamental bonds of the wheel W4 with respect to the spanning tree {1, 2, 4, 5}
(indicated in Figure 4.5a) are B1 = {1, 3, 6, 7}, B2 = {2, 3, 7}, B4 = {3, 4, 8}, and
B5 = {5, 6, 7, 8} (see Figure 4.5b).
1
5

6

8

7

2

4
3
T
(a)

B1

B2

B4

B5

(b)

Fig. 4.5. (a) A spanning tree T of the wheel W4 , and (b) the fundamental bonds with
respect to T

The proofs of the following theorem and its corollaries are similar to those of
Theorem 4.10 and its corollaries, and are left as an exercise (Exercise 4.3.5).
Theorem 4.13 Let T be a spanning tree of a connected graph G, and let S be a
subset of T . Set B := {Be : e ∈ S}. Then B is an edge cut of G. Moreover
B ∩ T = S, and B is the only edge cut of G with this property.

Corollary 4.14 Let T be a spanning tree of a connected graph G. Every edge cut
of G can be expressed uniquely as a symmetric diﬀerence of fundamental bonds
with respect to T .

Corollary 4.15 Every spanning tree of a connected graph is contained in a unique
edge cut of the graph.

Corollaries 4.11 and 4.14 imply that the fundamental cycles and fundamental
bonds with respect to a spanning tree of a connected graph constitute bases of its
cycle and bond spaces, respectively, as deﬁned in Section 2.6 (Exercise 4.3.6). The
dimension of the cycle space of a graph is referred to as its cyclomatic number.
In this section, we have deﬁned and discussed the properties of fundamental
cycles and bonds with respect to spanning trees in connected graphs. All the above

4.3 Fundamental Cycles and Bonds

113

theorems are valid for disconnected graphs too, with maximal forests playing the
role of spanning trees.

Exercises
4.3.1 Determine the fundamental cycles and fundamental bonds of W4 with respect to the spanning tree shown in Figure 4.3 (using the edge labelling of Figure 4.4).
4.3.2 Tree Exchange Property
Let G be a connected graph, let T1 and T2 be (the edge sets of) two spanning trees
of G, and let e ∈ T1 \ T2 . Show that:
a) there exists f ∈ T2 \ T1 such that (T1 \ {e}) ∪ {f } is a spanning tree of G,
b) there exists f ∈ T2 \ T1 such that (T2 \ {f }) ∪ {e} is a spanning tree of G.
(Each of these two facts is referred to as a Tree Exchange Property.)
4.3.3 Let G be a connected graph and let S be a set of edges of G. Show that the
following statements are equivalent.
a) S is a spanning tree of G.
b) S contains no cycle of G, and is maximal with respect to this property.
c) S meets every bond of G, and is minimal with respect to this property.
4.3.4 Let G be a connected graph and let S be a set of edges of G. Show that the
following statements are equivalent.
a) S is a cotree of G.
b) S contains no bond of G, and is maximal with respect to this property.
c) S meets every cycle of G, and is minimal with respect to this property.
4.3.5
a) Prove Theorem 4.13.
b) Deduce Corollaries 4.14 and 4.15.
4.3.6
a) Let T be a spanning tree of a connected graph G. Show that:
i) the fundamental cycles of G with respect to T form a basis of its cycle
space,
ii) the fundamental bonds of G with respect to T form a basis of its bond
space.
b) Determine the dimensions of these two spaces.
(The cycle and bond spaces were deﬁned in Section 2.6.)
4.3.7 Let G be a connected graph, and let M be its incidence matrix.

114

4 Trees

a) Show that the columns of M corresponding to a subset S of E are linearly
independent over GF (2) if and only if G[S] is acyclic.
b) Deduce that there is a one-to-one correspondence between the bases of the
column space of M over GF (2) and the spanning trees of G.
(The above statements are special cases of more general results, to be discussed in
Section 20.2.)
4.3.8 Algebraic Duals
An algebraic dual of a graph G is a graph H for which there is a bijection θ :
E(G) → E(H) mapping each cycle of G to a bond of H and each bond of G to a
cycle of H.
a) Show that:
i) the octahedron and the cube are algebraic duals,
ii) K3,3 has no algebraic dual.
b) Let G be a connected graph and H an algebraic dual of G, with bijection θ.
i) Show that T is a spanning tree of G if and only if θ(T ) is a cotree of H.
ii) Deduce that t(G) = t(H).
4.3.9 Show that any graph which contains a Hamilton cycle has a covering by two
even subgraphs.
4.3.10 Show that any graph which contains two edge-disjoint spanning trees has:
a) an eulerian spanning subgraph,
b) a covering by two even subgraphs.
————— —————

4.4 Related Reading
Matroids
One of the characteristic properties of spanning trees of a connected graph is the
Tree Exchange Property noted in Exercise 4.3.2a. Because the spanning trees of
G correspond to bases of the incidence matrix M of G (Exercise 4.3.7), the Tree
Exchange Property may be seen as a special case of the appropriate exchange
property of bases of a vector space. Whitney (1935) observed that many essential
properties of spanning trees, such as the ones described in Section 4.3, and more
generally of bases of a vector space, may be deduced from that exchange property.
Motivated by this observation, he introduced the notion of a matroid.
A matroid is an ordered pair (E, B), consisting of a ﬁnite set E of elements
and a nonempty family B of subsets of E, called bases, which satisfy the following
Basis Exchange Property.
If B1 , B2 ∈ B and e ∈ B1 \ B2 then there exists f ∈ B2 \ B1 such that
(B1 \ {e}) ∪ {f } ∈ B

4.4 Related Reading

115

Let M be a matrix over a ﬁeld F, let E denote the set of columns of M, and
let B be the family of subsets of E which are bases of the column space of M.
Then (E, B) is a matroid. Matroids which arise in this manner are called linear
matroids. Various linear matroids may be associated with graphs, one example
being the matroid on the edge set of a connected graph in which the bases are
the edge sets of spanning trees. (In the matroidal context, statements concerning
connected graphs extend easily to all graphs, the role of spanning trees being
played by maximal forests when the graph is not connected.)
Much of matroid-theoretic terminology is suggested by the two examples mentioned above. For instance, subsets of bases are called independent sets, and minimal dependent sets are called circuits. In the matroid whose bases are the spanning
trees of a connected graph G, the independent sets of the matroid are the forests
of G and its circuits are the cycles of G. For this reason, this matroid is called the
cycle matroid of G, denoted M (G).
The dual of a matroid M = (E, B) is the matroid M ∗ = (E, B ∗ ), where B ∗ :=
{E \ B : B ∈ B}. When M is the linear matroid associated with a matrix M, the
bases of M ∗ are those subsets of E which are bases of the orthogonal complement of
the column space of M. When M is the cycle matroid of a connected graph G, the
bases of M ∗ are the cotrees of G, and its circuits are the bonds of G. For this reason,
the dual of the cycle matroid of a graph G is called the bond matroid of G, denoted
M ∗ (G). Many manifestations of this cycle–bond duality crop up throughout the
book. The reader is referred to Oxley (1992) for a thorough account of the theory
of matroids.

5
Nonseparable Graphs

Contents
5.1 Cut Vertices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
5.2 Separations and Blocks . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
Nonseparable Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
Blocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
Proof Technique: Splitting off Edges . . . . . . . . . . . . . . . 122
5.3 Ear Decompositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
Strong orientations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
5.4 Directed Ear Decompositions . . . . . . . . . . . . . . . . . . . . . . 129
5.5 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
Even Cycle Decompositions . . . . . . . . . . . . . . . . . . . . . . . . . . 133
Matroids and Nonseparability . . . . . . . . . . . . . . . . . . . . . . . 133

5.1 Cut Vertices
In Chapter 3, we introduced the notion of a cut edge and discussed various properties of connected graphs without cut edges. Here, we consider the analogous notion
for vertices. There are, in fact, two closely related notions, that of a cut vertex and
that of a separating vertex.
A cut vertex of a graph G is a vertex v such that c(G−v) > c(G). In particular, a
cut vertex of a connected graph is a vertex whose deletion results in a disconnected
graph. This notion is illustrated in Figure 5.1, the cut vertices being indicated by
solid dots.
By Exercise 3.1.3, a graph is connected if any two of its vertices are connected by
a path. Connected graphs without cut vertices have a stronger property, described
in the theorem below. Two distinct paths are internally disjoint if they have no
internal vertices in common.
Theorem 5.1 A connected graph on three or more vertices has no cut vertices if
and only if any two distinct vertices are connected by two internally disjoint paths.

118

5 Nonseparable Graphs

Fig. 5.1. The cut vertices of a graph

Proof Let G be a connected graph, and let v be a vertex of G. If any two vertices
of G are connected by two internally disjoint paths, any two vertices of G − v are
certainly connected by at least one path, so G − v is connected and v is not a cut
vertex of G. This being so for each vertex v, the graph G has no cut vertices.
Conversely, let G be a connected graph on at least three vertices, with no
cut vertices. Consider any two vertices u and v of G. We prove, by induction on
the distance d(u, v) between u and v, that these vertices are connected by two
internally disjoint paths.
Suppose, ﬁrst, that u and v are adjacent, and let e be an edge joining them.
Because neither u nor v is a cut vertex, e is not a cut edge (Exercise 5.1.2) and
therefore, by Proposition 3.2, lies in a cycle C of G. It follows that u and v are
connected by the internally disjoint paths uev and C \ e.
Suppose, now, that the theorem holds for any two vertices at distance less than
k, where k ≥ 2, and let d(u, v) = k. Consider a uv-path of length k, and let v  be
the immediate predecessor of v on this path. Then d(u, v  ) = k − 1. According to
the induction hypothesis, u and v  are connected by two internally disjoint paths,
P  and Q (see Figure 5.2).
Because G has no cut vertices, G − v  is connected and therefore contains a
uv-path R . The path R meets P  ∪ Q at u. Let x be the last vertex of R at
which R meets P  ∪ Q ; without loss of generality, we may suppose that x lies on
P  . Deﬁne P := uP  xR v and Q := uQ v  v. Then P and Q are internally disjoint
uv-paths in G.

P
u

Q

x
v

R
Fig. 5.2. Proof of Theorem 5.1

v

5.2 Separations and Blocks

119

Generalizations and variants of Theorem 5.1 are discussed in Chapter 7 and
Chapter 9.

Exercises
5.1.1 Show that every nontrivial graph has at least two vertices that are not cut
vertices.
5.1.2 Let G be a connected graph on at least three vertices, and let e = uv be a
cut edge of G. Show that either u or v is a cut vertex of G.
5.1.3 Let G be a nontrivial connected graph without cut vertices, and let H be
obtained from G by adding a new vertex and joining it to two vertices of G. Show
that H has no cut vertices.
5.1.4 Let G be a nontrivial connected graph without cut vertices, and let X and
Y be two (not necessarily disjoint) sets of vertices of G, each of cardinality at least
two. Show that there are two disjoint (X, Y )-paths in G.
5.1.5 Show that any two longest cycles in a loopless connected graph without cut
vertices have at least two vertices in common.
————— —————

5.2 Separations and Blocks
Whilst the notion of a cut vertex, as deﬁned in Section 5.1, is the most natural
analogue for vertices of the notion of cut edge, a slightly more general concept is
needed for graphs which may have loops.
A separation of a connected graph is a decomposition of the graph into two
nonempty connected subgraphs which have just one vertex in common. This common vertex is called a separating vertex of the graph. The separating vertices of
a disconnected graph are deﬁned to be those of its components. A cut vertex is
clearly a separating vertex, but not conversely: a vertex incident with a loop and
at least one other edge is a separating vertex but not necessarily a cut vertex.
However, in a loopless graph, every separating vertex is indeed a cut vertex, so in
this case the two concepts are identical. Whereas the graph shown in Figure 5.1
has four cut vertices, it has ﬁve separating vertices, as indicated in Figure 5.3.
Nonseparable Graphs
A graph is nonseparable if it is connected and has no separating vertices; otherwise,
it is separable. Up to isomorphism, there are just two nonseparable graphs on one
vertex, namely K1 , and K1 with a loop attached. All nonseparable graphs on two

120

5 Nonseparable Graphs

Fig. 5.3. The separating vertices of a graph

or more vertices are loopless. Multiple edges play no role here: a loopless graph is
nonseparable if and only if its underlying simple graph is nonseparable. Apart from
K1 and K2 , the most basic nonseparable graphs are the cycles. Whitney (1932c)
showed that nonseparable connected graphs may be characterized in terms of their
cycles, as follows.
Theorem 5.2 A connected graph is nonseparable if and only if any two of its edges
lie on a common cycle.
Proof If G is separable, it may be decomposed into two nonempty connected
subgraphs, G1 and G2 , which have just one vertex v in common. Let ei be an edge
of Gi incident with v, i = 1, 2. If either e1 or e2 is a loop, there is clearly no cycle
including both e1 and e2 . If not, v is a cut vertex of G. Let vi be the other end of
ei , i = 1, 2. Then there is no v1 v2 -path in G − v, hence no cycle in G through both
e1 and e2 .
Conversely, suppose that G is nonseparable. Let e1 and e2 be two edges of G.
Subdivide ei by a new vertex vi , i = 1, 2. The resulting graph H is also nonseparable (Exercise 5.2.1). By Theorem 5.1, there is a cycle in H through v1 and v2 ,

hence a cycle in G through e1 and e2 .

Blocks
A block of a graph is a subgraph which is nonseparable and is maximal with respect
to this property. A nonseparable graph therefore has just one block, namely the
graph itself. The blocks of a nontrivial tree are the copies of K2 induced by its
edges; and, in general, the blocks of a connected graph ﬁt together in a treelike
structure, as illustrated in Figure 5.4. In order to prove this assertion, we note ﬁrst
a number of basic facts about blocks.
Proposition 5.3 Let G be a graph. Then:
a) any two blocks of G have at most one vertex in common,
b) the blocks of G form a decomposition of G,
c) each cycle of G is contained in a block of G.

5.2 Separations and Blocks

(a)

121

(b)

Fig. 5.4. (a) The blocks of the graph of Figure 5.3, and (b) its block tree

Proof (a) We establish the claim by contradiction. Suppose that there are distinct blocks B1 and B2 with at least two common vertices. Note that B1 and B2
are necessarily loopless. Because they are maximal nonseparable subgraphs of G,
neither one contains the other, so B := B1 ∪ B2 properly contains both of them.
Let v ∈ V (B). Then B − v = (B1 − v) ∪ (B2 − v) is connected, because B1 − v
and B2 − v are both connected and have at least one common vertex. Thus B has
no cut vertices, and so, being loopless, is nonseparable. But this contradicts the
maximality of B1 and B2 .
(b) Each edge of G induces a nonseparable subgraph (on one or two vertices),
hence is contained in a maximal nonseparable subgraph, or block, of G. On the
other hand, no edge lies in two blocks, by (a). The blocks therefore constitute a
decomposition of G.
(c) As noted above, a cycle of G is a nonseparable subgraph, so is contained in a
block of G.

We may associate with any graph G a bipartite graph B(G) with bipartition
(B, S), where B is the set of blocks of G and S the set of separating vertices of G, a
block B and a separating vertex v being adjacent in B(G) if and only if B contains
v. Each path in G connecting vertices in distinct blocks gives rise to a unique path
in B(G) connecting these same blocks. It follows that if G is connected, so is
B(G). Furthermore, B(G) is acyclic, because a cycle in B(G) would correspond to
a cycle in G passing through two or more blocks, contradicting Proposition 5.3c.
The graph B(G) is therefore a tree, called the block tree of G (see Figure 5.4b).
If G is separable, the blocks of G which correspond to leaves of its block tree are
referred to as its end blocks. An internal vertex of a block of a graph G is a vertex
which is not a separating vertex of G.
By using this tree structure, one can deduce most properties of connected
graphs from the properties of their blocks, just as one can deduce most properties of graphs from those of their components. In other words, one can usually
reduce the study of all graphs to the study of their blocks. Examples are given in

122

5 Nonseparable Graphs

Exercises 5.2.5 and 5.2.8b. Another is provided by Proposition 5.3, which implies
that a graph has a cycle double cover if and only if each of its blocks has one.
It therefore suﬃces to prove the Cycle Double Cover Conjecture for nonseparable
graphs. In fact, it suﬃces to prove the conjecture for nonseparable cubic graphs.
This reduction is based on the operation of splitting oﬀ edges from a vertex (see
inset).
In the next section, we describe how any nonseparable graph other than K1
and K2 can be built up in a very simple way by starting with a cycle and adding
paths. We then make use of this structure to deduce several important properties
of nonseparable graphs.

Proof Technique: Splitting off Edges
Let v be a vertex of a graph G, and let e1 := vv1 and e2 := vv2 be two edges
of G incident to v. The operation of splitting oﬀ the edges e1 and e2 from v
consists of deleting e1 and e2 and then adding a new edge e joining v1 and
v2 . This operation is illustrated in Figure 5.5b. (Note that if v1 = v2 , then
splitting oﬀ e1 and e2 from v amounts to replacing these edges by a loop at
v1 = v2 .) The following theorem, due to Fleischner (1992), shows that under
certain conditions it can be performed without creating cut edges.
Theorem 5.4 The Splitting Lemma
Let G be a nonseparable graph and let v be a vertex of G of degree at least
four with at least two distinct neighbours. Then some two nonparallel edges
incident to v can be split oﬀ so that the resulting graph is connected and has
no cut edges.
Proof There are two graphs on three vertices and ﬁve edges which satisfy
the hypotheses of the theorem, and it may be readily checked that the theorem
holds for these two graphs. We proceed by induction on m. Let f be an edge
of G not incident to v, and set H := G \ f . If v is an internal vertex of some
block B of H, the theorem follows by induction applied to B and v. So we
may assume that v is a cut vertex of H. Because G is nonseparable, the block
tree of H is a path (Exercise 5.2.11), and the edge f links internal vertices of
the two endblocks of H, as illustrated in Figure 5.5a.
Let e1 and e2 be two edges incident with v and lying in distinct blocks of
H. Consider the graph G derived from G by splitting oﬀ e1 and e2 . It may
be checked that G is connected and that each edge of G lies in a cycle

(Exercise 5.2.9). By Proposition 3.2, G has no cut edges.

5.2 Separations and Blocks

123

H

v

f
(a)
e

v1

v2
e1

v

e2

f
(b)
Fig. 5.5. Proof of Theorem 5.4: (a) The block path H and the edge f , (b) the graph G

Splitting off Edges (continued)
Here is the promised application of the Splitting Lemma to cycle double covers.
Theorem 5.5 The Cycle Double Conjecture is true if and only if it is true
for all nonseparable cubic graphs.
Proof We have already noted that it suﬃces to prove the Cycle Double Cover
Conjecture for nonseparable graphs. Consider such a graph G. By Veblen’s
Theorem, we may assume that G has at least one vertex of odd degree. If G has
a vertex v of degree two, with neighbours u and w, let G be the nonseparable
graph obtained from G − v on adding a new edge joining u and w. If G has
a vertex v of degree four or more, let G be a nonseparable graph obtained
from G by splitting oﬀ two edges incident to v. In both cases, it is easy to
see that if G has a cycle double cover, then so has G. Applying these two
operations recursively results in a nonseparable cubic graph H, and if H has
a cycle double cover, then so has G.

For another application of the Splitting Lemma, see Exercise 5.2.12.

124

5 Nonseparable Graphs

Exercises
5.2.1 Let G be a nonseparable graph, and let e be an edge of G. Show that the
graph obtained from G by subdividing e is nonseparable.
5.2.2 Let G be a graph, and let e be an edge of G. Show that:
a) if G \ e is nonseparable and e is not a loop of G, then G is nonseparable,
b) if G / e is nonseparable and e is neither a loop nor a cut edge of G, then G is
nonseparable.
C

5.2.3 Let G be a graph, and let ∼ denote the binary relation on E deﬁned by
C
e ∼ f if and only if either e = f or there is a cycle of G containing both e and f .
Show that:
C

a) the relation ∼ is an equivalence relation on E,
b) the subgraphs of G induced by the equivalence classes under this relation are
its nontrivial blocks.
5.2.4 Show that a connected separable graph has at least two end blocks.
5.2.5 Show that:
a) a graph is even if and only if each of its blocks is even,
b) a graph is bipartite if and only if each of its blocks is bipartite.
5.2.6 We denote a graph G with two distinguished vertices x and y by G(x, y).
Prove the following edge analogue of Theorem 5.1.
Let G(x, y) be a connected graph without cut edges. Then there exist two edgedisjoint xy-paths in G.
5.2.7
a) Let G(x, y) be a nonseparable graph. Show that all xy-paths in G have the
same parity if and only if G is bipartite.
b) Deduce that each edge of a nonseparable nonbipartite graph lies in an odd
cycle.
5.2.8
a) Let B be a block of a graph G, and let P be a path in G connecting two
vertices of B. Show that P is contained in B.
b) Deduce that a spanning subgraph T of a connected graph G is a spanning tree
of G if and only if T ∩ B is a spanning tree of B for every block B of G.
5.2.9 Consider the graph G arising in the proof of Theorem 5.4. Show that:
a) G is connected,
b) each edge of G lies in a cycle.

5.3 Ear Decompositions

125

5.2.10 Construct a nonseparable graph each vertex of which has degree at least
four and at least two distinct neighbours, and in which splitting oﬀ any two adjacent edges results in a separable graph.
5.2.11 Let G be a nonseparable graph, and let e be an edge of G such that G \ e
is separable. Show that the block tree of G \ e is a path.
(G.A. Dirac; M.D. Plummer)
————— —————
5.2.12
a) By employing the splitting-oﬀ operation, show that every even graph has an
odd number of cycle decompositions.
b) Deduce that each edge of an even graph lies in an odd number of cycles.
(S. Toida)

5.3 Ear Decompositions
Apart from K1 and K2 , every nonseparable graph contains a cycle. We describe
here a simple recursive procedure for generating any such graph starting with an
arbitrary cycle of the graph.
Let F be a subgraph of a graph G. An ear of F in G is a nontrivial path in G
whose ends lie in F but whose internal vertices do not.
Proposition 5.6 Let F be a nontrivial proper subgraph of a nonseparable graph
G. Then F has an ear in G.
Proof If F is a spanning subgraph of G, the set E(G)\E(F ) is nonempty because,
by hypothesis, F is a proper subgraph of G. Any edge in E(G) \ E(F ) is then an
ear of F in G. We may suppose, therefore, that F is not spanning.
Since G is connected, there is an edge xy of G with x ∈ V (F ) and y ∈ V (G) \
V (F ). Because G is nonseparable, G − x is connected, so there is a (y, F − x)-path

Q in G − x. The path P := xyQ is an ear of F .
The proofs of the following proposition is left to the reader (Exercise 5.3.1).
Proposition 5.7 Let F be a nonseparable proper subgraph of a graph G, and let
P be an ear of F . Then F ∪ P is nonseparable.

A nested sequence of graphs is a sequence (G0 , G1 , . . . , Gk ) of graphs such that
Gi ⊂ Gi+1 , 0 ≤ i < k. An ear decomposition of a nonseparable graph G is a nested
sequence (G0 , G1 , . . . , Gk ) of nonseparable subgraphs of G such that:




G0 is a cycle,
Gi+1 = Gi ∪ Pi , where Pi is an ear of Gi in G, 0 ≤ i < k,
Gk = G.

126

5 Nonseparable Graphs

G0

G1

G2

G3

G4

G5

Fig. 5.6. An ear decomposition of the Petersen graph

An ear decomposition of the Petersen graph is shown in Figure 5.6, the initial
cycle and the ear added at each stage being indicated by heavy lines.
Using the fact that every nonseparable graph other than K1 and K2 has a
cycle, we may deduce the following theorem from Propositions 5.6 and 5.7.
Theorem 5.8 Every nonseparable graph other than K1 and K2 has an ear decomposition.

This recursive description of nonseparable graphs can be used to establish many
of their properties by induction. We describe below an interesting application of
ear decompositions to a problem of traﬃc ﬂow. Further applications may be found
in the exercises at the end of this section.
Strong orientations
A road network in a city is to be converted into a one-way system, in order that
traﬃc may ﬂow as smoothly as possible. How can this be achieved in a satisfactory
manner? This problem clearly involves ﬁnding a suitable orientation of the graph
representing the road network. Consider, ﬁrst, the graph shown in Figure 5.7a.
No matter how this graph is oriented, the resulting digraph will not be strongly
connected, so traﬃc will not be able to ﬂow freely through the system, certain
locations not being accessible from certain others. On the other hand, the graph
of Figure 5.7b has the strong orientation shown in Figure 5.7c (one, moreover, in
which each vertex is reachable from each other vertex in at most two steps).
Clearly, a necessary condition for a graph to have a strong orientation is that
it be free of cut edges. Robbins (1939) showed that this condition is also suﬃcient.
The proof makes use of the following easy proposition (Exercise 5.3.9).

5.3 Ear Decompositions

(a)

(b)

127

(c)

Fig. 5.7. (a) A graph with no strong orientation, and (b) a graph with (c) a strong
orientation

Proposition 5.9 A connected digraph is strongly connected if and only if each of
its blocks is strongly connected.

Theorem 5.10 Every connected graph without cut edges has a strong orientation.
Proof Let G be a connected graph without cut edges. By Proposition 5.9, it
suﬃces to show that each block B of G has a strong orientation. We may assume
that B = K1 . Moreover, because G has no cut edges, B = K2 . Thus B contains a
cycle and, by Theorem 5.8, has an ear decomposition (G0 , G1 , . . . , Gk ). Consider
the orientation of B obtained by orienting G0 as a directed cycle and each ear
as a directed path. It can be veriﬁed easily, by induction on i, that the resulting
orientation of Gi is strong for each i, 0 ≤ i ≤ k. In particular, the orientation

assigned to B = Gk is strong.

Exercises
5.3.1 Deduce Proposition 5.7 from Theorem 5.2.
5.3.2 An edge e of a nonseparable graph G is called deletable if G \ e is nonseparable, and contractible if G / e is nonseparable. Show that every edge of a
nonseparable graph is either deletable or contractible.
5.3.3 Show that if G has no even cycles, then each block of G is either an odd
cycle or a copy of K1 or K2 .
5.3.4 Let G be a nonseparable graph, and let x and y be two vertices of G. Show
that there is a linear ordering v1 , v2 , . . . , vn of the vertices of G such that v1 = x,
vn = y, and each vertex vj , 2 ≤ j ≤ n − 1, is joined to some vertex vi with i < j
and some vertex vk with k > j.
5.3.5 Prove the following dual version of Theorem 5.2: A connected graph is nonseparable if and only if any two of its edges are contained in a common bond.

128

5 Nonseparable Graphs
B

B

5.3.6 Let G be a graph and let ∼ denote the binary relation on E deﬁned by e ∼ f
if and only if either e = f or there is a bond of G containing both e and f . Show
that:
B

a) the relation ∼ is an equivalence relation on E,
b) the subgraphs of G induced by the equivalence classes under this relation are
its nontrivial blocks.
5.3.7 Deduce the result of Exercise 5.1.4 from Theorem 5.8.
5.3.8 Let G be a nonseparable graph diﬀerent from K1 and K2 , and let (G0 , G1 ,
. . . , Gk ) be an ear decomposition of G.
a) Show that k = m − n.
b) Suppose that Gi+1 = Gi ∪ Pi , where Pi is an ear of Gi in Gi+1 , 0 ≤ i < k. Set
C0 := G0 and, for 1 ≤ i ≤ k, let Ci be a cycle in Gi containing the ear Pi−1 .
Show that (C0 , C1 , . . . , Ck ) is a basis for C(G), the cycle space of G.
5.3.9 Prove Proposition 5.9.
————— —————
5.3.10 Let G be a nonseparable nonbipartite graph.
a) Show that the cycle space C(G) of G has a basis consisting of m−n even cycles
and one odd cycle.
b) Deduce that the dimension of the subspace of C(G) generated by the even
cycles of G is m − n.
(M.A. Henning and C.H.C. Little)
5.3.11 Call a family of subgraphs of a graph linearly independent if the incidence
vectors of their edge sets are linearly independent over GF (2). Let G be a nonseparable graph on at least two vertices.
a) If x and y are two vertices of G, show that there are m − n + 2 linearly
independent xy-paths in G, and that this number is the greatest possible.
b) Let e be an edge of G. Deduce that the cycle space C(G) of G has a basis
consisting entirely of cycles containing
 the edge e.
cycles.
c) Deduce that G has at least m−n+2
2


d) Which nonseparable graphs G have exactly m−n+2
cycles?
2
5.3.12 Vine
A vine on a path xP y in a graph G is a sequence (xi Qi yi : 1 ≤ i ≤ r) of internally
disjoint ears of P in G such that:
x = x1 ≺ x2 ≺ y1  x3 ≺ y2  x4 ≺ · · ·  xr ≺ yr−1 ≺ yr = y
where ≺ is the precedence relation on P (see Figure 5.8).
Let xP y be a path in a nonseparable graph G.
a) Show that there is vine (xi Qi yi : 1 ≤ i ≤ r) on P .

5.4 Directed Ear Decompositions
Q1

Q2

Q3

129

Q4

x

Q5
y

P
Fig. 5.8. A vine on a path

b) Set Pi := xi P yi and Ci := Pi ∪ Qi , 1 ≤ i ≤ r. Show that Cjk := {Ci : j ≤
i ≤ k} is a cycle of G, 1 ≤ j ≤ k ≤ r.
c) Suppose that r = 2t − 1 is odd.
i) Show that the t2 cycles Cjk , 1 ≤ j ≤ t ≤ k ≤ r, together cover the path P
at least t times and each ear Qi min{i, 2t − i} t times.
ii) Deduce that if P has length , then one
√ of these cycles has length at least
(G.A. Dirac)
( /t) + t, and hence length at least 2 .
iii) Perform a similar computation in the case where r is even.

5.4 Directed Ear Decompositions
There is an analogous theory of ear decompositions for nonseparable strong digraphs. Every strong digraph other than K1 contains a directed cycle (Exercise 2.5.6). This is the starting point of the ear decomposition which we now
describe.
Let F be a subdigraph of a digraph D. A directed ear of F in D is a directed
path in D whose ends lie in F but whose internal vertices do not.
Proposition 5.11 Let F be a nontrivial proper nonseparable strong subdigraph of
a nonseparable strong digraph D. Then F has a directed ear in D.
Proof Because D is nonseparable, F has an ear in D, by Proposition 5.6. Among
all such ears, we choose one in which the number of reverse arcs (those directed
towards its initial vertex) is as small as possible. We show that this path xP y is
in fact a directed ear.
Assume the contrary, and let (u, v) be a reverse arc of P (see Figure 5.9a).
Because D is strong, there exist in D a directed (F, u)-path Q and a directed
(v, F )-path R (one of which might be of length zero). The tail of Q and the head
of R must be one and the same vertex, for otherwise the directed walk QuvR would
contain a directed ear of F , contradicting the choice of P and our assumption that
P is not a directed ear. Let this common vertex be z (see Figure 5.9b). We may
suppose that z = x (the case z = y being analogous). Then the xz-walk xP vRz
contains an xz-path that contradicts the choice of P (see Figure 5.9c). Thus P is
indeed a directed ear of F .

The proof of the following proposition is similar to the proof of Proposition 5.7,
and is left to the reader (Exercise 5.4.1).

130

5 Nonseparable Graphs
R

P
x

P

x
v

F

v

v
F

F

z

u

R

x

z

u

y

y

y
Q

P
(a)

(b)

(c)

Fig. 5.9. Proof of Proposition 5.11: (a) The ear P of F , (b) the directed paths zQu and
vRz, and (c) the xz-walk xP vRz

Proposition 5.12 Let C be a strong subdigraph of a digraph D, and let P be a
directed ear of C in D. Then C ∪ P is strong.

A directed ear decomposition of a nonseparable strong digraph D is a nested
sequence (D0 , D1 , . . . , Dk ) of nonseparable strong subdigraphs of D such that:
 D0 is a directed cycle,
 Di+1 = Di ∪ Pi , where Pi is a directed ear of Di in D, 0 ≤ i < k,
 Dk = D.
A directed ear decomposition of a strong digraph D is shown in Figure 5.10,
the initial directed cycle and the directed ear added at each stage being indicated
by heavy lines.
Propositions 5.11 and 5.12 imply the following theorem.

D

D0

D1

D2

D3

D4

D5

D6

Fig. 5.10. A directed ear decomposition of a strong digraph

5.4 Directed Ear Decompositions

131

Fig. 5.11. A coherent feedback arc set of a digraph

Theorem 5.13 Every nonseparable strong digraph other than K1 has a directed
ear decomposition.

Recall that a feedback arc set of a digraph D is a set S of arcs such that
D \ S is acyclic (see Exercise 2.5.8). Knuth (1974) proved that, when the digraph
D is strongly connected, it has a feedback arc set with an important additional
property.
Consider a minimal feedback arc set S of a digraph D. Because S is minimal,
for any arc a in S the subdigraph (D \ S) + a contains at least one directed cycle.
Each such cycle includes the arc a, but no other arc of S. Let us call the directed
cycles arising in this way the fundamental cycles of D with respect to S. We shall
say that S is coherent if each arc of D belongs to some fundamental cycle. An
example of a coherent feedback arc set is shown in Figure 5.11.
Observe that in order for a digraph to admit a coherent feedback arc set, every
component of the digraph must be strong, because each arc should belong to a
directed cycle. Knuth (1974) showed that, conversely, every strong digraph has a
coherent feedback arc set. The proof makes use of directed ear decompositions.
Theorem 5.14 Every strong digraph admits a coherent feedback arc set.
Proof By induction on the number of arcs. Let D be a strong digraph. If D is
a directed cycle, the statement is obviously true. If not, then by Theorem 5.13
there exists a proper strong subdigraph D  and a directed ear yP x of D such that
D = D ∪ P . By induction, D has a coherent feedback arc set, and therefore a
coherent feedback arc set S  such that D \ S  contains a spanning x-branching
(Exercise 5.4.6). The set S := S  ∪ {a}, where a is an arbitrary arc of P , is clearly
a feedback arc set of D. Because D \ S  contains a spanning x-branching, there is
a directed path xQy in D \ S  . Observe that yP xQy is a fundamental cycle with
respect to S in D. Because S  is a coherent feedback arc set of D , it now follows
that S is a coherent feedback arc set of D.

Theorem 5.14 was discovered independently by Bessy and Thomassé (2004),
and in Chapter 19 we shall see an interesting application of this theorem obtained
by them.

132

5 Nonseparable Graphs

We conclude with another application of Theorem 5.13.
Theorem 5.15 Every strong digraph D has a strong spanning subdigraph with at
most 2n − 2 arcs.
Proof We may assume that D has no loops, deleting them if necessary. If D = K1 ,
the assertion is trivial. If not, we apply Theorem 5.13 to each block B of D.
Consider a directed ear decomposition of B. Delete from B the arcs in directed
ears of length one, thereby obtaining a strong spanning subdigraph F of B and
a directed ear decomposition (D0 , D1 , . . . , Dk ) of F in which each ear Pi is of
length at least two. Thus k ≤ v(F ) − v(D0 ) ≤ v(F ) − 2. Since e(D0 ) = v(D0 ) and
e(Pi ) = v(Pi ) − 1, 1 ≤ i ≤ k, we have:
e(F ) = e(D0 ) +

k


e(Pi ) = v(D0 ) +

i=1

k


(v(Pi ) − 1) = v(F ) + k ≤ 2v(F ) − 2

i=1

By Proposition 5.9, the union of the strong subdigraphs F (one in each block of
D) is a strong spanning subdigraph of D. Because each of the subdigraphs F has
at most 2v(F ) − 2 arcs, this spanning subdigraph of D has at most 2n − 2 arcs. 

Exercises
5.4.1 Prove Proposition 5.12.
5.4.2 Which strong digraphs D have no strong spanning subdigraphs with fewer
than 2n − 2 arcs?
5.4.3 Let G be a strong digraph. Show that:
a) G has at least m − n + 1 directed cycles,
b) G contains a spanning tree each of whose fundamental cycles is a directed cycle
if and only if G has exactly m − n + 1 directed cycles.
5.4.4 The cycle space of a digraph is the cycle space of its underlying graph. Show
that the cycle space of a strong digraph has a basis consisting of directed cycles.
5.4.5 By considering the digraph of Figure 5.11, show that a minimal feedback
arc set need not be coherent.
5.4.6 Let D be a strong digraph, and let x be a vertex of D. Suppose that D has a
coherent feedback arc set S. Choose S so that the set X of vertices of D reachable
from x in D \ S is as large as possible.
a) Suppose that X = V , and set T := (S \ ∂ + (X)) ∪ ∂ − (X). Show that:
i) T is a coherent feedback arc set of D,
ii) the set of vertices of D reachable from x in D \ T properly contains X.
b) Deduce that D \ S contains a spanning x-branching.
(D.E. Knuth)
————— —————

5.5 Related Reading

133

5.5 Related Reading
Even Cycle Decompositions
Veblen’s Theorem (2.7) gives a necessary and suﬃcient condition for a graph to
admit a cycle decomposition. If one would like all the constituent cycles of the
decomposition to be of even length, not only must the graph be even, but each
block must be of even size (number of edges). However, this requirement is still not
suﬃcient: K5 meets all these conditions, but admits no decomposition into even
cycles. On the other hand, Seymour (1981a) showed that a nonseparable even graph
of even size does admit an even cycle decomposition if it is planar. Extending the
example of K5 , Rizzi (2001) described an inﬁnite class of 4-connected even graphs
of even size which do not have even cycle decompositions, and he conjectured that
every simple 5-connected even graph of even size admits such a decomposition.
(The notion of a k-connected graph is deﬁned in Chapter 9.) For a survey on the
topic, we refer the reader to Jackson (1993a), or to the books by Fleischner (1990,
1991).
Matroids and Nonseparability
Although there is no matroidal analogue of a connected graph, the notion of nonseparability extends naturally to matroids. Let M be a matroid on a set E. A
partition of E into two nonempty subsets E1 and E2 is called a separation of M if
every basis of M is the union of a basis of E1 and a basis of E2 , where by a basis
of Ei we mean a maximal independent subset of Ei . A matroid is nonseparable
if it has no separation. Whitney (1935) showed that a matroid is nonseparable if
and only if any two of its elements belong to a common circuit. This result, when
applied to cycle matroids of graphs without isolated vertices, yields Theorem 5.2.
Whitney also showed that a matroid is nonseparable if and only if its dual is nonseparable. In particular, the cycle matroid of a graph is nonseparable if and only
if its bond matroid is nonseparable. Thus, from the point of view of matroids, the
statements in Exercises 5.2.3 and 5.3.6 are formally equivalent.

6
Tree-Search Algorithms

Contents
6.1 Tree-Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
Breadth-First Search and Shortest Paths . . . . . . . . . . . 137
Depth-First Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
Finding the Cut Vertices and Blocks of a Graph . . . . 142
6.2 Minimum-Weight Spanning Trees . . . . . . . . . . . . . . . . . . 145
The Jarnı́k–Prim Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . 146
6.3 Branching-Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
Finding Shortest Paths in Weighted Digraphs . . . . . . . 149
Directed Depth-First Search . . . . . . . . . . . . . . . . . . . . . . . . 151
Finding the Strong Components of a Digraph . . . . . . . 152
6.4 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
Data Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156

6.1 Tree-Search
We have seen that connectedness is a basic property of graphs. But how does one
determine whether a graph is connected? In the case of small graphs, it is a routine
matter to do so by inspection, searching for paths between all pairs of vertices.
However, in large graphs, such an approach could be time-consuming because the
number of paths to examine might be prohibitive. It is therefore desirable to have
a systematic procedure, or algorithm, which is both eﬃcient and applicable to all
graphs. The following property of the trees of a graph provides the basis for such
a procedure. For a subgraph F of a graph G, we simply write ∂(F ) for ∂(V (F )),
and refer to this set as the edge cut associated with F .
Let T be a tree in a graph G. If V (T ) = V (G), then T is a spanning tree of G and
we may conclude, by Theorem 4.6, that G is connected. But if V (T ) ⊂ V (G), two
possibilities arise: either ∂(T ) = ∅, in which case G is disconnected, or ∂(T ) = ∅.
In the latter case, for any edge xy ∈ ∂(T ), where x ∈ V (T ) and y ∈ V (G) \ V (T ),

136

6 Tree-Search Algorithms

the subgraph of G obtained by adding the vertex y and the edge xy to T is again
a tree in G (see Figure 6.1).
r

y
x

Fig. 6.1. Growing a tree in a graph

Using the above idea, one may generate a sequence of rooted trees in G, starting
with the trivial tree consisting of a single root vertex r, and terminating either
with a spanning tree of the graph or with a nonspanning tree whose associated
edge cut is empty. (In practice, this involves scanning the adjacency lists of the
vertices already in the tree, one by one, to determine which vertex and edge to
add to the tree.) We refer to such a procedure as a tree-search and the resulting
tree as a search tree.
If our objective is just to determine whether a graph is connected, any treesearch will do. In other words, the order in which the adjacency lists are considered
is immaterial. However, tree-searches in which speciﬁc criteria are used to determine this order can provide additional information on the structure of the graph.
For example, a tree-search known as breadth-ﬁrst search may be used to ﬁnd the
distances in a graph, and another, depth-ﬁrst search, to ﬁnd the cut vertices of a
graph.
The following terminology is useful in describing the properties of search trees.
Recall that an r-tree is a tree with root r. Let T be such a tree. The level of a vertex
v in T is the length of the path rT v. Each edge of T joins vertices on consecutive
levels, and it is convenient to think of these edges as being oriented from the lower
to the higher level, so as to form a branching. Several other terms customarily used
in the study of rooted trees are borrowed from genealogy. For instance, each vertex
on the path rT v, including the vertex v itself, is called an ancestor of v, and each
vertex of which v is an ancestor is a descendant of v. An ancestor or descendant
of a vertex is proper if it is not the vertex itself. Two vertices are related in T if
one is an ancestor of the other. The immediate proper ancestor of a vertex v other
than the root is its predecessor or parent, denoted p(v), and the vertices whose
predecessor is v are its successors or children. Note that the (oriented) edge set of
a rooted tree T := (V (T ), E(T )) is determined by its predecessor function p, and
conversely
E(T ) = {(p(v), v) : v ∈ V (T ) \ {r}}

6.1 Tree-Search

137

where r is the root of T . We often ﬁnd it convenient to describe a rooted tree by
specifying its vertex set and predecessor function.
For the sake of simplicity, we assume throughout this chapter that our graphs
and digraphs are connected. This assumption results in no real loss of generality.
We may suppose that the components have already been found by means of a
tree-search. Each component may then be treated individually. We also assume
that our graphs and digraphs are free of loops, which play an insigniﬁcant role
here.
Breadth-First Search and Shortest Paths
In most types of tree-search, the criterion for selecting a vertex to be added to the
tree depends on the order in which the vertices already in the tree T were added. A
tree-search in which the adjacency lists of the vertices of T are considered on a ﬁrstcome ﬁrst-served basis, that is, in increasing order of their time of incorporation
into T , is known as breadth-ﬁrst search. In order to implement this algorithm
eﬃciently, vertices in the tree are kept in a queue; this is just a list Q which is
updated either by adding a new element to one end (the tail of Q) or removing
an element from the other end (the head of Q). At any moment, the queue Q
comprises all vertices from which the current tree could potentially be grown.
Initially, at time t = 0, the queue Q is empty. Whenever a new vertex is added
to the tree, it joins Q. At each stage, the adjacency list of the vertex at the head
of Q is scanned for a neighbour to add to the tree. If every neighbour is already in
the tree, this vertex is removed from Q. The algorithm terminates when Q is once
more empty. It returns not only the tree (given by its predecessor function p), but
also a function : V → N, which records the level of each vertex in the tree and,
more importantly, their distances from r in G. It also returns a function t : V → N
which records the time of incorporation of each vertex into the tree T . We keep
track of the vertices in T by colouring them black. The notation G(x) signiﬁes a
graph G with a speciﬁed vertex (or root) x. Recall that an x-tree is a tree rooted
at vertex x.
Algorithm 6.1 Breadth-First Search (BFS)
Input: a connected graph G(r)
Output: an r-tree T in G with predecessor function p, a level function
that (v) = dG (r, v) for all v ∈ V , and a time function t
1: set i := 0 and Q := ∅
2: increment i by 1
3: colour r black
4: set (r) := 0 and t(r) := i
5: append r to Q
6: while Q is nonempty do
7:
consider the head x of Q
8:
if x has an uncoloured neighbour y then
9:
increment i by 1

such

138

6 Tree-Search Algorithms
10:
colour y black
11:
set p(y) := x, (y) := (x) + 1 and t(y) := i
12:
append y to Q
13:
else
14:
remove x from Q
15:
end if
16: end while
17: return (p, , t)

The spanning tree T returned by BFS is called a breadth-ﬁrst search tree,
or BFS-tree, of G. An example of a BFS-tree in a connected graph is shown in
Figure 6.2. The labels of the vertices in Figure 6.2a indicate the times at which
they were added to the tree. The distance function is shown in Figure 6.2b. The
evolution of the queue Q is as follows, the vertices being indicated by their times.
∅ → 1 → 12 → 123 → 1234 → 12345 → 2345 → 23456
→ 234567 → 34567 → 345678 → 3456789 → 456789
→ 4 5 6 7 8 9 10 → 5 6 7 8 9 10 → 5 6 7 8 9 10 11 → 6 7 8 9 10 11
→ 6 7 8 9 10 11 12 → 7 8 9 10 11 12 → 8 9 10 11 12 → 9 10 11 12
→ 9 10 11 12 13 → 10 11 12 13 → 11 12 13 → 12 13 → 13 → ∅
2

1

1

0

5
4

6

11

7
3

9

2

2

2

1
13

8

2

10

12

1
1

3

3
2

(a)

2
(b)

Fig. 6.2. A breadth-ﬁrst search tree in a connected graph: (a) the time function t, and
(b) the level function 

BFS-trees have two basic properties, the ﬁrst of which justiﬁes our referring to
as a level function.
Theorem 6.2 Let T be a BFS-tree of a connected graph G, with root r. Then:
a) for every vertex v of G, (v) = dT (r, v), the level of v in T ,
b) every edge of G joins vertices on the same or consecutive levels of T ; that is,
| (u) − (v)| ≤ 1, for all uv ∈ E

6.1 Tree-Search

139

Proof The proof of (a) is left to the reader (Exercise 6.1.1). To establish (b), it
suﬃces to prove that if uv ∈ E and (u) < (v), then (u) = (v) − 1.
We ﬁrst establish, by induction on (u), that if u and v are any two vertices
such that (u) < (v), then u joined Q before v. This is evident if (u) = 0, because
u is then the root of T . Suppose that the assertion is true whenever (u) < k, and
consider the case (u) = k, where k > 0. Setting x := p(u) and y := p(v), it
follows from line 11 of BFS (Algorithm 6.1) that (x) = (u) − 1 < (v) − 1 = (y).
By induction, x joined Q before y. Therefore u, being a neighbour of x, joined Q
before v.
Now suppose that uv ∈ E and (u) < (v). If u = p(v), then (u) = (v) − 1,
again by line 11 of the algorithm. If not, set y := p(v). Because v was added to
T by the edge yv, and not by the edge uv, the vertex y joined Q before u, hence
(y) ≤ (u) by the claim established above. Therefore (v) − 1 = (y) ≤ (u) ≤

(v) − 1, which implies that (u) = (v) − 1.
The following theorem shows that BFS runs correctly.
Theorem 6.3 Let G be a connected graph. Then the values of the level function
returned by BFS are the distances in G from the root r:
(v) = dG (r, v), for all v ∈ V
Proof By Theorem 6.2a, (v) = dT (r, v). Moreover, dT (r, v) ≥ dG (r, v) because
T is a subgraph of G. Thus (v) ≥ dG (r, v). We establish the opposite inequality
by induction on the length of a shortest (r, v)-path.
Let P be a shortest (r, v)-path in G, where v = r, and let u be the predecessor
of v on P . Then rP u is a shortest (r, u)-path, and dG (r, u) = dG (r, v) − 1. By
induction, (u) ≤ dG (r, u), and by Theorem 6.2b, (v) − (u) ≤ 1. Therefore
(v) ≤ (u) + 1 ≤ dG (r, u) + 1 = dG (r, v)



Alternative proofs of Theorems 6.2 and 6.3 are outlined in Exercise 6.1.2.
Depth-First Search
Depth-ﬁrst search is a tree-search in which the vertex added to the tree T at each
stage is one which is a neighbour of as recent an addition to T as possible. In
other words, we ﬁrst scan the adjacency list of the most recently added vertex
x for a neighbour not in T . If there is such a neighbour, we add it to T . If not,
we backtrack to the vertex which was added to T just before x and examine its
neighbours, and so on. The resulting spanning tree is called a depth-ﬁrst search
tree or DFS-tree.
This algorithm may be implemented eﬃciently by maintaining the vertices of
T whose adjacency lists have yet to be fully scanned, not in a queue as we did for
breadth-ﬁrst search, but in a stack. A stack is simply a list, one end of which is
identiﬁed as its top; it may be updated either by adding a new element as its top

140

6 Tree-Search Algorithms

or else by removing its top element. In depth-ﬁrst search, the stack S is initially
empty. Whenever a new vertex is added to the tree T , it is added to S. At each
stage, the adjacency list of the top vertex is scanned for a neighbour to add to T .
If all of its neighbours are found to be already in T , this vertex is removed from S.
The algorithm terminates when S is once again empty. As in breadth-ﬁrst search,
we keep track of the vertices in T by colouring them black.
Associated with each vertex v of G are two times: the time f (v) when v is
incorporated into T (that is, added to the stack S), and the time l(v) when all the
neighbours of v are found to be already in T , the vertex v is removed from S, and
the algorithm backtracks to p(v), the predecessor of v in T . (The time function l(v)
is not to be confused with the level function (v) of BFS.) The time increments by
one with each change in the stack S. In particular, f (r) = 1, l(v) = f (v) + 1 for
every leaf v of T , and l(r) = 2n.
Algorithm 6.4 Depth-First Search (DFS)
Input: a connected graph G
Output: a rooted spanning tree of G with predecessor function p, and two
time functions f and l
1: set i := 0 and S := ∅
2: choose any vertex r (as root)
3: increment i by 1
4: colour r black
5: set f (r) := i
6: add r to S
7: while S is nonempty do
8:
consider the top vertex x of S
9:
increment i by 1
10:
if x has an uncoloured neighbour y then
11:
colour y black
12:
set p(y) := x and f (y) := i
13:
add y to the top of S
14:
else
15:
set l(x) := i
16:
remove x from S
17:
end if
18: end while
19: return (p, f, l)
A DFS-tree of a connected graph is shown in Figure 6.3; the tree is indicated
by solid lines and each vertex v of the tree is labelled by the pair (f (v), l(v)). The
evolution of the stack S is as follows, the vertices being indicated by their times
of incorporation into T .

6.1 Tree-Search

(2, 25)
(1, 26)

(7, 14)

(3, 24)

(4, 23)
(6, 15)
(11, 12)

(19, 20)
(17, 22)

26

2

25

3

24

4

23

(8, 9)
(5, 16)

(18, 21)

1

141

(10, 13)
(a)

8

9

5

16

17

22

6

15

18

21

7

14

19

20

10

13

11

12
(b)

Fig. 6.3. (a) A depth-ﬁrst search tree of a connected graph, and (b) another drawing of
this tree

∅ → 1 → 12 → 123 → 1234 → 12345 → 123456 → 1234567
→ 1 2 3 4 5 6 7 8 → 1 2 3 4 5 6 7 → 1 2 3 4 5 6 7 10 → 1 2 3 4 5 6 7 10 11
→ 1 2 3 4 5 6 7 10 → 1 2 3 4 5 6 7 → 1 2 3 4 5 6 → 1 2 3 4 5 → 1 2 3 4 → 1 2 3 4 17
→ 1 2 3 4 17 18 → 1 2 3 4 17 18 19 → 1 2 3 4 17 18 → 1 2 3 4 17 → 1 2 3 4 → 1 2 3
→ 12 → 1 → ∅
The following proposition provides a link between the input graph G, its DFStree T , and the two time functions f and l returned by DFS.
Proposition 6.5 Let u and v be two vertices of G, with f (u) < f (v).
a) If u and v are adjacent in G, then l(v) < l(u).
b) u is an ancestor of v in T if and only if l(v) < l(u).
Proof
a) According to lines 8–12 of DFS, the vertex u is removed from the stack S only
after all potential children (uncoloured neighbours) have been considered for
addition to S. One of these neighbours is v, because f (u) < f (v). Thus v is
added to the stack S while u is still in S, and u cannot be removed from S
before v is removed. It follows that l(v) < l(u).
b) Suppose that u is an ancestor of v in T . By lines 9 and 12 of DFS, the values
of f increase along the path uT v. Applying (a) to each edge of this path yields
the inequality l(v) < l(u).

142

6 Tree-Search Algorithms

Now suppose that u is not an ancestor of v in T . Because f (u) < f (v), v is
not an ancestor of u either. Thus u does not lie on the path rT v and v does
not lie on the path rT u. Let s be the last common vertex of these two paths.
Again, because f (u) < f (v), the proper descendants of s on the path rT v
could have been added to the stack S only after all the proper descendants of
s on the path rT u had been removed from it (thereby leaving s as top vertex).
In particular, v could only have been added to S after u had been removed, so
l(u) < f (v). Because f (v) < l(v), we conclude that l(u) < l(v).

We saw earlier (in Theorem 6.2b) that BFS-trees are characterized by the property that every edge of the graph joins vertices on the same or consecutive levels.
The quintessential property of DFS-trees is described in the following theorem.
Theorem 6.6 Let T be a DFS-tree of a graph G. Then every edge of G joins
vertices which are related in T .
Proof This follows almost immediately from Proposition 6.5. Let uv be an edge
of G. Without loss of generality, suppose that f (u) < f (v). By Proposition 6.5a,
l(v) < l(u). Now Proposition 6.5b implies that u is an ancestor of v, so u and v
are related in T .


Finding the Cut Vertices and Blocks of a Graph
In a graph which represents a communications network, the cut vertices of the
graph correspond to centres whose breakdown would disrupt communications. It
is thus important to identify these sites, so that precautions may be taken to reduce
the vulnerability of the network. Tarjan (1972) showed how this problem can be
solved eﬃciently by means of depth-ﬁrst search.
While performing a depth-ﬁrst search of a graph G, it is convenient to orient the
edges of G with respect to the DFS-tree T . We orient each tree edge from parent
to child, and each nontree edge (whose ends are related in T , by Theorem 6.6)
from descendant to ancestor. The latter edges are called back edges. The following
characterization of cut vertices is an immediate consequence of Theorem 6.6.
Theorem 6.7 Let T be a DFS-tree of a connected graph G. The root of T is a cut
vertex of G if and only if it has at least two children. Any other vertex of T is a
cut vertex of G if and only if it has a child no descendant of which dominates (by
a back edge) a proper ancestor of the vertex.

Let us see how depth-ﬁrst search may be used to ﬁnd the cut vertices and
blocks of a (connected) graph in linear time; that is, in time proportional to the
number of edges of the graph.
Let T be a DFS-tree of a connected graph G, and let B be a block of G. Then
T ∩B is a tree in G (Exercise 5.2.8b). Moreover, because T is a rooted tree, we may
associate with B a unique vertex, the root of the tree T ∩ B. We call this vertex

6.1 Tree-Search

143

the root of B with respect to T . It is the ﬁrst vertex of B to be incorporated into
T . Note that the cut vertices of G are just the roots of blocks (with the exception
of r, if it happens to be the root of a single block). Thus, in order to determine the
cut vertices and blocks of G, it suﬃces to identify these roots. It turns out that
one can do so during the execution of depth-ﬁrst search.
To this end, we consider the function f ∗ : V → N deﬁned as follows. If some
proper ancestor of v can be reached from v by means of a directed path consisting
of tree edges (possibly none) followed by one back edge, f ∗ (v) is deﬁned to be
the least f -value of such an ancestor; if not, we set f ∗ (v) := f (v). Observe, now,
that a vertex v is the root of a block if and only if it has a child w such that
f ∗ (w) ≥ f (v).
The function f ∗ can be computed while executing depth-ﬁrst search (see Exercise 6.1.12), and the criterion for roots of blocks may be checked at the same
time. Thus the roots of the blocks of G, as well as the blocks themselves, can be
determined in linear time.
The roots of the blocks of a graph with respect to a DFS-tree are shown in
Figure 6.4. The pair (f (v), l(v)) is given for each vertex v. We leave it to the reader
to orient the edges of G as described above, and to compute the function f ∗ .
(2, 9)
r
(1, 26)

(16, 19)
(20, 21)

(3, 8)

(17, 18)

(5, 6)
(10, 25)

(15, 22)
(14, 23)

(4, 7)
(11, 12)

(13, 24)

Fig. 6.4. Finding the cut vertices and blocks of a graph by depth-ﬁrst search

Exercises
6.1.1 Let T be a BFS-tree of a connected graph G. Show that (v) = dT (r, v),
for all v ∈ V .
6.1.2
a) Let T be a BFS-tree of a connected graph G and let z denote the last vertex
to enter T . Show that T − z is a BFS-tree of G − z.
b) Using (a), give inductive proofs of Theorems 6.2 and 6.3.

144

6 Tree-Search Algorithms

6.1.3 Reﬁne Algorithm 6.1 (breadth-ﬁrst search) so that it returns either a bipartition of the graph (if the graph is bipartite) or an odd cycle (if it is not).
6.1.4 Describe an algorithm based on breadth-ﬁrst search for ﬁnding a shortest
odd cycle in a graph.
6.1.5 Let G be a Moore graph (deﬁned in Exercise 3.1.12). Show that all BFS-trees
of G are isomorphic.
6.1.6 Let T be a DFS-tree of a nontrivial connected simple graph G, and let v be
the root of a block B of G. Show that the degree of v in T ∩ B is one.
————— —————

6.1.7 For a connected graph G, deﬁne σ(G) := {d(u, v) : u, v ∈ V }.
a) Let G be a connected graph.
For v ∈ V , let Tv be a breadth-ﬁrst search tree
of G rooted at v. Show that v∈V σ(Tv ) = 2(n − 1)σ(G).
b) Deduce that every connected graph G has a spanning tree T such that σ(T ) ≤
(R.C. Entringer, D.J. Kleitman and L. Székely)
2(1 − n1 )σ(G).
6.1.8 Let T be a rooted tree. Two breadth-ﬁrst searches of T (starting at its root)
are distinct if their time functions t diﬀer. Likewise, two depth-ﬁrst searches of T
are distinct if at least one of their time functions f and l diﬀer. Show that the
number of distinct breadth-ﬁrst searches of the tree T is equal to the
 number of
distinct depth-ﬁrst searches of T , and that this number is precisely {n(v)! : v ∈
V (T )}, where n(v) is the number of children of v in T (and 0! = 1).
6.1.9 Let G be a connected graph, let x be
a vertex of G, and let T be a spanning
tree of G which maximizes the function {dT (x, v) : v ∈ V }. Show that T is a
DFS-tree of G.
(Zs. Tuza)
6.1.10 Let G be a connected graph in which every DFS-tree is a Hamilton path
(rooted at one end). Show that G is a cycle, a complete graph, or a complete
bipartite graph in which both parts have the same number of vertices.
(G. Chartrand and H.V. Kronk)
6.1.11 Chord of a Cycle
A chord of a cycle C in a graph G is an edge in E(G) \ E(C) both of whose ends
lie on C. Let G be a simple graph with m ≥ 2n − 3, where n ≥ 4. Show that G
contains a cycle with at least one chord.
(L. Pósa)
6.1.12
a) Let G be a connected graph and T a DFS-tree of G, where the edges of T are
oriented from parent to child, and the back edges from descendant to ancestor.
For v ∈ V , set:
g(v) := min{f (w) : (v, w) ∈ E(G) \ E(T )}
h(v) := min{f ∗ (w) : (v, w) ∈ E(T )}

6.2 Minimum-Weight Spanning Trees

145

Show that:
i) the function f ∗ may be computed recursively by the formula
f ∗ (v) = min{f (v), g(v), h(v)}
ii) a nonroot vertex v of T is a cut vertex of G if and only if f (v) ≤ h(v).
b) Reﬁne Algorithm 6.4 (Depth-First Search) so that it returns the cut vertices
and the blocks of a connected graph.
(R.E. Tarjan)
6.1.13 Let G be 
a simple connected graph, and let w : V → Z be a weight function
on V such that v∈V w(v) ≥ m − n + 1. For X ⊂ V , the move MX consists of
distributing a unit weight from each vertex of X to each of its neighbours in V \ X
(so that the weight of a vertex v of V \ X increases by dX (v)).
a) Show that the weight can be made nonnegative at each vertex by means of a
sequence of moves.

b) Show that this is no longer necessarily true if v∈V w(v) ≤ m − n.
(M. Baker and S. Norine)

6.2 Minimum-Weight Spanning Trees
An electric grid is to be set up in China, linking the cities of Beijing, Chongqing,
Guangdong, Nanjing, Shanghai, Tianjin, and Wuhan to the Three Gorges generating station situated at Yichang. The locations of these cities and the distances
(in kilometres) between them are given in Figure 6.5. How should the grid be
constructed so that the total connection distance is as small as possible?

B
T

N
C

Y W

S

C
G
N
S
T W
Y
B 1457 1892 901 1078 111 1057 1117
– 978 1199 1430 1442 750 473
C
–
– 1133 1197 1820 837 867
G
–
–
– 267 800 459 727
N
–
–
–
– 970 681 962
S
–
–
–
–
– 988 1080
T
–
–
–
–
–
– 285
W

G

Fig. 6.5. The China hydro-electric grid problem

146

6 Tree-Search Algorithms

The table in Figure 6.5 determines a weighted complete graph with vertices B,
C, G, N , S, T , W , and Y . Our problem amounts to ﬁnding, in this graph, a connected spanning subgraph of minimum weight. Because the weights are positive,
this subgraph will be a spanning tree.
More generally, we may consider the following problem.
Problem 6.8 Minimum-Weight Spanning Tree
Given: a weighted connected graph G,
Find: a minimum-weight spanning tree T in G.
For convenience, we refer to a minimum-weight spanning tree as an optimal
tree.
The Jarnı́k–Prim Algorithm
The Minimum-Weight Spanning Tree Problem (6.8) can be solved by means of a
tree-search due to Jarnı́k (1930) and Prim (1957). In this algorithm, which we call
the Jarnı́k–Prim Algorithm, an arbitrary vertex r is selected as the root of T , and
at each stage the edge added to the current tree T is any edge of least weight in
the edge cut associated with T .
As in breadth-ﬁrst and depth-ﬁrst search, the vertices of T are coloured black.
Also, in order to implement the above tree-search eﬃciently, each uncoloured vertex
v is assigned a provisional cost c(v). This is the least weight of an edge linking
v to some black vertex u, if there is such an edge, in which case we assign u as
provisional predecessor of v, denoted p(v). Initially, each vertex has inﬁnite cost
and no predecessor. These two provisional labels are updated at each stage of the
algorithm.
Algorithm 6.9 The Jarnı́k–Prim Algorithm
Input: a weighted connected graph (G, w)
Output: an optimal tree T of G with predecessor function p, and its weight
w(T )
1: set p(v) := ∅ and c(v) := ∞, v ∈ V , and w(T ) := 0
2: choose any vertex r (as root)
3: replace c(r) by 0
4: while there is an uncoloured vertex do
5:
choose such a vertex u of minimum cost c(u)
6:
colour u black
7:
for each uncoloured vertex v such that w(uv) < c(v) do
8:
replace p(v) by u and c(v) by w(uv)
9:
replace w(T ) by w(T ) + c(u)
10:
end for
11: end while
12: return (p, w(T ))

6.2 Minimum-Weight Spanning Trees

147

In practice, the set of uncoloured vertices and their costs are kept in a structure
called a priority queue. Although this is not strictly a queue as deﬁned earlier, the
vertex of minimum cost is always located at the head of the queue (hence the
‘priority’) and can therefore be accessed immediately. Furthermore, the ‘queue’ is
structured so that it can be updated rather quickly when this vertex is removed
(coloured black), or when the costs are modiﬁed (as in line 9 of the Jarnı́k–Prim
Algorithm). As to how this can be achieved is outlined in Section 6.4.
We call a rooted spanning tree output by the Jarnı́k–Prim Algorithm a Jarnı́k–
Prim tree. The construction of such a tree in the electric grid graph is illustrated
(not to scale) in Figure 6.6, the edges being numbered according to the order in
which they are added.
In step 1, Yichang (Y) is chosen as the root. No vertex has yet been coloured.
Because c(Y ) = 0, and c(v) = ∞ for every other vertex v, vertex Y is chosen as u in
step 2, and coloured black. All uncoloured vertices are assigned Y as predecessor,
and their costs are reduced to:
c(B) = 1117, c(C) = 473, c(G) = 867
c(N ) = 727, c(S) = 962, c(T ) = 1080, c(W ) = 285
The weight of the tree T remains zero.
In the second iteration of step 2, W is selected as the vertex u and coloured
black. The predecessors of the uncoloured vertices, and their costs, become:
p(B) = W, p(C) = Y, p(G) = W, p(N ) = W, p(S) = W, p(T ) = W
c(B) = 1057, c(C) = 473, c(G) = 837, c(N ) = 459, c(S) = 681, c(T ) = 988
and w(T ) is increased to 285.
In the third iteration of step 2, N is selected as the vertex u and coloured black.
The predecessors of the uncoloured vertices, and their costs, become:
p(B) = N, p(C) = Y, p(G) = W, p(S) = N, p(T ) = N
c(B) = 901, c(C) = 473, c(G) = 837, c(S) = 267, c(T ) = 800
and w(T ) is increased to 285 + 459 = 744.
This procedure continues until all the vertices are coloured black. The total
length of the grid thereby constructed is 3232 kilometres.
The following theorem shows that the algorithm runs correctly.
Theorem 6.10 Every Jarnı́k–Prim tree is an optimal tree.
Proof Let T be a Jarnı́k–Prim tree with root r. We prove, by induction on v(T ),
that T is an optimal tree. The ﬁrst edge added to T is an edge e of least weight
in the edge cut associated with {r}; in other words, w(e) ≤ w(f ) for all edges
f incident with r. To begin with, we show that some optimal tree includes this
edge e. Let T ∗ be an optimal tree. We may assume that e ∈ E(T ∗ ). Thus T ∗ + e

148

6 Tree-Search Algorithms
B
6
T
5
2
1
4

Y

N

3
S

W
7

C
G
Fig. 6.6. An optimal tree returned by the Jarnı́k–Prim Algorithm

contains a unique cycle C. Let f be the other edge of C incident with r. Then
T ∗∗ := (T ∗ + e) \ f is a spanning tree of G. Moreover, because w(e) ≤ w(f ),
w(T ∗∗ ) = w(T ∗ ) + w(e) − w(f ) ≤ w(T ∗ )
As T ∗ is an optimal tree, equality must hold, so T ∗∗ is also an optimal tree.
Moreover, T ∗∗ contains e.
Now consider the graph G := G / e, and denote by r the vertex resulting
from the contraction of e. There is a one-to-one correspondence between the set
of spanning trees of G that contain e and the set of all spanning trees of G
(Exercise 4.2.1a). Thus, to show that the ﬁnal tree T is an optimal tree of G, it
suﬃces to show that T  := T / e is an optimal tree of G . We claim that T  is a
Jarnı́k–Prim tree of G rooted at r .
Consider the current tree T at some stage of the Jarnı́k–Prim Algorithm. We
assume that T is not simply the root vertex r, and thus includes the edge e. Let
T  := T / e. Then ∂(T ) = ∂(T  ), so an edge of minimum weight in ∂(T ) is also
an edge of minimum weight in ∂(T  ). Because the ﬁnal tree T is a Jarnı́k–Prim
tree of G, we deduce that the ﬁnal tree T  is a Jarnı́k–Prim tree of G . As G has
fewer vertices than G, it follows by induction that T  is an optimal tree of G . We
conclude that T is an optimal tree of G.

The history of the Jarnı́k–Prim Algorithm is described by Korte and Nešetřil
(2001). A second algorithm for solving Problem 6.8, based on another approach,
is presented in Section 8.5.

Exercises
6.2.1 Let (G, w) be a weighted connected graph whose edges have distinct
weights. Show that G has a unique optimal tree.

6.3 Branching-Search

149

6.2.2 Let (G, w) be a weighted connected graph. Show that a spanning tree T of
G is optimal if and only if, for each edge e ∈ E \ T and each edge f ∈ Ce (the
fundamental cycle of G with respect to T ), w(e) ≥ w(f ).
6.2.3 Let (G, w) be a weighted connected graph. Show that a spanning tree T
of G is optimal if and only if, for each edge e ∈ T and each edge f ∈ Be (the
fundamental bond of G with respect to T ), w(e) ≤ w(f ).
————— —————
6.2.4 Let (G, w) be a weighted connected graph (with positive weights). Describe
an algorithm for ﬁnding a spanning tree the product of whose weights is minimum.
6.2.5 Let T be an optimal spanning tree in a weighted connected graph (G, w),
and let x and y be two vertices of G. Show that the path xT y is an xy-path of
minimum weight in G.
6.2.6 Let T be an optimal spanning tree in a weighted connected graph (G, w).
a) Show that T is a spanning tree whose largest edge-weight is minimum.
b) Give an example of a weighted connected graph (G, w) and a spanning tree
T of G whose largest edge-weight is minimum, but which is not an optimal
spanning tree of G.

6.3 Branching-Search
One can explore directed graphs in much the same way as undirected graphs,
but by growing branchings rather than rooted trees. Starting with the branching
consisting of a single vertex r, its root, one adds one arc at a time, together with its
head, the arc being selected from the outcut associated with the current branching.
The procedure terminates either with a spanning branching of the digraph or with
a nonspanning branching whose associated outcut is empty. Note that the latter
outcome may well arise even if the digraph is connected. Indeed, the vertex set of
the ﬁnal branching is precisely the set of vertices of the digraph that are reachable
by directed paths from r. We call the above procedure branching-search.
As with tree-search, branching-search may be reﬁned by restricting the choice
of the arc to be added at each stage. In this way, we obtain directed versions of
breadth-ﬁrst search and depth-ﬁrst search. We discuss two important applications
of branching-search. The ﬁrst is an extension of directed BFS to weighted directed
graphs, the second an application of directed DFS.
Finding Shortest Paths in Weighted Digraphs
We have seen how breadth-ﬁrst search can be used to determine shortest paths in
graphs. In practice, one is usually faced with problems of a more complex nature.
Given a one-way road system in a city, for instance, one might wish to determine a

150

6 Tree-Search Algorithms

shortest route between two speciﬁed locations in the city. This amounts to ﬁnding a
directed path of minimum weight connecting two speciﬁed vertices in the weighted
directed graph whose vertices are the road junctions and whose arcs are the roads
linking these junctions.
Problem 6.11 Shortest Path
Given: a weighted directed graph (D, w) with two speciﬁed vertices x and y,
Find: a minimum-weight directed (x, y)-path in D.
For clarity of exposition, we refer to the weight of a directed path in a weighted
digraph as its length. In the same vein, by a shortest directed (x, y)-path we mean
one of minimum weight, and this weight is the distance from x to y, denoted d(x, y).
For example, the path indicated in the graph of Figure 6.7 is a shortest directed
(x, y)-path (Exercise 6.3.1) and d(x, y) = 3 + 1 + 2 + 1 + 2 + 1 + 2 + 4 = 16. When
all the weights are equal to one, these deﬁnitions coincide with the usual notions
of length and distance.
7

6

1

2

1

4
x

4
2

6

1

3

1
5

y

7

4
2
2

1

1

3
4

Fig. 6.7. A shortest directed (x, y)-path in a weighted digraph

It clearly suﬃces to deal with the shortest path problem for strict digraphs, so
we assume that this is the case here. We also assume that all weights are positive.
Arcs of weight zero can always be contracted. However, the presence of negative
weights could well lead to complications. If the digraph should contain directed
cycles of negative weight, there might exist (x, y)-walks which are shorter than
any (x, y)-path — indeed, ones of arbitrarily small (negative) length — and this
eventuality renders shortest path algorithms based on branching-search, such as
the one described below, totally ineﬀective (see Exercise 6.3.3). On the other hand,
when all weights are positive, the shortest path problem can be solved eﬃciently
by means of a branching-search due to Dijkstra (1959).
Although similar in spirit to directed breadth-ﬁrst search, Dijkstra’s Algorithm
bears a resemblance to the Jarnı́k–Prim Algorithm in that provisional labels are
assigned to vertices. At each stage, every vertex v of the current branching B is
labelled by its predecessor in B, p(v), and its distance from r in B, (v) := dB (r, v).
In addition, each vertex v which is not in B but is an outneighbour of some vertex in
B, is labelled with a provisional predecessor p(v) and a provisional distance (v),

6.3 Branching-Search

151

namely, the length of a shortest directed (r, v)-path in D all of whose internal
vertices belong to B. The rule for selecting the next vertex and edge to add to the
branching depends only on these provisional distances.
Algorithm 6.12 Dijkstra’s Algorithm
Input: a positively weighted digraph (D, w) with a speciﬁed vertex r
Output: an r-branching in D with predecessor function p, and a function
: V → R+ such that (v) = dD (r, v) for all v ∈ V
1: set p(v) := ∅, v ∈ V , (r) := 0, and (v) := ∞, v ∈ V \ {r}
2: while there is an uncoloured vertex u with (u) < ∞ do
3:
choose such a vertex u for which (u) is minimum
4:
colour u black
5:
for each uncoloured outneighbour v of u with (v) > (u) + w(u, v) do
6:
replace p(v) by u and (v) by (u) + w(u, v)
7:
end for
8: end while
9: return (p, )
Dijkstra’s Algorithm, like the Jarnı́k–Prim Algorithm, may be implemented by
maintaining the uncoloured vertices and their distances in a priority queue. We
leave it to the reader to verify that the algorithm runs correctly (Exercise 6.3.2).
Directed Depth-First Search
Directed BFS (the unweighted version of Dijkstra’s Algorithm) is a straightforward
analogue of BFS; the labelling procedure is identical, and the branching-search
terminates once all vertices reachable from the root have been found. Directed
DFS, on the other hand, involves a slight twist: whenever the branching-search
comes to a halt, an uncoloured vertex is selected and the search is continued
afresh with this vertex as root. The end result is a spanning branching forest of
the digraph, which we call a DFS-branching forest.
Algorithm 6.13 Directed Depth-First Search (Directed DFS)
Input: a digraph D
Output: a spanning branching forest of D with predecessor function p, and
two time functions f and l
1: set i := 0 and S := ∅
2: while there is an uncoloured vertex do
3:
choose any uncoloured vertex r (as root)
4:
increment i by 1
5:
colour r black
6:
set f (r) := i
7:
add r to S
8:
while S is nonempty do
9:
consider the top vertex x of S

152

6 Tree-Search Algorithms
10:
increment i by 1
11:
if x has an uncoloured outneighbour y then
12:
colour y black
13:
set p(y) := x and f (y) := i
14:
add y as the top vertex of S
15:
else
16:
set l(x) := i
17:
remove x from S
18:
end if
19:
end while
20: end while
21: return (p, f, l)

Directed DFS has many applications. One is described below, and several others
are outlined in exercises (6.3.6, 6.3.7, 6.3.8, 6.3.13). In these applications, it is
convenient to distinguish three types of arcs of D, apart from those in the DFSbranching-forest F .
An arc (u, v) ∈ A(D) \ A(F ) is a forward arc if u is an ancestor of v in F , a
back arc if u is a descendant of v in F , and a cross arc if u and v are unrelated in
F and u was discovered after v. In terms of the time functions f and l:
 (u, v) is a forward arc if f (u) < f (v) and l(v) < l(u),
 (u, v) is a back arc if f (v) < f (u) and l(u) < l(v),
 (u, v) is a cross arc if l(v) < f (u).
The directed analogue of Theorem 6.6, whose proof is left as an exercise (6.3.4),
says that these arcs partition A(D) \ A(F ).
Theorem 6.14 Let F be a DFS-branching forest of a digraph D. Then each arc
of A(D) \ A(F ) is a forward arc, a back arc, or a cross arc.


Finding the Strong Components of a Digraph
The strong components of a digraph can be found in linear time by using directed
DFS. The basic idea is similar to the one employed for ﬁnding the blocks of an
undirected graph, but is slightly more complicated.
The following proposition shows how the vertices of the strong components
of D are disposed in F . Observe that forward arcs play no role with respect to
reachability in D because any forward arc can be replaced by the directed path in
F connecting its ends. We may therefore assume that there are no such arcs in D.
Proposition 6.15 Let D be a directed graph, C a strong component of D, and F
a DFS-branching forest in D. Then F ∩ C is a branching.
Proof Each component of F ∩ C is contained in F , and thus is a branching.
Furthermore, vertices of C which are related in F necessarily belong to the same

6.3 Branching-Search

153

component of F ∩ C, because the directed path in F connecting them is contained
in C also (Exercise 3.4.3).
Suppose that F ∩ C has two distinct components, with roots x and y. As
remarked above, x and y are not related in F . We may suppose that f (x) < f (y).
Because x and y belong to the same strong component C of D, there is a directed
(x, y)-path P in C, and because f (x) < f (y), there must be an arc (u, v) of P
with f (u) < f (y) and f (v) ≥ f (y). This arc can be neither a cross arc nor a back
arc, since f (u) < f (v). It must therefore be an arc of F , because we have assumed
that there are no forward arcs. Therefore l(v) < l(u). If u and y were unrelated,
we would have l(u) < f (y). But this would imply that f (v) < l(v) < l(u) < f (y),
contradicting the fact that f (v) ≥ f (y). We conclude that u is a proper ancestor
of y, and belongs to the same component of F ∩ C as y. But this contradicts our
assumption that y is the root of this component.

By virtue of Proposition 6.15, we may associate with each strong component C
of D a unique vertex, the root of the branching F ∩ C. As with blocks, it suﬃces
to identify these roots in order to determine the strong components of D. This can
be achieved by means of a supplementary branching-search. We leave the details
as an exercise (Exercise 6.3.12).

Exercises
6.3.1 By applying Dijkstra’s Algorithm, show that the path indicated in Figure 6.7
is a shortest directed (x, y)-path.
6.3.2 Prove that Dijkstra’s Algorithm runs correctly.
6.3.3 Apply Dijkstra’s Algorithm to the directed graph with negative weights
shown in Figure 6.8. Does the algorithm determine shortest directed (r, v)-paths
for all vertices v?
r
1
z

2
x

1
−1

−1
y

Fig. 6.8. Apply Dijkstra’s Algorithm to this weighted directed graph (Exercise 6.3.3)

6.3.4 Prove Theorem 6.14.

154

6 Tree-Search Algorithms

6.3.5 Describe an algorithm based on directed breadth-ﬁrst search for ﬁnding a
shortest directed odd cycle in a digraph.
6.3.6 Describe an algorithm based on directed depth-ﬁrst search which accepts as
input a directed graph D and returns a maximal (but not necessarily maximum)
acyclic spanning subdigraph of D.
————— —————
6.3.7 Describe an algorithm based on directed depth-ﬁrst search which accepts as
input a tournament T and returns a directed Hamilton path of T .
6.3.8 Describe an algorithm based on directed depth-ﬁrst search which accepts as
input a directed graph D and returns either a directed cycle in D or a topological
sort of D (deﬁned in Exercise 2.1.11).
6.3.9 Bellman’s Algorithm
Prove the validity of the following algorithm, which accepts as input a topological
sort Q of a weighted acyclic digraph (D, w), with ﬁrst vertex r, and returns a
function : V → R such that (v) = dD (r, v) for all v ∈ V , and a branching B
(given by a predecessor function p) such that rBv is a shortest directed (r, v)-path
(R. Bellman)
in D for all v ∈ V such that dD (r, v) < ∞.
1: set (v) := ∞, p(v) := ∅, v ∈ V
2: remove r from Q
3: set (r) := 0
4: while Q is nonempty do
5:
remove the ﬁrst element y from Q
6:
for all x ∈ N − (y) do
7:
if (x) + w(x, y) < (y) then
8:
replace (y) by (x) + w(x, y) and p(y) by x
9:
end if
10:
end for
11: end while
12: return ( , p).
6.3.10 Let D := (D, w) be a weighted digraph with a speciﬁed root r from which
all other vertices are reachable. A negative directed cycle is one whose weight is
negative.
a) Show that if D has no negative directed cycles, then there exists a spanning
r-branching B in D such that, for each v ∈ V , the directed path rBv is a
shortest directed (r, v)-path in D.
b) Give an example to show that this conclusion need not hold if D has negative
directed cycles.
6.3.11 Bellman–Ford Algorithm
Let D := (D, w) be a weighted digraph with a speciﬁed root r from which all other

6.3 Branching-Search

155

vertices of D are reachable. For each nonnegative integer k, let dk (v) denote the
weight of a shortest directed (r, v)-walk using at most k arcs, with the convention
that dk (v) = ∞ if there is no such walk. (Thus d0 (r) = 0 and d0 (v) = ∞ for all
v ∈ V \ {r}.)
a) Show that the dk (v) satisfy the following recursion.
dk (v) = min{dk−1 (v), min{dk−1 (u) + w(u, v) : u ∈ N − (v)}}
b) For each of the weighted digraphs shown in Figure 6.9, compute dk := (dk (v) :
v ∈ V ) for k = 0, 1, . . . , 6.
c) Show that:
i) if dk = dk−1 for all k, 1 ≤ k ≤ n, then D contains a negative directed
cycle,
ii) if dk = dk−1 for some k, 1 ≤ k ≤ n, then D contains no negative directed
cycle, and dk (v) is the distance from r to v, for all v ∈ V .
d) In the latter case, describe how to ﬁnd a spanning r-branching B of D such
that, for each v ∈ V , the directed (r, v)-path in B is a shortest directed (r, v)path in D.
(R. Bellman; L.R. Ford; E.F. Moore; A. Shimbel)

u
1

1

u
1

−3

r

x

1

1

−3

r

1

x

2

1

−2

−2
v

3
(a)

y

v

3

y

(b)

Fig. 6.9. Examples for the Bellman–Ford Algorithm (Exercise 6.3.11)

6.3.12 Finding the strong components of a digraph.
Let D be a digraph, and let F be a DFS-branching forest of D. Denote by D the
converse of the digraph obtained from D by deleting all cross edges. By Proposition 6.15, it suﬃces to consider each component of D separately, so we assume
that D has just one component.
a) Show that the set of vertices reachable from the root r in D induces a strong
component of D.
b) Apply this idea iteratively to obtain all strong components of D (taking care
to select each new root appropriately).
c) Implement this procedure by employing branching-search.

156

6 Tree-Search Algorithms

6.3.13 The diameter of a directed graph is the maximum distance between any
two vertices of the graph. (Thus a directed graph is of ﬁnite diameter if and only
if it is strong.) Let G be a 2-edge-connected graph and P a longest path in G. By
Robbins’ Theorem (5.10), G has a strong orientation. Show that:
a) no strong orientation of G has diameter exceeding the length of P ,
b) some strong orientation of G has diameter equal to the length of P .
(G. Gutin)

6.4 Related Reading
Data Structures
We have discussed in this chapter algorithms for resolving various problems expeditiously. The eﬃciency of these algorithms can be further enhanced by storing
and managing the data involved in an appropriate structure. For example, a data
structure known as a heap is commonly used for storing elements and their associated values, called keys (such as edges and their weights). A heap is a rooted
binary tree T whose vertices are in one-to-one correspondence with the elements
in question (in our case, vertices or edges). The deﬁning property of a heap is that
the key of the element located at vertex v of T is required to be at least as large
as the keys of the elements located at vertices of the subtree of T rooted at v.
This condition implies, in particular, that the key of the element at the root of
T is one of greatest value; that element can thus be accessed instantly. Moreover,
heaps can be reconstituted rapidly following small modiﬁcations such as the addition of an element, the removal of an element, or a change in the value of a key.
A priority queue (the data structure used in both Dijkstra’s Algorithm and the
Jarnı́k–Prim Algorithm) is simply a heap equipped with procedures for performing
such readjustments rapidly. Heaps were conceived by Williams (1964).
It should be evident that data structures play a vital role in the eﬃciency of
algorithms. For further information on this topic, we refer the reader to Knuth
(1969), Aho et al. (1983), Tarjan (1983), or Cormen et al. (2001).

7
Flows in Networks

Contents
7.1 Transportation Networks . . . . . . . . . . . . . . . . . . . . . . . . . . 157
Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
Cuts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
7.2 The Max-Flow Min-Cut Theorem . . . . . . . . . . . . . . . . . . 161
The Ford–Fulkerson Algorithm . . . . . . . . . . . . . . . . . . . . . 163
7.3 Arc-Disjoint Directed Paths . . . . . . . . . . . . . . . . . . . . . . . 167
Circulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
Menger’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170
7.4 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
Multicommodity Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171

7.1 Transportation Networks
Transportation networks that are used to ship commodities from their production
centres to their markets can be most eﬀectively analysed when viewed as digraphs
that possess additional structure. The resulting theory has a wide range of interesting applications and ramiﬁcations. We present here the basic elements of this
important topic.
A network N := N (x, y) is a digraph D (the underlying digraph of N ) with
two distinguished vertices, a source x and a sink y, together with a nonnegative
real-valued function c deﬁned on its arc set A. The vertex x corresponds to a
production centre, and the vertex y to a market. The remaining vertices are called
intermediate vertices, and the set of these vertices is denoted by I. The function
c is the capacity function of N and its value on an arc a the capacity of a. The
capacity of an arc may be thought of as representing the maximum rate at which
a commodity can be transported along it. It is convenient to allow arcs of inﬁnite
capacity, along which commodities can be transported at any desired rate. Of
course, in practice, one is likely to encounter transportation networks with several

158

7 Flows in Networks

production centres and markets, rather than just one. However, this more general
situation can be reduced to the case of networks that have just one source and one
sink by means of a simple device (see Exercise 7.1.3).
We ﬁnd the following notation useful. 
If f is a real-valued function deﬁned on
a set A, and if S ⊆ A, we denote the sum a∈S f (a) by f (S). Furthermore, when
A is the arc set of a digraph D, and X ⊆ V , we set
f + (X) := f (∂ + (X)) and f − (X) := f (∂ − (X))
Flows
An (x, y)-ﬂow (or simply a ﬂow) in N is a real-valued function f deﬁned on A
satisfying the condition:
f + (v) = f − (v) for all

v∈I

(7.1)

The value f (a) of f on an arc a can be likened to the rate at which material is
transported along a by the ﬂow f . Condition (7.1) requires that, for any intermediate vertex v, the rate at which material is transported into v is equal to the rate
at which it is transported out of v. For this reason, it is known as the conservation
condition.
A ﬂow f is feasible if it satisﬁes, in addition, the capacity constraint:
0 ≤ f (a) ≤ c(a)

for all

a∈A

(7.2)

The upper bound in condition (7.2) imposes the natural restriction that the rate of
ﬂow along an arc cannot exceed the capacity of the arc. Throughout this chapter,
the term ﬂow always refers to one that is feasible.
Every network has at least one ﬂow, because the function f deﬁned by f (a) :=
0, for all a ∈ A, clearly satisﬁes both (7.1) and (7.2); it is called the zero ﬂow.
A less trivial example of a ﬂow is given in Figure 7.1. The ﬂow along each arc is
indicated in bold face, along with the capacity of the arc.
05

23
49

26

07

33

22

28

11
04

x

24

11

33
15

y
55

67

23

Fig. 7.1. A ﬂow in a network

45

7.1 Transportation Networks

159

If X is a set of vertices in a network N and f is a ﬂow in N , then f + (X)−f − (X)
is called the net ﬂow out of X, and f − (X) − f + (X) the net ﬂow into X, relative to
f . The conservation condition (7.1) requires that the net ﬂow f + (v) − f − (v) out
of any intermediate vertex be zero, thus it is intuitively clear and not diﬃcult to
show that, relative to any (x, y)-ﬂow f , the net ﬂow f + (x)−f − (x) out of x is equal
to the net ﬂow f − (y) − f + (y) into y (Exercise 7.1.1b). This common quantity is
called the value of f , denoted val (f ). For example, the value of the ﬂow indicated
in Figure 7.1 is 2 + 4 = 6. The value of a ﬂow f may, in fact, be expressed as the
net ﬂow out of any subset X of V such that x ∈ X and y ∈ V \ X, as we now
show.
Proposition 7.1 For any ﬂow f in a network N (x, y) and any subset X of V
such that x ∈ X and y ∈ V \ X,
val (f ) = f + (X) − f − (X)

(7.3)

Proof From the deﬁnition of a ﬂow and its value, we have

val (f ) if v = x
f + (v) − f − (v) =
0
if v ∈ X \ {x}
Summing these equations over X and simplifying (Exercise 7.1.2), we obtain

val (f ) =
(f + (v) − f − (v)) = f + (X) − f − (X)



v∈X

A ﬂow in a network N is a maximum ﬂow if there is no ﬂow in N of greater
value. Maximum ﬂows are of obvious importance in the context of transportation
networks. A network N (x, y) which has a directed (x, y)-path all of whose arcs are
of inﬁnite capacity evidently admits ﬂows of arbitrarily large value. However, such
networks do not arise in practice, and we assume that all the networks discussed
here have maximum ﬂows. We study the problem of ﬁnding such ﬂows eﬃciently.
Problem 7.2 Maximum Flow
Given: a network N (x, y),
Find: a maximum ﬂow from x to y in N .
Cuts
It is convenient to denote a digraph D with two distinguished vertices x and y by
D(x, y). An (x, y)-cut in a digraph D(x, y) is an outcut ∂ + (X) such that x ∈ X and
y ∈ V \X, and a cut in a network N (x, y) is an (x, y)-cut in its underlying digraph.
We also say that such a cut separates y from x. In the network of Figure 7.2,
the heavy lines indicate a cut ∂ + (X), where X is the set of solid vertices. The
capacity of a cut K := ∂ + (X) is the sum of the capacities of its arcs, c+ (X). We
denote the capacity of K by cap (K). The cut indicated in Figure 7.2 has capacity
3 + 7 + 1 + 5 = 16.

160

7 Flows in Networks
3
9

5
7

6

1

8

3

2

4

x
4

1

3
5

y
5

7
5

3

Fig. 7.2. A cut in a network

Flows and cuts are related in a simple fashion: the value of any (x, y)-ﬂow is
bounded above by the capacity of any cut separating y from x. In proving this
inequality, it is convenient to call an arc a f -zero if f (a) = 0, f -positive if f (a) > 0,
f -unsaturated if f (a) < c(a), and f -saturated if f (a) = c(a).
Theorem 7.3 For any ﬂow f and any cut K := ∂ + (X) in a network N ,
val (f ) ≤ cap (K)
Furthermore, equality holds in this inequality if and only if each arc in ∂ + (X) is
f -saturated and each arc in ∂ − (X) is f -zero.
Proof By (7.2),

f + (X) ≤ c+ (X) and f − (X) ≥ 0

(7.4)

Thus, applying Proposition 7.1,
val (f ) = f + (X) − f − (X) ≤ c+ (X) = cap (K)
We have val (f ) = cap (K) if and only if equality holds in (7.4), that is, if and only

if each arc of ∂ + (X) is f -saturated and each arc of ∂ − (X) is f -zero.
A cut K in a network N is a minimum cut if no cut in N has a smaller capacity.
Corollary 7.4 Let f be a ﬂow and K a cut. If val (f ) = cap (K), then f is a
maximum ﬂow and K is a minimum cut.
Proof Let f ∗ be a maximum ﬂow and K ∗ a minimum cut. By Theorem 7.3,
val (f ) ≤ val (f ∗ ) ≤ cap (K ∗ ) ≤ cap (K)
But, by hypothesis, val (f ) = cap (K). It follows that val (f ) = val (f ∗ ) and

cap (K ∗ ) = cap (K). Thus f is a maximum ﬂow and K is a minimum cut.

7.2 The Max-Flow Min-Cut Theorem

161

Exercises
7.1.1 Let D = (V, A) be a digraph and f a real-valued function on A. Show that:


a) {f + (v) : v ∈ V } = {f − (v) : v ∈ V },
b) if f is an (x, y)-ﬂow, the net ﬂow f + (x) − f − (x) out of x is equal to the net
ﬂow f − (y) − f + (y) into y.
7.1.2
a) Show that, for any ﬂow f in a network N and any set X ⊆ V ,

(f + (v) − f − (v)) = f + (X) − f − (X)
v∈X

b) 
Give an example of a ﬂow f in a network such that
−
−
v∈X f (v) = f (X).


v∈X

f + (v) = f + (X) and

7.1.3 Let N := N (X, Y ) be a network with source set X and sink set Y . Construct
a new network N  := N  (x, y) as follows.
 Adjoin two new vertices x and y.
 Join x to each source by an arc of inﬁnite capacity.
 Join each sink to y by an arc of inﬁnite capacity.
For any ﬂow f in N , consider the function f  deﬁned on the arc set of N  by:
⎧
⎨ f (a) if a is an arc of N
f  (a) := f + (v) if a = (x, v)
⎩ −
f (v) if a = (v, y)
a) Show that f  is a ﬂow in N  with the same value as f .
b) Show, conversely, that the restriction of a ﬂow in N  to the arc set of N is a
ﬂow in N of the same value.
7.1.4 Let N (x, y) be a network which contains no directed (x, y)-path. Show that
the value of a maximum ﬂow and the capacity of a minimum cut in N are both
zero.
————— —————

7.2 The Max-Flow Min-Cut Theorem
We establish here the converse of Corollary 7.4, namely that the value of a maximum ﬂow is always equal to the capacity of a minimum cut.
Let f be a ﬂow in a network N := N (x, y). With each x-path P in N (not
necessarily a directed path), we associate a nonnegative integer (P ) deﬁned by:

162

7 Flows in Networks

(P ) := min{(a) : a ∈ A(P )}
where


(a) :=

c(a) − f (a) if a is a forward arc of P
f (a)
if a is a reverse arc of P

As we now explain, (P ) is the largest amount by which the ﬂow f can be
increased along P without violating the constraints (7.2). The path P is said to
be f -saturated if (P ) = 0 and f -unsaturated if (P ) > 0 (that is, if each forward
arc of P is f -unsaturated and each reverse arc of P is f -positive). Put simply,
an f -unsaturated path is one that is not being used to its full capacity. An f incrementing path is an f -unsaturated (x, y)-path. For example, in the network
of Figure 7.3a, the path P := xv1 v2 v3 y is such a path. The forward arcs of P are
(x, v1 ) and (v3 , y), and (P ) = min {5, 2, 5, 4} = 2.
The existence of an f -incrementing path P is signiﬁcant because it implies
that f is not a maximum ﬂow. By sending an additional ﬂow of (P ) along P , one
obtains a new ﬂow f  of greater value. More precisely, deﬁne f  : A → R by:
⎧
⎨ f (a) + (P ) if a is a forward arc of P

f (a) := f (a) − (P ) if a is a reverse arc of P
(7.5)
⎩
f (a)
otherwise
We then have the following proposition, whose proof is left as an exercise (7.2.1).
Proposition 7.5 Let f be a ﬂow in a network N . If there is an f -incrementing
path P , then f is not a maximum ﬂow. More precisely, the function f  deﬁned by

(7.5) is a ﬂow in N of value val (f  ) = val (f ) + (P ).
We refer to the ﬂow f  deﬁned by (7.5) as the incremented ﬂow based on P .
Figure 7.3b shows the incremented ﬂow in the network of Figure 7.3a based on the
f -incrementing path xv1 v2 v3 y.
What if there is no f -incrementing path? The following proposition addresses
this eventuality.
Proposition 7.6 Let f be a ﬂow in a network N := N (x, y). Suppose that there
is no f -incrementing path in N . Let X be the set of all vertices reachable from x
by f -unsaturated paths, and set K := ∂ + (X). Then f is a maximum ﬂow in N
and K is a minimum cut.
Proof Clearly x ∈ X. Also, y ∈ V \ X because there is no f -incrementing path.
Therefore K is a cut in N .
Consider an arc a ∈ ∂ + (X), with tail u and head v. Because u ∈ X, there exists
an f -unsaturated (x, u)-path Q. If a were f -unsaturated, Q could be extended by
the arc a to yield an f -unsaturated (x, v)-path. But v ∈ V \ X, so there is no such
path. Therefore a must be f -saturated. Similar reasoning shows that if a ∈ ∂ − (X),

7.2 The Max-Flow Min-Cut Theorem
v3

v3

44

04
11

x

55

44

y

16

55
2 3 v4 2 2

24
11

01

2 3 v2 3 5
v1

163

v5

(a)

x

35

01
y

0 3 v2 3 5
36

55
v1

2 3 v4 2 2

v5

(b)

Fig. 7.3. (a) An f -incrementing path P , and (b) the incremented ﬂow based on P

then a must be f -zero. By Theorem 7.3, we have val (f ) = cap (K). Corollary 7.4
now implies that f is a maximum ﬂow in N and that K is a minimum cut.

A far-reaching consequence of Propositions 7.5 and 7.6 is the following theorem,
due independently to Elias et al. (1956) and Ford and Fulkerson (1956).
Theorem 7.7 The Max-Flow Min-Cut Theorem
In any network, the value of a maximum ﬂow is equal to the capacity of a minimum
cut.
Proof Let f be a maximum ﬂow. By Proposition 7.5, there can be no f incrementing path. The theorem now follows from Proposition 7.6.

The Max-Flow Min-Cut Theorem (7.7) shows that one can always demonstrate
the optimality of a maximum ﬂow simply by exhibiting a cut whose capacity is
equal to the value of the ﬂow. Many results in graph theory are straightforward
consequences of this theorem, as applied to suitably chosen networks. Among these
are two fundamental theorems due to K. Menger, discussed at the end of this
chapter (Theorems 7.16 and 7.17). Other important applications of network ﬂows
are given in Chapter 16.
The Ford–Fulkerson Algorithm
The following theorem is a direct consequence of Propositions 7.5 and 7.6.
Theorem 7.8 A ﬂow f in a network is a maximum ﬂow if and only if there is no
f -incrementing path.

This theorem is the basis of an algorithm for ﬁnding a maximum ﬂow in a
network. Starting with a known ﬂow f , for instance the zero ﬂow, we search for
an f -incrementing path by means of a tree-search algorithm. An x-tree T is f unsaturated if, for every vertex v of T , the path xT v is f -unsaturated. An example

164

7 Flows in Networks
v3

44

04
11

x

23

55

01
y

v2 3 5

16

55
v1

23

v4

22

v5

Fig. 7.4. An f -unsaturated tree

is shown in the network of Figure 7.4. It is a tree T of this type that we grow in
searching for an f -incrementing path.
Initially, the tree T consists of just the source x. At any stage, there are two
ways in which the tree may be grown. If there exists an f -unsaturated arc a in
∂ + (X), where X = V (T ), both a and its head are adjoined to T . Similarly, if there
exists an f -positive arc a in ∂ − (X), both a and its tail are adjoined to T . If the
tree T reaches the sink y, the path xT y is an f -incrementing path, and we replace
f by the ﬂow f  deﬁned in (7.5). If T fails to reach the sink, and is a maximal
f -unsaturated tree, each arc in ∂ + (X) is f -saturated and each arc in ∂ − (X) is
f -zero. We may then conclude, by virtue of Theorem 7.3, that the ﬂow f is a
maximum ﬂow and the cut ∂ + (X) a minimum cut. We refer to this tree-search
algorithm as Incrementing Path Search (IPS) and to a maximal f -unsaturated tree
which does not include the sink as an IPS-tree.
Algorithm 7.9 Max-Flow Min-Cut (MFMC)
Input: a network N := N (x, y) and a feasible ﬂow f in N
Output: a maximum ﬂow f and a minimum cut ∂ + (X) in N
1: set X := {x}, p(v) := ∅, v ∈ V
2: while there is either an f -unsaturated arc a := (u, v) or an f -positive arc
a := (v, u) with u ∈ X and v ∈ V \ X do
3:
replace X by X ∪ {v}
4:
replace p(v) by u
5: end while
6: if y ∈ X then
7:
compute (P ) := min{(a) : a ∈ A(P )}, where P is the xy-path in the
tree whose predecessor function is p
8:
for each forward arc a of P , replace f (a) by f (a) + (P )
9:
for each reverse arc a of P , replace f (a) by f (a) − (P )
10:
return to 1
11: end if
12: return (f, ∂ + (X))

7.2 The Max-Flow Min-Cut Theorem
v3

v3

04

44

x

11

01
y

2 3 v2 3 5
16

x

55
v1

2 3 v4 2 2

v5

55
v1

v3

44

55
y

x

55
v1 2 3 v4 2 2

v5

55
v1

2 3 v4 2 2

v3

v3

11

01
y
55

36
2 3 v4 2 2
(e)

v5

v5

24

44

0 3 v2 3 5

y

36

(d)

35

01

0 3 v2 3 5

24

v1

35

(c)

44

v5

24
11

01

16

11

2 3 v4 2 2

v3

2 3 v2 3 5

y

16

(b)

11

01

2 3 v2 3 5

04

x

55

(a)

44

x

04

44

55
11

165

x

35

01
y

0 3 v2 3 5
55

36
v1

2 3 v4 2 2

v5

(f )

Fig. 7.5. (a) A ﬂow f , (b) an f -unsaturated tree, (c) the f -incrementing path, (d) the
f -incremented ﬂow, (e) an IPS-tree, and (f) a minimum cut

As an example, consider the network shown in Figure 7.5a, with the indicated
ﬂow. Applying IPS, we obtain the f -unsaturated tree shown in Figure 7.5b. Because this tree includes the sink y, the xy-path contained in it, namely xv1 v2 v3 y,
is an f -incrementing path (see Figure 7.5c). By incrementing f along this path,
we obtain the incremented ﬂow shown in Figure 7.5d.

166

7 Flows in Networks

Now, an application of IPS to the network with this new ﬂow results in the
IPS-tree shown in Figure 7.5e. We conclude that the ﬂow shown in Figure 7.5d is
a maximum ﬂow. The minimum cut ∂ + (X), where X is the set of vertices reached
by the IPS-tree, is indicated in Figure 7.5f.
When all the capacities are integers, the value of the ﬂow increases by at least
one at each iteration of the Max-Flow Min-Cut Algorithm, so the algorithm will
certainly terminate after a ﬁnite number of iterations. A similar conclusion applies
to the case in which all capacities are rational numbers (Exercise 7.2.3). On the
other hand, the algorithm will not necessarily terminate if irrational capacities are
allowed. An example of such a network was constructed by Ford and Fulkerson
(1962).
In applications of the theory of network ﬂows, one is often required to ﬁnd
ﬂows that satisfy additional restrictions, such as supply and demand constraints
at the sources and sinks, respectively, or speciﬁed positive lower bounds on ﬂows
in individual arcs. Most such problems can be reduced to the problem of ﬁnding
maximum ﬂows in associated networks. Examples may be found in the books by
Bondy and Murty (1976), Chvátal (1983), Ford and Fulkerson (1962), Lovász and
Plummer (1986), and Schrijver (2003).

Exercises
7.2.1 Give a proof of Proposition 7.5.
7.2.2 If all the capacities in a network are integer-valued, show that the maximum
ﬂow returned by the Max-Flow Min-Cut Algorithm is integer-valued.
7.2.3 Show that the Max-Flow Min-Cut Algorithm terminates after a ﬁnite number of incrementing path iterations when all the capacities are rational numbers.
7.2.4 Let f be a function on the arc set A of a network N := N (x, y) such that
0 ≤ f (a) ≤ c(a) for all a ∈ A. Show that f is a ﬂow in N if and only if f is a
nonnegative linear combination of incidence vectors of directed (x, y)-paths.
————— —————
7.2.5 Degree Sequences of Bipartite Graphs
Let p:=(p1 , p2 , . . . , pm ) and q:=(q1 , q2 , . . . , qn ) be two sequences of nonnegative integers. The pair (p, q) is said to be realizable by a simple bipartite graph if there exists a simple bipartite graph G with bipartition ({x1 , x2 , . . . , xm }, {y1 , y2 , . . . , yn }),
such that d(xi ) = pi , for 1 ≤ i ≤ m, and d(yj ) = qj , for 1 ≤ j ≤ n.
a) Formulate as a network ﬂow problem the problem of determining whether a
given pair (p, q) is realizable by a simple bipartite graph.
b) Suppose that q1 ≥ q2 ≥ · · · ≥ qn . Deduce from the Max-Flow Min-Cut Theorem that (p, q) is realizable by a simple bipartite graph if and only if:

7.3 Arc-Disjoint Directed Paths
m


pi =

i=1

n

j=1

qj

and

m


min{pi , k} ≥

i=1

k


167

qj for 1 ≤ k ≤ n

j=1

(D. Gale and H.J. Ryser)
7.2.6 Degree Sequences of Directed Graphs
Let D be a strict digraph and let p and q be two nonnegative integer-valued
functions on V .
a) Consider the problem of determining whether D has a spanning subdigraph
H such that:
+
d−
H (v) = p(v) and dH (v) = q(v) for all v ∈ V

Formulate this as a network ﬂow problem.
b) Deduce from the Max-Flow Min-Cut Theorem that D has a subdigraph H
satisfying
in (a) if and only if:

 the condition
p(v) =
q(v),
i)


v∈V

ii)

v∈S

q(v) ≤

v∈V


p(v) + a(S, V \ T ) for all S, T ⊆ V .

v∈T

c) Taking D to be the complete directed graph on n vertices and applying (b),
ﬁnd necessary and suﬃcient conditions for two sequences p := (p1 , p2 , . . . , pn )
and q := (q1 , q2 , . . . , qn ) to be realizable as the in- and outdegree sequences of
a strict digraph on n vertices.

7.3 Arc-Disjoint Directed Paths
A communications network N with one-way communication links may be modelled
by a directed graph D whose vertices correspond to the stations of N and whose
arcs correspond to its links. In order to be able to relay information in N from
station x to station y, the digraph D must clearly contain a directed (x, y)-path. In
practice, however, the possible failure of communication links (either by accident or
by sabotage) must also be taken into account. For example, if all the directed (x, y)paths in D should happen to contain one particular arc, and if the communication
link corresponding to that arc should fail or be destroyed, it would no longer be
possible to relay information from x to y. This situation would not arise if D
contained two arc-disjoint directed (x, y)-paths. More generally, if D had k arcdisjoint directed (x, y)-paths, x would still be able to send messages to y even if
k − 1 links should fail. The maximum number of arc-disjoint directed (x, y)-paths
is therefore a relevant parameter in this context, and we are led to the following
problem.
Problem 7.10 Arc-Disjoint Directed Paths (ADDP)
Given: a digraph D := D(x, y),
Find: a maximum family of arc-disjoint directed (x, y)-paths in D.

168

7 Flows in Networks

Let us now look at the network from the viewpoint of a saboteur who wishes
to disrupt communications from x to y. The saboteur will seek to eliminate all
directed (x, y)-paths in D by destroying arcs, preferably as few as possible. Now,
a minimal set of arcs whose deletion destroys all directed (x, y)-paths is nothing
but an (x, y)-cut. The saboteur’s problem can thus be stated as follows.
Problem 7.11 Minimum Arc Cut
Given: a digraph D := D(x, y),
Find: a minimum (x, y)-cut in D.
As the reader might have guessed, these problems can be solved by applying
network ﬂow theory. The concept of a circulation provides the essential link.
Circulations
A circulation in a digraph D is a function f : A → R which satisﬁes the conservation condition at every vertex:
f + (v) = f − (v), for all v ∈ V

(7.6)

Figure 7.6a shows a circulation in a digraph.
−1
3

−1
4

2

3
1

0
3
(a)

1

0

0

1

0

−1

0
(b)

Fig. 7.6. (a) A circulation in a digraph, and (b) a circulation associated with a cycle

Circulations in a digraph D can be expressed very simply in terms of the
incidence matrix of D. Recall that this is the matrix M = (mva ) whose rows and
columns are indexed by the vertices and arcs of D, respectively, where, for a vertex
v and arc a,
⎧
⎨ 1 if a is a link and v is the tail of a
mva := −1 if a is a link and v is the head of a
⎩
0 otherwise
The incidence matrix of a digraph is shown in Figure 7.7.
We frequently identify a real-valued function f deﬁned on a set S with the
vector f := (f (a) : a ∈ S). With this convention, the conservation condition (7.6)
for a function f to be a circulation in D may be expressed in matrix notation as:

7.3 Arc-Disjoint Directed Paths
1

u
5
4
8
x

v
6

w
3

2
7
y

169

1 2 3 4 5 6 7 8
u 1 0 0 −1 1 0 0 0
v −1 1 0 0 0 −1 0 0
w 0 0 0 0 −1 1 1 −1
x 0 0 −1 1 0 0 0 1
y 0 −1 1 0 0 0 −1 0

D

M

Fig. 7.7. A digraph and its incidence matrix

Mf = 0

(7.7)

where M is the n × m incidence matrix of D and 0 the n × 1 zero-vector.
Circulations and ﬂows can be readily transformed into one another. If f is
a circulation in a digraph D := (V, A), and if a = (y, x) is an arc of D, the
restriction f  of f to A \ a is an (x, y)-ﬂow of value f (a) in the digraph D := D \ a
(Exercise 7.3.2). Conversely, if f is an (x, y)-ﬂow in a digraph D := (V, A), and
if D is the digraph obtained from D by adding a new arc a from y to x, the
extension f  of f to A ∪ {a } deﬁned by f  (a ) := val (f ) is a circulation in D . By
virtue of these transformations, results on ﬂows and circulations go hand in hand.
Often, it is more convenient to study circulations rather than ﬂows because the
conservation condition (7.6) is then satisﬁed uniformly, at all vertices.
The support of a real-valued function is the set of elements at which its value
is nonzero.
Lemma 7.12 Let f be a nonzero circulation in a digraph. Then the support of f
contains a cycle. Moreover, if f is nonnegative, then the support of f contains a
directed cycle.
Proof The ﬁrst assertion follows directly from Theorem 2.1, because the support
of a nonzero circulation can contain no vertex of degree less than two. Likewise,
the second assertion follows from Exercise 2.1.11a.

Certain circulations are of particular interest, namely those associated with
cycles. Let C be a cycle, together with a given sense of traversal. An arc of C is a
forward arc if its direction agrees with the sense of traversal of C, and a reverse
arc otherwise. We denote the sets of forward and reverse arcs of C by C + and C − ,
respectively, and associate with C the circulation fC deﬁned by:
⎧
⎨ 1 if a ∈ C +
fC (a) := −1 if a ∈ C −
⎩
0 if a ∈ C
It can be seen that fC is indeed a circulation. Figure 7.6b depicts a circulation
associated with a cycle (the sense of traversal being counterclockwise).

170

7 Flows in Networks

Proposition 7.13 Every circulation in a digraph is a linear combination of the
circulations associated with its cycles.
Proof Let f be a circulation, with support S. We proceed by induction on |S|.
There is nothing to prove if S = ∅. If S is nonempty, then S contains a cycle C
by Lemma 7.12. Let a be any arc of C, and choose the sense of traversal of C so
that fC (a) = 1. Then f  := f − f (a)fC is a circulation whose support is a proper
subset of S. By induction, f  is a linear combination of circulations associated with

cycles, so f = f  + f (a)fC is too.
There is an analogous statement to Proposition 7.13 in the case where the
circulation is nonnegative. The proof is essentially the same (Exercise 7.3.4).
Proposition 7.14 Every nonnegative circulation in a digraph is a nonnegative
linear combination of the circulations associated with its directed cycles. Moreover,
if the circulation is integer-valued, the coeﬃcients of the linear combination may
be chosen to be nonnegative integers.

The relationship between circulations and ﬂows described above implies the
following corollary.
Corollary 7.15 Let N := N (x, y) be a network in which each arc is of unit capacity. Then N has an (x, y)-ﬂow of value k if and only if its underlying digraph
D(x, y) has k arc-disjoint directed (x, y)-paths.


Menger’s Theorem
In view of Corollary 7.15, Problems 7.10 and 7.11 can both be solved by the
Max-Flow Min-Cut Algorithm. Moreover, the Max-Flow Min-Cut Theorem in this
special context becomes a fundamental min–max theorem on digraphs, due to
Menger (1927).
Theorem 7.16 Menger’s Theorem (Arc Version)
In any digraph D(x, y), the maximum number of pairwise arc-disjoint directed
(x, y)-paths is equal to the minimum number of arcs in an (x, y)-cut.

There is a corresponding version of Menger’s Theorem for undirected graphs.
As with networks and digraphs, it is convenient to adopt the notation G(x, y) to
signify a graph G with two distinguished vertices x and y. By an xy-cut in a graph
G(x, y), we mean an edge cut ∂(X) such that x ∈ X and y ∈ V \ X. We say that
such an edge cut separates x and y.
Theorem 7.17 Menger’s Theorem (Edge Version)
In any graph G(x, y), the maximum number of pairwise edge-disjoint xy-paths is
equal to the minimum number of edges in an xy-cut.


7.4 Related Reading

171

Theorem 7.17 can be derived quite easily from Theorem 7.16. Likewise, the
undirected version of Problem 7.10 can be solved by applying the Max-Flow MinCut Algorithm to an appropriate network (Exercise 7.3.5). In Chapter 8, we explain
how vertex versions of Menger’s Theorems (7.16 and 7.17) can be derived from
Theorem 7.16. These theorems play a central role in graph theory, as is shown in
Chapter 9.

Exercises
7.3.1
a) Let D = (V, A) be a digraph, and let f be a real-valued function on A. Show
that f is a circulation in D if and only if f + (X) = f − (X) for all X ⊆ V .
b) Let f be a circulation in a digraph D, with support S. Deduce that:
i) D[S] has no cut edges,
ii) if f is nonnegative, then D[S] has no directed bonds.
7.3.2 Let f be a circulation in a digraph D := (V, A), and let a = (y, x) be an
arc of D. Show that the restriction f  of f to A := A \ a is an (x, y)-ﬂow in
D := (V, A ) of value f (a).
7.3.3 Let f and f  be two ﬂows of equal value in a network N . Show that f − f 
is a circulation in N .
7.3.4 Prove Proposition 7.14.
7.3.5
a) Deduce Theorem 7.17 from Theorem 7.16.
b) The undirected version of Problem 7.10 may be expressed as follows.
Problem 7.18 Edge-Disjoint Paths (EDP)
Given: a graph G := G(x, y),
Find: a maximum family of edge-disjoint xy-paths in G.
Explain how this problem can be solved by applying the Max-Flow Min-Cut
Algorithm to an appropriate network.
————— —————

7.4 Related Reading
Multicommodity Flows
In this chapter, we have dealt with the problem of transporting a single commodity
along the arcs of a network. In practice, transportation networks are generally

172

7 Flows in Networks

shared by many users, each wishing to transport a diﬀerent commodity from one
location to another. This gives rise to the notion of a multicommodity ﬂow. Let
N be a network with k source-sink pairs (xi , yi ), 1 ≤ i ≤ k, and let di denote the
demand at yi for commodity i, 1 ≤ i ≤ k. The k-commodity ﬂow problem consists
of ﬁnding functions fi : A → R, 1 ≤ i ≤ k, such that:
(i) fi is a ﬂow in N of value di from xi to yi , 1 ≤ i ≤ k,
k
(ii) for each arc a of D, i=1 fi (a) ≤ c(a).

For a subset X of V , let d(X) denote the quantity {di : xi ∈ X, yi ∈ V \X}. If
there is a solution to the k-commodity ﬂow problem, the inequality d(X) ≤ c+ (X),
known as the cut condition, must hold for all subsets X of V . For k = 1, this cut
condition is equivalent to the condition val (f ) ≤ cap (K) of Theorem 7.3. By the
Max-Flow Min-Cut Theorem (7.7), this condition is suﬃcient for the existence of
a ﬂow of value d1 . However, even for k = 2, the cut condition is not suﬃcient for
the 2-commodity ﬂow problem to have a solution, as is shown by the network with
unit capacities and demands depicted in Figure 7.8a.
There is another noteworthy distinction between the single commodity and the
multicommodity ﬂow problems. Suppose that all capacities and demands are integers and that there is a k-commodity ﬂow meeting all the requirements. When
k = 1, this implies the existence of such a ﬂow which is integer-valued (Exercise 7.2.2). The same is not true for k ≥ 2. Consider, for example, the network
in Figure 7.8b, again with unit capacities and demands. This network has the 2commodity ﬂow (f1 , f2 ), where f1 (a) = f2 (a) = 1/2 for all a ∈ A, but it has no
2-commodity ﬂow which takes on only integer values.
x2

x1

x2

y2

y1

x1

y1

y2
(a)

(b)

Fig. 7.8. Examples of networks: (a) satisﬁes the cut condition but has no 2-commodity
ﬂow, (b) has a fractional 2-commodity ﬂow, but not one which is integral

8
Complexity of Algorithms

Contents
8.1 Computational Complexity . . . . . . . . . . . . . . . . . . . . . . . . 173
The Class P . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
The Classes N P and co-N P . . . . . . . . . . . . . . . . . . . . . . . . . 175
The Cook–Edmonds–Levin Conjecture . . . . . . . . . . . . . . . 176
Edmonds’ Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
8.2 Polynomial Reductions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
8.3 N P-Complete Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
The Class N PC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
Boolean Formulae . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
Satisfiability of Boolean Formulae . . . . . . . . . . . . . . . . . 182
Proof Technique: Polynomial Reduction . . . . . . . . . . . . 185
N P-Hard Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
8.4 Approximation Algorithms . . . . . . . . . . . . . . . . . . . . . . . . 191
8.5 Greedy Heuristics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
The Borůvka–Kruskal Algorithm . . . . . . . . . . . . . . . . . . . 193
Independence Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
8.6 Linear and Integer Programming . . . . . . . . . . . . . . . . . . 197
Proof Technique: Total Unimodularity . . . . . . . . . . . . . 199
Matchings and Coverings in Bipartite Graphs . . . . . . . 200
8.7 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
Isomorphism-Completeness . . . . . . . . . . . . . . . . . . . . . . . . . . . 204

8.1 Computational Complexity
In this chapter, we see how problems may be classiﬁed according to their level of
diﬃculty.
Most problems that we consider in this book are of a general character, applying
to all members of some family of graphs or digraphs. By an instance of a problem,
we mean the problem as applied to one speciﬁc member of the family. For example,

174

8 Complexity of Algorithms

an instance of the Minimum-Weight Spanning Tree Problem is the problem of
ﬁnding an optimal tree in a particular weighted connected graph.
An algorithm for solving a problem is a well-deﬁned computational procedure
which accepts any instance of the problem as input and returns a solution to the
problem as output. For example, the Jarnı́k–Prim Algorithm (6.9) accepts as input
a weighted connected graph G and returns as output an optimal tree.
As we have seen, many problems of practical importance can be formulated in
terms of graphs. Designing computationally eﬃcient algorithms for solving these
problems is one of the main concerns of graph theorists and computer scientists.
The two aspects of theoretical interest in this regard are, ﬁrstly, to verify that a
proposed algorithm does indeed perform correctly and, secondly, to analyse how
eﬃcient a procedure it is. We have already encountered algorithms for solving a
number of basic problems. In each case, we have established their validity. Here,
we discuss the eﬃciency of these and other algorithms.
By the computational complexity (or, for short, complexity) of an algorithm, we
mean the number of basic computational steps (such as arithmetical operations
and comparisons) required for its execution. This number clearly depends on the
size and nature of the input. In the case of graphs, the complexity is a function
of the number of bits required to encode the adjacency list of the input graph
G, a function of n and m. (The number of bits required to encode an integer k
is log2 k .) Naturally, when the input includes additional information, such as
weights on the vertices or edges of the graph, this too must be taken into account
in calculating the complexity. If the complexity is bounded above by a polynomial
in the input size, the algorithm is called a polynomial-time algorithm. Such an
algorithm is further qualiﬁed as linear-time if the polynomial is a linear function,
quadratic-time if it is a quadratic function, and so on.
The Class P
The signiﬁcance of polynomial-time algorithms is that they are usually found to
be computationally feasible, even for large input graphs. By contrast, algorithms
whose complexity is exponential in the size of the input have running times which
render them unusable even on inputs of moderate size. For example, an algorithm
which checks whether two graphs on n vertices are isomorphic by considering all n!
bijections between their vertex sets is feasible only for small values of n (certainly
no greater than 20), even on the fastest currently available computers. The class
of problems solvable by polynomial-time algorithms is denoted by P.
The tree-search algorithms discussed in Chapter 6 are instances of polynomialtime algorithms. In breadth-ﬁrst search, each edge is examined for possible inclusion in the tree just twice, when the adjacency lists of its two ends are scanned.
The same is true of depth-ﬁrst search. Therefore both of these algorithms are linear in m, the number of edges. The Jarnı́k–Prim Algorithm involves, in addition,
comparing weights of edges, but it is easily seen that the number of comparisons
is also bounded by a polynomial in m.

8.1 Computational Complexity

175

Unlike the other algorithms described in Chapter 6, the Max-Flow Min-Cut
Algorithm is not a polynomial-time algorithm even when all the capacities are
integers; the example in Exercise 8.1.1 shows that, in the worst case, the algorithm
may perform an arbitrarily large number of iterations before returning a maximum
ﬂow. Fortunately, this eventuality can be avoided by modifying the way in which
IPS is implemented, as was shown by Edmonds and Karp (1970) and Dinic (1970).
Among all the arcs in ∂(T ) that qualify for inclusion in T , preference is given to
those which are incident to the vertex that entered T the earliest, just as in breadthﬁrst search, resulting in a shortest incrementing path. It can be shown that, with
this reﬁnement, the number of iterations of IPS is bounded by a polynomial in n
and thus yields a polynomial-time algorithm.
Although our analysis of these algorithms is admittedly cursory, and leaves out
many pertinent details, it should be clear that they do indeed run in polynomial
time. A thorough analysis of these and other graph algorithms can be found in the
books by Aho et al. (1975) and Papadimitriou (1994). On the other hand, there
are many basic problems for which polynomial-time algorithms have yet to be
found, and indeed might well not exist. Determining which problems are solvable
in polynomial time and which are not is evidently a fundamental question. In this
connection, a class of problems denoted by N P (standing for nondeterministic
polynomial-time) plays an important role. We give here an informal deﬁnition of
this class; a precise treatment can be found in Chapter 29 of the Handbook of
Combinatorics (Graham et al. (1995)), or in the book by Garey and Johnson
(1979).
The Classes N P and co-N P
A decision problem is a question whose answer is either ‘yes’ or ‘no’. Such a problem
belongs to the class P if there is a polynomial-time algorithm that solves any
instance of the problem in polynomial time. It belongs to the class N P if, given
any instance of the problem whose answer is ‘yes’, there is a certiﬁcate validating
this fact which can be checked in polynomial time; such a certiﬁcate is said to
be succinct. Analogously, a decision problem belongs to the class co-N P if, given
any instance of the problem whose answer is ‘no’, there is a succinct certiﬁcate
which conﬁrms that this is so. It is immediate from these deﬁnitions that P ⊆
N P, inasmuch as a polynomial-time algorithm constitutes, in itself, a succinct
certiﬁcate. Likewise, P ⊆ co-N P. Thus
P ⊆ N P ∩ co-N P
Consider, for example, the problem of determining whether a graph is bipartite.
This decision problem belongs to N P, because a bipartition is a succinct certiﬁcate:
given a bipartition (X, Y ) of a bipartite graph G, it suﬃces to check that each edge
of G has one end in X and one end in Y . The problem also belongs to co-N P
because, by Theorem 4.7, every nonbipartite graph contains an odd cycle, and any
such cycle constitutes a succinct certiﬁcate of the graph’s nonbipartite character.

176

8 Complexity of Algorithms

It thus belongs to N P ∩ co-N P. In fact, as indicated in Exercise 6.1.3, it belongs
to P.
As a second example, consider the problem of deciding whether a graph G(x, y)
has k edge-disjoint xy-paths. This problem is clearly in N P, because a family of
k edge-disjoint xy-paths is a succinct certiﬁcate: given such a family of paths,
one may check in polynomial-time that it indeed has the required properties. The
problem is also in co-N P because, by Theorem 7.17, a graph that does not have
k edge-disjoint xy-paths has an xy-edge cut of size less than k. Such an edge cut
serves as a succinct certiﬁcate for the nonexistence of k edge-disjoint xy-paths.
Finally, because the maximum number of edge-disjoint xy-paths can be found in
polynomial time by applying the Max-Flow Min-Cut Algorithm (7.9) (see Exercise 7.3.5) this problem belongs to P, too.
Consider, now, the problem of deciding whether a graph has a Hamilton cycle.
Problem 8.1 Hamilton Cycle
Given: a graph G,
Decide: Does G have a Hamilton cycle?
If the answer is ‘yes’, then any Hamilton cycle would serve as a succinct certiﬁcate. However, should the answer be ‘no’, what would constitute a succinct
certiﬁcate conﬁrming this fact? In contrast to the two problems described above,
no such certiﬁcate is known! In other words, notwithstanding that Hamilton Cycle is clearly a member of the class N P, it has not yet been shown to belong to
co-N P, and might very well not belong to this class. The same is true of the decision problem for Hamilton paths. These two problems are discussed in detail in
Chapter 18.
Many problems that arise in practice, such as the Shortest Path Problem (6.11),
are optimization problems rather than decision problems. Nonetheless, each such
problem implicitly includes an inﬁnitude of decision problems. For example, the
Shortest Path Problem includes, for each real number , the following decision
problem. Given a weighted directed graph (D, w) with two speciﬁed vertices x and
y, is there a directed (x, y)-path in D of length at most ?
We have noted three relations of inclusion among the classes P, N P, and
co-N P, and it is natural to ask whether these inclusions are proper. Because
P = N P if and only if P = co-N P, two basic questions arise, both of which have
been posed as conjectures.

The Cook–Edmonds–Levin Conjecture
Conjecture 8.2

P = N P

8.1 Computational Complexity

177

Edmonds’ Conjecture
Conjecture 8.3

P = N P ∩ co-N P

Conjecture 8.2 is one of the most fundamental open questions in all of mathematics. (A prize of one million dollars has been oﬀered for its resolution.) It is
widely (but not universally) believed that the conjecture is true, that there are
problems in N P for which no polynomial-time algorithm exists. One such problem would be Hamilton Cycle. As we show in Section 8.3, this problem, and its
directed analogue Directed Hamilton Cycle, are at least as hard to solve as
any problem in the class N P; more precisely, if a polynomial-time algorithm for
either of these problems should be found, it could be adapted to solve any problem
in N P in polynomial time by means of a suitable transformation. Conjecture 8.2
was, in essence, put forward by J. Edmonds in the mid-1960s, when he asserted
that there could exist no ‘good’ (that is, polynomial-time) algorithm for the Travelling Salesman Problem (Problem 2.6). The conjecture thus predates the formal
deﬁnition of the class N P by Cook (1971) and Levin (1973).
Conjecture 8.3, also proposed by Edmonds (1965c), is strongly supported by
empirical evidence. Most decision problems which are known to belong to N P ∩
co-N P are also known to belong to P. A case in point is the problem of deciding
whether a given integer is prime. Although it had been known for some time that
this problem belongs to both N P and co-N P, a polynomial-time algorithm for
testing primality was discovered only much more recently, by Agrawal et al. (2004).

Exercises
8.1.1
a) Show that, starting with the zero ﬂow, an application of the Max-Flow MinCut Algorithm (7.9) to the network N in Figure 8.1 might execute 2M + 1
incrementing path iterations before ﬁnding a maximum ﬂow.
b) Deduce that this algorithm is not a polynomial-time algorithm.
8.1.2 Show that Fleury’s Algorithm (3.3) is a polynomial-time algorithm.
————— —————
8.1.3 Given a graph G(x, y), consider the problem of deciding whether G has an
xy-path of odd (respectively, even) length.
a) Show that this problem:
i) belongs to N P,

178

8 Complexity of Algorithms
u
M
x

M
1

M

y
M

v
Fig. 8.1. A network on which Algorithm 7.9 might require many iterations

ii) belongs to co-N P.
b) Describe a polynomial-time algorithm for solving the problem.
8.1.4 Describe a polynomial-time algorithm for deciding whether two trees are
isomorphic.

8.2 Polynomial Reductions
A common approach to problem-solving is to transform the given problem into one
whose solution is already known, and then convert that solution into a solution
of the original problem. Of course, this approach is feasible only if the transformation can be made rapidly. The concept of polynomial reduction captures this
requirement.
A polynomial reduction of a problem P to a problem Q is a pair of polynomialtime algorithms, one which transforms each instance I of P to an instance J of
Q, and the other which transforms a solution for the instance J to a solution for
the instance I. If such a reduction exists, we say that P is polynomially reducible
to Q, and write P  Q; this relation is clearly both reﬂexive and transitive.
The signiﬁcance of polynomial reducibility is that if P  Q, and if there is a
polynomial-time algorithm for solving Q, then this algorithm can be converted
into a polynomial-time algorithm for solving P . In symbols:
P  Q and Q ∈ P ⇒ P ∈ P

(8.1)

A very simple example of the above paradigm is the polynomial reduction to
the Minimum-Weight Spanning Tree Problem (6.8) of the following problem.
Problem 8.4 Maximum-Weight Spanning Tree
Given: a weighted connected graph G,
Find: a maximum-weight spanning tree in G.
In order to solve an instance of this problem, it suﬃces to replace each weight by
its negative and apply the Jarnı́k–Prim Algorithm (6.9) to ﬁnd an optimal tree in
the resulting weighted graph. The very same tree will be one of maximum weight in
the original weighted graph. (We remark that one can similarly reduce the problem

8.2 Polynomial Reductions

179

of ﬁnding a longest xy-path in a graph to the Shortest Path Problem (6.11).
However no polynomial-time algorithm is known for solving the latter problem
when there are negative edge weights.)
Not all reductions are quite as straightforward as this one. Recall that two
directed (x, y)-paths are internally disjoint if they have no internal vertices in
common. Consider the following problem, the analogue for internally disjoint paths
of Problem 7.10, the Arc-Disjoint Directed Paths Problem (ADDP).
Problem 8.5 Internally Disjoint Directed Paths (IDDP)
Given: a digraph D := D(x, y),
Find: a maximum family of internally disjoint directed (x, y)-paths in D.
A polynomial reduction of IDDP to ADDP can be obtained by constructing a
new digraph D := D (x, y) from D as follows.
Split each vertex v ∈ V \ {x, y} into two new vertices v − and v + , joined by a
new arc (v − , v + ).
 For each arc (u, v) of D, replace its tail u by u+ (unless u = x or u = y) and
its head v by v − (unless v = x or v = y).



This construction is illustrated in Figure 8.2.
u

u−

v

x

y

z

w
D(x, y)

v−

u+

v+

y

x

z−

w− w+

z+

D (x, y)

Fig. 8.2. Reduction of IDDP to ADDP

It can be seen that there is a bijection between families of internally disjoint
directed (x, y)-paths in D and families of arc-disjoint directed (x, y)-paths in D .
Thus, ﬁnding a maximum family of internally disjoint directed (x, y)-paths in
D(x, y) amounts to ﬁnding a maximum family of arc-disjoint directed (x, y)-paths
in D (x, y). This transformation of the instance D(x, y) of IDDP to the instance
D (x, y) of ADDP is a polynomial reduction because v(D ) = 2v(D) − 2 and
a(D ) = a(D) + v(D) − 2. Hence IDDP  ADDP .
The Max-Flow Min-Cut Algorithm (7.9) is a polynomial-time algorithm for
solving ADDP. Therefore ADDP ∈ P. Because IDDP  ADDP , we may conclude that IDDP ∈ P, also.
Most problems concerning paths in undirected graphs can be reduced to their
analogues in directed graphs by the simple artiﬁce of considering the associated

180

8 Complexity of Algorithms

digraph. As an example, let G := G(x, y) be an undirected graph and let D :=
D(G) be its associated digraph. There is an evident bijection between families
of internally disjoint xy-paths in G and families of internally disjoint directed
(x, y)-paths in D. Thus IDP  IDDP , where IDP is the problem of ﬁnding
a maximum family of internally disjoint xy-paths in a given graph G(x, y). We
showed above that IDDP ∈ P. It now follows from the transitivity of the relation
 that IDP ∈ P.

Exercises
8.2.1 Consider a network in which a nonnegative integer m(v) is associated with
each intermediate vertex v. Show how a maximum ﬂow f satisfying the constraint
f − (v) ≤ m(v), for all v ∈ I, can be found by applying the Max-Flow Min-Cut
Algorithm to a suitably modiﬁed network.
8.2.2 Consider the following problem.
Problem 8.6 Disjoint Paths
Given: a graph G, a positive integer k, and two k-subsets X and Y of V ,
Decide: Does G have k disjoint (X, Y )-paths?
Describe a polynomial reduction of this problem to IDP (Internally Disjoint
Paths).
————— —————

8.3 N P-Complete Problems
The Class N PC
We have just seen how polynomial reductions may be used to produce new
polynomial-time algorithms from existing ones. By the same token, polynomial
reductions may also be used to link ‘hard’ problems, ones for which no polynomialtime algorithm exists, as can be seen by writing (8.1) in a diﬀerent form:
P  Q and P ∈
/P⇒Q∈
/P
This viewpoint led Cook (1971) and Levin (1973) to deﬁne a special class
of seemingly intractable decision problems, the class of N P-complete problems.
Informally, these are the problems in the class N P which are ‘at least as hard to
solve’ as any problem in N P.
Formally, a problem P in N P is N P-complete if P   P for every problem P 
in N P. The class of N P-complete problems is denoted by N PC. It is by no means
obvious that N P-complete problems should exist at all. On the other hand, once

8.3 N P-Complete Problems

181

one such problem has been found, the N P-completeness of other problems may
be established by means of polynomial reductions, as follows.
In order to prove that a problem Q in N P is N P-complete, it suﬃces to ﬁnd a
polynomial reduction to Q of some known N P-complete problem P . Why is this
so? Suppose that P is N P-complete. Then P   P for all P  ∈ N P. If P  Q,
then P   Q for all P  ∈ N P, by the transitivity of the relation . In other words,
Q is N P-complete. In symbols:
P  Q and P ∈ N PC ⇒ Q ∈ N PC
Cook (1971) and Levin (1973) made a fundamental breakthrough by showing
that there do indeed exist N P-complete problems. More precisely, they proved
that the satisﬁability problem for boolean formulae is N P-complete. We now describe this problem, and examine the theoretical and practical implications of their
discovery.
Boolean Formulae
A boolean variable is a variable which takes on one of two values, 0 (‘false’) or 1
(‘true’). Boolean variables can be combined into boolean formulae, which may be
deﬁned recursively as follows.
 Every boolean variable is a boolean formula.
 If f is a boolean formula, then so too is (¬f ), the negation of f .
 If f and g are boolean formulae, then so too are:
- (f ∨ g), the disjunction of f and g,
- (f ∧ g), the conjunction of f and g.
These three operations may be thought of informally as ‘not f ’, ‘f or g’, and ‘f
and g’, respectively. The negation of a boolean variable x is often written as x.
Thus the expression
(8.2)
(¬(x1 ∨ x2 ) ∨ x3 ) ∧ (x2 ∨ x3 )
is a boolean formula in the variables x1 , x2 , x3 . Note that the parentheses are
needed here to avoid ambiguity as to the order of execution of the various operations. (For ease of reading, we omit the outer pair of parentheses.)
An assignment of values to the variables of a boolean formula is called a truth
assignment. Given a truth assignment, the value of the formula may be computed
according to the following rules.
¬
01
10

∨01
001
111

∧01
000
101

For instance, if x1 = 1, x2 = 0, and x3 = 1, the value of formula (8.2) is:
(¬(1 ∨ 0) ∨ 1) ∧ (0 ∨ 1) = (¬(1 ∨ 1) ∨ 1) ∧ (0 ∨ 0) = (1 ∨ 1) ∧ 0 = (0 ∨ 1) ∧ 0 = 1 ∧ 0 = 0

182

8 Complexity of Algorithms

Two boolean formulae are equivalent (written ≡) if they take the same value
for each truth assignment of the variables involved. It follows easily from the above
rules that negation is an involution:
¬(¬f ) ≡ f
and that disjunction and conjunction are commutative, associative, and idempotent:
f ∨ g ≡ g ∨ f,
f ∧g ≡g∧f
f ∨ (g ∨ h) ≡ (f ∨ g) ∨ h,
f ∨ f ≡ f,

f ∧ (g ∧ h) ≡ (f ∧ g) ∧ h
f ∧ f ≡ f.

Furthermore, disjunction and conjunction together satisfy the distributive laws:
f ∨ (g ∧ h) ≡ (f ∨ g) ∧ (f ∨ h),

f ∧ (g ∨ h) ≡ (f ∧ g) ∨ (f ∧ h)

and interact with negation according to de Morgan’s laws:
¬(f ∨ g) ≡ (¬f ) ∧ (¬g),

¬(f ∧ g) ≡ (¬f ) ∨ (¬g)

Finally, there are the tautologies:
f ∨ ¬f = 1,

f ∧ ¬f = 0.

Boolean formulae may be transformed into equivalent ones by applying these
laws. For instance:
(¬(x1 ∨ x2 ) ∨ x3 ) ∧ (x2 ∨ x3 ) ≡ ((x1 ∧ x2 ) ∨ x3 ) ∧ (x2 ∨ x3 )
≡ ((x1 ∨ x3 ) ∧ (x2 ∨ x3 )) ∧ (x2 ∨ x3 )
≡ (x1 ∨ x3 ) ∧ ((x2 ∨ x3 ) ∧ (x2 ∨ x3 ))
≡ (x1 ∨ x3 ) ∧ (x2 ∨ (x3 ∧ x3 ))
≡ (x1 ∨ x3 ) ∧ x2
Satisfiability of Boolean Formulae
A boolean formula is satisﬁable if there is a truth assignment of its variables for
which the value of the formula is 1. In this case, we say that the formula is satisﬁed
by the assignment. It can be seen that formula (8.2) is satisﬁable, for instance by
the truth assignment x1 = 0, x2 = 1, x3 = 0. But not all boolean formulae are
satisﬁable (x ∧ x being a trivial example). This poses the general problem:
Problem 8.7 Boolean Satisfiability (Sat)
Given: a boolean formula f ,
Decide: Is f satisﬁable?

8.3 N P-Complete Problems

183

Observe that Sat belongs to N P: given appropriate values of the variables, it
can be checked in polynomial time that the value of the formula is indeed 1. These
values of the variables therefore constitute a succinct certiﬁcate. Cook (1971) and
Levin (1973) proved, independently, that Sat is an example of an N P-complete
problem.
Theorem 8.8 The Cook–Levin Theorem
The problem Sat is N P-complete.



The proof of the Cook–Levin Theorem involves the notion of a Turing machine,
and is beyond the scope of this book. A proof may be found in Garey and Johnson
(1979) or Sipser (2005).
By applying Theorem 8.8, Karp (1972) showed that many combinatorial problems are N P-complete. One of these is Directed Hamilton Cycle. In order to
explain the ideas underlying his approach, we need a few more deﬁnitions.
A variable x, or its negation x, is a literal , and a disjunction or conjunction of
literals is a disjunctive or conjunctive clause. Because the operations of disjunction
and conjunction are associative, parentheses may be dispensed with within clauses.
There is no ambiguity, for example, in the following formula, a conjunction of three
disjunctive clauses, each consisting of three literals.
f := (x1 ∨ x2 ∨ x3 ) ∧ (x2 ∨ x3 ∨ x4 ) ∧ (x1 ∨ x3 ∨ x4 )
Any conjunction of disjunctive clauses such as this one is referred to as a formula in conjunctive normal form. It can be shown that every boolean formula is
equivalent, via a polynomial reduction, to one in conjunctive normal form (Exercise 8.3.1). Furthermore, as we explain below in the proof of Theorem 8.10, every
boolean formula in conjunctive normal form is equivalent, again via a polynomial
reduction, to one in conjunctive normal form with exactly three literals per clause.
The decision problem for such boolean formulae is known as 3-Sat.
Problem 8.9 Boolean 3-Satisfiability (3-Sat)
Given: a boolean formula f in conjunctive normal form with three literals per
clause,
Decide: Is f satisﬁable?
Theorem 8.10 The problem 3-Sat is N P-complete.
Proof By the Cook–Levin Theorem (8.8), it suﬃces to prove that Sat  3-Sat.
Let f be a boolean formula in conjunctive normal form. We show how to construct,
in polynomial time, a boolean formula f  in conjunctive normal form such that:
i) each clause in f  has three literals,
ii) f is satisﬁable if and only if f  is satisﬁable.
Such a formula f  may be obtained by the addition of new variables and clauses,
as follows.

184

8 Complexity of Algorithms

Suppose that some clause of f has just two literals, for instance the clause
(x1 ∨ x2 ). In this case, we simply replace this clause by two clauses with three
literals, (x1 ∨ x2 ∨ x) and (x ∨ x1 ∨ x2 ), where x is a new variable. Clearly,
(x1 ∨ x2 ) ≡ (x1 ∨ x2 ∨ x) ∧ (x ∨ x1 ∨ x2 )
Clauses with single literals may be dealt with in a similar manner (Exercise 8.3.2).
Now suppose that some clause (x1 ∨ x2 ∨ · · · ∨ xk ) of f has k literals, where
k ≥ 4. In this case, we add k − 3 new variables y1 , y2 , . . . , yk−3 and form the
following k − 2 clauses, each with three literals.
(x1 ∨x2 ∨y1 ), (y 1 ∨x3 ∨y2 ), (y 2 ∨x4 ∨y3 ), · · · (y k−4 ∨xk−2 ∨yk−3 ), (y k−3 ∨xk−1 ∨xk )
One may verify that (x1 ∨ x2 ∨ · · · ∨ xk ) is equivalent to the conjunction of these
k − 2 clauses. We leave the details as an exercise (8.3.3).

Theorem 8.10 may be used to establish the N P-completeness of decision problems in graph theory such as Directed Hamilton Cycle by means of polynomial
reductions.
As we have observed, in order to show that a decision problem Q in N P is
N P-complete, it suﬃces to ﬁnd a polynomial reduction to Q of a known N Pcomplete problem P . This is generally easier said than done. What is needed is to
ﬁrst decide on an appropriate N P-complete problem P and then come up with
a suitable polynomial reduction. In the case of graphs, the latter step is often
achieved by means of a construction whereby certain special subgraphs, referred
to as ‘gadgets’, are inserted into the instance of P so as to obtain an instance of Q
with the required properties. An illustration of this technique is described in the
inset overleaf, where we show how 3-Sat may be reduced to Directed Hamilton
Cycle via an intermediate problem, Exact Cover.
Almost all of the decision problems that we come across in this book are known
to belong either to the class P or to the class N PC. One notable exception is the
isomorphism problem:
Problem 8.11 Graph Isomorphism
Given: two graphs G and H,
Decide: Are G and H isomorphic?
The complexity status of this problem remains a mystery. Whilst the problem clearly belongs to N P, whether it belongs to P, to co-N P, or to N PC is
not known. Polynomial-time isomorphism-testing algorithms have been found for
certain classes of graphs, including planar graphs (Hopcroft and Wong (1974))
and graphs of bounded degree (Luks (1982)), but these algorithms are not valid
for all graphs. Graph Isomorphism might, conceivably, be a counterexample to
Conjecture 8.3.

8.3 N P-Complete Problems

185

Proof Technique: Polynomial Reduction
We establish the NP-completeness of Directed Hamilton Cycle by reducing 3-Sat to it via an intermediate problem, Exact Cover, which we now
describe.
Let A be a family of subsets of a ﬁnite set X. An exact cover of X by A
is a partition of X, each member of which belongs to A. For instance, if
X := {x1 , x2 , x3 } and A := {{x1 }, {x1 , x2 }, {x2 , x3 }}, then {{x1 }, {x2 , x3 }}
is an exact cover of X by A. This notion gives rise to the following decision
problem.
Problem 8.12 Exact Cover
Given: a set X and a family A of subsets of X,
Decide: Is there an exact cover of X by A?
We ﬁrst describe a polynomial reduction of 3-Sat to Exact Cover, and then
a polynomial reduction of Exact Cover to Directed Hamilton Cycle.
The chain of reductions:
Sat  3 − Sat  Exact Cover  Directed Hamilton Cycle
will then imply that Directed Hamilton Cycle is N P-complete, by virtue
of the Cook–Levin Theorem (8.8).
Theorem 8.13 3-Sat  Exact Cover.
Proof Let f be an instance of 3-Sat, with clauses f1 , . . . , fn and variables
x1 , . . . , xm . The ﬁrst step is to construct a graph G from f , by setting:
V (G) := {xi : 1 ≤ i ≤ m} ∪ {xi : 1 ≤ i ≤ m} ∪ {fj : 1 ≤ j ≤ n}
E(G) := {xi xi : 1 ≤ i ≤ m} ∪ {xi fj : xi ∈ fj } ∪ {xi fj : xi ∈ fj }
where the notation xi ∈ fj (xi ∈ fj ) signiﬁes that xi (xi ) is a literal of the
clause fj . The next step is to obtain an instance (X, A) of Exact Cover
from this graph G. We do so by setting:
X := {fj : 1 ≤ j ≤ n} ∪ E(G)
A := {∂(xi ) : 1 ≤ i ≤ m} ∪ {∂(xi ) : 1 ≤ i ≤ m}
∪ {{fj } ∪ Fj : Fj ⊂ ∂(fj ), 1 ≤ j ≤ n}
It can be veriﬁed that the formula f is satisﬁable if and only if the set X has
an exact cover by the family A (Exercise 8.3.4).


186

8 Complexity of Algorithms

Polynomial Reduction (continued)
For instance, if f := (x1 ∨ x2 ∨ x3 ) ∧ (x2 ∨ x3 ∨ x4 ) ∧ (x1 ∨ x3 ∨ x4 ), the graph
G obtained by this construction is:
f1

x1

f2

x1

x2

x2

f3

x3

x3

x4

x4

In this example, the given formula is satisﬁed by the truth assignment x1 = 1,
x2 = 1, x3 = 0, x4 = 0, and this truth assignment corresponds to the exact
cover:
f1

∂(x1 )

f2

∂(x2 )

f3

∂(x3 )

∂(x4 )

To round oﬀ the proof that Directed Hamilton Cycle is an N P-complete
problem, we describe a polynomial reduction of Exact Cover to Directed
Hamilton Cycle.
Theorem 8.14 Exact Cover  Directed Hamilton Cycle.
Proof Let (X, A) be an instance of exact set cover, where X := {xi :
1 ≤ i ≤ m} and A := {Aj : 1 ≤ j ≤ n}. We construct a directed graph G
from (X, A) as follows. Let P be a directed path whose arcs are labelled by
the elements of X, Q a directed path whose arcs are labelled by the elements
of A and, for 1 ≤ j ≤ n, Rj a directed path whose vertices are labelled by
the elements of Aj . The paths P , Q, and Rj , 1 ≤ j ≤ n, are assumed to be
pairwise disjoint. We add an arc from the initial vertex of P to the initial
vertex of Q, and from the terminal vertex of Q to the terminal vertex of P .

8.3 N P-Complete Problems

187

Polynomial Reduction (continued)
For 1 ≤ j ≤ n, we also add an arc from the initial vertex of the arc Aj of Q
to the initial vertex of Rj , and from the terminal vertex of Rj to the terminal
vertex of Aj :
P

x1

x2

x3

xi

xm−2 xm−1

xm

Rj
Q
A1

Aj

An

For 1 ≤ j ≤ n, we now transform the directed path Rj into a digraph Dj by
replacing each vertex xi of Rj by a ‘path’ Pij of length two whose edges are
pairs of oppositely oriented arcs. Moreover, for every such ‘path’ Pij , we add
an arc from the initial vertex of Pij to the initial vertex of the arc xi of P ,
and one from the terminal vertex of xi to the terminal vertex of Pij :
xi

P
Dj

Pij

Q
Aj
We denote the resulting digraph by D. This construction, with X :=
{x1 , x2 , x3 } and A := {{x1 }, {x1 , x2 }, {x2 , x3 }}, is illustrated in the following ﬁgure.
x1

P11
A1 = {x1 }

x2

P12

x3

P22
A2 = {x1 , x2 }

P23

P33
A3 = {x2 , x3 }

188

8 Complexity of Algorithms

Polynomial Reduction (continued)
Observe, now, that the digraph D has a directed Hamilton cycle C if and only
if the set X has an exact cover by the family of subsets A. If C does not use
the arc Aj , it is obliged to traverse Dj from its initial to its terminal vertex.
Conversely, if C uses the arc Aj , it is obliged to include each one of the paths
Pij of Dj in its route from the terminal vertex of P to the initial vertex of
P . Moreover, C traces exactly one of the paths Pij (xi ∈ Aj ) in travelling
from the head of the arc xi to its tail. The arcs Aj of Q which are included in
C therefore form a partition of X. Conversely, to every partition of X there
corresponds a directed Hamilton cycle of D.
Finally, the numbers of vertices and arcs of D are given by:
n
v(D) = |X| + |A| + 3 j=1 |Aj | + 2
n
a(D) = |X| + 2|A| + 7 j=1 |Aj | + 2
Because both of these parameters are bounded above by linear functions of
the size of the instance (X, A), the above reduction is indeed polynomial. 
Corollary 8.15 The problem Directed Hamilton Cycle is N P-complete.


N P-Hard Problems
We now turn to the computational complexity of optimization problems such as
the Travelling Salesman Problem (TSP) (Problem 2.6). This problem contains
Hamilton Cycle as a special case. To see this, associate with a given graph G
the weighted complete graph on V (G) in which the weight attached to an edge
uv is zero if uv ∈ E(G), and one otherwise. The resulting weighted complete
graph has a Hamilton cycle of weight zero if and only if G has a Hamilton cycle.
Thus, any algorithm for solving TSP will also solve Hamilton Cycle, and we
may conclude that the former problem is at least as hard as the latter. Because
Hamilton Cycle is N P-complete (see Exercise 8.3.5), TSP is at least as hard
as any problem in N P. Such problems are called N P-hard .
Another basic N P-hard problem is:
Problem 8.16 Maximum Clique (Max Clique)
Given: a graph G,
Find: a maximum clique in G.
In order to solve this problem, one needs to know, for a given value of k, whether
G has a k-clique. The largest such k is called the clique number of G, denoted ω(G).

8.3 N P-Complete Problems

189

If k is a ﬁxed integer not depending on n, the existence of a k-clique can be decided
in polynomial time, simply by means of an exhaustive search, because the number
of k-subsets of V is bounded above by nk . However, if k depends on n, this is no
longer true. Indeed, the problem of deciding whether a graph G has a k-clique,
where k depends on n, is N P-complete (Exercise 8.3.9).
The complementary notion of a clique is a stable set, a set of vertices no two of
which are adjacent. A stable set in a graph is maximum if the graph contains no
larger stable set. The cardinality of a maximum stable set in a graph G is called the
stability number of G, denoted α(G). Clearly, a subset S of V is a stable set in G
if and only if S is a clique in G, the complement of G. Consequently, the following
problem is polynomially equivalent to Max Clique, and thus is N P-hard also.
Problem 8.17 Maximum Stable Set (Max Stable Set)
Given: a graph G,
Find: a maximum stable set in G.

Exercises
8.3.1 Let f := f1 ∧ f2 ∧ · · · ∧ fk and g := g1 ∧ g2 ∧ · · · ∧ g be two boolean formulae
in conjunctive normal form (where fi , 1 ≤ i ≤ k, and gj , 1 ≤ j ≤ , are disjunctive
clauses).
a) Show that:
i) f ∧ g is in conjunctive normal form,
ii) f ∨ g is equivalent to a boolean formula in conjunctive normal form,
iii) ¬f is in disjunctive normal form, and is equivalent to a boolean formula
in conjunctive normal form.
b) Deduce that every boolean formula is equivalent to a boolean formula in conjunctive normal form.
8.3.2 Show that every clause consisting of just one literal is equivalent to a
boolean formula in conjunctive normal form with exactly three literals per clause.
8.3.3 Let (x1 ∨ x2 ∨ · · · ∨ xk ) be a disjunctive clause with k literals, where k ≥ 4,
and let y1 , y2 , . . . , yk−2 be boolean variables. Show that:
(x1 ∨ x2 ∨ · · · ∨ xk ) ≡ (x1 ∨ x2 ∨ y1 ) ∧ (y 1 ∨ x3 ∨ y2 ) ∧ (y 2 ∨ x4 ∨ y3 ) ∧ · · ·
· · · ∧ (y k−4 ∨ xk−2 ∨ yk−3 ) ∧ (y k−3 ∨ xk−1 ∨ xk )
8.3.4 Let f := f1 ∧ f2 ∧ · · · ∧ fn be an instance of 3-Sat, with variables
x1 , x2 , . . . , xm . Form a graph G from f , and an instance (X, A) of Exact Cover
from G, as described in the proof of Theorem 8.13.
a) Show that the formula f is satisﬁable if and only if the set X has an exact
cover by the family A.

190

8 Complexity of Algorithms

b) Show also that the pair (X, A) can be constructed from f in polynomial time
(in the parameters m and n).
c) Deduce that Exact Cover ∈ N PC.
d) Explain why constructing a graph in the same way, but from an instance of
Sat rather than 3-Sat, does not provide a polynomial reduction of Sat to
Exact Cover.
8.3.5
a) Describe a polynomial reduction of Directed Hamilton Cycle to Hamilton Cycle.
b) Deduce that Hamilton Cycle ∈ N PC.
8.3.6 Let Hamilton Path denote the problem of deciding whether a given graph
has a Hamilton path.
a) Describe a polynomial reduction of Hamilton Cycle to Hamilton Path.
b) Deduce that Hamilton Path ∈ N PC.
8.3.7 Two problems P and Q are polynomially equivalent, written P ≡ Q, if P  Q
and Q  P .
a) Show that:
Hamilton Path ≡ Hamilton Cycle ≡ Directed Hamilton Cycle
b) Let Max Path denote the problem of ﬁnding the length of a longest path in
a given graph. Show that Max Path ≡ Hamilton Path.
8.3.8
a) Let k be a ﬁxed positive integer. Describe a polynomial-time algorithm for
deciding whether a given graph has a path of length k.
b) The length of a longest path in a graph G can be determined by checking, for
each k, 1 ≤ k ≤ n, whether G has a path of length k. Does your algorithm for
the problem in part (a) lead to a polynomial-time algorithm for Max Path?
8.3.9
a) Let f = f1 ∧ f2 ∧ · · · ∧ fk be an instance of 3-Sat (where the fi , 1 ≤ i ≤ k,
are disjunctive clauses, each containing three literals). Construct a k-partite
graph G on 7k vertices (seven vertices in each part) such that f is satisﬁable
if and only if G has a k-clique.
b) Deduce that 3-Sat and Max Clique are polynomially equivalent.
————— —————
8.3.10 Let k be a positive integer. The following problem is a generalization of
3-Sat.

8.4 Approximation Algorithms

191

Problem 8.18 Boolean k-Satisfiability (k-Sat)
Given: a boolean formula f in conjunctive normal form with k literals per
clause,
Decide: Is f satisﬁable?
Show that:
a) 2-Sat ∈ P,
b) k-Sat ∈ N PC for k ≥ 3.

8.4 Approximation Algorithms
For N P-hard optimization problems of practical interest, such as the Travelling
Salesman Problem, the best that one can reasonably expect of a polynomial-time
algorithm is that it should always return a feasible solution which is not too far
from optimality.
Given a real number t ≥ 1, a t-approximation algorithm for a minimization
problem is an algorithm that accepts any instance of the problem as input and
returns a feasible solution whose value is no more than t times the optimal value;
the smaller the value of t, the better the approximation. Naturally, the running
time of the algorithm is an equally important factor. We give two examples.
Problem 8.19 Maximum Cut (Max Cut)
Given: a weighted graph (G, w),
Find: a maximum-weight spanning bipartite subgraph F of G.
This problem admits a polynomial-time 2-approximation algorithm, based on
the ideas for the unweighted case presented in Chapter 2 (Exercise 2.2.2). We leave
the details as an exercise (8.4.1).
A somewhat less simple approximation algorithm was obtained by Rosenkrantz
et al. (1974), who considered the special case of the Travelling Salesman Problem
in which the weights satisfy the triangle inequality:
w(xy) + w(yz) ≥ w(xz), for any three vertices x, y, z.

(8.3)

Problem 8.20 Metric Travelling Salesman Problem (Metric TSP)
Given: a weighted complete graph G whose weights satisfy inequality (8.3),
Find: a minimum-weight Hamilton cycle C of G.
Theorem 8.21 Metric TSP admits a polynomial-time 2-approximation algorithm.
Proof Applying the Jarnı̀k–Prim Algorithm (6.9), we ﬁrst ﬁnd a minimumweight spanning tree T of G. Suppose that C is a minimum-weight Hamilton
cycle of G. By deleting any edge of C, we obtain a Hamilton path P of G. Because
P is a spanning tree of G and T is a spanning tree of minimum weight,

192

8 Complexity of Algorithms

w(T ) ≤ w(P ) ≤ w(C)
We now duplicate each edge of T , thereby obtaining a connected even graph
H with V (H) = V (G) and w(H) = 2w(T ). Note that this graph H is not even
a subgraph of G, let alone a Hamilton cycle. The idea is to transform H into a
Hamilton cycle of G, and to do so without increasing its weight. More precisely, we
construct a sequence H0 , H1 , . . . , Hn−2 of connected even graphs, each with vertex
set V (G), such that H0 = H, Hn−2 is a Hamilton cycle of G, and w(Hi+1 ) ≤ w(Hi ),
0 ≤ i ≤ n − 3. We do so by reducing the number of edges, one at a time, as follows.
Let Ci be an Euler tour of Hi , where i < n−2. The graph Hi has 2(n−2)−i > n
edges, and thus has a vertex v of degree at least four. Let xe1 ve2 y be a segment of
the tour Ci ; it will follow by induction that x = y. We replace the edges e1 and e2
of Ci by a new edge e of weight w(xy) linking x and y, thereby bypassing v and
modifying Ci to an Euler tour Ci+1 of Hi+1 := (Hi \ {e1 , e2 }) + e. By the triangle
inequality (8.3),
w(Hi+1 ) = w(Hi ) − w(e1 ) − w(e2 ) + w(e) ≤ w(Hi )
The ﬁnal graph Hn−2 , being a connected even graph on n vertices and n edges, is
a Hamilton cycle of G. Furthermore,
w(Hn−2 ) ≤ w(H0 ) = 2w(T ) ≤ 2w(C)



The relevance of minimum-weight spanning trees to the Travelling Salesman
Problem was ﬁrst observed by Kruskal (1956). A 32 -approximation algorithm for
Metric TSP was found by Christoﬁdes (1976). This algorithm makes use of a
polynomial-time algorithm for weighted matchings (discussed in Chapter 16; see
Exercise 16.4.24). For other approaches to the Travelling Salesman Problem, see
Jünger et al. (1995).
The situation with respect to the general Travelling Salesman Problem, in
which the weights are not subject to the triangle inequality, is dramatically diﬀerent: for any integer t ≥ 2, there cannot exist a polynomial-time t-approximation
algorithm for solving TSP unless P = N P (Exercise 8.4.4). The book by Vazirani
(2001) treats the topic of approximation algorithms in general. For the state of
the art regarding computational aspects of TSP, we refer the reader to Applegate
et al. (2007).

Exercises
8.4.1 Describe a polynomial-time 2-approximation algorithm for Max Cut
(Problem 8.19).
8.4.2 Euclidean TSP
The Euclidean Travelling Salesman Problem is the special case of Metric TSP in
which the vertices of the graph are points in the plane, the edges are straight-line

8.5 Greedy Heuristics

193

segments linking these points, and the weight of an edge is its length. Show that,
in any such graph, the minimum-weight Hamilton cycles are crossing-free (that is,
no two of their edges cross).
8.4.3 Show that Metric TSP is N P-hard.
8.4.4
a) Let G be a simple graph with n ≥ 3, and let t be a positive integer. Consider
the weighted complete graph (K, w), where K := G ∪ G, in which w(e) := 1 if
e ∈ E(G) and w(e) := (t − 1)n + 2 if e ∈ E(G). Show that:
i) (K, w) has a Hamilton cycle of weight n if and only if G has a Hamilton
cycle,
ii) any Hamilton cycle of (K, w) of weight greater than n has weight at least
tn + 1.
b) Deduce that, unless P = N P, there cannot exist a polynomial-time tapproximation algorithm for solving TSP.
————— —————

8.5 Greedy Heuristics
A heuristic is a computational procedure, generally based on some simple rule,
which intuition tells one should usually yield a good approximate solution to the
problem at hand.
One particularly simple and natural class of heuristics is the class of greedy
heuristics. Informally, a greedy heuristic is a procedure which selects the best current option at each stage, without regard to future consequences. As can be imagined, such an approach rarely leads to an optimal solution in each instance. However, there are cases in which the greedy approach does indeed work. In such cases,
we call the procedure a greedy algorithm. The following is a prototypical example
of such an algorithm.
The Borůvka–Kruskal Algorithm
The Jarnı́k–Prim algorithm for the Minimum-Weight Spanning Tree Problem, described in Section 6.2, starts with the root and determines a nested sequence of
trees, terminating with a minimum-weight spanning tree. Another algorithm for
this problem, due to Borůvka (1926a,b) and, independently, Kruskal (1956), starts
with the empty spanning subgraph and ﬁnds a nested sequence of forests, terminating with an optimal tree. This sequence is constructed by adding edges, one at
a time, in such a way that the edge added at each stage is one of minimum weight,
subject to the condition that the resulting subgraph is still a forest.

194

8 Complexity of Algorithms

Algorithm 8.22 The Borůvka–Kruskal Algorithm
Input: a weighted connected graph G = (G, w)
Output: an optimal tree T = (V, F ) of G, and its weight w(F )
1: set F := ∅, w(F ) := 0 (F denotes the edge set of the current forest)
2: while there is an edge e ∈ E \ F such that F ∪ {e} is the edge set of a
forest do
3:
choose such an edge e of minimum weight
4:
replace F by F ∪ {e} and w(F ) by w(F ) + w(e)
5: end while
6: return ((V, F ), w(F ))
Because the graph G is assumed to be connected, the forest (V, F ) returned
by the Borůvka–Kruskal Algorithm is a spanning tree of G. We call it a Borůvka–
Kruskal tree. The construction of such a tree in the electric grid graph of Section 6.2
is illustrated in Figure 8.3. As before, the edges are numbered according to the order in which they are added. Observe that this tree is identical to the one returned
by the Jarnı́k–Prim Algorithm (even though its edges are selected in a diﬀerent
order). This is because all the edge weights in the electric grid graph happen to
be distinct (see Exercise 6.2.1).
B
1
T
6
4
3
5

Y

N

2
S

W
7

C
G
Fig. 8.3. An optimal tree returned by the Borůvka–Kruskal Algorithm

In order to implement the Borůvka–Kruskal Algorithm eﬃciently, one needs
to be able to check easily whether a candidate edge links vertices in diﬀerent
components of the forest. This can be achieved by colouring vertices in the same
component by the same colour and vertices in diﬀerent components by distinct
colours. It then suﬃces to check that the ends of the edge have diﬀerent colours.
Once the edge has been added to the forest, all the vertices in one of the two
merged components are recoloured with the colour of the other component. We
leave the details as an exercise (Exercise 8.5.1).

8.5 Greedy Heuristics

195

The following theorem shows that the Borůvka–Kruskal Algorithm runs correctly. Its proof resembles that of Theorem 6.10, and we leave it to the reader
(Exercise 8.5.2).
Theorem 8.23 Every Borůvka–Kruskal tree is an optimal tree.



The problem of ﬁnding a maximum-weight spanning tree of a connected graph
can be solved by the same approach; at each stage, instead of picking an edge of
minimum weight subject to the condition that the resulting subgraph remains a
forest, we pick one of maximum weight subject to the same condition (see Exercise 8.5.3). The origins of the Borůvka–Kruskal Algorithm are recounted in Nešetřil
et al. (2001) and Kruskal (1997).
Independence Systems
One can deﬁne a natural family of greedy heuristics which includes the Borůvka–
Kruskal Algorithm in the framework of set systems.
A set system (V, F ) is called an independence system on V if F is nonempty
and, for any member F of F , all subsets of F also belong to F . The members of
F are then referred to as independent sets and their maximal elements as bases.
(The independent sets of a matroid, deﬁned in Section 4.4, form an independence
system.)
Many independence systems can be deﬁned on graphs. For example, if G =
(V, E) is a connected graph, we may deﬁne an independence system on V by
taking as independent sets the cliques of G (including the empty set). Likewise,
we may deﬁne an independence system on E by taking the edge sets of the forests
of G as independent sets; the bases of this independence system are the edge sets
of spanning trees. (This latter independence system is the cycle matroid of the
graph, deﬁned in Section 4.4.)
Consider, now, an arbitrary independence system (V, F ). Suppose that, with
each element x of V , there is an associated nonnegative weight w(x), and that we
wish to ﬁnd an independent set of maximum weight, where the weight of a set
is deﬁned to be the sum of the weights of its elements. A naive approach to this
problem would be to proceed as follows.
Heuristic 8.24 Greedy Heuristic (for independence systems)
Input: an independence system (V, F ) with weight function w : V → R+
Output: a maximal independent set F of (V, F ), and its weight w(F )
1:
2:
3:
4:
5:
6:

set F := ∅, w(F ) := 0
while there is an element x ∈ V \ F such that F ∪ {x} is independent do
choose such an element x of minimum weight w(x)
replace F by F ∪ {x} and w(F ) by w(F ) + w(x)
end while
return (F, w(X))

196

8 Complexity of Algorithms

As we have seen, the Greedy Heuristic always returns an optimal solution
when the independence system consists of the edge sets of the forests of a graph,
no matter what the edge weights. (More generally, as Rado (1957) observed, the
Greedy Heuristic performs optimally whenever F is the family of independent
sets of a matroid, regardless of the weight function w.) By contrast, when the independent sets are the cliques of a graph, the Greedy Heuristic rarely returns an
optimal solution, even if all the weights are 1, because most graphs have maximal
cliques which are not maximum cliques. (If the Greedy Heuristic unfailingly
returns a maximum weight independent set, no matter what the weight function
of the independence system, then the system must, it turns out, be a matroid (see,
for example, Oxley (1992)).)
We remark that greedy heuristics are by no means limited to the framework
of independence systems. For example, if one is looking for a longest x-path in a
graph, an obvious greedy heuristic is to start with the trivial x-path consisting
of just the vertex x and iteratively extend the current x-path by any available
edge. This amounts to applying depth-ﬁrst search from x, stopping when one is
forced to backtrack. The path so found will certainly be a maximal x-path, but not
necessarily a longest x-path. Even so, this simple-minded greedy heuristic proves
to be eﬀective when combined with other ideas, as we show in Chapter 18.

Exercises
8.5.1 Reﬁne the Borůvka–Kruskal Algorithm in such a way that, at each stage,
vertices in the same component of the forest F are assigned the same colour and
vertices in diﬀerent components are assigned distinct colours.
8.5.2 Prove Theorem 8.23.
8.5.3 Show that the problem of ﬁnding a maximum-weight spanning tree of a
connected graph can be solved by choosing, at each stage, an edge of maximum
weight subject to the condition that the resulting subgraph is still a forest.
8.5.4 Give an example of a weighted independence system, all of whose bases have
the same number of elements, but for which the Greedy Heuristic (8.24) fails
to return an optimal solution.
8.5.5 Consider the following set of real vectors.
V := {(1, 0, 0, 1), (1, 1, 1, 1), (1, 0, 1, 2), (0, 1, 0, 1), (0, 2, −1, 1), (1, −1, 0, 0)}
Find a linearly independent subset of V whose total number of zeros is maximum by applying the Greedy Heuristic (8.24).
————— —————

8.6 Linear and Integer Programming

197

8.6 Linear and Integer Programming
A linear program (LP) is a problem of maximizing or minimizing a linear function
of real variables that are subject to linear equality or inequality constraints. By
means of simple substitutions, such as replacing an equation by two inequalities,
any LP may be transformed into one of the following form.
maximize cx subject to Ax ≤ b and x ≥ 0

(8.4)

row vector, and
where A = (aij ) is an m × n matrix, c = (c1 , c2 , . . . , cn ) a 1 × n
n
b = (b1 , b2 , . . . , bm ) an m × 1 column vector. The m inequalities j=1 aij xj ≤ bi ,
1 ≤ i ≤ m, and the n nonnegativity conditions xj ≥ 0, 1 ≤ j ≤ n, are known
as the constraints of the problem. The function cx to be maximized is called the
objective function.
A column vector x = (x1 , x2 , . . . , xn ) in Rn is a feasible solution to (8.4) if
it satisﬁes all m + n constraints, and a feasible solution at which the objective
function cx attains its maximum is an optimal solution. This maximum is the
optimal value of the LP.
Associated with every LP, there is another LP, called its dual. The dual of the
LP (8.4) is the LP:
minimize yb subject to yA ≥ c and y ≥ 0

(8.5)

With reference to this dual LP, the original LP (8.4) is called the primal LP.
Not every LP has a feasible solution. Moreover, even if it does have one, it need
not have an optimal solution: the objective function might be unbounded over the
set of feasible solutions, and thus not achieve a maximum (or minimum). Such an
LP is said to be unbounded.
The following proposition implies that if both the primal and the dual have
feasible solutions, neither is unbounded.
Proposition 8.25 Weak Duality Theorem
Let x be a feasible solution to (8.4) and y a feasible solution to its dual (8.5). Then
cx ≤ yb

(8.6)

Proof Because c ≤ yA and x ≥ 0, we have cx ≤ yAx. Likewise yAx ≤ yb.
Inequality (8.6) follows.

Corollary 8.26 Let x be a feasible solution to (8.4) and y a feasible solution to
its dual (8.5). Suppose that cx = yb. Then x is an optimal solution to (8.4) and
y is an optimal solution to (8.5).

The signiﬁcance of this corollary is that if equality holds in (8.6), the primal
solution x serves as a succinct certiﬁcate for the optimality of the dual solution
y, and vice versa. A remarkable and fundamental theorem due to von Neumann
(1928) guarantees that one can always certify optimality in this manner.

198

8 Complexity of Algorithms

Theorem 8.27 Duality Theorem
If an LP has an optimal solution, then its dual also has an optimal solution, and
the optimal values of these two LPs are equal.

A wide variety of graph-theoretical problems may be formulated as LPs, albeit
with additional integrality constraints, requiring that the variables take on only
integer values. In some cases, these additional constraints may be ignored without
aﬀecting the essential nature of the problem, because the LP under consideration
can be shown to always have optimal solutions that are integral. In such cases,
the duals generally have natural interpretations in terms of graphs, and interesting
results may be obtained by applying the Duality Theorem. Such results are referred
to as min–max theorems. As a simple example, let us consider the problem of
ﬁnding a maximum stable set in a graph.
It clearly suﬃces to consider graphs without isolated vertices. Let G be such
a graph. With any stable set S of G, we may associate its (0, 1)-valued incidence
vector x := (xv : v ∈ V ), where xv := 1 if v ∈ S, and xv := 0 otherwise. Because
no stable set can include more than one of the two ends of any edge, every such
vector x satisﬁes the constraint xu + xv ≤ 1, for each uv ∈ E. Thus, the problem
Max Stable Set is equivalent to the following LP (where M is the incidence
matrix of G).
maximize 1x subject to Mt x ≤ 1 and x ≥ 0

(8.7)

together with the requirement that x be integral. The dual of (8.7) is the following
LP, in which there is a variable ye for each edge e of G.
minimize y1 subject to yMt ≥ 1 and y ≥ 0

(8.8)

Consider an integer-valued feasible solution y to this dual LP. The support of y
is a set of edges of G that together meet every vertex of G. Such a set of edges is
called an edge covering of G. The number of edges in a minimum edge covering of
a graph G without isolated vertices is denoted by β  (G).
Conversely, the incidence vector of any edge covering of G is a feasible solution
to (8.8). Thus the optimal value of (8.8) is a lower bound on β  (G). Likewise, the
optimal value of (8.7) is an upper bound on α(G). By the Weak Duality Theorem,
it follows that, for any graph G without isolated vertices, α(G) ≤ β  (G). In general,
these two quantities are not equal (consider, for example, K3 ). They are, however,
always equal for bipartite graphs (see inset).
A linear program in which the variables are constrained to take on only integer
values is called an integer linear program (ILP). Any ILP may be transformed to
one of the following form.
maximize cx subject to Ax ≤ b, x ≥ 0, and x ∈ Z

(8.9)

As already mentioned, Max Stable Set can be formulated as an ILP. Because
Max Stable Set is N P-hard, so is ILP. On the other hand, there do exist
polynomial-time algorithms for solving linear programs, so LP is in P.

8.6 Linear and Integer Programming

199

Proof Technique: Total Unimodularity
Recall that a matrix A is totally unimodular if the determinant of each of its
square submatrices is equal to 0, +1, or −1. The following theorem provides
a suﬃcient condition for an LP to have an integer-valued optimal solution.
Theorem 8.28 Suppose that A is a totally unimodular matrix and that b
is an integer vector. If (8.4) has an optimal solution, then it has an integer
optimal solution.
Proof The set of points in Rn at which any single constraint holds with
equality is a hyperplane in Rn . Thus each constraint is satisﬁed by the points
of a closed half-space of Rn , and the set of feasible solutions is the intersection
of all these half-spaces, a convex polyhedron P .
Because the objective function is linear, its level sets are hyperplanes. Thus, if
the maximum value of cx over P is z ∗ , the hyperplane cx = z ∗ is a supporting
hyperplane of P . Hence cx = z ∗ contains an extreme point (a corner) of P . It
follows that the objective function attains its maximum at one of the extreme
points of P .
Every extreme point of P is at the intersection of n or more hyperplanes
determined by the constraints. It is thus a solution to a subsystem of Ax = b.
Using the hypotheses of the theorem and applying Cramér’s rule, we now
conclude that each extreme point of P is an integer vector, and hence that
(8.4) has an integer optimal solution.

Because the incidence matrix of a bipartite graph is totally unimodular (Exercise 4.2.4), as a consequence of the above theorem, we have:
Theorem 8.29 Let G be a bipartite graph with incidence matrix M. Then
the LPs
maximize 1x subject to Mt x ≤ 1 and x ≥ 0
minimize y1 subject to yMt ≥ 1 and y ≥ 0
both have (0, 1)-valued optimal solutions.

(8.10)
(8.11)


This theorem, in conjunction with the Duality Theorem, now implies the
following min–max equality, due independently to D. König and R. Rado (see
Schrijver (2003)).
Theorem 8.30 The König–Rado Theorem
In any bipartite graph without isolated vertices, the number of vertices in a
maximum stable set is equal to the number of edges in a minimum edge covering.


200

8 Complexity of Algorithms

Total Unimodularity (continued)
The König–Rado Theorem (8.30) implies that the problem of deciding whether
a bipartite graph has a stable set of cardinality k is in co-N P; when the answer
is ‘no’, an edge cover of size less than k provides a succinct certiﬁcate of this
fact. In fact, as shown in Chapter 16, there is a polynomial algorithm for
ﬁnding a maximum stable set in any bipartite graph.
A second application of this proof technique is given below, and another is
presented in Section 19.3.
One approach to the problem of determining the value of a graph-theoretic
parameter such as α is to express the problem as an ILP of the form (8.9) and then
solve its LP relaxation, that is, the LP (8.4) obtained by dropping the integrality
constraint x ∈ Z. If the optimal solution found happens to be integral, as in
Theorem 8.29, it will also be an optimal solution to the ILP, and thus determine
the exact value of the parameter. In any event, the value returned by the LP will
be an upper bound on the value of the parameter. This upper bound is referred
to as the fractional version of the parameter. For example, the LP (8.10) returns
the fractional stability number, denoted α∗ .
The fractional stability number of a graph may be computed in polynomial
time. However, in general, α can be very much smaller than α∗ . For example,
α(Kn ) = 1, whereas α∗ (Kn ) = n/2 for n ≥ 2. Taking into cognisance the fact
that no stable set of a graph can include more than one vertex of any clique of
the graph, one may obtain a LP associated with Max Stable Set with tighter
constraints than (8.7) (see Exercise 8.6.3).
Matchings and Coverings in Bipartite Graphs
We now describe a second application of total unimodularity, to matchings in
bipartite graphs. A matching in a graph is a set of pairwise nonadjacent links.
With any matching M of a graph G, we may associate its (0, 1)-valued incidence
vector. Since no matching has more than
 one edge incident with any vertex, every
such vector x satisﬁes the constraint {xe : e ∈ ∂(v)} ≤ 1, for all v ∈ V . Thus
the problem of ﬁnding a largest matching in a graph is equivalent to the following
ILP.
maximize 1x subject to Mx ≤ 1 and x ≥ 0
(8.12)
(where M is the incidence matrix of G), together with the requirement that x be
integral. The dual of (8.12) is the following LP.
minimize y1 subject to yM ≥ 1 and y ≥ 0

(8.13)

Because the incidence matrix of a bipartite graph is totally unimodular (Exercise 4.2.4), as a consequence of the above theorem, we now have:

8.6 Linear and Integer Programming

201

Theorem 8.31 When G is bipartite, (8.12) and (8.13) have (0, 1)-valued optimal
solutions.

If x is a (0, 1)-valued feasible solution to (8.12), then no two edges of the set
M := {e ∈ E : xe = 1} have an end in common; that is, M is a matching of G.
Analogously, if y is a (0, 1)-valued feasible solution to (8.13), then each edge of
G has at least one end in the set K := {v ∈ V : yv = 1}; such a set is called a
covering of G. These two observations, together with the Duality Theorem, now
imply the following fundamental min–max theorem, due independently to König
(1931) and Egerváry (1931).
Theorem 8.32 The König–Egerváry Theorem
In any bipartite graph, the number of edges in a maximum matching is equal to
the number of vertices in a minimum covering.

Just as the König–Rado Theorem (8.30) shows that the problem of deciding
whether a bipartite graph G[X, Y ] has a stable set of k vertices is in co-N P,
the König–Egerváry Theorem shows that the problem of deciding whether such a
graph has a matching of k edges is in co-N P. When the answer is ‘no’, a covering
of cardinality less than k provides a succinct certiﬁcate of this fact. The König–
Egerváry Theorem can also be derived from the arc version of Menger’s Theorem
(7.16) (see Exercise 8.6.7). The maximum number of edges in a matching of a
graph G is called the matching number of G and denoted α (G).
If G is nonbipartite, (8.12) may have optimal solutions that are not integral.
For example, when G is a triangle, it can be seen that (1/2, 1/2, 1/2) is an optimal
solution. However, Edmonds (1965b) showed that one may introduce additional
constraints that are satisﬁed by all the incidence vectors of matchings in a graph so
that the resulting linear program has integer optimal solutions (see Exercise 8.6.8).
This was the basis for his solution to the optimal matching problem. Matchings
are discussed in detail in Chapter 16.
Using the fact that the incidence matrix of a directed graph is totally unimodular (Exercise 1.5.7a), Menger’s Theorem (7.16) may be derived from the Duality
Theorem. Further examples of min–max theorems are presented in Chapters 16
and 19. For additional information on these and other applications of linear programming, see Chvátal (1983), Lovász and Plummer (1986), and Schrijver (2003).

Exercises
8.6.1 Complementary Slackness
Let x and y be feasible solutions to the LP (8.4) and its dual (8.5), respectively.
Show that these solutions are optimal if and only if:
n
1 ≤ i ≤ m, and
j=1 aij xj < bi ⇒ yi = 0,
m
i=1 aij yi > cj ⇒ xj = 0, 1 ≤ j ≤ n

202

8 Complexity of Algorithms

(The above conditions are known as the complementary slackness conditions for
optimality. They play an important role in the solution of optimization problems
involving weighted graphs.)
8.6.2 Clique Covering
A clique covering of a graph is a set of cliques whose union is the entire vertex set
of the graph.
a) Show that the stability number of a graph is bounded above by the minimum
number of cliques in a clique covering.
b) Give an example of a graph in which these two quantities are unequal.
8.6.3 Let K denote the set of all cliques of a graph G and let K denote the incidence
matrix of the hypergraph (V, K). Consider the LP:
maximize 1x subject to Kt x ≤ 1 and x ≥ 0

(8.14)

minimize y1 subject to yKt ≥ 1 and y ≥ 0

(8.15)

and its dual:
Show that:
a) an integer-valued vector x in RV is a feasible solution to (8.14) if and only if
it is the incidence vector of a stable set of G,
b) a (0, 1)-valued vector y in RK is a feasible solution to (8.15) if and only if it is
the incidence vector of a clique covering.
8.6.4 Show that the set of feasible solutions to (8.14) is a subset of the set of
feasible solutions to (8.7), with equality when G is triangle-free.
8.6.5 Let α∗∗ (G) denote the optimal value of (8.14).
a) Show that, for any graph G, α ≤ α∗∗ ≤ α∗ .
b) Give examples of graphs for which these inequalities are strict.
8.6.6 Let G be a simple graph with n ≥ 3, and let x := (xe : e ∈ E) ∈ RE .
Consider the following system of linear inequalities.

xe ≥ 2 if ∅ ⊂ X ⊂ V


e∈∂(X)

xe = 2 for all v ∈ V

e∈∂(v)

xe ≤ 1 for all e ∈ E
xe ≥ 0 for all e ∈ E
a) Show that the integer-valued feasible solutions to this system are precisely the
incidence vectors of the Hamilton cycles of G.

8.6 Linear and Integer Programming

203

b) Let c ∈ RE be a weight function on G. Deduce from (a) that an optimal
solution to the TSP for this weighted graph is provided by an optimal solution
to the ILP that consists of maximizing the objective function cx subject to
the above constraints, together with the integrality constraint x ∈ Z.
(Grötschel et al. (1988) have given a polynomial-time algorithm for solving the
LP relaxation of this ILP.)
8.6.7
a) Transform the problem of ﬁnding a maximum matching in a bipartite graph
G[X, Y ] into the problem of ﬁnding a maximum collection of arc-disjoint directed (x, y)-paths in a related digraph D(x, y).
b) Deduce the König–Egerváry Theorem from Menger’s Theorem (7.16).
8.6.8 Show that every integer feasible solution x to the LP (8.12) satisﬁes the
inequality

1
xe ≤ (|X| − 1)
2
e∈E(X)

for any odd subset X of V of cardinality three or more.
(Edmonds (1965b) showed that, by adding these inequalities to the set of constraints in (8.12), one obtains an LP every optimal solution of which is (0, 1)valued.)
8.6.9 Farkas’ Lemma
The following two LPs are duals of each other.
maximize

0x

subject to

Ax = 0 and x ≥ b

minimize − zb subject to yA − z = 0 and z ≥ 0
Farkas’ Lemma (see Section 20.1) says that exactly one of the two linear systems:
Ax = 0, x ≥ b and yA ≥ 0, yAb > 0
has a solution. Deduce Farkas’ Lemma from the Duality Theorem (8.27).
8.6.10 The following two LPs are duals of each other.
minimize y0 subject to yA ≥ b
maximize bx subject to Ax = 0 and x ≥ 0
A variant of Farkas’ Lemma says that exactly one of the two linear systems:
yA ≥ b

and Ax = 0, x ≥ 0, bx > 0

has a solution. Deduce this variant of Farkas’ Lemma from the Duality Theorem
(8.27).
8.6.11 Prove the inequality α(G) ≤ β  (G) directly, without appealing to the Weak
Duality Theorem (8.25).
————— —————

204

8 Complexity of Algorithms

8.7 Related Reading
Isomorphism-Completeness
As mentioned earlier, the complexity status of Graph Isomorphism is unknown.
There is strong theoretical evidence to support the belief that the problem is not
N P-complete (see, for example, Babai (1995)), and its rather unique status has led
to the notion of isomorphism-completeness: a problem is said to be isomorphismcomplete if it is polynomially equivalent to Graph Isomorphism. The Legitimate
Deck Problem, mentioned in Section 2.8, is one such problem (see Harary et al.
(1982) and Mansﬁeld (1982)). The problem of ﬁnding the orbits of a graph is
‘isomorphism-hard’. For these and other examples, we refer the reader to Babai
(1995).

9
Connectivity

Contents
9.1 Vertex Connectivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
Connectivity and Local Connectivity . . . . . . . . . . . . . . . 206
Vertex Cuts and Menger’s Theorem . . . . . . . . . . . . . . . . . 207
9.2 The Fan Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
9.3 Edge Connectivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
Essential Edge Connectivity . . . . . . . . . . . . . . . . . . . . . . . . 217
Connectivity in Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
9.4 Three-Connected Graphs . . . . . . . . . . . . . . . . . . . . . . . . . 219
Decomposition Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
Contractions of Three-Connected Graphs . . . . . . . . . . 222
Expansions of Three-Connected Graphs . . . . . . . . . . . . . 223
9.5 Submodularity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
Edge Connectivity of Vertex-Transitive Graphs . . . . 227
Nash-Williams’ Orientation Theorem . . . . . . . . . . . . . . . . 228
9.6 Gomory–Hu Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
Determining Edge Connectivity . . . . . . . . . . . . . . . . . . . . . 232
9.7 Chordal Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
Clique Cuts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
Simplicial Vertices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
Tree Representations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
9.8 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
Lexicographic Breadth-First Search . . . . . . . . . . . . . . . . 238
Tree-Decompositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239

9.1 Vertex Connectivity
In Section 3.1, we discussed the concept of connection in graphs. Consider, now,
the four connected graphs in Figure 9.1.

206

9 Connectivity

G1

G2

G3

G4

Fig. 9.1. Four connected graphs

G1 is a tree, a minimal connected graph; deleting any edge disconnects it. G2
cannot be disconnected by the deletion of a single edge, but can be disconnected
by the deletion of one vertex, its cut vertex. There are no cut edges or cut vertices
in G3 , but even so G3 is clearly not as well connected as G4 , the complete graph
on ﬁve vertices. Thus, intuitively, each successive graph is better connected than
the previous one. We now introduce two parameters of a graph, its connectivity
and edge connectivity, which measure the extent to which it is connected. We ﬁrst
deﬁne these parameters in terms of numbers of disjoint paths connecting pairs
of vertices, and then relate those deﬁnitions to sizes of vertex and edge cuts, as
suggested by the above examples.
Connectivity and Local Connectivity
We begin by discussing the notion of vertex connectivity, commonly referred to
simply as connectivity. Recall that xy-paths P and Q in G are internally disjoint
if they have no internal vertices in common, that is, if V (P ) ∩ V (Q) = {x, y}.
The local connectivity between distinct vertices x and y is the maximum number
of pairwise internally disjoint xy-paths, denoted p(x, y); the local connectivity is
undeﬁned when x = y. The matrix in Figure 9.2b displays the local connectivities
between all pairs of vertices of the graph shown in Figure 9.2a. (The function
shown in Figure 9.2c will be deﬁned shortly.)
A nontrivial graph G is k-connected if p(u, v) ≥ k for any two distinct vertices
u and v. By convention, a trivial graph is 0-connected and 1-connected, but is not
k-connected for any k > 1. The connectivity κ(G) of G is the maximum value of k
for which G is k-connected. Thus, for a nontrivial graph G,
κ(G) := min{p(u, v) : u, v ∈ V, u =
 v}

(9.1)

A graph is 1-connected if and only if it is connected; equivalently, a graph
has connectivity zero if and only if it is disconnected. Nonseparable graphs on at
least three vertices are 2-connected; conversely, every 2-connected loopless graph
is nonseparable. For the four graphs shown in Figure 9.1, κ(G1 ) = 1, κ(G2 ) = 1,
κ(G3 ) = 3, and κ(G4 ) = 4. Thus, of these four graphs, the only graph that is
4-connected is G4 . Graphs G3 and G4 are 2-connected and 3-connected, whereas

9.1 Vertex Connectivity

207

u

y

x

z

u
x
y
z
v

u
∗
3
2
4
3

x
3
∗
2
2
3

y
2
2
∗
2
3

z
4
2
2
∗
3

v
3
3
3
3
∗

u
x
y
z
v

u
∗
∗
∗
∗
3

x
∗
∗
2
2
∗

y
∗
2
∗
2
∗

z
∗
2
2
∗
∗

v
3
∗
∗
∗
∗

v
(a)

(b)

(c)

Fig. 9.2. (a) A graph, (b) its local connectivity function, and (c) its local cut function

G1 and G2 are not. And, because all four graphs are connected, they are all 1connected. The graph in Figure 9.2a is 1-connected and 2-connected, but is not
3-connected. Thus, the connectivity of this graph is two.
Vertex Cuts and Menger’s Theorem
We now rephrase the deﬁnition of connectivity in terms of ‘vertex cuts’. This is
not totally straightforward because complete graphs (and, more generally, graphs
in which any two vertices are adjacent) have no such cuts. For this reason, we ﬁrst
determine the connectivities of these graphs.
Distinct vertices x and y of Kn are connected by one path of length one and
n − 2 internally disjoint paths of length two. It follows that p(x, y) = n − 1 and
that κ(Kn ) = n − 1 for n ≥ 2. More generally, if the underlying simple graph of
a graph G is complete, and x and y are joined by µ(x, y) links, there are µ(x, y)
paths of length one, and n − 2 internally disjoint paths of length two connecting x
and y; thus p(x, y) = n − 2 + µ(x, y). Hence the connectivity of a nontrivial graph
G in which any two vertices are adjacent is n − 2 + µ, where µ is the minimum
edge multiplicity in the graph. On the other hand, if x and y are nonadjacent,
there are at most n − 2 internally disjoint paths connecting x and y. Thus, if the
underlying simple graph of a graph G is not complete, its connectivity κ cannot
exceed n − 2. For such a graph, the connectivity is equal to the minimum number
of vertices whose deletion results in a disconnected graph, as we now explain.
Let x and y be distinct nonadjacent vertices of G. An xy-vertex-cut is a subset
S of V \ {x, y} such that x and y belong to diﬀerent components of G − S. We
also say that such a subset S separates x and y. The minimum size of a vertex cut
separating x and y is denoted by c(x, y). This function, the local cut function of
G, is not deﬁned if either x = y or x and y are adjacent. The matrix displayed
in Figure 9.2c gives the values of the local cut function of the graph shown in
Figure 9.2a.
A vertex cut separating some pair of nonadjacent vertices of G is a vertex cut
of G, and one with k elements is a k-vertex cut. A complete graph has no vertex

208

9 Connectivity

cuts; moreover, the only graphs which do not have vertex cuts are those whose
underlying simple graphs are complete. We now show that, if G has at least one
pair of nonadjacent vertices, the size of a minimum vertex cut of G is equal to the
connectivity of G. The main ingredient required is a version of Menger’s Theorem
which relates the two functions p and c.
Finding the maximum number of internally disjoint xy-paths in a graph
G := G(x, y) amounts to ﬁnding the maximum number of internally disjoint directed (x, y)-paths in the associated digraph D(x, y) := D(G). In turn, as noted
in Section 8.3, the latter problem may be reduced to one of ﬁnding the maximum
number of arc-disjoint directed (x, y)-paths in a related digraph D (x, y) (of order
2n − 2), and this number can be determined by the Max-Flow Min-Cut Algorithm
(7.9). Thus the Max-Flow Min-Cut Algorithm may be adapted to ﬁnd, in polynomial time, the maximum number of internally disjoint xy-paths in G. The same
algorithm will also return an xy-vertex-cut whose cardinality is equal to the maximum number of internally disjoint xy-paths, implying the validity of the following
fundamental theorem of Menger (1927). We include here a simple inductive proof
of this theorem due to Göring (2000), as an alternative to the above-mentioned
constructive proof.
For this purpose, we need the operation of shrinking a set of vertices in a graph.
Let G be a graph and let X be a proper subset of V . To shrink X is to delete
all edges between vertices of X and then identify the vertices of X into a single
vertex. We denote the resulting graph by G / X.
Theorem 9.1 Menger’s Theorem (Undirected Vertex Version)
In any graph G(x, y), where x and y are nonadjacent, the maximum number of
pairwise internally disjoint xy-paths is equal to the minimum number of vertices
in an xy-vertex-cut, that is,
p(x, y) = c(x, y)
Proof By induction on e(G). For convenience, let us set k := cG (x, y). Note
that pG (x, y) ≤ k, because any family P of internally disjoint xy-paths meets
any xy-vertex-cut in at least |P| distinct vertices. Thus it suﬃces to show that
pG (x, y) ≥ k. We may assume that there is an edge e = uv incident neither with x
nor with y; otherwise, every xy-path is of length two, and the conclusion follows
easily.
Set H := G \ e. Because H is a subgraph of G, pG (x, y) ≥ pH (x, y). Also, by
induction, pH (x, y) = cH (x, y). Furthermore, cG (x, y) ≤ cH (x, y) + 1 because any
xy-vertex-cut in H, together with either end of e, is an xy-vertex-cut in G. We
therefore have:
pG (x, y) ≥ pH (x, y) = cH (x, y) ≥ cG (x, y) − 1 = k − 1
We may assume that equality holds throughout; if not, pG (x, y) ≥ k and there
is nothing more to prove. Thus, in particular, cH (x, y) = k − 1. Let S :=
{v1 , . . . , vk−1 } be a minimum xy-vertex-cut in H, let X be the set of vertices
reachable from x in H − S, and let Y be the set of vertices reachable from y in

9.1 Vertex Connectivity

209

e
u

v

x

y

X

Y

S

u

v

x

y

X

x

S

y

Y

S

u

v

x

y

X

S

Y

Fig. 9.3. Proof of Menger’s Theorem (9.1)

H − S. Because |S| = k − 1, the set S is not an xy-vertex-cut of G, so there is an
xy-path in G − S. This path necessarily includes the edge e. We may thus assume,
without loss of generality, that u ∈ X and v ∈ Y .
Now consider the graph G / Y obtained from G by shrinking Y to a single vertex
y. Every xy-vertex-cut T in G / Y is necessarily an xy-vertex-cut in G, because if
P were an xy-path in G avoiding T , the subgraph P / Y of G / Y would contain
an xy-path in G / Y avoiding T , too. Therefore cG / Y (x, y) ≥ k. On the other
hand, cG / Y (x, y) ≤ k because S ∪ {u} is an xy-vertex-cut of G / Y . It follows that
S ∪ {u} is a minimum xy-vertex-cut of G / Y . By induction, there are k internally
disjoint xy-paths P1 , . . . , Pk in G / Y , and each vertex of S ∪ {u} lies on one of
them. Without loss of generality, we may assume that vi ∈ V (Pi ), 1 ≤ i ≤ k − 1,
and u ∈ V (Pk ). Likewise, there are k internally disjoint xy-paths Q1 , . . . , Qk in
the graph G / X obtained by shrinking X to x with vi ∈ V (Qi ), 1 ≤ i ≤ k − 1,
and v ∈ Qk . It follows that there are k internally disjoint xy-paths in G, namely
xPi vi Qi y, 1 ≤ i ≤ k − 1, and xPk uvQk y (see Figure 9.3, where the vertices not in
X ∪ S ∪ Y are omitted, as they play no role in the proof.).

As a consequence of Theorem 9.1 we have:
min{p(u, v) : u, v ∈ V, u = v, uv ∈ E} = min{c(u, v) : u, v ∈ V, u = v, uv ∈ E}
(9.2)

210

9 Connectivity

Suppose that G is a graph that has at least one pair of nonadjacent vertices.
In this case, the right-hand side of equation (9.2) is the size of a minimum vertex
cut of G. But we cannot immediately conclude from (9.2) that the connectivity
of G is equal to the size of a minimum vertex cut of G because, according to
our deﬁnition, κ is the minimum value of p(u, v) taken over all pairs of distinct
vertices u, v (whether adjacent or not). However, the following theorem, due to
Whitney (1932a), shows that the minimum local connectivity taken over all pairs
of distinct vertices, is indeed the same as the minimum taken over all pairs of
distinct nonadjacent vertices.
Theorem 9.2 If G has at least one pair of nonadjacent vertices,
κ(G) = min{p(u, v) : u, v ∈ V, u = v, uv ∈ E}

(9.3)

Proof If G has an edge e which is either a loop or one of a set of parallel edges,
we can establish the theorem by deleting e and applying induction. So we may
assume that G is simple.
By (9.1), κ(G) = min{p(u, v) : u, v ∈ V, u = v}. Let this minimum be attained
for the pair x, y, so that κ(G) = p(x, y). If x and y are nonadjacent, there is nothing
to prove. So suppose that x and y are adjacent.
Consider the graph H := G \ xy, obtained by deleting the edge xy from G.
Clearly, pG (x, y) = pH (x, y) + 1. Furthermore, by Menger’s Theorem, pH (x, y) =
cH (x, y). Let X be a minimum vertex cut in H separating x and y, so that
pH (x, y) = cH (x, y) = |X|, and pG (x, y) = |X| + 1. If V \ X = {x, y}, then
κ(G) = pG (x, y) = |X| + 1 = (n − 2) + 1 = n − 1
But this implies that G is complete, which is contrary to the hypothesis. So we
may assume that V \ X has at least three vertices, x, y, z. We may also assume,
interchanging the roles of x and y if necessary, that x and z belong to diﬀerent
components of H − X. Then x and z are nonadjacent in G and X ∪ {y} is a vertex
cut of G separating x and z. Therefore,
c(x, z) ≤ |X ∪ {y}| = p(x, y)
On the other hand, by Menger’s Theorem, p(x, z) = c(x, z). Hence p(x, z) ≤
p(x, y). By the choice of {x, y}, we have p(x, z) = p(x, y) = κ(G). Because x and
z are nonadjacent,
κ(G) = p(x, z) = min{p(u, v) : u, v ∈ V, u = v, uv ∈ E}



It follows from Theorems 9.1 and 9.2 that the connectivity of a graph G which
has at least one pair of nonadjacent vertices is equal to the size of a minimum
vertex cut of G. In symbols,
κ(G) = min{c(u, v) : u, v ∈ V, u = v, uv ∈ E}

(9.4)

9.1 Vertex Connectivity

211

The vertex cuts of a graph are the same as those of its underlying simple graph,
thus (9.4) implies that the connectivity of a graph which has at least one pair of
nonadjacent vertices is the same as the connectivity of its underlying simple graph.
As noted in Section 8.2, for every nonadjacent pair x, y of vertices of G, the
value of c(x, y) may be computed by running the Max-Flow Min-Cut Algorithm
(7.9) on an auxiliary digraph of order 2n − 2 with unit capacities. It follows that
the connectivity of any graph may be computed in polynomial time.

Exercises
9.1.1 Consider the vertices x = (0, 0, . . . , 0) and y = (1, 1, . . . , 1) of the n-cube Qn .
Describe a maximum collection of edge-disjoint xy-paths in Qn and a minimum
vertex cut of Qn separating x and y.
9.1.2 Let G and H be simple graphs. Show that κ(G ∨ H) = min{v(G) +
κ(H), v(H) + κ(G)}.
9.1.3
a) Show that if G is simple and δ ≥ n − 2, then κ = δ.
b) For each n ≥ 4, ﬁnd a simple graph G with δ = n − 3 and κ < δ.
9.1.4 Show that if G is simple, with n ≥ k + 1 and δ ≥ (n + k − 2)/2, then G is
k-connected.
9.1.5 An edge e of a 2-connected graph G is called contractible if G / e is 2connected also. (The analogous concept, for nonseparable graphs, was deﬁned in
Exercise 5.3.2.) Show that every 2-connected graph on three or more vertices has
a contractible edge.
9.1.6 An edge of a graph G is deletable (with respect to connectivity) if κ(G \ e) =
κ(G). Show that each edge of a 2-connected graph on at least four vertices is either
deletable or contractible.
9.1.7 A k-connected graph G is minimally k-connected if the graph G \ e is not
k-connected for any edge e (that is, if no edge is deletable).
a) Let G be a minimally 2-connected graph. Show that:
i) δ = 2,
ii) if n ≥ 4, then m ≤ 2n − 4.
b) For all n ≥ 4, ﬁnd a minimally 2-connected graph with n vertices and 2n − 4
edges.
9.1.8 Let G be a connected graph which is not complete. Show that G is kconnected if and only if any two vertices at distance two are connected by k
internally disjoint paths.

212

9 Connectivity

9.1.9 Consider the following statement, which resembles Menger’s Theorem. Let
G(x, y) be a graph of diameter d, where x and y are nonadjacent vertices. Then
the maximum number of internally disjoint xy-paths of length d or less is equal to
the minimum number of vertices whose deletion destroys all xy-paths of length d
or less.
a) Prove this statement for d = 2.
b) Verify that the graph shown in Figure 9.4 is a counterexample to the statement
in general.
(J.A. Bondy and P. Hell)

Fig. 9.4. A counterexample to Menger’s Theorem for short paths (Exercise 9.1.9)

————— —————
9.1.10
a) Show that if G is a k-connected graph and e is any edge of G, then G / e is
(k − 1)-connected.
b) For each k ≥ 4, ﬁnd a k-connected graph G = Kk+1 such that κ(G / e) = k −1,
for every edge e of G.
9.1.11
a) Let D := D(X, Y ) be a directed graph, where X and Y are disjoint subsets of
V . Obtain an undirected graph G from D as follows.
 For each vertex v of D, replace v by two adjacent vertices, v − and v + .
 For each arc (u, v) of D, join u+ and v − by an edge.
 Delete the set of vertices {x− : x ∈ X} ∪ {y + : y ∈ Y }.
Observe that G is a bipartite graph with bipartition
 −

{v : v ∈ V (D)} \ {x− : x ∈ X}, {v + : v ∈ V (D)} \ {y + : y ∈ Y }
Show that:
i) α (G) = |V (D)| − |X ∪ Y | + pD (X, Y ), where pD (X, Y ) denotes the maximum number of disjoint directed (X, Y )-paths in D,
ii) β(G) = |V (D)|−|X ∪Y |+cD (X, Y ), where cD (X, Y ) denotes the minimum
number of vertices whose deletion destroys all directed (X, Y )-paths in D.
(A. Schrijver)

9.2 The Fan Lemma

213

b) Derive Menger’s Theorem (9.8) from the König–Egerváry Theorem (8.32).
9.1.12 Let xP y be a path in a graph G. Two vines on P (deﬁned in Exercise 5.3.12)
are disjoint if:
 their constituent paths are internally disjoint,
 x is the only common initial vertex of two paths in these vines,
 y is the only common terminal vertex of two paths in these vines.
If G is k-connected, where k ≥ 2, show that there are k − 1 pairwise disjoint vines
on P .
(S.C. Locke)
9.1.13 Let P be a path in a 3-connected cubic graph G.
a) Consider two disjoint vines on P . Denote by F the union of P and the constituent paths of these two vines. Show that F admits a double cover by three
cycles.
b) Deduce that if P is of length l, then G has a cycle of length greater than 2l/3.
(Compare Exercise 5.3.12.)
(J.A. Bondy and S.C. Locke)
9.1.14 Let G be a 3-connected graph, and let e and f be two edges of G. Show
that:
a) the subspace generated by the cycles through e and f has dimension dim (C)−1,
(C. Thomassen)
b) G has an odd cycle through e and f unless G \ {e, f } is bipartite.
(W.D. McCuaig and M. Rosenfeld)

9.2 The Fan Lemma
One can deduce many properties of a graph merely from a knowledge of its connectivity. In this context, Menger’s Theorem, or a derivative of it, invariably plays
a principal role. We describe here a very useful consequence of Menger’s Theorem
known as the Fan Lemma, and apply it to deduce a theorem of Dirac (1952b)
about cycles in k-connected graphs.
The following lemma establishes a simple but important property of k-connected
graphs.
Lemma 9.3 Let G be a k-connected graph and let H be a graph obtained from G
by adding a new vertex y and joining it to at least k vertices of G. Then H is also
k-connected.
Proof The conclusion clearly holds if any two vertices of H are adjacent, because
v(H) ≥ k + 1. Let S be a subset of V (H) with |S| = k − 1. To complete the proof,
it suﬃces to show that H − S is connected.
Suppose ﬁrst that y ∈ S. Then H − S = G − (S \ {y}). By hypothesis, G is
k-connected and |S \ {y}| = k − 2. We deduce that H − S is connected.

214

9 Connectivity

Now suppose that y ∈ S. Since, by hypothesis, y has at least k neighbours
in V (G) and |S| = k − 1, there is a neighbour z of y which does not belong to
S. Because G is k-connected, G − S is connected. Furthermore, z is a vertex of
G − S, and hence yz is an edge of H − S. It follows that (G − S) + yz is a spanning
connected subgraph of H − S. Hence H − S is connected.

The following useful property of k-connected graphs can be deduced from
Lemma 9.3.
Proposition 9.4 Let G be a k-connected graph, and let X and Y be subsets of
V of cardinality at least k. Then there exists in G a family of k pairwise disjoint
(X, Y )-paths.
Proof Obtain a new graph H from G by adding vertices x and y and joining x to each vertex of X and y to each vertex of Y . By Lemma 9.3, H is kconnected. Therefore, by Menger’s Theorem, there exist k internally disjoint xypaths in H. Deleting x and y from each of these paths, we obtain k disjoint paths
Q1 , Q2 , . . . , Qk in G, each of which has its initial vertex in X and its terminal
vertex in Y . Every path Qi necessarily contains a segment Pi with initial vertex in
X, terminal vertex in Y , and no internal vertex in X ∪ Y , that is, an (X, Y )-path.

The paths P1 , P2 , . . . , Pk are pairwise disjoint (X, Y )-paths.
A family of k internally disjoint (x, Y )-paths whose terminal vertices are distinct is referred to as a k-fan from x to Y . The following assertion is another
very useful consequence of Menger’s Theorem. Its proof is similar to the proof of
Proposition 9.4 (Exercise 9.2.1).
Proposition 9.5 The Fan Lemma
Let G be a k-connected graph, let x be a vertex of G, and let Y ⊆ V \ {x} be a set
of at least k vertices of G. Then there exists a k-fan in G from x to Y .

We now give the promised application of the Fan Lemma. By Theorem 5.1, in a
2-connected graph any two vertices are connected by two internally disjoint paths;
equivalently, any two vertices in a 2-connected graph lie on a common cycle. Dirac
(1952b) generalized this latter statement to k-connected graphs.
Theorem 9.6 Let S be a set of k vertices in a k-connected graph G, where k ≥ 2.
Then there is a cycle in G which includes all the vertices of S.
Proof By induction on k. We have already observed that the assertion holds
for k = 2, so assume that k ≥ 3. Let x ∈ S, and set T := S \ x. Because G
is k-connected, it is (k − 1)-connected. Therefore, by the induction hypothesis,
there is a cycle C in G which includes T . Set Y := V (C). If x ∈ Y , then C
includes all the vertices of S. Thus we may assume that x ∈
/ Y . If |Y | ≥ k, the
Fan Lemma (Proposition 9.5) ensures the existence of a k-fan in G from x to Y .
Because |T | = k − 1, the set T divides C into k − 1 edge-disjoint segments. By
the Pigeonhole Principle, some two paths of the fan, P and Q, end in the same

9.2 The Fan Lemma

C

215

C

x

x
Q

Q

P

P

Fig. 9.5. Proof of Theorem 9.6

segment. The subgraph C ∪ P ∪ Q contains three cycles, one of which includes
S = T ∪ {x} (see Figure 9.5). If |Y | = k − 1, the Fan Lemma yields a (k − 1)-fan
from x to Y in which each vertex of Y is the terminus of one path, and we conclude
as before.

It should be pointed out that the order in which the vertices of S occur on the
cycle whose existence is established in Theorem 9.6 cannot be speciﬁed in advance.
For example, the 4-connected graph shown in Figure 9.6 has no cycle including the
four vertices x1 , y1 , x2 , y2 in this exact order, because every x1 y1 -path intersects
every x2 y2 -path.
x1

x2

y2

y1

Fig. 9.6. No cycle includes x1 , y1 , x2 , y2 in this order

Exercises
9.2.1 Give a proof of the Fan Lemma (Proposition 9.5).
9.2.2 Show that a 3-connected nonbipartite graph contains at least four odd cycles.
9.2.3 Let C be a cycle of length at least three in a nonseparable graph G, and let
S be a set of three vertices of C. Suppose that some component H of G − V (C)

216

9 Connectivity

is adjacent to all three vertices of S. Show that there is a 3-fan in G from some
vertex v of H to S.
9.2.4 Find a 5-connected graph G and a set {x1 , y1 , x2 , y2 } of four vertices in
G, such that no cycle of G contains all four vertices in the given order. (In a 6connected graph, it can be shown that there is a cycle containing any four vertices
in any prescribed order.)
————— —————
9.2.5 Let G be a graph, x a vertex of G, and Y and Z subsets of V \ {x}, where
|Y | < |Z|. Suppose that there are fans from x to Y and from x to Z. Show that
there is a fan from x to Y ∪ {z} for some z ∈ Z \ Y .
(H. Perfect)

9.3 Edge Connectivity
We now turn to the notion of edge connectivity. The local edge connectivity between
distinct vertices x and y is the maximum number of pairwise edge-disjoint xypaths, denoted p (x, y); the local edge connectivity is undeﬁned when x = y. A
nontrivial graph G is k-edge-connected if p (u, v) ≥ k for any two distinct vertices
u and v of G. By convention, a trivial graph is both 0-edge-connected and 1-edgeconnected, but is not k-edge-connected for any k > 1. The edge connectivity κ (G)
of a graph G is the maximum value of k for which G is k-edge-connected.
A graph is 1-edge-connected if and only if it is connected; equivalently, the
edge connectivity of a graph is zero if and only if it is disconnected. For the four
graphs shown in Figure 9.1, κ (G1 ) = 1, κ (G2 ) = 2, κ (G3 ) = 3, and κ (G4 ) = 4.
Thus, of these four graphs, the only graph that is 4-edge-connected is G4 . Graphs
G3 and G4 are 3-edge-connected, but G1 and G2 are not. Graphs G2 , G3 , and G4
are 2-edge-connected, but G1 is not. And, because all four graphs are connected,
they are all 1-edge-connected.
For distinct vertices x and y of a graph G, recall that an edge cut ∂(X) separates
x and y if x ∈ X and y ∈ V \ X. We denote by c (x, y) the minimum cardinality
of such an edge cut. With this notation, we may now restate the edge version of
Menger’s Theorem (7.17).
Theorem 9.7 Menger’s Theorem (Edge Version)
For any graph G(x, y),
p (x, y) = c (x, y)
This theorem was proved in Chapter 7 using ﬂows. It may also be deduced
from Theorem 9.1 by considering a suitable line graph (see Exercise 9.3.11).
A k-edge cut is an edge cut ∂(X), where ∅ ⊂ X ⊂ V and |∂(X)| = k, that
is, an edge cut of k elements which separates some pair of vertices. Because every
nontrivial graph has such edge cuts, it follows from Theorem 9.7 that the edge
connectivity κ (G) of a nontrivial graph G is equal to the least integer k for which

9.3 Edge Connectivity

217

G has a k-edge cut. For any particular pair x, y of vertices of G, the value of
c (x, y) can be determined by an application of the Max-Flow Min-Cut
  Algorithm
(7.9). Therefore the parameter κ can obviously be determined by n2 applications
of that algorithm. However, the function c takes at most n − 1 distinct values
(Exercise 9.3.13b). Moreover, Gomory and Hu (1961) have shown that κ can
be computed by just n − 1 applications of the Max-Flow Min-Cut Algorithm. A
description of their approach is given in Section 9.6.
Essential Edge Connectivity
The vertex and edge connectivities of a graph G, and its minimum degree, are
related by the following basic inequalities (Exercise 9.3.2).
κ ≤ κ ≤ δ
Thus, for 3-regular graphs, the connectivity and edge connectivity do not exceed
three. They are, moreover, always equal for such graphs (Exercise 9.3.5). These
two measures of connectivity therefore fail to distinguish between the triangular
prism K3  K2 and the complete bipartite graph K3,3 , both of which are 3-regular
graphs with connectivity and edge connectivity equal to three. Nonetheless, one
has the distinct impression that K3,3 is better connected than K3  K2 . Indeed,
K3  K2 has a 3-edge cut which separates the graph into two nontrivial subgraphs,
whereas K3,3 has no such cut.
Recall that a trivial edge cut is one associated with a single vertex. A k-edgeconnected graph is termed essentially (k +1)-edge-connected if all of its k-edge cuts
are trivial. For example, K3,3 is essentially 4-edge-connected whereas K3  K2 is
not. If a k-edge-connected graph has a k-edge cut ∂(X), the graphs G / X and
G / X (obtained by shrinking X to a single vertex x and X := V \ X to a single
vertex x, respectively) are also k-edge-connected (Exercise 9.3.8). By iterating this
shrinking procedure, any k-edge-connected graph with k ≥ 1, can be ‘decomposed’
into a set of essentially (k + 1)-edge-connected graphs. For many problems, it is
enough to treat each of these ‘components’ separately. (When k = 0 — that is,
when the graph is disconnected — this procedure corresponds to considering each
of its components individually.)
The notion of essential edge connectivity is particularly useful for 3-regular
graphs. For instance, to show that a 3-connected 3-regular graph has a cycle double
cover, it suﬃces to verify that each of its essentially 4-edge-connected components
has one; the individual cycle double covers can then be spliced together to yield a
cycle double cover of the entire graph (Exercise 9.3.9).
Connectivity in Digraphs
The deﬁnitions of connectivity and edge connectivity have straightforward extensions to digraphs. It suﬃces to replace ‘path’ by ‘directed path’ throughout. We
have already seen three versions of Menger’s Theorem, namely the arc version

218

9 Connectivity

(Theorem 7.16), and the edge and vertex versions for undirected graphs (Theorems 7.17 and 9.1). Not surprisingly, there is also a vertex version for directed
graphs. It can be deduced easily from the reduction of IDDP to ADDP described in
Section 8.3. An (x, y)-vertex-cut is a subset S of V \ {x, y} whose deletion destroys
all directed (x, y)-paths.
Theorem 9.8 Menger’s Theorem (Directed Vertex Version)
In any digraph D(x, y), where (x, y) ∈
/ A(D), the maximum number of pairwise
internally disjoint directed (x, y)-paths is equal to the minimum number of vertices
in an (x, y)-vertex-cut.

As already noted, of the four versions of Menger’s Theorem, Theorem 7.16
implies the other three. Also, Theorem 9.8 clearly implies Theorem 9.1. Although
less obvious, the converse implication holds too (see Exercise 9.1.11). By using
a suitable line graph, Theorem 9.7 may be derived from Theorem 9.1 (see Exercise 9.3.11).

Exercises
9.3.1 Determine the connectivity and the edge connectivity of the Kneser graph
KGm,n .
9.3.2
a) Show that every graph G satisﬁes the inequalities κ ≤ κ ≤ δ.
b) Find a graph G with κ = 3, κ = 4, and δ = 5.
9.3.3 Let G be a simple graph of diameter two. Show that κ = δ. (J. Plesnı́k)
9.3.4
a) Show that if G is simple and δ ≥ (n − 1)/2, then κ = δ.
b) For each even n ≥ 2, ﬁnd a simple graph G with δ = (n/2) − 1 and κ < δ.
9.3.5 Show that if G is cubic, then κ = κ .
9.3.6
a) Show that if G is k-edge-connected, where k > 0, and if S is a set of k edges
of G, then c(G \ S) ≤ 2.
b) For k > 0, ﬁnd a k-connected graph G and a set S of k vertices of G such that
c(G − S) > 2.
9.3.7 Show that if G is a k-edge-connected graph on at least three vertices, and e
is any edge of G, then G / e is k-edge-connected.
9.3.8 Show that if ∂(X) is a k-edge cut of a k-edge-connected graph G, the graphs
G / X and G / X are also k-edge-connected, where X := V \ X.

9.4 Three-Connected Graphs

219

9.3.9 Let ∂(X) be a 3-edge cut of a cubic graph G. Show that G has a cycle
double cover if and only if both G / X and G / X have cycle double covers, where
X := V \ X.
9.3.10 Show that in a nontrivial connected graph, any minimal edge cut separating
two of its vertices is a bond.
————— —————
9.3.11 Deduce Theorem 9.7 from Theorem 9.1.

(F. Harary)

9.3.12 Let S be a set of three pairwise-nonadjacent edges in a simple 3-connected
graph G. Show that there is a cycle in G containing all three edges of S unless S
is an edge cut of G.
(L. Lovász, N. Robertson)
9.3.13
a) Show that, for any three vertices x, y, and z of a graph G:
c (x, z) ≥ min{c (x, y), c (y, z)}
and that at least two of the values c (x, y), c (x, z), and c (y, z) are equal.
b) Deduce from (a) that:
i) the function c takes on at most n − 1 distinct values,
ii) for any sequence (v1 , v2 , . . . , vk ) of vertices of a graph G,
c (v1 , vk ) ≥ min{c (v1 , v2 ), c (v2 , v3 ), . . . , c (vk−1 , vk )}
9.3.14 A k-edge-connected graph G is minimally k-edge-connected if, for any edge
e of G, the graph G \ e is not k-edge-connected.
a) Let G be a minimally k-edge-connected graph. Prove that:
i) every edge e of G is contained in a k-edge cut of G,
ii) G has a vertex of degree k,
iii) m ≤ k(n − 1).
b) Deduce that every k-edge-connected graph G contains a spanning k-edgeconnected subgraph with at most k(n − 1) edges.
(W. Mader)
(Halin (1969) and Mader (1971b) found analogues of the above statements for
vertex connectivity.)

9.4 Three-Connected Graphs
As we observed in Chapter 5, in most instances it is possible to draw conclusions
about a graph by examining each of its blocks individually. For example, a graph
has a cycle double cover if and only if each of its blocks has a cycle double cover.
Because blocks on more than two vertices are 2-connected, the question of the
existence of a cycle double cover can therefore be restricted, or ‘reduced’, to the

220

9 Connectivity

study of 2-connected graphs. A similar reduction applies to the problem of deciding
whether a given graph is planar, as we show in Chapter 10.
In many cases, further reductions can be applied, allowing one to restrict the
analysis to 3-connected graphs, or even to 3-connected essentially 4-edge-connected
graphs. The basic idea is to decompose a 2-connected graph which has a 2-vertex
cut into smaller 2-connected graphs. Loops do not play a signiﬁcant role in this
context. For clarity, we therefore assume that all graphs considered in this section
are loopless.
Let G be a connected graph which is not complete, let S be a vertex cut of
G, and let X be the vertex set of a component of G − S. The subgraph H of
G induced by S ∪ X is called an S-component of G. In the case where G is 2connected and S := {x, y} is a 2-vertex cut of G, we ﬁnd it convenient to modify
each S-component by adding a new edge between x and y. We refer to this edge as
a marker edge and the modiﬁed S-components as marked S-components. The set
of marked S-components constitutes the marked S-decomposition of G. The graph
G can be recovered from its marked S-decomposition by taking the union of its
marked S-components and deleting the marker edge. This procedure is illustrated
in Figure 9.7, the cut S and the marker edge being indicated by solid dots and
lines.

Fig. 9.7. A marked decomposition of a 2-connected graph and its recomposition

9.4 Three-Connected Graphs

221

Theorem 9.9 Let G be a 2-connected graph and let S be a 2-vertex cut of G. Then
the marked S-components of G are also 2-connected.
Proof Let H be a marked S-component of G, with vertex set S ∪ X. Then
|V (H)| = |S| + |X| ≥ 3. Thus if H is complete, it is 2-connected. On the other
hand, if H is not complete, every vertex cut of H is also a vertex cut of G, hence
of cardinality at least two.


Decomposition Trees
By Theorem 9.9, a 2-connected graph G with a 2-vertex cut S has a marked Sdecomposition into 2-connected graphs. If any one of these marked S-components
itself has a 2-vertex cut, it in turn can be decomposed into still smaller marked
2-connected graphs. This decomposition process may be iterated until G has
been decomposed into 2-connected graphs without 2-vertex cuts. The marked Scomponents which arise during the entire procedure form the vertices of a decomposition tree of G, as illustrated in Figure 9.8.
The root of this decomposition tree is G, and its leaves are either 3-connected
graphs or else 2-connected graphs whose underlying graphs are complete (and
which therefore have at most three vertices). We refer to the 3-connected graphs
in such a decomposition as the 3-connected components of G. The 3-connected
components of the root graph in Figure 9.8 are K3 (both with and without multiple
edges), K4 , and K3,3 .
At any stage, there may be a choice of cuts along which to decompose a graph.
Consequently, two separate applications of this decomposition procedure may well
result in diﬀerent sets of graphs (Exercise 9.4.1). However, it was shown by Cunningham and Edmonds (1980) that any two applications of the procedure always
result in the same set of 3-connected components (possibly with diﬀerent edge
multiplicities).
To observe the relevance of the above decomposition to cycle double covers,
let G be a 2-connected graph with a 2-vertex cut S. If each marked S-component
of G has a cycle double cover, one can show that G also has a cycle double cover
(Exercise 9.4.2). Because 2-connected graphs on at most three vertices clearly have
cycle double covers, we conclude that if the Cycle Double Cover Conjecture is true
for all 3-connected graphs, it is true for all 2-connected graphs. This fact may be
expressed more strikingly in terms of potential counterexamples to the conjecture:
if the Cycle Double Cover Conjecture is false, a smallest counterexample to it (that
is, one with the minimum possible number of vertices) must be 3-connected. Jaeger
(1976) and Kilpatrick (1975) proved that every 4-edge-connected graph has a cycle
double cover (see Theorem 21.24). Thus, if the Cycle Double Cover Conjecture
happens to be false, a minimum counterexample must have connectivity precisely
three.

222

9 Connectivity

Fig. 9.8. A decomposition tree of a 2-connected graph

Contractions of Three-Connected Graphs
The relevance of 3-connectivity to the study of planar graphs is discussed in Section 10.5. In this context, the following property of 3-connected graphs, established
by Thomassen (1981), plays an extremely useful role.
Theorem 9.10 Let G be a 3-connected graph on at least ﬁve vertices. Then G
contains an edge e such that G / e is 3-connected.
The proof of Theorem 9.10 requires the following lemma.
Lemma 9.11 Let G be a 3-connected graph on at least ﬁve vertices, and let e = xy
be an edge of G such that G / e is not 3-connected. Then there exists a vertex z
such that {x, y, z} is a 3-vertex cut of G.
Proof Let {z, w} be a 2-vertex cut of G / e. At least one of these two vertices,
say z, is not the vertex resulting from the contraction of e. Set F := G − z.

9.4 Three-Connected Graphs

223

Because G is 3-connected, F is certainly 2-connected. However F / e = (G−z) / e =
(G / e) − z has a cut vertex, namely w. Hence w must be the vertex resulting from
the contraction of e (Exercise 9.4.3). Therefore G − {x, y, z} = (G / e) − {z, w} is
disconnected, in other words, {x, y, z} is a 3-vertex cut of G.

Proof of Theorem 9.10. Suppose that the theorem is false. Then, for any edge
e = xy of G, the contraction G / e is not 3-connected. By Lemma 9.11, there exists
a vertex z such that {x, y, z} is a 3-vertex cut of G (see Figure 9.9).

x
e
H

F

y
z

f

u

Fig. 9.9. Proof of Theorem 9.10

Choose the edge e and the vertex z in such a way that G − {x, y, z} has a
component F with as many vertices as possible. Consider the graph G−z. Because
G is 3-connected, G − z is 2-connected. Moreover G − z has the 2-vertex cut {x, y}.
It follows that the {x, y}-component H := G[V (F ) ∪ {x, y}] is 2-connected.
Let u be a neighbour of z in a component of G − {x, y, z} diﬀerent from F .
Since f := zu is an edge of G, and G is a counterexample to Theorem 9.10, there is
a vertex v such that {z, u, v} is a 3-vertex cut of G, too. (The vertex v is not shown
in Figure 9.9; it might or might not lie in H.) Moreover, because H is 2-connected,
H − v is connected (where, if v ∈
/ V (H), we set H − v := H), and thus is contained
in a component of G − {z, u, v}. But this component has more vertices than F
(because H has two more vertices than F ), contradicting the choice of the edge e
and the vertex v.

Although the proof of Theorem 9.10 proceeds by way of contradiction, the
underlying idea can be used to devise a polynomial-time algorithm for ﬁnding an
edge e in a 3-connected graph G such that G / e is 3-connected (Exercise 9.4.4).
Expansions of Three-Connected Graphs
We now deﬁne an operation on 3-connected graphs which may be thought of as
an inverse to contraction. Let G be a 3-connected graph and let v be a vertex of

224

9 Connectivity

G of degree at least four. Split v into two vertices, v1 and v2 , add a new edge e
between v1 and v2 , and distribute the edges of G incident to v among v1 and v2
in such a way that v1 and v2 each have at least three neighbours in the resulting
graph H. This graph H is called an expansion of G at v (see Figure 9.10).
v

G

v1

e

v2

H

Fig. 9.10. An expansion of a graph at a vertex

Note that there is usually some freedom as to how the edges of G incident with
v are distributed between v1 and v2 , so expansions are not in general uniquely
deﬁned. On the other hand, the contraction H / e is clearly isomorphic to G.
The following theorem may be regarded as a kind of converse of Theorem 9.10.
Theorem 9.12 Let G be a 3-connected graph, let v be a vertex of G of degree at
least four, and let H be an expansion of G at v. Then H is 3-connected.
Proof Because G − v is 2-connected and v1 and v2 each have at least two neighbours in G − v, the graph H \ e is 2-connected, by Lemma 9.3. Using the fact
that any two vertices of G are connected by three internally disjoint paths, it is
now easily seen that any two vertices of H are also connected by three internally
disjoint paths.

In light of Theorems 9.10 and 9.12, every 3-connected graph G can be obtained
from K4 by means of edge additions and vertex expansions. More precisely, given
any 3-connected graph G, there exists a sequence G1 , G2 , . . . , Gk of graphs such
that (i) G1 = K4 , (ii) Gk = G, and (iii) for 1 ≤ i ≤ k − 1, Gi+1 is obtained by
adding an edge to Gi or by expanding Gi at a vertex of degree at least four.
It is not possible to obtain a simple 3-connected graph, diﬀerent from K4 , by
means of the above construction if we wish to stay within the realm of simple
graphs. However, Tutte (1961b) has shown that, by starting with the class of all
wheels, all simple 3-connected graphs may be constructed by means of the two
above-mentioned operations without ever creating parallel edges. This result may
be deduced from Theorem 9.10 (see Exercise 9.4.8).
Recursive constructions of 3-connected graphs have been used to prove many
interesting theorems in graph theory; see, for example, Exercise 9.4.10. For further
examples, see Tutte (1966a).

9.4 Three-Connected Graphs

225

For k ≥ 4, no recursive procedure for generating all k-connected graphs is
known. This is in striking contrast with the situation for k-edge-connected graphs
(see Exercise 9.5.5). We refer the reader to Frank (1995) for a survey of recursive
procedures for generating k-connected and k-edge-connected graphs.

Exercises
9.4.1 Find a 2-connected graph and two decomposition trees of your graph which
result in diﬀerent collections of leaves.
9.4.2 Let G be a 2-connected graph with a 2-vertex cut S := {u, v}. Prove that if
each marked S-component of G has a cycle double cover then so has G.
9.4.3 Let G be a 2-connected graph and let e be an edge of G such that G / e is
not 2-connected. Prove that G / e has exactly one cut vertex, namely the vertex
resulting from the contraction of the edge e.
9.4.4 Describe a polynomial-time algorithm to ﬁnd, in a 3-connected graph G on
ﬁve or more vertices, an edge e such that G / e is 3-connected.
9.4.5
a) Let G be a 4-regular 4-connected graph each edge of which lies in a triangle.
Show that no edge-contraction of G is 4-connected.
b) For each integer k ≥ 4, ﬁnd a k-connected graph G on at least k + 2 vertices,
none of whose edge contractions is k-connected.
9.4.6 Show how the Petersen graph can be obtained from the wheel W6 by means
of vertex expansions.
————— —————
9.4.7 Let G be a graph and let e = xy and e = x y  be two distinct (but possibly
adjacent) edges of G. The operation which consists of subdividing e by inserting a
new vertex v between x and y, subdividing e by inserting a new vertex v  between
x and y  , and joining v and v  by a new edge, is referred to as an edge-extension
of G. Show that:
a) any edge-extension of a 3-connected cubic graph is also 3-connected and cubic,
b) every 3-connected cubic graph can be obtained from K4 by means of a sequence
of edge-extensions,
c) an edge-extension of an essentially 4-edge-connected cubic graph G is also
essentially 4-edge-connected provided that the two edges e and e of G involved
in the extension are nonadjacent in G.
(Wormald (1979) has shown that all essentially 4-edge-connected cubic graphs
may be obtained from K4 and the cube by means of edge-extensions involving
nonadjacent pairs of edges.)

226

9 Connectivity

9.4.8 Let G be a 3-connected graph with n ≥ 5. Show that, for any edge e,
either G / e is 3-connected or G \ e can be obtained from a 3-connected graph by
subdividing at most two edges.
(W.T. Tutte)
9.4.9 Let G be a simple 3-connected graph diﬀerent from a wheel. Show that, for
any edge e, either G / e or G \ e is also a 3-connected simple graph.
(W.T. Tutte)
9.4.10
a) Let G be the family of graphs consisting of K5 , the wheels Wn , n ≥ 3, and all
graphs of the form H ∨ K n , where H is a spanning subgraph of K3 and K n is
the complement of Kn , n ≥ 3. Show that a 3-connected simple graph G does
not contain two disjoint cycles if and only if G ∈ G.
(W.G. Brown; L. Lovász)
b) Deduce from (a) that any simple graph not containing two disjoint cycles has
three vertices whose deletion results in an acyclic graph.
(The same result holds for directed cycles in digraphs, although the proof, due
to McCuaig (1993), is very much harder. For undirected graphs, Erdős and
Pósa (1965) showed that there exists a constant c such that any graph either
contains k disjoint cycles or has ck log k vertices whose deletion results in an
acyclic graph. This is discussed in Section 19.1.)

9.5 Submodularity
A real-valued function f deﬁned on the set of subsets of a set S is submodular if,
for any two subsets X and Y of S,
f (X ∪ Y ) + f (X ∩ Y ) ≤ f (X) + f (Y )
The degree function d deﬁned on the set of subsets of the vertex set of a graph G
by d(X) := |∂(X)| for all X ⊆ V is a typical example of a submodular function
associated with a graph (see Exercise 2.5.4). Another example is described in
Exercise 9.5.7.
Submodular functions play an important role in combinatorial optimization
(see Fujishige (2005)). Here, we describe three interesting consequences of the
submodularity of the degree function. One of these is Theorem 9.16, which has
many applications, including a theorem on orientations of graphs due to NashWilliams (1960). A second use of submodularity is described below, and a third is
given in Section 9.6.
It is convenient both here and in the next section to denote the complement
V \ X of a set X by X.

9.5 Submodularity

227

Y

Y

X

X ∩Y

X ∩Y

X

X ∩Y

X ∩Y

Fig. 9.11. Crossing sets X and Y

Edge Connectivity of Vertex-Transitive Graphs
Two subsets X and Y of a set V are said to cross if the subsets X ∩Y , X ∩Y , X ∩Y ,
and X ∩ Y (shown in the Venn diagram of Figure 9.11) are all nonempty. When
V is the vertex set of a graph G, we say that the edge cuts ∂(X) and ∂(Y ) cross if
the sets X and Y cross. In such cases, it is often fruitful to consider the edge cuts
∂(X ∪Y ) and ∂(X ∩Y ) and invoke the submodularity of the degree function. Here,
we apply this idea to show that the edge connectivity of a nontrivial connected
vertex-transitive graph is always equal to its degree, a result due independently to
Mader (1971a) and Watkins (1970). Its proof relies on the concept of an atom.
An atom of a graph G is a minimal subset X of V such that d(X) = κ and
|X| ≤ n/2. Thus if κ = δ, then any vertex of minimum degree is a singleton atom.
On the other hand, if κ < δ, then G has no singleton atoms.
Proposition 9.13 The atoms of a graph are pairwise disjoint.
Proof Let X and Y be two distinct atoms of a graph G. Suppose that X ∩Y = ∅.
Because X and Y are atoms, neither is properly contained in the other, so X ∩ Y
and X ∩ Y are both nonempty. We show that X ∩ Y is nonempty, too, and thus
that X and Y cross.
Noting that X ∪ Y and X ∩ Y are complementary sets, and that X ∩ Y is a
nonempty proper subset of the atom X, we have
d(X ∪ Y ) = d(X ∩ Y ) > d(X) = d(Y )
It follows that X ∪ Y = Y or, equivalently, X ∩ Y = ∅. So X and Y do indeed
cross.
Because ∂(X) and ∂(Y ) are minimum edge cuts,
d(X ∪ Y ) ≥ d(X)

and

d(X ∩ Y ) ≥ d(Y )

Therefore
d(X ∪ Y ) + d(X ∩ Y ) ≥ d(X) + d(Y )

228

9 Connectivity

On the other hand, because d is a submodular function,
d(X ∪ Y ) + d(X ∩ Y ) ≤ d(X) + d(Y )
These inequalities thus all hold with equality. In particular, d(X ∩ Y ) = d(Y ). But
this contradicts the minimality of the atom Y . We conclude that X and Y are
disjoint.

Theorem 9.14 Let G be a simple connected vertex-transitive graph of positive
degree d. Then κ = d.
Proof Let X be an atom of G, and let u and v be two vertices in X. Because G is
vertex-transitive, it has an automorphism θ such that θ(u) = v. Being the image of
an atom under an automorphism, the set θ(X) is also an atom of G. As v belongs to
both X and θ(X), it follows from Proposition 9.13 that θ(X) = X, which implies
that θ|X is an automorphism of the graph G[X], with θ|X(u) = v. This being so
for any two vertices u, v in X, we deduce that G[X] is vertex-transitive.
Suppose that G[X] is k-regular. Because G is simple, |X| ≥ k + 1, and because
G is connected, ∂(X) = ∅. Therefore d ≥ k + 1, and we have:
κ = d(X) = |X|(d − k) ≥ (k + 1)(d − k) = d + k(d − k − 1) ≥ d
Since κ cannot exceed d, we conclude that κ = d.



Nash-Williams’ Orientation Theorem
By Theorem 5.10 every 2-edge-connected graph admits a strongly connected orientation. Nash-Williams (1960) established the following beautiful generalization
of this result. (In the remainder of this section, k denotes a positive integer.)
Theorem 9.15 Every 2k-edge-connected graph has a k-arc-connected orientation.
Mader (1978) proved an elegant theorem concerning the splitting oﬀ of edges
(an operation introduced in Chapter 5) and deduced Theorem 9.15 from it. We
present here a special case of Mader’s result which is adequate for proving Theorem 9.15. The proof is due to Frank (1992).
Let v be a vertex of a graph G. We say that G is locally 2k-edge-connected
modulo v if the local edge connectivity between any two vertices diﬀerent from v
is at least 2k. Using Menger’s theorem and the fact that d(X) = d(X), it can be
seen that a graph G on at least three vertices is locally 2k-edge-connected modulo
v if and only if:
d(X) ≥ 2k, for all X, ∅ ⊂ X ⊂ V \ {v}
Theorem 9.16 Let G be a graph which is locally 2k-edge-connected modulo v,
where v is a vertex of even degree in G. Given any link uv incident with v, there
exists a second link vw incident with v such that the graph G obtained by splitting
oﬀ uv and vw at v is also locally 2k-edge-connected modulo v.

9.5 Submodularity

229

Proof We may assume that n ≥ 3 as the statement holds trivially when n = 2.
We may also assume that G is loopless. Consider all nonempty proper subsets X of
V \ {v}. Splitting oﬀ uv and another link vw incident with v preserves the degree
of X if at most one of u and w belongs to X, and reduces it by two if both u
and w belong to X. Thus if all such sets either do not contain u or have degree
at least 2k + 2, any link vw may be chosen as the companion of uv. Suppose that
this is not the case and that there is a proper subset X of V \ {v} with u ∈ X and
d(X) ≤ 2k + 1. Call such a set tight. We show that the union of two tight sets X
and Y is also tight. We may assume that X and Y cross; otherwise, X ∪ Y is equal
either to X or to Y . Therefore X ∩ Y and X ∩ Y are nonempty subsets of V \ {v}.
Note, also, that uv ∈ E[X ∩ Y, X ∩ Y ]. We thus have (using Exercise 2.5.4):
(2k + 1) + (2k + 1) ≥ d(X) + d(Y )
= d(X ∩ Y ) + d(X ∩ Y ) + 2e(X ∩ Y, X ∩ Y ) ≥ 2k + 2k + 2
so
d(X) = d(Y ) = 2k + 1,

d(X ∩ Y ) = d(X ∩ Y ) = 2k, and e(X ∩ Y, X ∩ Y ) = 1

One may now deduce that e(X ∩Y , X ∩Y ) = e(X ∩Y, X ∩Y ) (Exercise 9.5.4). Thus
d(X ∩ Y ) is odd. Because the degree of v is even, by hypothesis, X ∪ Y = V \ {v}.
Therefore ∅ ⊂ X ∪ Y ⊂ V \ {v}. Moreover, by submodularity,
d(X ∪ Y ) ≤ d(X) + d(Y ) − d(X ∩ Y ) ≤ (2k + 1) + (2k + 1) − 2k = 2k + 2
Since d(X ∪ Y ) = d(X ∩ Y ) is odd, we may conclude that d(X ∪ Y ) ≤ 2k + 1. Thus
the union of any two tight sets is tight, as claimed. Now let S denote the union of
all tight sets and let w be an element of V \ S distinct from v. Because w belongs
to no tight set in G, the graph G obtained from G by splitting oﬀ uv and vw is
locally 2k-edge-connected modulo v.

Proof of Theorem 9.15. By induction on the number of edges. Let G be a
2k-edge-connected graph. Suppose ﬁrst that G has an edge e such that G \ e is
also 2k-edge-connected. Then, by induction, G \ e has an orientation such that the
resulting digraph is k-arc-connected. That orientation of G \ e may be extended to
a k-arc-connected orientation of G itself by orienting e arbitrarily. Thus, we may
assume that G is minimally 2k-edge-connected and so has a vertex of degree 2k
(Exercise 9.3.14). Let v be such a vertex.
By Theorem 9.16, the 2k edges incident with v may be divided into k pairs and
each of these pairs may be split oﬀ, one by one, to obtain k new edges e1 , e2 , . . . , ek
and a 2k-edge-connected graph H. By the induction hypothesis, there is an ori→
−
entation H of H which is k-arc-connected. Let a1 , a2 , . . . , ak , respectively, be the
→
−
k arcs of H corresponding to the edges e1 , e2 , . . . , ek of H. By subdividing, for
1 ≤ i ≤ k, the arc ai by a vertex vi , and then identifying the k vertices v1 , v2 , . . . , vk
→
−
→
−
to form vertex v, we obtain an orientation G of G. Using the fact that H is k→
−
arc-connected, one may easily verify that G is also k-arc-connected. We leave the
details to the reader as Exercise 9.5.5.


230

9 Connectivity

Nash-Williams (1960) in fact proved a far stronger result than Theorem 9.15.
→
−
He showed that any graph G admits an orientation G such that, for any two
→
−
vertices u and v, the size of a minimum outcut in G separating v from u is at least
 12 c (u, v). We refer the reader to Schrijver (2003) for further details.

Exercises
9.5.1 Let X be an atom of a graph G. Show that the induced subgraph G[X] is
connected.
9.5.2 Give an example of a connected cubic vertex-transitive graph that is not
3-edge-connected.
(This shows that Theorem 9.14 is not valid for graphs with multiple edges.)
9.5.3 Give an example of a simple connected vertex-transitive k-regular graph
whose connectivity is strictly less than k.
(Watkins (1970) showed that the connectivity of any such graph exceeds 2k/3.)
9.5.4 In the proof of Theorem 9.16, show that e(X ∩Y , X ∩Y ) = e(X ∩Y, X ∩Y ).
→
−
→
−
9.5.5 Let G and H be the digraphs described in the proof of Theorem 9.15.
→
−
→
−
Deduce that G is k-arc-connected from the fact that H is k-arc-connected.
————— —————
9.5.6 Let G be a 2k-edge-connected graph with an Euler trail. Show that G has
an orientation in which any two vertices u and v are connected by at least k
arc-disjoint directed (u, v)-paths.
9.5.7 Let G be a graph. For a subset S of E, denote by c(S) the number of
components of the spanning subgraph of G with edge set S.
a) Show that the function c : 2E → N is supermodular: for any two subsets X
and Y of E,
c(X ∪ Y ) + c(X ∩ Y ) ≥ c(X) + c(Y )
b) Deduce that the function r : 2E → N deﬁned by r(S) := n − c(S) for all
S ⊆ E is submodular. (This function r is the rank function of a certain matroid
associated with G.)
9.5.8 Given any graph G and k distinct edges e1 , e2 , . . . , ek (loops or links) of G,
the operation of pinching together those k edges consists of subdividing, for 1 ≤
i ≤ k, the edge ei by a vertex vi , and then identifying the k vertices v1 , v2 , . . . , vk
to form a new vertex of degree 2k.
a) Show that if G is 2k-edge-connected, then the graph G obtained from G by
pinching together any k edges of G is also 2k-edge-connected.

9.6 Gomory–Hu Trees

231

b) Using Theorem 9.16, show that, given any 2k-edge-connected graph G, there
exists a sequence (G1 , G2 , . . . , Gr ) of graphs such that (i) G1 = K1 , (ii) Gr =
G, and (iii) for 1 ≤ i ≤ r − 1, Gi+1 is obtained from Gi either by adding an
edge (a loop or a link) or by pinching together k of its edges.
(Mader (1978) found an analogous construction for (2k + 1)-edge-connected
graphs.)

9.6 Gomory–Hu Trees
As mentioned earlier, Gomory and Hu (1961) showed that only n − 1 applications
of the Max-Flow Min-Cut Algorithm (7.9) are needed in order to determine the
edge connectivity of a graph G. The following theorem, in which two edge cuts
∂(X) and ∂(Y ) that cross are replaced by two, ∂(X) and ∂(X ∩ Y ), that do not
cross, is the basis of their approach. This procedure is referred to as uncrossing. We
leave the proof of the theorem, which makes use of submodularity, as an exercise
(9.6.1).
Theorem 9.17 Let ∂(X) be a minimum edge cut in a graph G separating two
vertices x and y, where x ∈ X, and let ∂(Y ) be a minimum edge cut in G separating
two vertices u and v of X, where y ∈
/ Y . Then ∂(X ∩ Y ) is a minimum edge cut
in G separating u and v.

A consequence of Theorem 9.17 is that, given a minimum edge cut ∂(X) in G
separating vertices x and y, in order to ﬁnd a minimum edge cut in G separating
u and v, where {u, v} ⊂ X, it suﬃces to consider the graph G / X obtained from
G by shrinking X := V \ X to
 a single vertex. Using this idea, Gomory and Hu
showed how to ﬁnd all the n2 values of the function c by just n − 1 applications
of the Max-Flow Min-Cut Algorithm (7.9). They also showed that the n − 1 cuts
found by their procedure have certain special properties which may be conveniently
visualized in terms of an appropriately weighted tree associated with G. We ﬁrst
describe the characteristics of this weighted tree and then explain how to construct
it.
Given any tree T with vertex set V , and an edge e of T , there is a unique
edge cut Be := ∂(X) of G associated with e, where X is the vertex set of one
component of T \ e. (This is akin to the notion of a fundamental bond, introduced
in Chapter 4, except that here we do not insist on T being a spanning tree of G.)
A weighted tree (T, w) on V is a Gomory–Hu tree of G if, for each edge e = xy of
T,
i) w(e) = c (x, y),
ii) the cut Be associated with e is a minimum edge cut in G separating x and y.
As an example, consider the graph G on ﬁve vertices shown in Figure 9.12a,
where the weights indicate edge multiplicities. Figure 9.12b is a Gomory–Hu tree
T of G. The four edge cuts of G corresponding to the four edges of T are indicated

232

9 Connectivity
u

u
1

1
3

x
1

v

1
1

2
y

x

5

4
v

4

y

6

w

w

(a)

(b)

Fig. 9.12. (a) A graph G, and (b) a Gomory–Hu tree T of G

by dashed lines in Figure 9.12a. Note that this particular tree T is not a spanning
tree of G.
The n−1 edge cuts associated with a Gomory–Hu tree are pairwise noncrossing.
As a consequence of the following proposition, these n − 1 cuts are suﬃcient for
determining κ (G).
Proposition 9.18 Let (T, w) be a Gomory–Hu tree of a graph G. For any two
vertices x and y of G, c (x, y) is the minimum of the weights of the edges on the
unique xy-path in T .
Proof Clearly, for every edge e on the xy-path in T , the edge cut Be associated
with e separates x and y. If v1 , v2 , . . . , vk is the xy-path in T , where x = v1 and
y = vk , it follows that
c (x, y) ≤ min{c (v1 , v2 ), c (v2 , v3 ), . . . , c (vk−1 vk )}
On the other hand, by Exercise 9.3.13b,
c (x, y) ≥ min{c (v1 , v2 ), c (v2 , v3 ), . . . , c (vk−1 vk )}
The required equality now follows.



Determining Edge Connectivity
We conclude this section with a brief description of the Gomory–Hu Algorithm.
For this purpose, we consider trees whose vertices are the parts in a partition of
V ; every edge of such a tree determines a unique edge cut of G. A weighted tree
(T, w) whose vertex set is a partition P of V is a Gomory–Hu tree of G relative
to P if, for any edge e := XY of T (where X, Y ∈ P), there is an element x of X
and an element y of Y such that c (x, y) = w(e) and the edge cut Be associated
with e is a minimum edge cut in G separating x and y. For example, if ∂(X) is a
minimum edge cut in G separating x and y, the tree consisting of two vertices X

9.6 Gomory–Hu Trees
u

u
1

1

3 x 1

v
1

1

y

1

4

3 x 1

v
1

1

1
y

1

1

w
u

y

3 x 1

v

4

1

1

w

w

u

u

2

2

4
{u, v, x} {w, y}

1

1

3 x 1

v

4

1

w

u

u

1

4
{v, x}

5
{w, y}

v

233

4

2
4

x

y

5
{w, y}

v

4
x

y
6

w
(a)

(b)

(c)

(d)

Fig. 9.13. Growing a Gomory–Hu tree

and X := V \ X joined by an edge with weight c (x, y) = d(X) is the Gomory–Hu
tree relative to the partition {X, X} (see Figure 9.13a).
Suppose that we are given a Gomory–Hu tree (T, w) relative to a certain partition P. If each part is a singleton, then (T, w) is already a Gomory–Hu tree of
G. Thus, suppose that there is a vertex X of T (that is, a part X in P) which
contains two distinct elements u and v. It may be deduced from Theorem 9.17
that, in order to ﬁnd a minimum edge cut in G separating u and v, it suﬃces to
consider the graph G obtained from G by shrinking, for each component of T −X,
the union of the vertices (parts) in that component to a single vertex. Let ∂(S)
be a minimum edge cut separating u and v in G , and suppose that u ∈ S and
v ∈ S, where S := V (G ) \ S. Now let X1 := X ∩ S and X2 := X ∩ S and let P  be
the partition obtained from P by replacing X by X1 and X2 and leaving all other
parts as they are. A weighted tree T  with vertex set P  may now be obtained
from T by:
i) splitting the vertex X into X1 and X2 , and joining them by an edge of weight
c (u, v) = d(S),
ii) joining a neighbour Y of X in T either to X1 or to X2 in T  (depending on
whether the vertex of G corresponding to the component of T − X containing
Y is in S or in S).
It may be shown that T  is a Gomory–Hu tree relative to P  (Exercise 9.6.2).
Proceeding in this manner, one may reﬁne P into a partition in which each part
is a singleton and thereby ﬁnd a Gomory–Hu tree of G. This process is illustrated
in Figure 9.13.

234

9 Connectivity

For a detailed description of the Gomory–Hu Algorithm, see Ford and Fulkerson
(1962). Padberg and Rao (1982) showed how this algorithm may be adapted to
ﬁnd minimum odd cuts in graphs (see Exercise 9.6.3). Nagamochi and Ibaraki
(1992) discovered a simple procedure for determining κ (G) that does not rely on
the Max-Flow Min-Cut Algorithm (7.9) (see Exercise 9.6.4).

Exercises
9.6.1 Prove Theorem 9.17 by proceeding as follows.
a) Show that ∂(X ∪ Y ) is an edge cut separating x and y, and that ∂(X ∩ Y ) is
an edge cut separating u and v.
b) Deduce that d(X ∪ Y ) ≥ d(X) and d(X ∩ Y ) ≥ d(Y ).
c) Apply the submodularity inequality.
——————————
9.6.2 Show that the weighted tree T  obtained from T in the Gomory–Hu Algorithm is a Gomory–Hu tree of G relative to P  .
9.6.3 Let G be a graph with at least two vertices of odd degree.
a) Suppose that ∂(X) is an edge cut of smallest size among those separating pairs
of vertices of odd degree in G. Show that:
i) if d(X) is odd, it is a smallest odd edge cut of G,
ii) if d(X) is even, a smallest odd edge cut of G is an edge cut of either G / X
or G / X, where X := V \ X.
b) Using (a), show how to ﬁnd a smallest odd edge cut of a graph by applying
the Gomory–Hu Algorithm.
(M.W. Padberg and M.R. Rao)
9.6.4 Call an ordering (v1 , v2 , . . . , vn ) of the vertices of a connected graph G a
cut-greedy order if, for 2 ≤ i ≤ n,
d(vi , {v1 , v2 , . . . , vi−1 }) ≥ d(vj , {v1 , v2 , . . . , vi−1 }), for all j ≥ i
a) Show that one can ﬁnd, starting with any vertex of G, a cut-greedy order of
the vertices of G in time O(m).
b) If (v1 , v2 , . . . , vn ) is a cut-greedy order of the vertices of G, show that
c (vn−1 , vn ) = d(vn )
c) Describe a polynomial-time algorithm for ﬁnding κ (G) based on part (b).
(H. Nagamochi and T. Ibaraki)
d) Find the edge connectivity of the graph in Figure 9.12 by applying the above
algorithm.
9.6.5 Well-balanced Orientation
An orientation D of a graph G is well-balanced if its local arc connectivities pD (u, v)
satisfy pD (u, v) ≥ pG (u, v)/2 for all ordered pairs (u, v) of vertices. Show that
every well-balanced orientation of an eulerian graph is eulerian.
(Z. Szigeti)

9.7 Chordal Graphs

235

9.7 Chordal Graphs
A chordal graph is a simple graph in which every cycle of length greater than three
has a chord. Equivalently, the graph contains no induced cycle of length four or
more. Thus every induced subgraph of a chordal graph is chordal. An example of
a chordal graph is shown in Figure 9.14.
r

s

y

t

x

u

w

v

Fig. 9.14. A chordal graph

Complete graphs and trees are simple instances of chordal graphs. Moreover,
as we now show, all chordal graphs have a treelike structure composed of complete
graphs (just as trees are composed of copies of K2 ). In consequence, many N Phard problems become polynomial when restricted to chordal graphs.
Clique Cuts
A clique cut is a vertex cut which is also a clique. In a chordal graph, every minimal
vertex cut is a clique cut.
Theorem 9.19 Let G be a connected chordal graph which is not complete, and let
S be a minimal vertex cut of G. Then S is a clique cut of G.
Proof Suppose that S contains two nonadjacent vertices x and y. Let G1 and
G2 be two components of G − S. Because S is a minimal cut, both x and y are
joined to vertices in both G1 and G2 . Let Pi be a shortest xy-path all of whose
internal vertices lie in Gi , i = 1, 2. Then P1 ∪ P2 is an induced cycle of length at
least four, a contradiction.

From Theorem 9.19, one may deduce that every connected chordal graph can
be built by pasting together complete graphs in a treelike fashion.
Theorem 9.20 Let G be a connected chordal graph, and let V1 be a maximal clique
of G. Then the maximal cliques of G can be arranged in a sequence (V1 , V2 , . . . , Vk )
such that Vj ∩ (∪j−1
i=1 Vi ) is a clique of G, 2 ≤ j ≤ k.

236

9 Connectivity

Proof There is nothing to prove if G is complete, so we may assume that G has
a minimal vertex cut S. By Theorem 9.19, S is a clique of G. Let Hi , 1 ≤ i ≤ p,
be the S-components of G, and let Yi be a maximal clique of Hi containing S,
1 ≤ i ≤ p. Observe that the maximal cliques of H1 , H2 . . . , Hp are also maximal
cliques of G, and that every maximal clique of G is a maximal clique of some Hi
(Exercise 9.7.1). Without loss of generality, suppose that V1 is a maximal clique
of H1 . By induction, the maximal cliques of H1 can be arranged in a sequence
starting with V1 and having the stated property. Likewise, for 2 ≤ i ≤ p, the
maximal cliques of Hi can be arranged in a suitable sequence starting with Yi .
The concatenation of these sequences is a sequence of the maximal cliques of G
satisfying the stated property.

A sequence (V1 , V2 , . . . , Vk ) of maximal cliques as described in Theorem 9.20 is
called a simplicial decomposition of the chordal graph G. The graph in Figure 9.14
has the simplicial decomposition shown in Figure 9.15. Dirac (1961) proved that
a graph is chordal if and only if it has such a decomposition (see Exercise 9.7.2).
r

r

r

s

r

s

r

s

y

y

t

y

t

y

t

y

t

x

x

u

x

u

x

u x

u

w

w

v

Fig. 9.15. A simplicial decomposition of the chordal graph of Figure 9.14

Simplicial Vertices
A simplicial vertex of a graph is a vertex whose neighbours induce a clique. Dirac
(1961) showed that every noncomplete chordal graph has at least two such vertices
(just as every nontrivial tree has at least two vertices of degree one). The graph
in Figure 9.14, for example, has three simplicial vertices, namely s, v, and y.
Theorem 9.21 Every chordal graph which is not complete has two nonadjacent
simplicial vertices.
Proof Let (V1 , V2 , . . . , Vk ) be a simplicial decomposition of a chordal graph, and
let x ∈ Vk \ (∪k−1
i=1 Vi ). Then x is a simplicial vertex. Now consider a simplicial
decomposition (Vπ(1) , Vπ(2) , . . . , Vπ(k) ), where π is a permutation of {1, 2, . . . , k}
such that π(1) = k. Let y ∈ Vπ(k) \ (∪k−1
i=1 Vπ(i) ). Then y is a simplicial vertex
nonadjacent to x.

A simplicial order of a graph G is an enumeration v1 , v2 , . . . , vn of its vertices
such that vi is a simplicial vertex of G[{vi , vi+1 , . . . , vn }], 1 ≤ i ≤ n. Because

9.7 Chordal Graphs

237

induced subgraphs of chordal graphs are chordal, it follows directly from Theorem 9.21 that every chordal graph has a simplicial order. Conversely, if a graph
has a simplicial order, it is necessarily chordal (Exercise 9.7.3).
Corollary 9.22 A graph is chordal if and only if it has a simplicial order.



There is a linear-time algorithm due to Rose et al. (1976), and known as lexicographic breadth-ﬁrst search, for ﬁnding a simplicial order of a graph if one exists.
A brief description is given in Section 9.8.
Tree Representations
Besides the characterizations of chordal graphs given above in terms of simplicial decompositions and simplicial orders, chordal graphs may also be viewed as
intersection graphs of subtrees of a tree.
Theorem 9.23 A graph is chordal if and only if it is the intersection graph of a
family of subtrees of a tree.
Proof Let G be a chordal graph. By Theorem 9.20, G has a simplicial decomposition (V1 , V2 , . . . , Vk ). We prove by induction on k that G is the intersection graph
of a family of subtrees T = {Tv : v ∈ V } of a tree T with vertex set {x1 , x2 , . . . , xk }
such that xi ∈ Tv for all v ∈ Vi . If k = 1, then G is complete and we set Tv := T for
all v ∈ V . If k ≥ 2, let G = (V  , E  ) be the chordal graph with simplicial decomposition (V1 , V2 , . . . , Vk−1 ). By induction, G is the intersection graph of a family
of subtrees T  = {Tv : v ∈ V  } of a tree T  with vertex set {x1 , x2 , . . . , xk−1 }. Let
Vj be a maximal clique of G such that Vj ∩ Vk = ∅. We form the tree T by adding
a new vertex xk adjacent to xj . For v ∈ Vj , we form the tree Tv by adding xk to
Tv and joining it to xj . For v ∈ V  \ Vj , we set Tv := Tv . Finally, for v ∈ Vk \ V  , we
set Tv := xk . It can be checked that G is the intersection graph of {Tv : v ∈ V }.
We leave the proof of the converse statement as an exercise (9.7.4).

We refer to the pair (T, T ) described in the proof of Theorem 9.23 as a tree
representation of the chordal graph G.

Exercises
9.7.1 Let G be a connected chordal graph which is not complete, and let S be a
clique cut of G. Show that the maximal cliques of the S-components of G are also
maximal cliques of G, and that every maximal clique of G is a maximal clique of
some S-component of G.
9.7.2 Show that a graph is chordal if it has a simplicial decomposition.
9.7.3 Show that a graph is chordal if it has a simplicial order.

238

9 Connectivity

9.7.4
a) Show that the intersection graph of a family of subtrees of a tree is a chordal
graph.
b) Represent the chordal graph of Figure 9.14 as the intersection graph of a family
of subtrees of a tree.
9.7.5
a) Let G be a chordal graph and v a simplicial vertex of G. Set X := N (v) ∪ {v}
and G := G − X, and let S  be a maximum stable set and K a minimum
clique covering of G . Show that:
i) S := S  ∪ {v} is a maximum stable set of G,
ii) K := K ∪ {X} is a minimum clique covering of G,
iii) |S| = |K|.
b) Describe a linear-time algorithm which accepts as input a simplicial order of
a chordal graph G and returns a maximum stable set and a minimum clique
covering of G.
——————————

9.8 Related Reading
Lexicographic Breadth-First Search
By Exercise 9.7.3b, a graph is chordal if and only if it has a simplicial order.
Breadth-ﬁrst search, with a special rule for determining the head of the queue, may
be used to ﬁnd a simplicial order of an input graph, if one exists. The rule, which
gives the procedure its name, involves assigning sequences of integers to vertices
and comparing them lexicographically to break ties. (Sequences of integers from
the set {1.2, . . . , n} may be thought of as words of a language whose alphabet
consists of n letters 1, 2, . . . , n, the ﬁrst letter being 1, the second letter 2, and
so on. A sequence S is lexicographically smaller than another sequence S  if S
appears before S  in a dictionary of that language.) If G happens to be chordal,
the sequence of vertices generated by this tree-search will be the converse of a
simplicial order.
We choose an arbitrary vertex of the input graph G as root, and denote the
vertex incorporated into the tree at time t by vt , the root being v1 . Each vertex v
of the graph is assigned a sequence S(v) of integers, initially the empty sequence.
When vertex vt enters the tree, for each v ∈ N (vt ) \ {v1 , v2 , . . . , vt−1 }, we modify
S(v) by appending to it the integer n − t + 1. The next vertex selected to enter
the tree is any vertex in the queue whose label is lexicographically largest.
Rose et al. (1976), who introduced lexicographic breadth-ﬁrst search (Lex
BFS), showed that it will ﬁnd a simplicial order of the input graph if there is
one. A very readable account of chordal graphs, including a proof of the validity
of Lex BFS, can be found in Golumbic (2004). In recent years, Lex BFS has been

9.8 Related Reading

239

used extensively in algorithms for recognizing various other classes of graphs (see,
for example, Corneil (2004)).
Tree-Decompositions
Due to their rather simple structure, chordal graphs can be recognized in polynomial time, as outlined above. Moreover, many N P-hard problems, such as Max
Stable Set, can be solved in polynomial time when restricted to chordal graphs
(see Exercise 9.7.5). A more general class of graphs for which polynomial-time
algorithms exist for such N P-hard problems was introduced by Robertson and
Seymour (1986).
Recall that by Theorem 9.23 every chordal graph G has a tree representation,
that is, an ordered pair (T, T ), where T is a tree and T := {Tv : v ∈ V } is a family
of subtrees of T such that Tu ∩ Tv = ∅ if and only if uv ∈ E. For an arbitrary
simple graph G, a tree-decomposition of G is an ordered pair (T, T ), where T is a
tree and T := {Tv : v ∈ V } is a family of subtrees of T such that Tu ∩ Tv = ∅ if
(but not necessarily only if) uv ∈ E. Equivalently, (T, T ) is a tree-decomposition
of a simple graph G if and only if G is a spanning subgraph of the chordal graph
with tree representation (T, T ).
Every simple graph G has the trivial tree-decomposition (T, T ), where T is an
arbitrary tree and Tv = T for all v ∈ V (the corresponding chordal graph being
Kn ). For algorithmic purposes, one is interested in ﬁner tree-decompositions, as
measured by a parameter called the width of the decomposition. A nontrivial treedecomposition of K2,3 is shown in Figure 9.16.
Tu
x

u

v

w

Tx

Ty

y
Tv

Tw

Fig. 9.16. A tree-decomposition of K2,3 , of width three

Let (T, {Tv : v ∈ V }) be a tree-decomposition of a graph G, where V (T ) = X
and V (Tv ) = Xv , v ∈ V . The dual of the hypergraph (X, {Xv : v ∈ V }) is the
hypergraph (V, {Vx : x ∈ X}), where Vx := {v ∈ V : x ∈ Xv }. For instance, if G is
a chordal graph, the sets Vx , x ∈ X, are the cliques in its simplicial decomposition.
The greatest cardinality of an edge of this dual hypergraph, max {|Vx | : x ∈ X}, is

240

9 Connectivity

called the width of the decomposition.1 The tree-decomposition of K2,3 shown in
Figure 9.16 has width three, the sets Vx , x ∈ X, being {u, x, y}, {v, x, y}, {w, x, y},
and {x, y}.
As another example, consider the tree-decomposition of the (3×3)-grid P3  P3
with vertex set {(i, j) : 1 ≤ i, j ≤ 3} shown in Figure 9.17. This tree-decomposition
has width four, all six sets Vx (the horizontal sets) being of cardinality four.
T T11T21T31T12
T22
T32
3
T13
2

T23

1
1

2

3

T33

Fig. 9.17. A tree-decomposition of the (3 × 3)-grid, of width four

In general, a graph may have many diﬀerent tree-decompositions. The treewidth of the graph is the minimum width among all tree-decompositions. Thus the
tree-width of a chordal graph is its clique number; in particular, every nontrivial
tree has tree-width two. Cycles also have tree-width two. More generally, one
can show that every series-parallel graph (deﬁned in Exercise 10.5.11) has treewidth at most three. The (n × n)-grid has tree-width n + 1; that this is an upper
bound follows from a generalization of the tree-decomposition given in Figure 9.17,
but establishing the lower bound is more diﬃcult (see Section 10.7). For graphs
in general, Arnborg et al. (1987) showed that computing the tree-width is an
N P-hard problem. On the other hand, there exists polynomial-time algorithm for
deciding whether a graph has tree-width at most k, where k is a ﬁxed integer
(Robertson and Seymour (1986)).
If a graph has a small tree-width, then it has a treelike structure, resembling
a ‘thickened’ tree, and this structure has enabled the development of polynomialtime algorithms for many N P-hard problems (see, for example, Arnborg and
Proskurowski (1989)). More signiﬁcantly, tree-decompositions have proved to be
a fundamental tool in the work of Robertson and Seymour on linkages and graph
minors (see Section 10.7).
1

Warning: the value of the width as deﬁned here is one greater than the standard
deﬁnition. This diﬀerence has no bearing on qualitative statements about tree-width,
many of which are of great signiﬁcance. On the other hand, as regards quantitative
statements, this is certainly the right deﬁnition from an aesthetic viewpoint.

9.8 Related Reading

241

A number of other width parameters have been studied, including the pathwidth (where the tree T is constrained to be a path), the branch-width, and the cutwidth. We refer the reader to one of the many surveys on this topic; for example,
Bienstock and Langston (1995), Reed (2003), or Bodlaender (2006).

10
Planar Graphs

Contents
10.1 Plane and Planar Graphs . . . . . . . . . . . . . . . . . . . . . . . . . 243
The Jordan Curve Theorem . . . . . . . . . . . . . . . . . . . . . . . . . 244
Subdivisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
10.2 Duality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
Faces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
Duals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252
Deletion–Contraction Duality . . . . . . . . . . . . . . . . . . . . . . 254
Vector Spaces and Duality . . . . . . . . . . . . . . . . . . . . . . . . . . 256
10.3 Euler’s Formula . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
10.4 Bridges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263
Bridges of Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
Unique Plane Embeddings . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
10.5 Kuratowski’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
Minors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
Wagner’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
Recognizing Planar Graphs . . . . . . . . . . . . . . . . . . . . . . . . . 271
10.6 Surface Embeddings of Graphs . . . . . . . . . . . . . . . . . . . . 275
Orientable and Nonorientable Surfaces . . . . . . . . . . . . . 276
The Euler Characteristic . . . . . . . . . . . . . . . . . . . . . . . . . . . 278
The Orientable Embedding Conjecture . . . . . . . . . . . . . . 280
10.7 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
Graph Minors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
Linkages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
Brambles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
Matroids and Duality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
Matroid Minors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284

10.1 Plane and Planar Graphs
A graph is said to be embeddable in the plane, or planar, if it can be drawn in
the plane so that its edges intersect only at their ends. Such a drawing is called

244

10 Planar Graphs

 of a planar graph G can
a planar embedding of the graph. A planar embedding G
 is the set of points
be regarded as a graph isomorphic to G; the vertex set of G
 is the set of lines representing the
representing the vertices of G, the edge set of G
 is incident with all the edges of G
 that contain it.
edges of G, and a vertex of G
 of a planar graph G as a
For this reason, we often refer to a planar embedding G
plane graph, and we refer to its points as vertices and its lines as edges. However,
 of G, in order
when discussing both a planar graph G and a plane embedding G
 points and its edges lines;
to distinguish the two graphs, we call the vertices of G
 we mean the point of G
 that represents the vertex v of
thus, by the point v of G
 we mean the line of G
 that represents the edge e of
G, and by the line e of G
G. Figure 10.1b depicts a planar embedding of the planar graph K5 \ e, shown in
Figure 10.1a.

(a)

(b)

Fig. 10.1. (a) The planar graph K5 \ e, and (b) a planar embedding of K5 \ e

The Jordan Curve Theorem
It is evident from the above deﬁnition that the study of planar graphs necessarily
involves the topology of the plane. We do not attempt here to be strictly rigorous in
topological matters, however, and are content to adopt a naive point of view toward
them. This is done so as not to obscure the combinatorial aspects of the theory,
which is our main interest. An elegant and rigorous treatment of the topological
aspects can be found in the book by Mohar and Thomassen (2001).
The results of topology that are especially relevant in the study of planar graphs
are those which deal with simple curves. By a curve, we mean a continuous image
of a closed unit line segment. Analogously, a closed curve is a continuous image of
a circle. A curve or closed curve is simple if it does not intersect itself (in other
words, if the mapping is one-to-one). Properties of such curves come into play in
the study of planar graphs because cycles in plane graphs are simple closed curves.
A subset of the plane is arcwise-connected if any two of its points can be
connected by a curve lying entirely within the subset. The basic result of topology
that we need is the Jordan Curve Theorem.

10.1 Plane and Planar Graphs

245

Theorem 10.1 The Jordan Curve Theorem
Any simple closed curve C in the plane partitions the rest of the plane into two
disjoint arcwise-connected open sets.

Although this theorem is intuitively obvious, giving a formal proof of it is quite
tricky. The two open sets into which a simple closed curve C partitions the plane
are called the interior and the exterior of C. We denote them by int(C) and ext(C),
and their closures by Int(C) and Ext(C), respectively (thus Int(C) ∩ Ext(C) = C).
The Jordan Curve Theorem implies that every arc joining a point of int(C) to a
point of ext(C) meets C in at least one point (see Figure 10.2).
C

int(C)

ext(C)

Fig. 10.2. The Jordan Curve Theorem

Figure 10.1b shows that the graph K5 \ e is planar. The graph K5 , on the other
hand, is not planar. Let us see how the Jordan Curve Theorem can be used to
demonstrate this fact.
Theorem 10.2 K5 is nonplanar.
Proof By contradiction. Let G be a planar embedding of K5 , with vertices
v1 , v2 , v3 , v4 , v5 . Because G is complete, any two of its vertices are joined by an
edge. Now the cycle C := v1 v2 v3 v1 is a simple closed curve in the plane, and the
vertex v4 must lie either in int(C) or in ext(C). Without loss of generality, we may
suppose that v4 ∈ int(C). Then the edges v1 v4 , v2 v4 , v3 v4 all lie entirely in int(C),
too (apart from their ends v1 , v2 , v3 ) (see Figure 10.3).
Consider the cycles C1 := v2 v3 v4 v2 , C2 := v3 v1 v4 v3 , and C3 := v1 v2 v4 v1 .
Observe that vi ∈ ext(Ci ), i = 1, 2, 3. Because vi v5 ∈ E(G) and G is a plane
graph, it follows from the Jordan Curve Theorem that v5 ∈ ext(Ci ), i = 1, 2, 3,
too. Thus v5 ∈ ext(C). But now the edge v4 v5 crosses C, again by the Jordan
Curve Theorem. This contradicts the planarity of the embedding G.

A similar argument can be used to establish that K3,3 is nonplanar, too (Exercise 10.1.1b).

246

10 Planar Graphs
C
v3

v1

int(C2 )
v4
int(C3 )

int(C1 )

ext(C)

v2
Fig. 10.3. Proof of the nonplanarity of K5

Subdivisions
Any graph derived from a graph G by a sequence of edge subdivisions is called
a subdivision of G or a G-subdivision. Subdivisions of K5 and K3,3 are shown in
Figure 10.4.

(a)

(b)

Fig. 10.4. (a) A subdivision of K5 , (b) a subdivision of K3,3

The proof of the following proposition is straightforward (Exercise 10.1.2).
Proposition 10.3 A graph G is planar if and only if every subdivision of G is
planar.

Because K5 and K3,3 are nonplanar, Proposition 10.3 implies that no planar
graph can contain a subdivision of either K5 or K3,3 . A fundamental theorem due
to Kuratowski (1930) states that, conversely, every nonplanar graph necessarily
contains a copy of a subdivision of one of these two graphs. A proof of Kuratowski’s
Theorem is given in Section 10.5.
As mentioned in Chapter 1 and illustrated in Chapter 3, one may consider
embeddings of graphs on surfaces other than the plane. We show in Section 10.6

10.1 Plane and Planar Graphs

247

that, for every surface S, there exist graphs which are not embeddable on S.
Every graph can, however, be embedded in the 3-dimensional euclidean space R3
(Exercise 10.1.7).
Planar graphs and graphs embeddable on the sphere are one and the same. To
see this, we make use of a mapping known as stereographic projection. Consider
a sphere S resting on a plane P , and denote by z the point that is diametrically
opposite the point of contact of S and P . The mapping π : S \{z} → P , deﬁned by
π(s) = p if and only if the points z, s, and p are collinear, is called a stereographic
projection from z; it is illustrated in Figure 10.5.

z
s

p

Fig. 10.5. Stereographic projection

Theorem 10.4 A graph G is embeddable on the plane if and only if it is embeddable on the sphere.
 on the sphere. Choose a point z of
Proof Suppose that G has an embedding G


the sphere not in G. Then the image of G under stereographic projection from z
is an embedding of G on the plane. The converse is proved similarly.

On many occasions, it is advantageous to consider embeddings of planar graphs
on the sphere; one instance is provided by the proof of Proposition 10.5 in the next
section.

Exercises
10.1.1 Show that:
a) every proper subgraph of K3,3 is planar,
b) K3,3 is nonplanar.
10.1.2 Show that a graph is planar if and only if every subdivision of the graph
is planar.

248

10 Planar Graphs

10.1.3
a) Show that the Petersen graph contains a subdivision of K3,3 .
b) Deduce that the Petersen graph is nonplanar.
10.1.4
a) Let G be a planar graph, and let e be a link of G. Show that G / e is planar.
b) Is the converse true?
10.1.5 Let G be a simple nontrivial graph in which each vertex, except possibly one, has degree at least three. Show, by induction on n, that G contains a
subdivision of K4 .
10.1.6 Find a planar embedding of the graph in Figure 10.6 in which each edge is
a straight line segment.
(Wagner (1936) proved that every simple planar graph admits such an embedding.)

Fig. 10.6. Find a straight-line planar embedding of this graph (Exercise 10.1.6)

10.1.7 A k-book is a topological subspace of R3 consisting of k unit squares, called
its pages, that have one side in common, called its spine, but are pairwise disjoint
otherwise. Show that any graph G is embeddable in R3 by showing that it is
embeddable in a k-book, for some k.
 of a (not necessarily planar) graph G in the plane.
10.1.8 Consider a drawing G

 Each such
Two edges of G cross if they meet at a point other than a vertex of G.
point is called a crossing of the two edges. The crossing number of G, denoted by
cr(G), is the least number of crossings in a drawing of G in the plane. Show that:
a) cr(G) = 0 if and only if G is planar,
b) cr(K5 ) = cr(K3,3 ) = 1,
c) cr(P10 ) = 2, where P10 is the Petersen graph,
d) cr(K6 ) = 3.

10.2 Duality

10.1.9 Show that cr(Kn )/

n
4

249

is a monotonically increasing function of n.

10.1.10 A graph G is crossing-minimal if cr(G \ e) < cr(G) for all e ∈ E. Show
that every nonplanar edge-transitive graph is crossing-minimal.
10.1.11 A thrackle is a graph embedded in the plane in such a way that any two
edges intersect exactly once (possibly at an end). Such an embedding is called a
thrackle embedding. Show that:
a) every tree has a thrackle embedding,
b) the 4-cycle has no thrackle embedding,
c) the triangle and every cycle of length ﬁve or more has a thrackle embedding.
————— —————
10.1.12 Show that every simple graph can be embedded in R3 in such a way that:
a) each vertex lies on the curve {(t, t2 , t3 ) : t ∈ R},
b) each edge is a straight line segment.

(C. Thomassen)

10.2 Duality
Faces
A plane graph G partitions the rest of the plane into a number of arcwise-connected
open sets. These sets are called the faces of G. Figure 10.7 shows a plane graph
with ﬁve faces, f1 , f2 , f3 , f4 , and f5 . Each plane graph has exactly one unbounded
face, called the outer face. In the plane graph of Figure 10.7, the outer face is
f1 . We denote by F (G) and f (G), respectively, the set of faces and the number
of faces of a plane graph G. The notion of a face applies also to embeddings of
graphs on other surfaces.
v1

f1

f2

e6
v7

e8

e9

e2

v6

v3
f3

f5
e5

v2

e1

e10

e7

e3

f4
v5

e4

v4

Fig. 10.7. A plane graph with ﬁve faces

250

10 Planar Graphs

The boundary of a face f is the boundary of the open set f in the usual
topological sense. A face is said to be incident with the vertices and edges in its
boundary, and two faces are adjacent if their boundaries have an edge in common.
In Figure 10.7, the face f1 is incident with the vertices v1 , v2 , v3 , v4 , v5 and the
edges e1 , e2 , e3 , e4 , e5 ; it is adjacent to the faces f3 , f4 , f5 .
We denote the boundary of a face f by ∂(f ). The rationale for this notation
becomes apparent shortly, when we discuss duality. The boundary of a face may
be regarded as a subgraph. Moreover, when there is no scope for confusion, we use
the notation ∂(f ) to denote the edge set of this subgraph.
Proposition 10.5 Let G be a planar graph, and let f be a face in some planar
embedding of G. Then G admits a planar embedding whose outer face has the same
boundary as f .
 of G on the sphere; such an embedding exists
Proof Consider an embedding G
 corresponding to f . Let z be
by virtue of Theorem 10.4. Denote by f the face of G


 under stereographic
a point in the interior of f , and let π(G) be the image of G

projection from z. Clearly π(G) is a planar embedding of G with the desired
property.

By the Jordan Curve Theorem, a planar embedding of a cycle has exactly
two faces. In the ensuing discussion of plane graphs, we assume, without proof, a
number of other intuitively obvious statements concerning their faces. We assume,
for example, that a planar embedding of a tree has just one face, and that each
face boundary in a connected plane graph is itself connected. Some of these facts
rely on another basic result of plane topology, known as the Jordan–Schönﬂiess
Theorem.
Theorem 10.6 The Jordan–Schönfliess Theorem
Any homeomorphism of a simple closed curve in the plane onto another simple
closed curve can be extended to a homeomorphism of the plane.

One implication of this theorem is that any point p on a simple closed curve C
can be connected to any point not on C by means of a simple curve which meets C
only in p. We refer the reader to Mohar and Thomassen (2001) for further details.
A cut edge in a plane graph has just one incident face, but we may think of the
edge as being incident twice with the same face (once from each side); all other
edges are incident with two distinct faces. We say that an edge separates the faces
incident with it. The degree, d(f ), of a face f is the number of edges in its boundary
∂(f ), cut edges being counted twice. In Figure 10.7, the edge e9 separates the faces
f2 and f3 and the edge e8 separates the face f5 from itself; the degrees of f3 and
f5 are 6 and 5, respectively.
Suppose that G is a connected plane graph. To subdivide a face f of G is to
add a new edge e joining two vertices on its boundary in such a way that, apart
from its endpoints, e lies entirely in the interior of f . This operation results in a
plane graph G + e with exactly one more face than G; all faces of G except f are

10.2 Duality

251

f1

e
f
f2

Fig. 10.8. Subdivision of a face f by an edge e

also faces of G + e, and the face f is replaced by two new faces, f1 and f2 , which
meet in the edge e, as illustrated in Figure 10.8.
In a connected plane graph the boundary of a face can be regarded as a closed
walk in which each cut edge of the graph that lies in the boundary is traversed
twice. This is clearly so for plane trees, and can be established in general by induction on the number of faces (Exercise 10.2.2.) In the plane graph of Figure 10.7,
for instance,
∂(f3 ) = v1 e1 v2 e2 v3 e10 v5 e7 v6 e6 v1 e9 v1 and ∂(f5 ) = v1 e6 v6 e8 v7 e8 v6 e7 v5 e5 v1
Moreover, in the case of nonseparable graphs, these boundary walks are simply
cycles, as was shown by Whitney (1932c).
Theorem 10.7 In a nonseparable plane graph other than K1 or K2 , each face is
bounded by a cycle.
Proof Let G be a nonseparable plane graph. Consider an ear decomposition
G0 , G1 , . . . , Gk of G, where G0 is a cycle, Gk = G, and, for 0 ≤ i ≤ k − 2,
Gi+1 := Gi ∪ Pi is a nonseparable plane subgraph of G, where Pi is an ear of Gi .
Since G0 is a cycle, the two faces of G0 are clearly bounded by cycles. Assume,
inductively, that all faces of Gi are bounded by cycles, where i ≥ 0. Because Gi+1
is a plane graph, the ear Pi of Gi is contained in some face f of Gi . (More precisely,
Gi+1 is obtained from Gi by subdividing the face f by an edge joining the ends
of Pi and then subdividing that edge by inserting the internal vertices of Pi .)
Each face of Gi other than f is a face of Gi+1 as well, and so, by the induction
hypothesis, is bounded by a cycle. On the other hand, the face f of Gi is divided
by Pi into two faces of Gi+1 , and it is easy to see that these, too, are bounded by
cycles.

One consequence of Theorem 10.7 is that all planar graphs without cut edges
have cycle double covers (Exercise 10.2.8). Another is the following.
Corollary 10.8 In a loopless 3-connected plane graph, the neighbours of any vertex lie on a common cycle.

252

10 Planar Graphs
e∗2
f2∗

e∗6
f5∗

e∗1

e∗9

e∗8

f3∗
e∗7

e∗10
e∗4

e∗5

f4∗
e∗3
f1∗

Fig. 10.9. The dual of the plane graph of Figure 10.7

Proof Let G be a loopless 3-connected plane graph and let v be a vertex of G.
Then G − v is nonseparable, so each face of G − v is bounded by a cycle, by
Theorem 10.7. If f is the face of G − v in which the vertex v was situated, the
neighbours of v lie on its bounding cycle ∂(f ).

Duals
Given a plane graph G, one can deﬁne a second graph G∗ as follows. Corresponding
to each face f of G there is a vertex f ∗ of G∗ , and corresponding to each edge e of
G there is an edge e∗ of G∗ . Two vertices f ∗ and g ∗ are joined by the edge e∗ in G∗
if and only if their corresponding faces f and g are separated by the edge e in G.
Observe that if e is a cut edge of G, then f = g, so e∗ is a loop of G∗ ; conversely,
if e is a loop of G, the edge e∗ is a cut edge of G∗ . The graph G∗ is called the dual
of G. The dual of the plane graph of Figure 10.7 is drawn in Figure 10.9.
In the dual G∗ of a plane graph G, the edges corresponding to those which lie
in the boundary of a face f of G are just the edges incident with the corresponding
vertex f ∗ . When G has no cut edges, G∗ has no loops, and this set is precisely the
trivial edge cut ∂(f ∗ ); that is,
∂(f ∗ ) = {e∗ : e ∈ ∂(f )}
It is for this reason that the notation ∂(f ) was chosen.
It is easy to see that the dual G∗ of a plane graph G is itself a planar graph;
in fact, there is a natural embedding of G∗ in the plane. We place each vertex f ∗
in the corresponding face f of G, and then draw each edge e∗ in such a way that
it crosses the corresponding edge e of G exactly once (and crosses no other edge
of G). This procedure is illustrated in Figure 10.10, where the dual is indicated by
heavy lines.
It is intuitively clear that we can always draw the dual as a plane graph in this
way, but we do not prove this fact. We refer to such a drawing of the dual as a
plane dual of the plane graph G.

10.2 Duality

253

Fig. 10.10. The plane graph of Figure 10.7 and its plane dual

Proposition 10.9 The dual of any plane graph is connected.
Proof Let G be a plane graph and G∗ a plane dual of G. Consider any two vertices
of G∗ . There is a curve in the plane connecting them which avoids all vertices of
G. The sequence of faces and edges of G traversed by this curve corresponds in G∗
to a walk connecting the two vertices.

Although deﬁned abstractly, it is often convenient to regard the dual G∗ of a
plane graph G as being itself a plane graph, embedded as described above. One
may then consider the dual G∗∗ of G∗ . When G is connected, it is not diﬃcult to
prove that G∗∗ ∼
= G (Exercise 10.2.4); a glance at Figure 10.10 indicates why this
is so.
It should be noted that isomorphic plane graphs may well have nonisomorphic
duals. For example, although the plane graphs in Figure 10.11 are isomorphic, their
duals are not: the plane graph shown in Figure 10.11a has two faces of degree three,
whereas that of Figure 10.11b has only one such face. Thus the notion of a dual
graph is meaningful only for plane graphs, and not for planar graphs in general.
We show, however (in Theorem 10.28) that every simple 3-connected planar graph
has a unique planar embedding (in the sense that its face boundaries are uniquely
determined) and hence has a unique dual.
The following relations are direct consequences of the deﬁnition of the dual G∗ .
v(G∗ ) = f (G), e(G∗ ) = e(G), and dG∗ (f ∗ ) = dG (f ) for all f ∈ F (G) (10.1)
The next theorem may be regarded as a dual version of Theorem 1.1.
Theorem 10.10 If G is a plane graph,

d(f ) = 2m
f ∈F

254

10 Planar Graphs

(a)

(b)

Fig. 10.11. Isomorphic plane graphs with nonisomorphic duals

Proof Let G∗ be the dual of G. By (10.1) and Theorem 1.1,


d(f ) =
d(f ∗ ) = 2e(G∗ ) = 2e(G) = 2m
f ∈F (G)



f ∗ ∈V (G∗ )

A simple connected plane graph in which all faces have degree three is called
a plane triangulation or, for short, a triangulation. The tetrahedron, the octahedron, and the icosahedron (depicted in Figure 1.14) are all triangulations. As a
consequence of (10.1) we have:
Proposition 10.11 A simple connected plane graph is a triangulation if and only
if its dual is cubic.

It is easy to show that every simple plane graph on three or more vertices is a
spanning subgraph of a triangulation (Exercise 10.2.5). On the other hand, as we
show in Section 10.3, no simple spanning supergraph of a triangulation is planar.
For this reason, triangulations are also known as maximal planar graphs. They
play an important role in the theory of planar graphs.
Deletion–Contraction Duality
 a plane embedding of G. For any edge e of G,
Let G be a planar graph and G
a plane embedding of G \ e can be obtained by simply deleting the line e from
 Thus, the deletion of an edge from a planar graph results in a planar graph.
G.
Although less obvious, the contraction of an edge of a planar graph also results in
a planar graph (Exercise 10.1.4b). Indeed, given any edge e of a planar graph G
 of G, the line e of G
 can be contracted to a single point
and a planar embedding G
(and the lines incident to its ends redrawn) so that the resulting plane graph is a
planar embedding of G / e.
The following two propositions show that the operations of contracting and
deleting edges in plane graphs are related in a natural way under duality.
Proposition 10.12 Let G be a connected plane graph, and let e be an edge of G
that is not a cut edge. Then
(G \ e)∗ ∼
= G∗ / e∗

10.2 Duality

255

Proof Because e is not a cut edge, the two faces of G incident with e are distinct;
denote them by f1 and f2 . Deleting e from G results in the amalgamation of f1
and f2 into a single face f (see Figure 10.12). Any face of G that is adjacent to f1
or f2 is adjacent in G \ e to f ; all other faces and adjacencies between them are
unaﬀected by the deletion of e. Correspondingly, in the dual, the two vertices f1∗
and f2∗ of G∗ which correspond to the faces f1 and f2 of G are now replaced by a
single vertex of (G \ e)∗ , which we may denote by f ∗ , and all other vertices of G∗
are vertices of (G \ e)∗ . Furthermore, any vertex of G∗ that is adjacent to f1∗ or
f2∗ is adjacent in (G \ e)∗ to f ∗ , and adjacencies between vertices of (G \ e)∗ other
than v are the same as in G∗ . The assertion follows from these observations. 

f1∗
e
e∗

f∗

f2∗

(a)

(b)

Fig. 10.12. (a) G and G∗ , (b) G \ e and G∗ / e∗

Dually, we have:
Proposition 10.13 Let G be a connected plane graph, and let e be a link of G.
Then
(G / e)∗ ∼
= G∗ \ e∗
Proof Because G is connected, G∗∗ ∼
= G (Exercise 10.2.4). Also, because e is
not a loop of G, the edge e∗ is not a cut edge of G∗ , so G∗ \ e∗ is connected. By
Proposition 10.12,
(G∗ \ e∗ )∗ ∼
= G∗∗ / e∗∗ ∼
= G/e
The proposition follows on taking duals.



We now apply Propositions 10.12 and 10.13 to show that nonseparable plane
graphs have nonseparable duals. This fact turns out to be very useful.
Theorem 10.14 The dual of a nonseparable plane graph is nonseparable.
Proof By induction on the number of edges. Let G be a nonseparable plane
graph. The theorem is clearly true if G has at most one edge, so we may assume

256

10 Planar Graphs

that G has at least two edges, hence no loops or cut edges. Let e be an edge of G.
Then either G \ e or G / e is nonseparable (Exercise 5.3.2). If G \ e is nonseparable,
so is (G \ e)∗ ∼
= G∗ / e∗ , by the induction hypothesis and Proposition 10.12. Applying Exercise 5.2.2b, we deduce that G∗ is nonseparable. The case where G / e
is nonseparable can be established by an analogous argument.

The dual of any plane graph is connected, and it follows from Theorem 10.14
that the dual of a loopless 2-connected plane graph is 2-connected. Furthermore,
one can show that the dual of a simple 3-connected plane graph is 3-connected
(Exercise 10.2.7).
The notion of plane duality can be extended to directed graphs. Let D be a
plane digraph, with underlying plane graph G. Consider a plane dual G∗ of G.
Each arc a of D separates two faces of G. As a is traversed from its tail to its
head, one of these faces lies to the left of a and one to its right. We denote these
two faces by la and ra , respectively; note that if a is a cut edge, la = ra . For
each arc a of D, we now orient the edge of G∗ that crosses it as an arc a∗ by
designating the end lying in la as the tail of a∗ and the end lying in ra as its head.
The resulting plane digraph D∗ is the directed plane dual of D. An example is
shown in Figure 10.13.

Fig. 10.13. An orientation of the triangular prism, and its directed plane dual

Vector Spaces and Duality
We have seen that the cycle and bond spaces are orthogonal complements (Exercise 2.6.4a). In the case of plane graphs, this relationship of orthogonality can also
be expressed in terms of duality, as we now explain. As usual in this context, we
identify cycles, trees, and cotrees with their edge sets.
We observed earlier that all duals are connected (Proposition 10.9). A similar
argument, based on the fact that the interior of a cycle in a plane graph is arcwiseconnected, establishes the following proposition.

10.2 Duality

257

Proposition 10.15 Let G be a plane graph, G∗ a plane dual of G, C a cycle of
G, and X ∗ the set of vertices of G∗ that lie in int(C). Then G∗ [X ∗ ] is connected.

For a subset S of E(G), we denote by S ∗ the subset {e∗ : e ∈ S} of E(G∗ ).
Theorem 10.16 Let G be a connected plane graph, and let G∗ be a plane dual of
G.
a) If C is a cycle of G, then C ∗ is a bond of G∗ .
b) If B is a bond of G, then B ∗ is a cycle of G∗ .
Proof a) Let C be a cycle of G, and let X ∗ denote the set of vertices of G∗ that
lie in int(C). Then C ∗ is the edge cut ∂(X ∗ ) in G∗ . By Proposition 10.15, the
subgraph of G∗ induced by X ∗ is connected. Likewise, the subgraph of G∗ induced
by V (G∗ ) \ X ∗ is connected. It follows from Theorem 2.15 that C ∗ is a bond of

G∗ . We leave part (b) (the converse of (a)) as an exercise (Exercise 10.2.9).
As a straightforward consequence of Theorem 10.16, we have:
Corollary 10.17 For any plane graph G, the cycle space of G is isomorphic to

the bond space of G∗ .
The relationship between cycles and bonds expressed in Theorem 10.16 may
be reﬁned by taking orientations into account and considering directed duals, as
deﬁned above. Let D be a plane digraph and D∗ its directed plane dual. For a
subset S of A(D), denote by S ∗ the subset {a∗ : a ∈ S} of A(D∗ ).
Theorem 10.18 Let D be a connected plane digraph and let D∗ be a plane directed
dual of D.
a) Let C be a cycle of D, with a prescribed sense of traversal. Then C ∗ is a bond
∂(X ∗ )of D∗ . Moreover the set of forward arcs of C corresponds to the outcut
∂ + (X ∗ ) and the set of reverse arcs of C to the incut ∂ − (X ∗ ).
b) Let B := ∂(X) be a bond of D. Then B ∗ is a cycle of D∗ . Moreover the outcut
∂ + (X) corresponds to the set of forward arcs of B ∗ and the incut ∂ − (X)
corresponds to the set of reverse arcs of B ∗ (with respect to a certain sense of

traversal of B ∗ ).
The proof of Theorem 10.18 is left to the reader (Exercise 10.2.13).

Exercises
10.2.1
a) Show that a graph is planar if and only if each of its blocks is planar.
b) Deduce that every minimal nonplanar graph is both simple and nonseparable.

258

10 Planar Graphs

10.2.2 Prove that the boundary of a face of a connected plane graph can be
regarded as a closed walk in which each cut edge of the graph lying in the boundary
is traversed twice.
10.2.3 Determine the duals of the ﬁve platonic graphs (Figure 1.14).
10.2.4 Let G be a plane graph. Show that G∗∗ ∼
= G if and only if G is connected.
10.2.5 Show that every simple connected plane graph on n vertices, where n ≥ 3,
is a spanning subgraph of a triangulation.
10.2.6 Let G be a triangulation on at least four vertices. Show that G∗ is a simple
nonseparable cubic plane graph.
10.2.7 Show that the dual of a simple 3-connected plane graph is both simple and
3-connected.
10.2.8 Show that every planar graph without cut edges has a cycle double cover.
10.2.9 Show that if B is a bond of a plane graph G, then B ∗ is a cycle of its
plane dual G∗ .
10.2.10
a) Show that the dual of an even plane graph is bipartite (and conversely).
b) A Hamilton bond of a connected graph G is a bond B such that both components of G \ B are trees. Let G be a plane graph which contains a Hamilton
cycle, and let C be (the edge set of) such a cycle. Show that C ∗ is a Hamilton
bond of G∗ .
10.2.11 Outerplanar Graph
 in which all vertices lie
A graph G is outerplanar if it has a planar embedding G
on the boundary of its outer face. An outerplanar graph equipped with such an
embedding is called an outerplane graph. Show that:
a) if G is an outerplane graph, then the subgraph of G∗ induced by the vertices
corresponding to the interior faces of G is a tree,
b) every simple 2-connected outerplanar graph other than K2 has a vertex of
degree two.
10.2.12 Let T be a spanning tree of a connected plane graph G. Show that (E \T )∗
is a spanning tree of G∗ .
10.2.13 Prove Theorem 10.18.
————— —————
10.2.14 A Halin graph is a graph H := T ∪ C, where T is a plane tree on at least
four vertices in which no vertex has degree two, and C is a cycle connecting the
leaves of T in the cyclic order determined by the embedding of T . Show that:

10.3 Euler’s Formula

259

a) every Halin graph is minimally 3-connected,
b) every Halin graph has a Hamilton cycle.
10.2.15 The medial graph of a plane graph G is the 4-regular graph M (G) with
vertex set E(G) in which two vertices are joined by k edges if, in G, they are
adjacent edges which are incident to k common faces (k = 0, 1, 2). (The medial
graph has a natural planar embedding.) Let G be a nonseparable plane graph.
Show that:
a) M (G) is a 4-regular planar graph,
b) M (G) ∼
= M (G∗ ).

10.3 Euler’s Formula
There is a simple formula relating the numbers of vertices, edges, and faces in
a connected plane graph. It was ﬁrst established for polyhedral graphs by Euler
(1752), and is known as Euler’s Formula.
Theorem 10.19 Euler’s Formula
For a connected plane graph G,
v(G) − e(G) + f (G) = 2

(10.2)

Proof By induction on f (G), the number of faces of G. If f (G) = 1, each edge of
G is a cut edge and so G, being connected, is a tree. In this case e(G) = v(G) − 1,
by Theorem 4.3, and the assertion holds. Suppose that it is true for all connected
plane graphs with fewer than f faces, where f ≥ 2, and let G be a connected plane
graph with f faces. Choose an edge e of G that is not a cut edge. Then G \ e is a
connected plane graph with f − 1 faces, because the two faces of G separated by
e coalesce to form one face of G \ e. By the induction hypothesis,
v(G \ e) − e(G \ e) + f (G \ e) = 2
Using the relations
v(G \ e) = v(G),

e(G \ e) = e(G) − 1,

and f (G \ e) = f (G) − 1

we obtain
v(G) − e(G) + f (G) = 2
The theorem follows by induction.



Corollary 10.20 All planar embeddings of a connected planar graph have the same
number of faces.

260

10 Planar Graphs

 be a planar embedding of a planar graph G. By Euler’s Formula
Proof Let G
(10.2), we have
 = e(G)
 − v(G)
 + 2 = e(G) − v(G) + 2
f (G)
 depends only on the graph G, and not on its
Thus the number of faces of G
embedding.

Corollary 10.21 Let G be a simple planar graph on at least three vertices. Then
m ≤ 3n − 6. Furthermore, m = 3n − 6 if and only if every planar embedding of G
is a triangulation.
Proof It clearly suﬃces to prove the corollary for connected graphs. Let G be a
 of
simple connected planar graph with n ≥ 3. Consider any planar embedding G
G. Because G is simple and connected, on at least three vertices, d(f ) ≥ 3 for all
 Therefore, by Theorem 10.10 and Euler’s Formula (10.2)
f ∈ F (G).

 = 3(m − n + 2)
d(f ) ≥ 3f (G)
(10.3)
2m =
)
f ∈F (G
or, equivalently,
m ≤ 3n − 6

(10.4)

Equality holds in (10.4) if and only if it holds in (10.3), that is, if and only if

d(f ) = 3 for each f ∈ F (G).

Corollary 10.22 Every simple planar graph has a vertex of degree at most ﬁve.
Proof This is trivial for n < 3. If n ≥ 3, then by Theorem 1.1 and Corollary 10.21,

δn ≤
d(v) = 2m ≤ 6n − 12
v∈V

It follows that δ ≤ 5.



We have already seen that K5 and K3,3 are nonplanar (Theorem 10.2 and
Exercise 10.1.1b). Here, we derive these two basic facts from Euler’s Formula (10.2).
Corollary 10.23 K5 is nonplanar.
Proof If K5 were planar, Corollary 10.21 would give
10 = e(K5 ) ≤ 3v(K5 ) − 6 = 9
Thus K5 must be nonplanar.
Corollary 10.24 K3,3 is nonplanar.



10.3 Euler’s Formula

261

Proof Suppose that K3,3 is planar and let G be a planar embedding of K3,3 .
Because K3,3 has no cycle of length less than four, every face of G has degree at
least four. Therefore, by Theorem 10.10, we have

d(f ) = 2e(G) = 18
4f (G) ≤
f ∈F

implying that f (G) ≤ 4. Euler’s Formula (10.2) now implies that
2 = v(G) − e(G) + f (G) ≤ 6 − 9 + 4 = 1


which is absurd.

Exercises
10.3.1 Show that the crossing number satisﬁes the inequality cr(G) ≥ m−3n+6,
provided that n ≥ 3.
10.3.2
a) Let G be a connected planar graph with girth k, where k ≥ 3. Show that
m ≤ k(n − 2)/(k − 2).
b) Deduce that the Petersen graph is nonplanar.
10.3.3 Deduce Euler’s Formula (10.2) from Exercise 10.2.12.
10.3.4
a) Show that the complement of a simple planar graph on at least eleven vertices
is nonplanar.
b) Find a simple planar graph on eight vertices whose complement is planar.
————— —————
10.3.5 A plane graph is face-regular if all of its faces have the same degree.
a) Characterize the plane graphs which are both regular and face-regular.
b) Show that exactly ﬁve of these graphs are simple and 3-connected. (They are
the platonic graphs.)
10.3.6 The thickness θ(G) of a graph G is the minimum number of planar graphs
whose union is G. (Thus θ(G) = 1 if and only if G is planar.)
a) Let G be a simple graph. Show that θ(G) ≥ m/(3n − 6) .
b) Deduce that θ(Kn ) ≥ (n + 1)/6 + 1 and show, using Exercise 10.3.4b, that
equality holds for all n ≤ 8.
(Beineke and Harary (1965) proved that equality holds for all n = 9, 10; Battle
et al. (1962) showed that θ(K9 ) = 3.)

262

10 Planar Graphs

c) Express the Turán graph T6,12 (deﬁned in Exercise 1.1.11) as the union of two
graphs, each isomorphic to the icosahedron.
d) Deduce from (b) and (c) that θ(K12 ) = 3.
10.3.7
a) Let G be a simple bipartite graph. Show that θ(G) ≥ m/(2n − 4) .
b) Deduce that θ(Km,n ) ≥ mn/(2m + 2n − 4) .
(Beineke et al. (1964) showed that equality holds if mn is even. It is conjectured
that equality holds in all cases.)
10.3.8 A plane graph is self-dual if it is isomorphic to its dual.
a) Show that:
i) if G is self-dual, then e(G) = 2v(G) − 2,
ii) the four plane graphs shown in Figure 10.14 are self-dual.
b) Find four inﬁnite families of self-dual plane graphs of which those four graphs
are members.
(Smith and Tutte (1950) proved that every self-dual plane graph belongs to one
of four inﬁnite families.)

Fig. 10.14. Self-dual plane graphs

10.3.9
a) Let S be a set of n points in the plane, where n ≥ 3 and the distance between
any two points of S is at least one. Show that no more than 3n − 6 pairs of
points of S can be at distance exactly one.
(P. Erdős)
b) By considering the triangular lattice (shown in Figure 1.27) ﬁnd, for each
positive integer k, a set S of 3k 2 + 3k + 1 points in the plane such that the
distance between any two points of S is at least one, and such that 9k 2 + 3k
pairs of points of S are at distance exactly one.
10.3.10 The Sylvester–Gallai Theorem
a) Let L be a ﬁnite set of lines in the plane, no two of which are parallel and
not all of which are concurrent. Using Euler’s Formula (10.2), show that some
point is the point of intersection of precisely two lines of L.
b) Deduce from (a) the Sylvester–Gallai Theorem: if S is a ﬁnite set of points in
the plane, not all of which are collinear, there is a line that contains precisely
two points of S.
(E. Melchior)

10.4 Bridges

263

10.4 Bridges
In the study of planar graphs, certain subgraphs, called bridges, play an important
role. We now deﬁne these subgraphs and discuss their properties.
Let H be a proper subgraph of a connected graph G. The set E(G) \ E(H)
may be partitioned into classes as follows.
 For each component F of G − V (H), there is a class consisting of the edges of
F together with the edges linking F to H.
 Each remaining edge e (that is, one which has both ends in V (H)) deﬁnes a
singleton class {e}.
The subgraphs of G induced by these classes are the bridges of H in G. It follows
immediately from this deﬁnition that bridges of H can intersect only in vertices
of H, and that any two vertices of a bridge of H are connected by a path in the
bridge that is internally disjoint from H. For a bridge B of H, the elements of
V (B) ∩ V (H) are called its vertices of attachment to H; the remaining vertices of
B are its internal vertices. A bridge is trivial if it has no internal vertices (that
is, if it is of the second type). In a connected graph, every bridge has at least
one vertex of attachment; moreover, in a nonseparable graph, every bridge has
at least two vertices of attachment. A bridge with k vertices of attachment is
called a k-bridge. Two bridges with the same vertices of attachment are equivalent
bridges. Figure 10.15 shows a variety of bridges of a cycle in a graph; edges of
diﬀerent bridges are distinguished by diﬀerent kinds of lines. Bridges B1 and B2
are equivalent 3-bridges; B3 and B6 are trivial bridges.

B1

B2
B5
B6

B3

B4

Fig. 10.15. Bridges of a cycle

264

10 Planar Graphs

Bridges of Cycles
We are concerned here with bridges of cycles, and all bridges are understood to
be bridges of a given cycle C. Thus, to avoid repetition, we abbreviate ‘bridge of
C’ to ‘bridge’ in the coming discussion.
The vertices of attachment of a k-bridge B with k ≥ 2 eﬀect a partition of
C into k edge-disjoint paths, called the segments of B. Two bridges avoid each
other if all the vertices of attachment of one bridge lie in a single segment of the
other bridge; otherwise, they overlap. In Figure 10.15, B2 and B3 avoid each other,
whereas B1 and B2 overlap, as do B3 and B4 . Two bridges B and B  are skew if
there are distinct vertices of attachment u, v of B, and u , v  of B  , which occur in
the cyclic order u, u , v, v  on C. In Figure 10.15, B3 and B4 are skew, whereas B1
and B2 are not.
Theorem 10.25 Overlapping bridges are either skew or else equivalent 3-bridges.
Proof Suppose that bridges B and B  overlap. Clearly, each must have at least
two vertices of attachment. If either B or B  is a 2-bridge, it is easily veriﬁed that
they must be skew. We may therefore assume that both B and B  have at least
three vertices of attachment.
If B and B  are not equivalent bridges, then B  has a vertex u of attachment
between two consecutive vertices of attachment u and v of B. Because B and
B  overlap, some vertex of attachment v  of B  does not lie in the segment of B
connecting u and v. It follows that B and B  are skew.
If B and B  are equivalent k-bridges, then k ≥ 3. If k ≥ 4, B and B  are skew;
if k = 3, they are equivalent 3-bridges.

B4

B3
B1

B2

Fig. 10.16. Bridges of a cycle in a plane graph

We now consider bridges of cycles in plane graphs. Suppose that G is a plane
graph and that C is a cycle in G. Because C is a simple closed curve in the plane,
each bridge of C in G is contained in one of the two regions Int(C) or Ext(C). A

10.4 Bridges

265

bridge contained in Int(C) is called an inner bridge, a bridge contained in Ext(C)
an outer bridge. In Figure 10.16, B1 and B2 are inner bridges, and B3 and B4 are
outer bridges.
Theorem 10.26 Inner (outer) bridges avoid one another.
Proof Let B and B  be inner bridges of a cycle C in a plane graph G. Suppose
that they overlap. By Theorem 10.25, they are either skew or equivalent 3-bridges.
In both cases, we obtain contradictions.
Case 1: B and B  are skew. By deﬁnition, there exist distinct vertices u, v in B and
u , v  in B  , appearing in the cyclic order u, u , v, v  on C. Let uP v be a path in B
and u P  v  a path in B  , both internally disjoint from C. Consider the subgraph
H := C ∪ P ∪ P  of G (see Figure 10.17a). Because G is plane, so is H. Let K
be the plane graph obtained from H by adding a vertex in ext(C) and joining
it to u, u , v, v  (see Figure 10.17b). Then K is a subdivision of K5 . But this is
impossible, K5 being nonplanar.
u
P
u

v
P

v
(a)

(b)

Fig. 10.17. Proof of Theorem 10.26, Case 1: (a) the subgraph H, (b) the subdivision K
of K5

Case 2: B and B  are equivalent 3-bridges. Denote by S := {v1 , v2 , v3 } their
common set of vertices of attachment. By Exercise 9.2.3, there exists a (v, S)-fan
F in B, for some internal vertex v of B; likewise, there exists a (v  , S)-fan F  in
B  , for some internal vertex v  of B  . Consider the subgraph H := F ∪ F  of G.
Because G is plane, so is H. Let K be the plane graph obtained from H by adding
a vertex in ext(C) and joining it to the three vertices of S. Then K is a subdivision
of K3,3 . But this is impossible, because K3,3 is nonplanar (see Figure 10.18).
We conclude that inner bridges avoid one another. Similarly, outer bridges
avoid one another.

It is convenient to visualize the above theorem in terms of the bridge-overlap
graph. Let G be a graph and let C be a cycle of G. The bridge-overlap graph of C
is the graph whose vertex set is the set of all bridges of C in G, two bridges being

266

10 Planar Graphs

v3

v1

v

v
v2
(a)

(b)

Fig. 10.18. Proof of Theorem 10.26, Case 2: (a) the subgraph H, (b) the subdivision K
of K3,3

adjacent if they overlap. Theorem 10.26 simply states that the bridge-overlap graph
of any cycle of a plane graph is bipartite. Thus, a necessary condition for a graph
to be planar is that the bridge-overlap graph of each of its cycles be bipartite. This
condition also suﬃces to guarantee planarity (Exercise 10.5.7).
Unique Plane Embeddings
Just as there is no unique way of representing graphs by diagrams, there is no
unique way of embedding planar graphs in the plane. Apart from the positions
of points representing vertices and the shapes of lines representing the edges, two
diﬀerent planar embeddings of the same planar graph may diﬀer in the incidence
relationships between their edge and face sets; they may even have diﬀerent facedegree sequences, as in Figure 10.11. We say that two planar embeddings of a
planar graph G are equivalent if their face boundaries (regarded as sets of edges)
are identical. A planar graph for which any two planar embeddings are equivalent is
said have an unique embedding in the plane. Using the theory of bridges developed
above, we show that every simple 3-connected planar graph is uniquely embeddable
in the plane; note that the graph of Figure 10.11 is not 3-connected. The notion
of a nonseparating cycle plays a crucial role in this proof.
A cycle is nonseparating if it has no chords and at most one nontrivial bridge.
Thus, in a loopless graph G which is not itself a cycle, a cycle C is nonseparating
if and only if it is an induced subgraph of G and G − V (C) is connected. In
the case of simple 3-connected plane graphs, Tutte (1963) proved that facial and
nonseparating cycles are one and the same.
Theorem 10.27 A cycle in a simple 3-connected plane graph is a facial cycle if
and only if it is nonseparating.
Proof Let G be a simple 3-connected plane graph and let C be a cycle of G.
Suppose, ﬁrst, that C is not a facial cycle of G. Then C has at least one inner

10.4 Bridges

267

bridge and at least one outer bridge. Because G is simple and connected, these
bridges are not loops. Thus either they are both nontrivial or at least one of them
is a chord. It follows that C is not a nonseparating cycle.
Now suppose that C is a facial cycle of G. By Proposition 10.5, we may assume
that C bounds the outer face of G, so all its bridges are inner bridges. By Theorem 10.26, these bridges avoid one another. If C had a chord xy, the set {x, y}
would be a vertex cut separating the internal vertices of the two xy-segments of C.
Likewise, if C had two nontrivial bridges, the vertices of attachment of one of these
bridges would all lie on a single xy-segment of the other bridge, and {x, y} would
be a vertex cut of G separating the internal vertices of the two bridges. In either
case, the 3-connectedness of G would be contradicted. Thus C is nonseparating.

A direct consequence of Theorem 10.27 is the following fundamental theorem,
due to Whitney (1933).
Theorem 10.28 Every simple 3-connected planar graph has a unique planar embedding.
Proof Let G be a simple 3-connected planar graph. By Theorem 10.27, the facial
cycles in any planar embedding of G are precisely its nonseparating cycles. Because
the latter are deﬁned solely in terms of the abstract structure of the graph, they
are the same for every planar embedding of G.

The following corollary is immediate.
Corollary 10.29 Every simple 3-connected planar graph has a unique dual graph.


Exercises
10.4.1 Let G1 and G2 be planar graphs whose intersection is isomorphic to K2 .
Show that G1 ∪ G2 is planar.
10.4.2 Let H be a subgraph of a graph G. Consider the binary relation ∼ on
E(G) \ E(H), where e1 ∼ e2 if there exists a walk W in G such that:



the ﬁrst and the last edges of W are e1 and e2 , respectively,
W is internally disjoint from H (that is, no internal vertex of W is a vertex of
H).

Show that:
a) the relation ∼ is an equivalence relation on E(G) \ E(H),
b) the subgraphs of G\E(H) induced by the equivalence classes under this equivalence relation are the bridges of H in G.
————— —————

268

10 Planar Graphs

10.4.3 A 3-polytope is the convex hull of a set of points in R3 which do not lie
on a common plane. Show that the polyhedral graph of such a polytope is simple,
planar, and 3-connected.
(Steinitz (1922) proved that, conversely, every simple 3-connected planar graph is
the polyhedral graph of some 3-polytope.)
10.4.4 Show that any 3-connected cubic plane graph on n vertices, where n ≥ 6,
may be obtained from one on n − 2 vertices by subdividing two edges in the
boundary of a face and joining the resulting new vertices by an edge subdividing
the face.
10.4.5 A rooting of a plane graph G is a triple (v, e, f ), where v is a vertex, called
the root vertex, e is an edge of G incident with v, called the root edge, and f is a
face incident with e, called the root face.
a) Show that the only automorphism of a simple 3-connected plane graph which
ﬁxes a given rooting is the identity automorphism.
b) Let G be a simple 3-connected planar graph. Deduce from (a) that:
i) aut(G) divides 4m,
ii) aut(G) = 4m if and only if G is one of the ﬁve platonic graphs.
(F. Harary and W.T. Tutte; L. Weinberg)

10.5 Kuratowski’s Theorem
Planarity being such a fundamental property, the problem of deciding whether a
given graph is planar is clearly of great importance. A major step towards this goal
is provided by the following characterization of planar graphs, due to Kuratowski
(1930).
Theorem 10.30 Kuratowski’s Theorem
A graph is planar if and only if it contains no subdivision of either K5 or K3,3 .
A subdivision of K5 or K3,3 is consequently called a Kuratowski subdivision.
We ﬁrst present a proof of Kuratowski’s Theorem due to Thomassen (1981),
and then explain how it gives rise to a polynomial-time decision algorithm for
planarity. Before proving the theorem, we reformulate it in terms of minors.
Minors
A minor of a graph G is any graph obtainable from G by means of a sequence of
vertex and edge deletions and edge contractions. Alternatively, consider a partition
(V0 , V1 , . . . , Vk ) of V such that G[Vi ] is connected, 1 ≤ i ≤ k, and let H be the
graph obtained from G by deleting V0 and shrinking each induced subgraph G[Vi ],
1 ≤ i ≤ k, to a single vertex. Then any spanning subgraph F of H is a minor of
G. For instance, K5 is a minor of the Petersen graph because it can be obtained
by contracting the ﬁve ‘spoke’ edges of the latter graph (see Figure 10.19).

10.5 Kuratowski’s Theorem

269

Fig. 10.19. Contracting the Petersen graph to K5

If F is a minor of G, we write F  G. By an F -minor of G, where F is an
arbitrary graph, we mean a minor of G which is isomorphic to F . It is important
to point out that any graph which contains an F -subdivision also has an F -minor:
to obtain F as a minor, one simply deletes the vertices and edges not in the
subdivision, and then contracts each subdivided edge to a single edge. For example,
because the Petersen graph contains a K3,3 -subdivision (Exercise 10.1.3), it also
has a K3,3 -minor. Conversely, provided that F is a graph of maximum degree
three or less, any graph which has an F -minor also contains an F -subdivision
(Exercise 10.5.3a).
Wagner’s Theorem
As observed in Section 10.2, the deletion or contraction of an edge in a planar
graph results again in a planar graph. Thus we have:
Proposition 10.31 Minors of planar graphs are planar.



A minor which is isomorphic to K5 or K3,3 is called a Kuratowski minor. Because K5 and K3,3 are nonplanar, Proposition 10.31 implies that any graph which
has a Kuratowski minor is nonplanar. Wagner (1937) proved that the converse is
true.
Theorem 10.32 Wagner’s Theorem
A graph is planar if and only if it has no Kuratowski minor.
We remarked above that a graph which contains an F -subdivision also has an
F -minor. Thus Kuratowski’s Theorem implies Wagner’s Theorem. On the other
hand, because K3,3 has maximum degree three, any graph which has a K3,3 -minor
contains a K3,3 -subdivision (Exercise 10.5.3a). Furthermore, any graph which has
a K5 -minor necessarily contains a Kuratowski subdivision (Exercise 10.5.3b). Thus
Wagner’s Theorem implies Kuratowski’s Theorem, and the two are therefore equivalent.
It turns out to be slightly more convenient to prove Wagner’s variant of Kuratowski’s Theorem. Before doing so, we need to establish two simple lemmas.

270

10 Planar Graphs

Lemma 10.33 Let G be a graph with a 2-vertex cut {x, y}. Then each marked
{x, y}-component of G is isomorphic to a minor of G.

Proof Let H be an {x, y}-component of G, with marker edge e, and let xP y be
a path in another {x, y}-component of G. Then H ∪ P is a subgraph of G. But
H ∪ P is isomorphic to a subdivision of G + e, so G + e is isomorphic to a minor
of G.

Lemma 10.34 Let G be a graph with a 2-vertex cut {x, y}. Then G is planar if
and only if each of its marked {x, y}-components is planar.
Proof Suppose, ﬁrst, that G is planar. By Lemma 10.33, each marked {x, y}component of G is isomorphic to a minor of G, hence is planar by Proposition 10.31.
Conversely, suppose that G has k marked {x, y}-components each of which is
planar. Let e denote their common marker edge. Applying Exercise 10.4.1 and
induction on k, it follows that G + e is planar, hence so is G.

In view of Lemmas 10.33 and 10.34, it suﬃces to prove Wagner’s Theorem for 3connected graphs. It remains, therefore, to show that every 3-connected nonplanar
graph has either a K5 -minor or a K3,3 -minor. We present an elegant proof of this
statement. It is due to Thomassen (1981), and is based on his Theorem 9.10.
Theorem 10.35 Every 3-connected nonplanar graph has a Kuratowski minor.
Proof Let G be a 3-connected nonplanar graph. We may assume that G is simple.
Because all graphs on four or fewer vertices are planar, we have n ≥ 5. We proceed
by induction on n. By Theorem 9.10, G contains an edge e = xy such that H :=
G / e is 3-connected. If H is nonplanar, it has a Kuratowski minor, by induction.
Since every minor of H is also a minor of G, we deduce that G too has a Kuratowski
minor. So we may assume that H is planar.
 of H. Denote by z the vertex of H formed
Consider a plane embedding H
by contracting e. Because H is loopless and 3-connected, by Corollary 10.8 the
 − z. Denote by
neighbours of z lie on a cycle C, the boundary of some face f of H
Bx and By , respectively, the bridges of C in G \ e that contain the vertices x and
y.
Suppose, ﬁrst, that Bx and By avoid each other. In this case, Bx and By can
 − z in such a way that the vertices x and y belong
be embedded in the face f of H
 − z) ∪ B
x ∪ B
y (see Figure 10.20).
to the same face of the resulting plane graph (H
The edge xy can now be drawn in that face so as to obtain a planar embedding of
G itself, contradicting the hypothesis that G is nonplanar.
It follows that Bx and By do not avoid each other, that is, they overlap. By
Theorem 10.25, they are therefore either skew or else equivalent 3-bridges. In
the former case, G has a K3,3 -minor; in the latter case, G has a K5 -minor (see
Figure 10.21).

We note that the same proof serves to show that every simple 3-connected
planar graph admits a convex embedding, that is, a planar embedding all of whose

10.5 Kuratowski’s Theorem

By
x

By

y

x

Bx

271

y

Bx

Fig. 10.20. A planar embedding of G (Bx and By avoid each other)

x

y

(a)

x

y

(b)

Fig. 10.21. (a) A K3,3 -minor (Bx and By skew), (b) a K5 -minor (Bx and By equivalent
3-bridges)

faces are bounded by convex polygons. All that is needed is a bit more care in
placing the bridges Bx and By , and the edge e = xy, in the face f (Exercise
10.5.5).
There are several other interesting characterizations of planar graphs, all of
which can be deduced from Kuratowski’s Theorem (see Exercises 10.5.7, 10.5.8,
and 10.5.9).
Recognizing Planar Graphs
There are many practical situations in which it is important to decide whether a
given graph is planar, and if so, to ﬁnd a planar embedding of the graph. In the
layout of printed circuits, for example, one is interested in knowing if a particular
electrical network is planar.
It is easy to deduce from Lemma 10.34 that a graph is planar if and only
if each of its 3-connected components is planar. Thus the problem of deciding
whether a given graph is planar can be solved by considering each 3-connected
component separately. The proof of Wagner’s Theorem presented above can be

272

10 Planar Graphs

transformed without diﬃculty into a polynomial-time algorithm for determining
whether a given 3-connected graph is planar. The idea is as follows.
First, the input graph is contracted, one edge at a time, to a complete graph
on four vertices (perhaps with loops and multiple edges) in such a way that all
intermediate graphs are 3-connected. This contraction phase can be executed in
polynomial time by proceeding as indicated in the proof of Theorem 9.10. The
resulting four-vertex graph is then embedded in the plane. The contracted edges
are now expanded one by one (in reverse order). At each stage of this expansion
phase, one of two eventualities may arise: either the edge can be expanded while
preserving planarity, and the algorithm proceeds to the next contracted edge, or
else two bridges are found which overlap, yielding a Kuratowski minor. In the
second eventuality, the algorithm outputs one of these nonplanar minors, thereby
certifying that the input graph is nonplanar. If, on the other hand, all contracted
edges are expanded without encountering overlapping bridges, the algorithm outputs a planar embedding of G.
Algorithm 10.36

planarity recognition and embedding

Input: a 3-connected graph G on four or more vertices
Output: a Kuratowski minor of G or a planar embedding of G
1: set i := 0 and G0 := G
Contraction Phase:
2: while i < n − 4 do
3:
ﬁnd a link ei := xi yi of Gi such that Gi /ei is 3-connected
4:
set Gi+1 := Gi /ei
5:
replace i by i + 1
6: end while
Expansion Phase:
 n−4 of the four-vertex graph Gn−4
7: ﬁnd a planar embedding G
8: set i := n − 4
9: while i > 0 do
 i − zi that includes all the neighbours of zi
10:
let Ci be the facial cycle of G

 i resulting from the contraction
in Gi , where zi denotes the vertex of G
of the edge ei−1 of Gi−1
11:
let Bi and Bi , respectively, denote the bridges of Ci containing the vertices xi−1 and yi−1 in the graph obtained from Gi−1 by deleting ei−1 and
all other edges linking xi−1 and yi−1
12:
if Bi and Bi are skew then
13:
ﬁnd a K3,3 -minor K of Gi−1
14:
return K
15:
end if
16:
if Bi and Bi are equivalent 3-bridges then
17:
ﬁnd a K5 -minor K of Gi−1
18:
return K
19:
end if
20:
if Bi and Bi avoid each other then

10.5 Kuratowski’s Theorem
21:
22:
23:
24:
25:

273

 i of Gi to a planar embedding G
 i−1 of
extend the planar embedding G
Gi−1
replace i by i − 1
end if
end while
0
return G

Each step in the contraction phase and each step in the expansion phase can
be executed in polynomial time. It follows that the problem of deciding whether a
graph is planar belongs to P. There is, in fact, a linear-time planarity recognition
algorithm, due to Hopcroft and Tarjan (1974). There also exist eﬃcient planarity
algorithms based on the characterization of planarity in terms of the bridge-overlap
graph given in Exercise 10.5.7; for details, see Bondy and Murty (1976).

Exercises
10.5.1 Show that a simple graph has a K3 -minor if and only if it contains a cycle.
10.5.2 Show that the (3 × 3)-grid has a K4 -minor.
10.5.3
a) Let F be a graph with maximum degree at most three. Show that a graph has
an F -minor if and only if it contains an F -subdivision.
b) Show that any graph which has a K5 -minor contains a Kuratowski subdivision.
10.5.4 Consider the two 3-connected graphs shown in Figure 10.22. In each case,
the contraction of the edge 12 results in a graph that is 3-connected and planar.
Obtain a planar embedding of this resulting graph, and apply the Planarity Recognition and Embedding Algorithm (10.36) to either obtain a planar embedding of
the given graph or else ﬁnd a Kuratowski minor of the graph.
————— —————
10.5.5 Prove that every simple 3-connected planar graph admits a convex planar
embedding.
10.5.6 Let G be a simple graph. A straight-line embedding of G is an embedding
of G in the plane in which each edge is a straight-line segment. The rectilinear
crossing number of G, denoted by cr(G) is the minimum number of crossings in a
straight-line embedding of G.
a) Show that:
i) cr(G) ≤ cr(G),
ii) if cr(G) = 1, then cr(G) = 1.

274

10 Planar Graphs
8

1

8

1

7

2

7

2

6

3

6

3

5

4
G1

5

4
G2

Fig. 10.22. Apply Algorithm 10.36 to these graphs (Exercise 10.5.4)

(Bienstock and Dean (1993) have shown that cr(G) = cr(G) if G is simple
and cr(G) ≤ 3. They have also given examples of graphs G with cr(G) = 4 <
cr(G).)
b) Show that cr(Km,n ) ≤ m/2(m − 1)/2n/2(n − 1)/2.
(It was conjectured by P. Turán that this bound is best possible.)
10.5.7 Using Kuratowski’s Theorem (10.30), show that a graph is planar if and
only if the bridge-overlap graph of each cycle is bipartite.
(W.T. Tutte)
10.5.8 A basis of the cycle space of a graph is a 2-basis if each member of the
basis is a cycle of the graph, and each edge of the graph lies in at most two of
these cycles.
a) Show that:
i) the cycle space of any planar graph has a 2-basis,
ii) the cycle spaces of K5 and K3,3 do not have 2-bases.
b) A theorem due to MacLane (1937) states that a graph is planar if and only if
its cycle space has a 2-basis. Deduce MacLane’s Theorem from Kuratowski’s
Theorem (10.30).
10.5.9 A graph H is called an algebraic dual of a graph G if there is a bijection
φ : E(G) → E(H) such that a subset C of E(G) is a cycle of G if and only if φ(C)
is a bond of H.
a) Show that:
i) every planar graph has an algebraic dual,
ii) K5 and K3,3 do not have algebraic duals.
b) A theorem due to Whitney (1932c) states that a graph is planar if and only
if it has an algebraic dual. Deduce Whitney’s Theorem from Kuratowski’s
Theorem (10.30).
10.5.10 k-Sum
Let G1 and G2 be two graphs whose intersection G1 ∩ G2 is a complete graph on

10.6 Surface Embeddings of Graphs

275

k vertices. The graph obtained from their union G1 ∪ G2 by deleting the edges of
G1 ∩ G2 is called the k-sum of G1 and G2 .
a) Show that if G1 and G2 are planar and k = 0, 1, or 2, then the k-sum of G1
and G2 is also planar.
b) Express the nonplanar graph K3,3 as a 3-sum of two planar graphs.
10.5.11 Series-Parallel Graph
A series extension of a graph is the subdivision of a link of the graph; a parallel
extension is the addition of a new link joining two adjacent vertices. A seriesparallel graph is one that can be obtained from K2 by a sequence of series and
parallel extensions.
a) Show that a series-parallel graph has no K4 -minor.
b) By applying Exercise 10.1.5, deduce that a graph has no K4 -minor if and only
if it can be obtained from K1 , the loop graph L1 (a loop incident with a single
vertex), and the family of series-parallel graphs, by means of 0-sums, 1-sums,
and 2-sums.
(G.A. Dirac)
10.5.12 Show that a graph is outerplanar if and only if it has neither a K4 -minor
nor a K2,3 -minor.
10.5.13 Excluded K3,3 -Minor
Show that:
a) every 3-connected nonplanar graph on six or more vertices has a K3,3 -minor,
b) any graph with no K3,3 -minor can be obtained from the family of planar graphs
and K5 by means of 0-sums, 1-sums, and 2-sums. (D.W. Hall; K. Wagner)
10.5.14 Excluded K5 -Minor
Show that:
a) the Wagner graph, depicted in Figure 10.23, has no K5 -minor,
b) if G1 and G2 are two graphs, each of which is either a planar graph or the
Wagner graph, then no 0-sum, 1-sum, 2-sum, or 3-sum of G1 and G2 has a
K5 -minor.
(Wagner (1936) showed that every 4-connected nonplanar graph has a K5 -minor
and deduced the converse of (b), namely that any graph with no K5 -minor can
be obtained from the family of planar graphs and the Wagner graph by means of
0-sums, 1-sums, 2-sums, and 3-sums.)

10.6 Surface Embeddings of Graphs
During the nineteenth century, in their attempts to discover generalizations of
Euler’s Formula (10.2) and the Four-Colour Conjecture (discussed in the next
chapter), graph theorists were led to the study of embeddings of graphs on surfaces

276

10 Planar Graphs

Fig. 10.23. The Wagner graph

other than the plane and the sphere. In recent years, embeddings have been used
to investigate a wide variety of problems in graph theory, and have proved to be
an essential tool in the study of an important graph-theoretic parameter, the treewidth, whose theory was developed in an extensive series of papers by N. Robertson
and P. D. Seymour (see Sections 9.8 and 10.7). The books by Bonnington and
Little (1995), Fréchet and Fan (2003), Gross and Tucker (1987), and Mohar and
Thomassen (2001) have excellent accounts of the theory of embeddings of graphs
on surfaces. We present here a brief account of some of the basic notions and results
of the subject, without proofs, and without making any attempt to be rigorous.
Orientable and Nonorientable Surfaces
A surface is a connected 2-dimensional manifold. Apart from the plane and the
sphere, examples of surfaces include the cylinder, the Möbius band, and the torus.
The cylinder may be obtained by gluing together two opposite sides of a rectangle,
the Möbius band by gluing together two opposite sides of a rectangle after making
one half-twist, and the torus by gluing together the two open ends of a cylinder.
The Möbius band and the torus are depicted in Figure 10.24. (Drawings from
Crossley (2005), courtesy Martin Crossley.)
There are two basic types of surface: those which are orientable and those
which are nonorientable. To motivate the distinction between these two types,
let us consider the Möbius band. First note that, unlike what the physical model
suggests, the Möbius band has no ‘thickness’. Moreover, unlike the cylinder, it is
‘one-sided’. Now consider a line running along the middle of a Möbius band, and
imagine an ant crawling on the surface along it. After one complete revolution,
the ant would return to where it started from. However, it would have the curious
experience of ﬁnding its ‘left’ and ‘right’ reversed; those points of the surface
which were to the left of the ant at the beginning would now be to its right:
it is not possible to ‘globally’ distinguish left from right on the Möbius band.
Surfaces which have this property are said to be nonorientable; all other surfaces
are orientable. The plane, the cylinder, the sphere, and the torus are examples of
orientable surfaces.

10.6 Surface Embeddings of Graphs

(a)

277

(b)

Fig. 10.24. (a) The Möbius band, and (b) the torus

A surface is closed if it is bounded but has no boundary. The Möbius band has
a boundary which is homeomorphic (that is, continuously deformable) to a circle
and, hence, is not a closed surface. The plane is clearly not bounded, hence is
not a closed surface either. The simplest closed surface is the sphere. Other closed
surfaces are sometimes referred to as higher surfaces. Starting with the sphere, all
higher surfaces can be constructed by means of two operations.
Let S be a sphere, let D1 and D2 be two disjoint discs of equal radius on
S, and let H be a cylinder of the same radius as D1 and D2 . The operation of
adding a handle to S at D1 and D2 consists of cutting out D1 and D2 from S
and then bending and attaching H to S in such a way that the rim of one of the
ends of H coincides with the boundary of D1 and the rim of the other end of H
coincides with the boundary of D2 . Any number of disjoint handles may be added
to S by selecting disjoint pairs of discs on S and adding a handle at each of those
pairs of discs. A sphere with k handles is the surface obtained from a sphere by
adding k handles; it is denoted by Sk , and the index k is its genus. The torus is
homeomorphic to a sphere with one handle, S1 . More generally, every orientable
surface is homeomorphic to a sphere with k handles for some k ≥ 0.
As mentioned above (see also Section 3.5), given any rectangle ABCD, one
may obtain a torus by identifying the side AB with the side DC and the side AD
with the side BC. More generally, any orientable surface may be constructed from
a suitable polygon by identifying its sides in a speciﬁed manner. For example,
the surface S2 , also known as the double torus, may be obtained by a suitable
identiﬁcation of the sides of an octagon (see Exercise 10.6.2).
We now turn to nonorientable surfaces. Let S be a sphere, let D be a disc on S,
and let B be a Möbius band whose boundary has the same length as the circumference of D. The operation of adding a cross-cap to S at D consists of attaching B to
S so that the boundaries of D and B coincide. Equivalently, this operation consists
of ‘sewing’ or ‘identifying’ every point on the boundary of D to the point of D that
is antipodal to it. Just as with handles, we may attach any number of cross-caps
to a sphere. The surface obtained from the sphere by attaching one cross-cap is

278

10 Planar Graphs

known as the projective plane and is the simplest nonorientable surface. A sphere
with k cross-caps is denoted by Nk , the index k being its cross-cap number. Every
closed nonorientable surface is homeomorphic to Nk for some k ≥ 1.
As with orientable closed surfaces, all nonorientable closed surfaces may be
represented by polygons, along with indications as to how their sides are to be
identiﬁed (although it is not possible to obtain physical models of these surfaces
in this way). The projective plane, for example, may be represented by a rectangle
ABCD in which the side AB is identiﬁed with the side CD (so that A coincides
with C and B with D) and the side AD is identiﬁed with the side CB. Equivalently,
the projective plane may be represented by a disc in which every point on the
boundary is identiﬁed with its antipodal point.
An important theorem of the topology of surfaces, known as the classiﬁcation
theorem for surfaces, states that every closed surface is homeomorphic to either
Sk or Nk , for a suitable value of k. One may, of course, obtain surfaces by adding
both handles and cross-caps to spheres. However, one does not produce any new
surfaces in this way. It turns out that the surface obtained from the sphere by
adding k > 0 handles and > 0 cross-caps is homeomorphic to N2k+ .
In Chapter 3, we presented embeddings of K7 and the Petersen graph on the
torus (see Figure 3.9). Embeddings of K6 and the Petersen graph on the projective
plane are shown in Figure 10.25.

(a)

(b)

Fig. 10.25. Embeddings on the projective plane of (a) K6 , and (b) the Petersen graph

Polygonal representations of surfaces are convenient for displaying embeddings
of graphs on surfaces of low genus or cross-cap number. However, for more complicated surfaces, such representations are unwieldy. Convenient algebraic and combinatorial schemes exist for describing embeddings on arbitrary surfaces.
The Euler Characteristic
 of a graph G on a surface Σ is a cellular embedding if each of
An embedding G
 is homeomorphic to the open disc. These
the arcwise-connected regions of Σ \ G
 and their number is denoted by f (G).

regions are the faces of G,

10.6 Surface Embeddings of Graphs

279

Consider, for example, the two embeddings of K4 on the torus shown in Figure 10.26. The ﬁrst embedding is cellular: it has two faces, bounded by the closed
walks 12341 and 124134231, respectively. The second embedding is not cellular,
because one of its faces is homeomorphic to a cylinder, bounded by the cycles 1231
and 1431.
1
4

1
2
4

2

3

3

(a)

(b)

Fig. 10.26. Two embeddings of K4 on the torus: (a) a cellular embedding, and (b) a
noncellular embedding

Most theorems of interest about embeddings are valid only for cellular embeddings. For this reason, all the embeddings that we discuss are assumed to be
cellular.
The Euler characteristic of a surface Σ, denoted c(Σ), is deﬁned by:

2 − 2k if Σ is homeomorphic to Sk
c(Σ) :=
2 − k if Σ is homeomorphic to Nk
Thus the Euler characteristics of the sphere, the projective plane, and the torus
are 2, 1, and 0, respectively. The following theorem is a generalization of Euler’s
Formula (10.2) for graphs embedded on surfaces.
 be an embedding of a connected graph G on a surface Σ.
Theorem 10.37 Let G
Then:
 − e(G)
 + f (G)
 = c(Σ)
v(G)



The following easy corollaries of Theorem 10.37 generalize Corollaries 10.20
and 10.21 to higher surfaces (Exercise 10.6.3).
Corollary 10.38 All embeddings of a connected graph on a given surface have the
same number of faces.

Corollary 10.39 Let G be a simple connected graph that is embeddable on a surface Σ. Then
m ≤ 3(n − c(Σ))



280

10 Planar Graphs

Fig. 10.27. Dual embeddings of K6 and the Petersen graph on the projective plane

Using Euler’s Formula for the sphere, we were able to show that K5 and K3,3
are not planar. Similarly, by using Corollary 10.39, one can show that for any
surface there are graphs that are not embeddable on that surface. For example,
K7 is not embeddable on the projective plane and K8 is not embeddable on the
torus (Exercise 10.6.4). On the other hand, K6 is embeddable on the projective
plane (see Figure 10.25a), as is K7 on the torus (see Figure 3.9a).
Duals of graphs embedded on surfaces may be deﬁned in the same way as
duals of plane graphs. It can be seen from Figure 10.27 that the dual of the
embedding of K6 shown in Figure 10.25a is the Petersen graph, embedded as
shown in Figure 10.25b. Likewise, the dual of the embedding of K7 shown in
Figure 3.9a is the Heawood graph (Exercise 10.6.1).
We proved in Section 9.2 that all faces of a loopless 2-connected plane graph
are bounded by cycles. The analogous statement for loopless 2-connected graphs
embedded on other surfaces is not true, as can be seen from the embeddings of K4
 of a graph G on a surface Σ
on the torus shown in Figure 10.26. An embedding G

is a circular embedding if all the faces of G are bounded by cycles.
The following conjecture is due to Jaeger (1988). It reﬁnes at the same time
the Circular Embedding Conjecture (3.10) and the Oriented Cycle Double Cover
Conjecture (3.12).

The Orientable Embedding Conjecture
Conjecture 10.40 Every loopless 2-connected graph has a circular embedding
on some orientable surface.

10.6 Surface Embeddings of Graphs

281

Exercises
10.6.1 Show that the dual of the embedding of K7 shown in Figure 3.9a is the
Heawood graph (depicted in Figure 1.16).
10.6.2 Show that the surface obtained by identifying the identically labelled edges
of the octagon shown in Figure 10.28 along the directions indicated is the double
torus.
a
c

b

d

a

c

b
d

Fig. 10.28. A representation of the double torus

10.6.3 Prove Corollaries 10.38 and 10.39.
10.6.4 Show that:
a) K7 is not embeddable on the projective plane,
b) K8 is not embeddable on the torus.
————— —————
10.6.5 The (orientable) genus γ(G) of a graph G is the minimum value of k such
that G is embeddable in Sk . (Thus the genus of a planar graph is zero and the
genus of a nonplanar graph that is embeddable in the torus is one.)
a) Show that γ(Km,n ) ≥ (m − 2)(n − 2)/4.
b) By ﬁnding an embedding of K4,4 on the torus, deduce that γ(K4,4 ) = 1.
(G. Ringel has shown that γ(Km,n ) = (m−2)(n−2)/4 for all m, n; see Hartsﬁeld
and Ringel (1994).)
10.6.6 Show that γ(Kn ) ≥ (n − 3)(n − 4)/12.
(A major result in the theory of graph embeddings, due to G. Ringel and J.W.T.
Youngs, and known as the Map Colour Theorem, states that γ(Kn ) = (n − 3)(n −
4)/12 for all n; see Ringel (1974).)

282

10 Planar Graphs

10.7 Related Reading
Graph Minors
In a long and impressive series of papers entitled Graph Minors, N. Robertson and
P. D. Seymour proved a conjecture of K. Wagner which states that any inﬁnite
sequence G1 , G2 , . . . of (ﬁnite) graphs includes two graphs Gi and Gj , with i < j,
such that Gi is a minor of Gj . In doing so, they introduced and employed a wealth
of new concepts and ways of viewing graphical structure that are destined to play
a major role in future developments of graph theory (see Robertson and Seymour
(2004)).
A class G of graphs is minor-closed if every minor of a member of G is also
a member of G. For example, the class of all planar graphs is minor-closed and,
more generally, the class of all graphs embeddable in any ﬁxed surface such as the
projective plane or the torus is minor-closed. A graph G which does not belong to
G, but all of whose proper minors do, is said to be minor-minimal with respect to
G. For instance, by virtue of Theorem 10.32, the minor-minimal nonplanar graphs
are K3,3 and K5 . A straightforward consequence of the theorem of Robertson and
Seymour mentioned above is that if G is any minor-closed family of graphs, then
the number of minor-minimal graphs with respect to G is ﬁnite. Thus every minorclosed family of graphs aﬀords an ‘excluded-minor’ characterization of Kuratowski–
Wagner type.
Apart from the proof of Wagner’s conjecture, the Graph Minors series includes many other remarkable results. Using the theorem of Wagner stated in
Exercise 10.5.14 as a prototype, Robertson and Seymour gave a characterization
of the graphs which have no Kn -minor. They also described a polynomial-time
algorithm for deciding whether a graph has a given graph H as a minor.
Linkages
Topological considerations play a signiﬁcant role in graph theory, even with regard
to certain graph-theoretical questions which seemingly have no connection with
embeddings. An important and attractive example is the Linkage Problem. Let G
be a graph, and let X := (x1 , x2 , . . . , xk ) and Y := (y1 , y2 , . . . , yk ) be two ordered
subsets of V . An XY -linkage in G is a set of k disjoint paths xi Pi yi , 1 ≤ i ≤ k. Such
a set is also called a k-linkage. The Linkage Problem is the problem of deciding
whether there exists an XY -linkage for given sets X and Y . Note that this is
not quite the same as the Disjoint Paths Problem discussed in Chapter 9; the
existence of k disjoint XY -paths does not guarantee the existence of an XY linkage. For example, in the graph of Figure 9.6, there are two disjoint paths
connecting {x1 , x2 } and {y1 , y2 }, but no pair of disjoint x1 y1 - and x2 y2 -paths.
Seymour (1980), Shiloach (1980), and Thomassen (1980) proved a theorem which
essentially characterizes the graphs which have a 2-linkage, for given pairs (x1 , x2 )
and (y1 , y2 ). They showed that a 4-connected graph has such a 2-linkage unless the
graph is planar and the vertices x1 , x2 , y1 , and y2 appear on the boundary of some

10.7 Related Reading

283

face in that cyclic order (as in Figure 9.6). One of the important byproducts of the
theory of graph minors is a polynomial-time algorithm for the k-linkage problem
for any ﬁxed value of k; see Robertson and Seymour (1995). In stark contrast, the
k-linkage problem for directed graphs is N P-hard, even for k = 2; see Fortune
et al. (1980).
Brambles
By deﬁnition, a graph has a complete minor of order k if and only if it contains
k mutually disjoint connected subgraphs, any two of which are linked by at least
one edge. Weakening these requirements a little, we obtain a structure called a
bramble. This is a set of connected subgraphs (the elements of the bramble) any
two of which either intersect or are linked by at least one edge. Figure 10.29 shows
two brambles in K2,3 ,
x

x

u

v

w

u

v

y

y

(a)

(b)

w

Fig. 10.29. Two brambles in K2,3 : (a) one of order two, and (b) one of order three
.

A transversal of a bramble is a set of vertices which meets every element of
the bramble. For instance, {x, y} is a transversal of the bramble in Figure 10.29a,
and {u, v, w} is a transversal of the one in Figure 10.29b. The order of a bramble
is the minimum cardinality of a transversal. It can be seen that the brambles in
Figure 10.29 are of orders two and three, respectively. The maximum order of a
bramble in a graph is its bramble number. The graph K2,3 has bramble number
three. The bramble of six elements in the (3 × 3)-grid shown in Figure 10.30 is of
order four.
Brambles and tree-decompositions are dual structures in the following sense.
Let B be a bramble of a graph G, and let (T, {Tv : v ∈ V }) be a tree-decomposition
of G of minimum width. Consider an element B of B. Because B is connected,
TB := ∪{Tv : v ∈ V (B)} is a subtree of T . Furthermore, because any two bramble
elements either meet or are adjacent, {TB : B ∈ B} is a pairwise intersecting family
of subtrees of T . By the Helly Property (Exercise 4.1.20), these trees therefore

284

10 Planar Graphs

Fig. 10.30. A bramble of order four in the (3 × 3)-grid

have a vertex x in common. The corresponding subset Vx of V (in the notation of
Section 9.8) is thus a transversal of B. This shows that the order of B is at most
|Vx |, which in turn is no greater than the tree-width of G. Because this is true for
any bramble B, we conclude that the bramble number is bounded above by the
tree-width. Observe that, in both K2,3 and the (3 × 3)-grid, these two parameters
take exactly the same value. Seymour and Thomas (1993) showed that this is
always so.
Theorem 10.41 Tree-Width–Bramble Duality Theorem
The tree-width of any graph is equal to its bramble number.
For a beautiful, uniﬁed proof of this and other related duality theorems, we refer
the reader to the article by Amini et al. (2007).
Matroids and Duality
Let G be a plane graph, and let G∗ be its dual. We have seen that the cycles of G
correspond to the bonds of G∗ , and conversely (Theorem 10.16). Thus, the cycle
matroid of G is the bond matroid of G∗ and the bond matroid of G is the cycle
matroid of G∗ .
Nonisomorphic graphs on the same edge set may have the same cycle matroid
(the duals of the graphs in Figure 10.11, for instance). However, it follows from
the work of Whitney (1932b) that simple 3-connected graphs with the same cycle
matroid are isomorphic (see Welsh (1976) or Oxley (1992)).
Matroid Minors
An element e of a matroid M is a loop if it is contained in no basis of M and a
coloop if it is contained in every basis. When e is neither a loop nor a coloop, let
B \ e denote the set of bases of M not containing e and let B / e denote the set
of restrictions to E \ {e} of the bases of M containing e. When e is either a loop
or a coloop, let B \ e and B / e both denote the set of restrictions of the bases of
M to E \ {e}. One may then verify that (E \ {e}, B \ e) and (E \ {e}, B / e) are
matroids. The former is said to be obtained from M by the deletion of e and is
denoted by M \ e. The latter is said to be obtained from M by the contraction
of e and is denoted by M / e. These two operations are related via duality in the
same manner as they are in the case of graphs (see Propositions 10.12 and 10.13):

10.7 Related Reading

285

(M \ e)∗ = M ∗ / e, and (M / e)∗ = M ∗ \ e
A matroid which may be obtained from another matroid M by a sequence of
deletions and contractions is said to be a minor of M . There is a vast literature
dealing with excluded-minor characterizations of various types of matroids; see,
for example, Oxley (1992).

11
The Four-Colour Problem

Contents
11.1 Colourings of Planar Maps . . . . . . . . . . . . . . . . . . . . . . . . 287
Face Colourings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
Vertex Colourings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
Edge Colourings: Tait’s Theorem . . . . . . . . . . . . . . . . . . . . 289
11.2 The Five-Colour Theorem . . . . . . . . . . . . . . . . . . . . . . . . . 291
11.3 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
Equivalent Forms of the Four-Colour Problem . . . . . 293

11.1 Colourings of Planar Maps
In many areas of mathematics, attempts to ﬁnd solutions to challenging unsolved
problems have led to the advancement of ideas and techniques. In the case of
graph theory, it was a seemingly innocuous map-colouring problem that provided
the motivation for many of the developments during its ﬁrst one hundred years.
In a letter written to William Rowan Hamilton in 1852, Augustus De Morgan
communicated the following Four-Colour Problem, posed by Francis Guthrie.
A student of mine [Frederick Guthrie, brother of Francis] asked me today
to give him a reason for a fact which I did not know was a fact – and do
not yet. He says that if a ﬁgure be anyhow divided and the compartments
diﬀerently coloured so that ﬁgures with any portion of common boundary
line are diﬀerently coloured – four colours may be wanted, but not more –
the following is the case in which four colours are wanted. Query cannot a
necessity for ﬁve or more be invented . . .
This problem, because of its beguilingly simple statement, attracted the attention of many prominent mathematicians of the time. They came to believe that it
was indeed possible to colour any map in four colours, and this surmise became
known as the Four-Colour Conjecture. In the subsequent decades, several attempts

288

11 The Four-Colour Problem

were made to settle the conjecture, and some erroneous proofs were published. (For
a history of the Four-Colour Problem, see Wilson (2002) or Biggs et al. (1986).)
Face Colourings
In order to translate the Four-Colour Problem into the language of graph theory,
we need the notion of a face colouring of a plane graph. A k-face colouring of a
plane graph is an assignment of k colours to its faces. The colouring is proper if no
two adjacent faces are assigned the same colour. A plane graph is k-face-colourable
if it has a proper k-face colouring. Figure 11.1a shows a proper 4-face-colouring
of the triangular prism. Because every map may be regarded as a plane graph
without cut edges, the Four-Colour Conjecture is equivalent to the statement:
Conjecture 11.1 The Four-Colour Conjecture (Face Version)
Every plane graph without cut edges is 4-face-colourable.
Over a century passed before the Four-Colour Conjecture was eventually veriﬁed, in 1977, by Appel and Haken (1977b).
Theorem 11.2 The Four-Colour Theorem
Every plane graph without cut edges is 4-face-colourable.
More recently, a somewhat simpler (but still complicated) proof of this theorem,
based on the same general approach, was obtained by Robertson et al. (1997a).
One of the remarkable features of the Four-Colour Conjecture is that it has
many equivalent formulations, some with no apparent connection to face colourings
(see Section 11.3). We describe here two of these reformulations, one which is
straightforward, in terms of vertex colourings, and one which is less so, in terms of
edge colourings. They have motivated the study of several fundamental questions,
to be discussed in subsequent chapters.
Vertex Colourings
A k-vertex-colouring of a graph, or simply a k-colouring, is an assignment of k
colours to its vertices. The colouring is proper if no two adjacent vertices are
assigned the same colour. A graph is k-colourable if it has a proper k-colouring.
Because adjacent pairs of vertices of a plane graph correspond to adjacent pairs
of faces of its dual, the Four-Colour Problem is equivalent to the statement that
every loopless plane graph is 4-colourable. The 4-face-colouring of the triangular
prism shown in Figure 11.1a gives rise in this way to the 4-vertex-colouring of its
dual shown in Figure 11.1b.
The advantage of this reformulation in terms of vertex colourings is that one
may now restate the problem without reference to any particular embedding:
Conjecture 11.3 The Four-Colour Conjecture (Vertex Version)
Every loopless planar graph is 4-colourable.

11.1 Colourings of Planar Maps

289

1

1
2
4

4

2

4

4

3

3
(a)

(b)

Fig. 11.1. (a) A 4-face-colouring of the triangular prism, (b) a 4-vertex-colouring of its
dual

In order to show that all loopless planar graphs are 4-colourable, it clearly
suﬃces to show that all simple connected planar graphs are 4-colourable. In fact,
it is not hard to reduce the Four-Colour Conjecture to simple 3-connected maximal
planar graphs (Exercise 11.2.1). By Corollary 10.21, a planar embedding of such
a graph is a 3-connected triangulation. Therefore the Four-Colour Conjecture is
equivalent to the assertion that every 3-connected triangulation is 4-colourable,
and, by duality, to the assertion that every 3-connected cubic plane graph is 4face-colourable.
Edge Colourings: Tait’s Theorem
We are now in a position to relate face colourings and edge colourings of plane
graphs. A k-edge-colouring of a graph is an assignment of k colours to its edges.
The colouring is proper if no two adjacent edges are assigned the same colour. A
graph is k-edge-colourable if it has a proper k-edge-colouring. Tait (1880) found a
surprising relationship between face colourings and edge colourings of 3-connected
cubic plane graphs.
Theorem 11.4 Tait’s Theorem
A 3-connected cubic plane graph is 4-face-colourable if and only if it is 3-edgecolourable.
Proof Let G be a 3-connected cubic plane graph. First, suppose that that G
has a proper 4-face-colouring. It is of course immaterial which symbols are used
as the ‘colours’. For mathematical convenience, we denote them by the vectors
α0 = (0, 0), α1 = (1, 0), α2 = (0, 1), and α3 = (1, 1) in Z2 × Z2 . We now obtain
a 3-edge-colouring of G by assigning to each edge the sum of the colours of the
two faces it separates; note that, because G has no cut edges, each edge separates
two distinct faces, so no edge is assigned colour α0 under this scheme. If αi , αj ,
and αk are the colours assigned to the three faces incident to a vertex v, then

290

11 The Four-Colour Problem

αi + αj , αi + αk , and αj + αk are the colours assigned to the three edges incident
with v (see Figure 11.2). These colours are all diﬀerent. Thus we have a proper
3-edge-colouring of G (in colours α1 , α2 , α3 ).

αi

αi + αj

αi + αk

v

αj

αj + αk

αk
Fig. 11.2. The 3-edge-colouring of a cubic plane graph induced by a 4-face-colouring

Conversely, suppose that G has a proper 3-edge-colouring, in colours 1, 2, 3.
Denote by Ei the set of edges of G of colour i, 1 ≤ i ≤ 3. The subgraph G[Ei ]
induced by Ei is thus a spanning 1-regular subgraph of G. Set Gij := G[Ei ∪ Ej ],
1 ≤ i < j ≤ 3. Then each Gij is a spanning 2-regular subgraph of G, and is
therefore 2-face-colourable (Exercise 11.2.2). Also, each face of G is the intersection
of a face of G12 and a face of G23 (see Figure 11.3).
Consider 2-face-colourings of G12 and G23 , each using the colours 0 and 1
(unshaded and shaded, respectively, in Figure 11.3b). We can now obtain a 4-facecolouring of G (in the colours α0 , α1 , α2 , α3 deﬁned above) by assigning to each
face f the ordered pair of colours assigned respectively to the faces of G12 and G23
whose intersection is f . Because G = G12 ∪ G23 , this is a proper 4-face-colouring
of G.

By virtue of Tait’s Theorem (11.4), the Four-Colour Conjecture can be reformulated in terms of edge colourings as follows.
Conjecture 11.5 The Four-Colour Conjecture (Edge Version)
Every 3-connected cubic planar graph is 3-edge-colourable.
Recall that a spanning cycle in a graph is referred to as a Hamilton cycle.
A graph which contains such a cycle is said to be hamiltonian. If a cubic graph
contains a Hamilton cycle, the edges of that cycle may be coloured alternately in
two colours, and the remaining edges, which are mutually nonadjacent, may all be
assigned a third colour. Thus every hamiltonian cubic graph is 3-edge-colourable.
Now, if every 3-connected cubic planar graph could be shown to be hamiltonian,
the edge-colouring version of the Four-Colour Conjecture would be established.
Taking this ‘fact’ to be self-evident, Tait (1880) convinced himself (and others) that

11.2 The Five-Colour Theorem

291

1

2
2

1

1
3

2

3
2

2

1
2

1

1

1

2

2
3

1
3
3

1

3
1

1

(c)

(a)
3

3
1
(b)

Fig. 11.3. (a) A 3-edge-colouring of the cube, (b) 2-face-colourings of the spanning
subgraphs G12 and G13 , (c) the induced 4-face-colouring of the cube

he had proved the Four-Colour Conjecture. It took over half a century to invalidate
Tait’s ‘proof’, when Tutte (1946) constructed a nonhamiltonian 3-connected cubic
planar graph. Tutte’s construction is described in Chapter 18.

11.2 The Five-Colour Theorem
P. G. Tait was not the only mathematician of his time to come up with a false
proof of the Four-Colour Conjecture. Kempe (1879), too, published a paper which
was believed to contain a proof of the conjecture. This time it was Heawood (1890)
who discovered a serious ﬂaw in Kempe’s proof. Fortunately, all was not lost, for
Heawood showed that Kempe’s approach could be used to prove that all planar
graphs are 5-colourable. Here is Heawood’s proof, in essence.
Theorem 11.6 The Five Colour Theorem
Every loopless planar graph is 5-colourable.
Proof By induction on the number of vertices. As observed in our earlier discussion, it suﬃces to prove the theorem for 3-connected triangulations. So let G be
such a triangulation. By Corollary 10.22, G has a vertex v of degree at most ﬁve.
Consider the plane graph H := G − v.
By induction, H has a proper 5-colouring. If, in this colouring of H, one of
the ﬁve colours is assigned to no neighbour of v, we may assign it to v, thereby

292

11 The Four-Colour Problem

extending the proper 5-colouring of H to a proper 5-colouring of G. We may
assume, therefore, that the ﬁve neighbours of v together receive all ﬁve colours.
To ﬁx notation, let C := v1 v2 v3 v4 v5 v1 be the facial cycle of H whose vertices
are the neighbours of v in G, where vi receives colour i, 1 ≤ i ≤ 5. We may
suppose that the vertex v of G lies in int(C), so that all the bridges of C in H
are outer bridges. If there is no bridge of C in H containing both v1 and v3 , then
by swapping the colours of the vertices coloured 1 and 3 in all the bridges of C
containing v1 , we obtain a proper 5-colouring of H in which no vertex of C has
colour 1. This colour may now be assigned to v, resulting in a proper 5-colouring
of G. Thus we may assume that there is a bridge B1 of C in H having v1 and v3 as
vertices of attachment. Likewise, there is a bridge B2 of C in H having v2 and v4
as vertices of attachment. But now the bridges B1 and B2 overlap, contradicting
Theorem 10.26.

There exist several proofs of the Five-Colour Theorem (11.6). One of these is
outlined in Exercise 11.2.6, and another, based on the notion of list colouring, is
given in Chapter 14. Colouring a planar graph with just four colours, rather than
ﬁve, is quite a diﬀerent story, even though Kempe’s idea of interchanging colours
turns out to be an important ingredient. The main ideas involved in the proof of
the Four-Colour Theorem are presented in Chapter 15.

Exercises
11.2.1 Show that the Four-Colour Conjecture is true provided that it is true for
all simple 3-connected maximal planar graphs.
11.2.2 Show that every even plane graph is 2-face-colourable.
11.2.3 Show that a plane graph is 4-face-colourable if and only if it is the union
of two even subgraphs.
11.2.4 Show that a graph is 4-vertex-colourable if and only if it is the union of
two bipartite subgraphs.
11.2.5
a) Let G be a graph with a Hamilton bond. Show that G is 4-vertex-colourable.
b) By applying Exercise 10.2.10c, deduce that every plane hamiltonian graph is
4-face-colourable.
11.2.6 Prove the Five-Colour Theorem (11.6) by induction on n, proceeding as
follows.
i) Deﬁne G, v, H, and C as in the proof of Theorem 11.6. Show that the subgraph
H[{v1 , v2 , v3 , v4 , v5 }] is not complete.
ii) Let vi and vj be nonadjacent vertices of C. In H, identify vi and vj , so as to
obtain a graph H  . Show that H  is planar.

11.3 Related Reading

293

iii) Consider (by induction) a proper 5-colouring of H  . Deduce that G is 5colourable.
11.2.7 A maximal outerplanar graph is a simple graph which is outerplanar (deﬁned in Exercise 10.2.11) and edge-maximal with respect to this property. Let G
be a maximal outerplanar graph with n ≥ 3. Show that:
a) G has a planar embedding whose outer face is a Hamilton cycle, all other faces
being triangles,
b) G has a vertex v of degree two and G − v is maximal outerplanar,
c) m = 2n − 3,
d) G is 3-vertex-colourable.
————— —————
11.2.8 The walls of an art gallery form a polygon with n sides. It is desired to
place staﬀ at strategic points so that together they are able to survey the entire
gallery.
a) Show that n/3 guards always suﬃce.
b) For each n ≥ 3, construct a gallery which requires this number of guards.
(V. Chvátal)
11.2.9 Heawood’s Theorem
Show that:
a) a plane triangulation is 3-vertex-colourable if and only if it is even,
(P.J. Heawood)
b) a plane graph is 3-vertex-colourable if and only if it it is a subgraph of an even
plane triangulation.
(M. Król)

11.3 Related Reading
Equivalent Forms of the Four-Colour Problem
One of the reasons that the Four-Colour Problem has played and continues to play
a central role in graph theory is its connection with a wide variety of interesting
problems. Surprisingly, some of these questions seem to have nothing at all to do
with colouring. For instance, as we show in Chapter 21, the Four-Colour Theorem
is equivalent to the statement that every 2-edge-connected planar graph may be
expressed as the union of two even subgraphs. Still more surprisingly, a number of
other questions from other areas of mathematics have been shown to be equivalent
to the Four-Colour Problem. For example, consider an expression of the form
v1 × v2 × · · · × vk , where v1 , v2 , . . . , vk are arbitrary vectors in R3 and × denotes
the cross product. Because this operation is not associative, the terms of the given
expression need to be bracketed appropriately for the expression to be well-deﬁned.
Suppose, now, that two diﬀerent bracketings of v1 × v2 × · · · × vk are given.

294

11 The Four-Colour Problem

Kauﬀman (1990) considered the problem of deciding whether it is possible to
assign unit vectors e1 , e2 , e3 to v1 , v2 , . . . , vk so that the two bracketings result in
the same nonzero value for the expression. He showed that this problem can be
reduced to one of 3-edge-colouring an associated cubic planar graph, and hence
is equivalent to the Four-Colour Problem. An even more astonishing connection
was discovered by Y. Matiyasevich, who established the existence of a diophantine
equation involving thousands of variables, the solvability of which amounts to the
validity of the Four-Colour Theorem (see Thomas (1998)). Further examples can be
found in Thomas (1998) and Saaty (1972). Chapters 15 and 21 contain discussions
of generalizations of the Four-Colour Problem.

12
Stable Sets and Cliques

Contents
12.1 Stable Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
Stability and Clique Numbers . . . . . . . . . . . . . . . . . . . . . . . 295
Shannon Capacity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
Kernels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
12.2 Turán’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301
An Application to Combinatorial Geometry . . . . . . . . . 303
12.3 Ramsey’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
Ramsey Numbers and Ramsey Graphs . . . . . . . . . . . . . . . . 308
Bounds on Ramsey Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . 311
An Application to Number Theory . . . . . . . . . . . . . . . . . . . 314
12.4 The Regularity Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
Regular Pairs and Regular Partitions . . . . . . . . . . . . . . 317
The Erdős–Stone Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . 318
Linear Ramsey Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
A Proof of the Regularity Lemma . . . . . . . . . . . . . . . . . . 323
12.5 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
Hypergraph Extremal Problems . . . . . . . . . . . . . . . . . . . . . 326
Constructions from Hypergraphs . . . . . . . . . . . . . . . . . . . . 327
Ramsey Theorems in Other Contexts . . . . . . . . . . . . . . . . 327

12.1 Stable Sets
Stability and Clique Numbers
Throughout this chapter, we restrict our attention to simple graphs.
Recall that a stable set in a graph is a set of vertices no two of which are
adjacent. (Stable sets are also commonly known as independent sets.) A stable set
in a graph is maximum if the graph contains no larger stable set and maximal if the
set cannot be extended to a larger stable set; a maximum stable set is necessarily

296

12 Stable Sets and Cliques

maximal, but not conversely. The cardinality of a maximum stable set in a graph G
is called the stability number of G and is denoted by α(G). Maximal and maximum
stable sets in the Petersen graph are shown in Figure 12.1.

(a)

(b)

Fig. 12.1. (a) A maximal stable set, and (b) a maximum stable set

Recall, also, that an edge covering of a graph is a set of edges which together
meet all vertices of the graph. Analogously, a covering of a graph is a set of vertices
which together meet all edges of the graph. The minimum number of vertices in a
covering of a graph G is called the covering number of G and is denoted by β(G).
The light vertices in the graphs of Figure 12.1 are examples of coverings. Indeed,
stable sets and coverings are related in a very simple way: a set S is a stable set
of a graph G if and only if V \ S is a covering of G (Exercise 12.1.2). We therefore
have the identity, ﬁrst observed by Gallai (1959):
α(G) + β(G) = v(G)

(12.1)

Stable sets and cliques are likewise related in a very simple manner. Recall that
a clique of a graph is a set of mutually adjacent vertices, and that the maximum
size of a clique of a graph G, the clique number of G, is denoted ω(G). Clearly, a
set of vertices S is a clique of a simple graph G if and only if it is a stable set of
the complement G. In particular,
ω(G) = α(G)
Thus any assertion about stable sets can be restated in terms of cliques or
coverings. We noted in Chapter 8 that the problem of ﬁnding a maximum clique
in a graph is N P-hard. It follows that the problem of ﬁnding a maximum stable
set is also N P-hard, as is that of ﬁnding a minimum covering. On the other hand,
in the case of bipartite graphs, we saw in Chapter 8 that maximum stable sets can
be found in polynomial time using linear programming techniques.
Shannon Capacity
A number of real-world problems involve ﬁnding maximum stable sets of graphs.
The following example, due to Shannon (1956), is one such.

12.1 Stable Sets

297

Example 12.1 Transmitting messages over a noisy channel
A transmitter over a communication channel is capable of sending signals belonging
to a certain ﬁnite set (or alphabet) A. Some pairs of these signals are so similar
to each other that they might be confounded by the receiver because of possible
distortion during transmission. Given a positive integer k, what is the greatest
number of sequences of signals (or words) of length k that can be transmitted with
no possibility of confusion at the receiving end?
To translate this problem into graph theory, we need the concept of the strong
product of two graphs G and H. This is the graph G  H whose vertex set is
V (G) × V (H), vertices (u, x) and (v, y) being adjacent if and only if uv ∈ E(G)
and x = y, or u = v and xy ∈ E(H), or uv ∈ E(G) and xy ∈ E(H).
Let G denote the graph with vertex set A in which two vertices u and v are
adjacent if they represent signals that might be confused with each other, and let
Gk be the strong product of k copies of G. Thus Gk is the graph whose vertices
are the words of length k over A where two distinct words (u1 , u2 , . . . , uk ) and
(v1 , v2 , . . . , vk ) are joined by an edge if either ui = vi or ui vi ∈ E(G), 1 ≤ i ≤ k.
Equivalently, two distinct words are adjacent in Gk if there is a possibility that
one of them might be mistaken for the other by the receiver. It follows that the
required maximum number of words of length k is simply the stability number of
Gk . For example, if A = {0, 1, 2, 3, 4} and each signal i may be confused with either
i − 1 or i + 1 (mod 5), then G = C5 . A drawing of G2 = C52 on the torus, together
with a stable set of order ﬁve indicated by solid dots, is shown in Figure 12.2b; note
that, because the graph is drawn on the torus, the four corner vertices represent
one and the same vertex, (0, 0). This shows that α(G2 ) ≥ 5. One may in fact verify
that α(G2 ) = 5 (Exercise 12.1.8). Thus, in this case, a maximum of ﬁve words of
length two, for instance 00, 12, 24, 31, 43, may be transmitted with no possibility
of confusion by the receiver.
0
4
3

0
4

1

2
1

3

2
(a)

0
0

1

3

2

4

(b)

Fig. 12.2. (a) C5 , (b) a stable set of ﬁve vertices in C52

0

298

12 Stable Sets and Cliques

Motivated by his seminal work on information theory, Shannon (1956) proposed
the parameter

Θ(G) := lim

k→∞

k

α(Gk )

now commonly known as the Shannon capacity of G, as a measure of the capacity
for error-free transmission over a noisy channel whoseassociated graph is G. (It
can be shown that this limit exists and is equal to supk k α(Gk ), see Berge (1985).)
Because αk (G) ≤ α(Gk ) for any k (Exercise 12.1.7b), it follows that α(G) ≤ Θ(G).
Shannon (1956) (see, also, Rosenfeld (1967)) showed that the parameter α∗∗ (G)
deﬁned in Exercise 8.6.5 is an upper bound for Θ(G). Therefore, for any graph G,
α(G) ≤ Θ(G) ≤ α∗∗ (G)

(12.2)

If G is a graph in which α is equal to the minimum number of cliques covering
all the vertices, then α = α∗∗ and hence Θ(G) = α(G) by (12.2). This is the case
when G is bipartite (by the König–Rado Theorem (8.30)), when G is chordal (by
Exercise 9.7.5) and, more generally, for a class of graphs known as perfect graphs.
A brief discussion of the properties of this important class of graphs is presented
in Chapter 14. The smallest graph for which both the inequalities in (12.2) are
strict is the 5-cycle. By
√ employing ingenious algebraic techniques, Lovász (1979)
showed that Θ(C5 ) = 5 (see Exercise 12.1.14).
Kernels
A stable set in a digraph is a stable set in its underlying graph, that is, a set of
pairwise nonadjacent vertices. If S is a maximal stable set in a graph G, then
every vertex of G − S is adjacent to some vertex of S. In the case of digraphs, it
is natural to replace the notion of adjacency by the directed notion of dominance.
This results in the concept of a kernel.
A kernel in a digraph D is a stable set S of D such that each vertex of D −
S dominates some vertex of S. The solid vertices in the digraph of Figure 12.3
constitute a kernel of the digraph.

Fig. 12.3. A kernel in a digraph

12.1 Stable Sets

299

Kernels arise naturally in the analysis of certain two-person positional games
such as Hex (see Berge (1977) or Browne (2000)). Consider the digraph D whose
vertices are the positions in the game, one position dominating another if the latter
can be reached from the former in one move. Suppose that D has a kernel S and
that, according to the rules of play, the last player able to move wins the game.
Then a player who starts at a position in V \ S can guarantee himself a win or a
draw by always moving to a position in S, from which his opponent is obliged to
move to a position in V \ S (if, indeed, he is able to move). Other applications of
kernels can be found in the book by Berge (1985).
Many digraphs fail to have kernels. Directed odd cycles are the simplest examples. Indeed, Richardson (1953) proved that a digraph which has no kernel
necessarily contains a directed odd cycle.
Theorem 12.2 Richardson’s Theorem
Let D be a digraph which contains no directed odd cycle. Then D has a kernel.
Proof By induction on n. If D is strong, then D is bipartite (Exercise 3.4.11b)
and each class of the bipartition is a kernel of D. If D is not strong, let D1 be a
minimal strong component of D (one that dominates no other strong component;
see Exercise 3.4.6), and set V1 := V (D1 ). By the induction hypothesis, D1 has a
kernel, S1 . Let V2 be the set of vertices of D that dominate vertices of S1 , and set
D2 := D − (V1 ∪ V2 ). Again by induction, D2 has a kernel S2 . The set S1 ∪ S2 is
then a kernel of D.

Richardson’s Theorem implies that every acyclic digraph has a kernel; in fact,
acyclic digraphs have unique kernels (Exercise 12.1.10b). However, as we have seen,
not every digraph has a kernel. For this reason, the less stringent notion of a semikernel was proposed by Chvátal and Lovász (1974). A semi-kernel in a digraph D
is a stable set S which is reachable from every vertex of D − S by a directed path
of length one or two. Chvátal and Lovász (1974) showed that every digraph has a
semi-kernel (see Exercise 12.1.11).
We encounter kernels again in Chapter 14, where they play a key role in the
solution of certain colouring problems.

Exercises
12.1.1 The Eight Queens Problem
Is it possible to place eight queens on a chessboard so that no one queen can take
another? Express this as a problem of ﬁnding a maximum stable set in a graph
associated with the chess board, and ﬁnd a solution.
12.1.2 Show that a set S is a stable set of a graph G if and only if V \ S is a
covering of G.
12.1.3 Show that a graph G is bipartite if and only if α(H) ≥
induced subgraph H of G.

1
2 v(H)

for every

300

12 Stable Sets and Cliques

12.1.4 Show that a graph G is bipartite if and only if α(H) = β  (H) for every
subgraph H of G without isolated vertices, where β  (H) is the minimum number
of edges in an edge covering of H (see Section 8.6).
 n−1 
.
12.1.5 Show that α(KGm,n ) ≥ m−1
(Erdős et al. (1961) proved that this bound is sharp; see Exercise 13.2.17.)
12.1.6 Show that the strong product is associative.
12.1.7
a) For any two graphs G and H, show that α(G  H) ≥ α(G)α(H).
b) Deduce that α(Gk ) ≥ αk (G).
12.1.8 Show that α(C5  C5 ) = 5.
————— —————
12.1.9 Let G be a connected cubic graph on 4k vertices. By applying Exercise 2.4.7a, show that G has a stable set S of k vertices such that each component
of G − S is unicyclic.
(N. Alon)
12.1.10
a) Show that any digraph which has at least two kernels contains a directed even
cycle.
b) Deduce that every acyclic digraph has a unique kernel.
12.1.11 Let D be a digraph. Consider an arbitrary total order ≺ of V . Let D
and D be the spanning acyclic subgraphs of D induced by {(x, y) : x ≺ y} and
{(x, y) : y ≺ x}, respectively. Let S  be the kernel of D . Show that the kernel of
(S. Thomassé)
D [S  ] is a semi-kernel of D.
12.1.12
a) The tensor product of vectors x = (x1 , x2 , . . . , xm ) and y = (y1 , y2 , . . . , yn ) is
the vector
x ◦ y := (x1 y1 , x1 y2 , . . . , x1 yn , x2 y1 , x2 y2 , . . . , x2 yn , . . . , xm y1 , xm y2 , . . . , xm yn )
For vectors x, a ∈ Rm and y, b ∈ Rn , show that the scalar and tensor products
are linked by the following rule:
(x ◦ y)(a ◦ b)t = (xat )(ybt )
b) An orthonormal representation of a graph G = (V, E) in the euclidean space
Rd is a mapping v → xv from V into Rd such that:
 xv is a unit vector, for all v ∈ V ,
/ E.
 xu and xv are orthogonal whenever uv ∈

12.2 Turán’s Theorem

301

i) Show that every graph has an orthonormal representation in some space
Rd .
ii) Let G and H be two graphs, and let u → xu , u ∈ V (G), and v → yv ,
v ∈ V (H), be orthonormal representations of G and H, respectively, in
Rd . Show that (u, v) → xu ◦ yv , (u, v) ∈ V (G) × V (H), is an orthonormal
2
representation of G  H in Rd .
12.1.13 Let G = (V, E) be a graph, and let v → xv , v ∈ V , be an orthonormal
representation of G in Rd . For any stable set S of G and any unit vector y in Rd ,
show that

(yxtv )2 ≤ 1
v∈S

12.1.14
a) Find an orthonormal representation of the 5-cycle (1, 2, 3, 4, 5, 1) in R3 by ﬁve
unit vectors x1 , x2 , x3 , x4 , x5 such that, for 1 ≤ i ≤ 5, the ﬁrst coordinate of
xi is 5−1/4 .
b) Using Exercise 12.1.12, deduce that C5k has an orthonormal representation in
k
R3 in which the ﬁrst coordinate of each unit vector is 5−k/4 .
k
c) Taking y as the unit vector e1 in R3 and applying Exercise 12.1.13, show that
k
k/2
α(C5 ) ≤ 5 .
√
(L. Lovász)
d) Deduce that the Shannon capacity of C5 is equal to 5.

12.2 Turán’s Theorem
We have already encountered a number of statements asserting that a simple graph
with ‘many’ edges (in terms of its number of vertices) must contain a subgraph of
a certain type. For instance, a simple graph on n vertices contains a cycle if it has
at least n edges (Exercise 2.1.3) and contains a triangle if it has more than n2 /4
edges (Mantel’s Theorem, Exercise 2.1.17). In this section, we generalize Mantel’s
Theorem by determining the maximum number of edges that a simple graph on
n vertices can have without containing a clique of a given size. This theorem, due
to Turán (1941), triggered the development of a major branch of graph theory,
known as extremal graph theory (see, for example, the monograph with this title
by Bollobás (1978)).
If F is a simple graph, we denote by ex(n, F ) the maximum number of edges
in a graph G on n vertices which does not contain a copy of F . Such a graph G
is called an extremal graph (for this particular property), and the set of extremal
graphs is denoted by Ex(n, F ). For instance, ex(n, K3 ) = n2 /4 and Ex(n, K3 ) =
{K n/2 ,n/2 }.
The proof of Turán’s Theorem given here is due to Zykov (1949). Recall (see
Exercise 1.1.11) that the simple complete k-partite graph on n vertices in which
all parts are as equal in size as possible is called a Turán graph and denoted Tk,n .

302

12 Stable Sets and Cliques

Theorem 12.3 Turán’s Theorem
Let G be a simple graph which contains no Kk , where k ≥ 2. Then e(G) ≤
e(Tk−1,n ), with equality if and only if G ∼
= Tk−1,n .
Proof By induction on k. The theorem holds trivially for k = 2. Assume that it
holds for all integers less than k, and let G be a simple graph which contains no
Kk . Choose a vertex x of degree ∆ in G, and set X := N (x) and Y := V \ X (see
Figure 12.4 for an illustration.) Then
e(G) = e(X) + e(X, Y ) + e(Y )
Because G contains no Kk , G[X] contains no Kk−1 . Therefore, by the induction
hypothesis,
e(X) ≤ e(Tk−2,∆ )
with equality if and only if G[X] ∼
= Tk−2,∆ . Also, because each edge of G incident
with a vertex of Y belongs to either E[X, Y ] or E(Y ),
e(X, Y ) + e(Y ) ≤ ∆(n − ∆)
with equality if and only if Y is a stable set all members of which have degree ∆.
Therefore e(G) ≤ e(H), where H is the graph obtained from a copy of Tk−2,∆ by
adding a stable set of n − ∆ vertices and joining each vertex of this set to each
vertex of Tk−2,∆ . Observe that H is a complete (k − 1)-partite graph on n vertices.
By Exercise 1.1.11, e(H) ≤ e(Tk−1,n ), with equality if and only if H ∼
= Tk−1,n . It

follows that e(G) ≤ e(Tk−1,n ), with equality if and only if G ∼
= Tk−1,n .
Many diﬀerent proofs of Turán’s Theorem have been found (see Aigner (1995)).
The one given here implies that if G is a graph on n vertices and more than tk−1 (n)
edges, where tk (n) := e(Tk,n ), and if v is a vertex of maximum degree ∆ in G,
then the subgraph G[N (v)] induced by the neighbours of G has more than tk−2 (∆)
edges. Iterating this procedure, one sees that a clique of size k in G can be found
by applying a simple greedy algorithm: select a vertex v1 of maximum degree in
G1 := G, then a vertex v2 of maximum degree in G2 := G1 [N (v1 )], then a vertex
v3 of maximum degree in G3 := G2 [N (v2 )], and so on. The resulting set of vertices
{v1 , v2 , v3 , . . . , vk } is a clique of G (Exercise 12.2.4).
x

x

(a)

(b)

(c)

(d)

Fig. 12.4. (a) A graph G with d(x) = ∆ = 5, (b) another drawing of G with the subgraph
G[X] ∼
= T2,5 ∨ K3 ∼
= T3,8
= C5 highlighted, (c) the graph C5 ∨ K3 , (d) the graph H ∼

12.2 Turán’s Theorem

303

An Application to Combinatorial Geometry
Extremal graph theory has applications to diverse areas of mathematics, including
combinatorial number theory and combinatorial geometry. We describe here an
application of Turán’s Theorem to combinatorial geometry.
The diameter of a set of points in the plane is the maximum distance between
two points of the set. It should be noted that this is a purely geometric notion and
is quite unrelated to the graph-theoretic concepts of diameter and distance.
 
We discuss sets of diameter one. A set of n points determines n2 distances
between pairs of these points. It is intuitively clear that if n is ‘large’, some of
these distances must be ‘small’. Therefore, for any d between 0 and 1, it makes
sense to ask how many pairs of points in a set {x1 , x2 , . . . , xn } of diameter one can
be at distance greater than d. Here, we present a solution,
√ by Erdős (1955, 1956),
of one special case of this problem, namely when d = 1/ 2.
As an illustration, consider the case n = 6. We then have six points xi , 1 ≤
i ≤ 6. If we place them at the vertices of a regular hexagon with the pairs (x1 , x4 ),
(x2 , x5 ), and (x3 , x6 ) at distance one, as shown in Figure 12.5a, these six points
clearly constitute a set of diameter one.
It is easily calculated that the pairs
(x1 , x2 ), (x2 , x3 ), (x3 , x4 ), (x4 , x5 ), (x5 , x6 ), and (x6 , x1 )
are at distance 1/2, and the pairs
(x1 , x3 ), (x2 , x4 ), (x3 , x5 ), (x4 , x6 ), (x5 , x1 ), and (x6 , x2 )
√
√
√
√
are at distance 3/2. Because
√ 3/2 > 2/2 = 1/ 2, there are nine pairs of points
at distance greater than 1/ 2 in this set of diameter one.
x1

x2

x1

x2
x3

x6

x6
x5

x4
(a)

x4

x5

x3
(b)

Fig. 12.5. Two sets of diameter one in the plane

However, nine is not the best we can do with six points. By placing the points
in the conﬁguration shown in Figure 12.5b, all pairs of points except (x1 , x2 ),

304

12 Stable Sets and Cliques

√
(x3 , x4 ), and (x5 , x6 ) are at distance
√ greater than 1/ 2. Thus, we have twelve
pairs at distance greater than 1/ 2; in fact, this is the best we can do. The
solution to the problem in general is given by the following theorem.
Theorem 12.4 Let S be a set of diameter one in the√plane. Then the number of
pairs of points of S whose distance is greater than 1/ 2 is at most n2 /3, where
n = |S|. Moreover, for each n ≥ 2, there is a set of n points of diameter
one in
√
which exactly n2 /3 pairs of points are at distance greater than 1/ 2.
Proof Let S := {x1 , x2 , . . . ,√
xn }. Consider the graph G with vertex set S and
edge set {xi xj | d(xi , xj ) > 1/ 2}, where d(xi , xj ) denotes the euclidean distance
between xi and xj . We show that G cannot contain a copy of K4 .
First, note that any four points in the plane determine an angle of at least 90
degrees between three of them: the convex hull of the points is a line, a triangle,
or a quadrilateral (see Figure 12.6), and in each case there is an angle x
i xj xk of
at least 90 degrees.
xk
x

xi

xk

xj

xj

xj
xi

xk
xi

(a)

x
(b)

x
(c)

Fig. 12.6. The possible convex hulls of four points in the plane: (a) a line, (b) a triangle,
(c) a quadrilateral

Now look at the three points xi , xj , xk which determine this angle.
Not all the
√
,
x
)
can
be
greater
than
1/
2
and
less than
distances d(xi , xj ), d(xj , xk ), and d(x
i
k
√
√
or equal to 1. For, if d(xi , xj ) > 1/ 2 and d(xj , xk ) > 1/ 2, then d(xi , xk ) > 1.
The set {x1 , x2 , . . . , xn } is assumed to have diameter one. It follows that, of any
four points in G, at least one pair cannot be joined by an edge, and hence that G
cannot contain a copy of K4 . By Turán’s Theorem (12.3),
e(G) ≤ e(T3,n ) = n2 /3
This proves the ﬁrst statement.
One can construct a set {x1 , x2 , . . . , xn } of diameter
√ one in which exactly
n2 /3 pairs of points are at distance greater than 1/ 2 as follows. Choose r
such that 0 < r < (1 − √12 )/4, and draw three circles of radius r whose centres
are at distance 1 − 2r from one another (see Figure 12.7). Set p := n/3. Place
points x1 , x2 , . . . , xp in one circle, points xp+1 , xp+2 , . . . , x2p in another, and points
x2p+1 , x2p+2 , . . . , xn in the third, in such a way that d(x1 , xn ) = 1. This set clearly

12.2 Turán’s Theorem

305

√
has diameter one. Also, d(xi , xj ) > 1/ 2 if and only if xi and xj are in diﬀerent
√
circles, and so there are exactly n2 /3 pairs (xi , xj ) for which d(xi , xj ) > 1/ 2.


x1

r

1 − 2r

r

xn

Fig. 12.7. An extremal conﬁguration of diameter one

Many other applications of extremal graph theory to combinatorial geometry
and analysis can be found in the articles by Erdős et al. (1971, 1972a,b) and in
the survey article by Erdős and Purdy (1995).

Exercises
12.2.1 A certain bridge club has a special rule to the eﬀect that four members
may play together only if no two of them have previously partnered each other. At
one meeting fourteen members, each of whom has previously partnered ﬁve others,
turn up. Three games are played and then proceedings come to a halt because of
the club rule. Just as the members are preparing to leave, a new member, unknown
to any one of them, arrives. Show that at least one more game can now be played.
12.2.2 A ﬂat circular city of radius six miles is patrolled by eighteen police cars,
which communicate with one another by radio. If the range of a radio is nine
miles, show that, at any time, there are always at least two cars each of which can
communicate with at least ﬁve others.
12.2.3

 2 1
 2


n − 8 k ≤ tk (n) ≤ k−1
n .
a) Show that k−1
2k
2k
 k−1  2
b) Deduce that tk (n) =  2k n  for all k < 8.

12.2.4 Let G be a graph on n vertices and more than tk−1 (n) edges, where
tk−1 (n) := e(Tk−1,n ). Show that a clique S of k vertices can be found by the
following greedy algorithm.

306
1:
2:
3:
4:
5:
6:
7:
8:

12 Stable Sets and Cliques

set S := ∅ and i := 1
while i < k do
select a vertex vi of maximum degree in G
replace S by S ∪ {vi }, G by G[N (vi )] and i by i + 1
end while
select a vertex vk of maximum degree in G
replace S by S ∪ {vk }
return S

(J.A. Bondy)

12.2.5 A graph G is degree-majorized by a graph H if v(G) = v(H) and the degree
sequence of G (in nondecreasing order) is majorized termwise by that of H.
a) Let G be a graph which contains no copy of Kk . Show that G is degreemajorized by a complete (k − 1)-partite graph.
b) Deduce Turán’s Theorem.
(P. Erdős)
12.2.6 Turán Hypergraph
 
Let V be an n-set. A k-uniform hypergraph (V, F ) is complete if F = Vk , the set
n
(k)
of all k k-subsets of V . This hypergraph is denoted Kn .
a) Let {X, Y, Z} be a partition of V into three sets which are as nearly equal in
size as possible, and let F be the union of {{x, y, z} : x ∈ X, y ∈ Y, z ∈ Z},
{{x1 , x2 , y} : x1 ∈ X, x2 ∈ X, y ∈ Y }, {{y1 , y2 , z} : y1 ∈ Y, y2 ∈ Y, z ∈ Z},
and {{z1 , z2 , x} : z1 ∈ Z, z2 ∈ Z, x ∈ X}. The 3-uniform hypergraph (V, F )
is called the Turán hypergraph on n vertices. Verify that this hypergraph does
(3)
not contain K4 .
b) Let {X, Y } be a partition of V into two sets which are as nearly equal in size
as possible, and let F be the set of all 3-subsets of V which intersect both X
(3)
and Y . Verify that the hypergraph (V, F ) does not contain K5 .
(Turán (1941) conjectured that these hypergraphs are extremal conﬁgurations for
the two respective extremal problems.)
————— —————
12.2.7
a) Let G be a simple nonbipartite graph with m > 14 (n − 1)2 + 1. Show that G
contains a triangle.
b) For all odd n ≥ 5, ﬁnd a simple triangle-free nonbipartite graph G with
(P.Erdős)
m = 14 (n − 1)2 + 1.
12.2.8 Denote by t(G) the total number of triangles of G, and by t(e) the number
of triangles of G containing a given edge e.
a) Let G be a simple graph on n vertices, and let e = xy ∈ E. Show that
d(x) + d(y) ≤ n + t(e).
b) By summing this inequality over all e ∈ E, deduce that t(G) ≥ m(4m − n2 )/3n.
(J.W. Moon and L. Moser)

12.2 Turán’s Theorem

c) Deduce that if k ≥ 3 and m ≥ 12 (1 − k1 )n2 , then t(G) ≥

307

k

(n/k)3 .
(A.W. Goodman)
d) For k ≥ 3 and n ≡ 0 (mod k), construct a graph G with m = 12 (1 − k1 )n2 and
 
t(G) = k3 (n/k)3 .
3

(Compare with Exercise 2.1.17.)
12.2.9
a) Show that if m ≥ n2 /4 + 1, then t(G) ≥ n/2, where t(G) is the number of
triangles of G.
(H. Rademacher)
b) For each n ≥ 3, construct a graph G with m = n2 /4 + 1 and t(G) = n/2.
12.2.10 Let G be a simple graph with average degree d, and let k be a positive
integer.
 
 

> (k − 1) n2 , then G contains a copy of K2,k .
a) Show that if v∈V d(v)
2
b) Deduce that if d > (k−1)1/2 n1/2 + 12 , then G contains a copy of K2,k . (Compare
with Exercise 2.1.15, which treats the case k = 2.)
c) Let S be a set of n points in the plane. By applying (b), show that the number
of pairs of points of S at distance exactly one is at most √12 n3/2 + 14 n.
12.2.11 The Kővári–Sós–Turán Theorem
Let G be a simple graph with average degree d, and let k and be positive integers.
 
 

> ( − 1) nk , then G contains a copy of Kk,
a) Show that if v∈V d(v)
k
 n  n n+1
+
=
, show that if p and q are integers such
b) Using the identity k−1
p q  kp−1 k q+1
that p > q, then k + k ≥ k + k .
d(v)
r 

c) Deduce from (b) that
n v∈Vk k ≥ nrk , where r := d.
d) Using the bounds k ≤ n /k! and k ≥ (r − k + 1)k /k!, deduce that if
d > ( − 1)1/k n1−1/k + k, then G contains a copy of Kk, .
(T. Kővári, V.T. Sós, and P. Turán)
12.2.12 Polarity Graph
A polarity of a geometric conﬁguration (P, L) is an involution π of P ∪ L, mapping
points to lines and lines to points, which preserves incidence. Thus a point p and
line L are incident if and only if the line π(p) and the point π(L) are incident. The
line π(p) is called the polar of the point p, and the point π(L) the pole of the line
L. The polarity graph of the conﬁguration with respect to a polarity π is the graph
Gπ whose vertex set is P , two vertices being joined if and only if one lies on the
polar of the other.
a) Find a polarity π of the Fano plane and draw its polarity graph Gπ .
b) Find a polarity π of the Desargues conﬁguration whose polarity graph Gπ is
isomorphic to the Petersen graph.
(A.B. Kempe)
c) Show that a polarity graph of a ﬁnite projective plane has diameter two.
d) How many vertices does a polarity graph of a ﬁnite projective plane of order
n have, and what are their degrees?

308

12 Stable Sets and Cliques

(Polarity graphs were ﬁrst described by Artzy (1956), who called them reduced
Levi graphs. They were rediscovered by Erdős and Rényi (1962).)
12.2.13 Let π be the bijection of points and lines of the projective plane P G2,q
(deﬁned in Exercise 1.3.14) which maps each point (a, b, c) to the line ax+by+cz =
0. Prove that π is a polarity of P G2,q .
12.2.14 An absolute point of a polarity is a point which lies on its polar.
a) Show that the polarity π deﬁned in Exercise 12.2.13 has q + 1 absolute points.
(Baer (1946) proved that every polarity of a ﬁnite projective plane of order n
has at least n + 1 absolute points.)
b) Deduce that the polarity graph of a ﬁnite projective plane P G2,q has q 2 + q + 1
vertices, 12 q(q + 1)2 edges and no 4-cycles.
(W.G. Brown; P. Erdős, A. Rényi, and V.T. Sós)
(Füredi (1996) proved that, when q is a prime power, q > 13, polarity graphs
with q 2 + q + 1 vertices are extremal graphs without 4-cycles.)
12.2.15 Let H be a simple graph which contains no 3-cube. By Exercise 2.2.2a,
H has a spanning bipartite subgraph G with e(G) ≥ 12 e(H). For distinct vertices
x and y of G, denote by p(x, y) the number of xy-paths of length three in G, and
set X := N (x) and Y := N (y).
a) Show that:
i) if X ∩ Y = ∅, then p(x, y) = 0,
ii) if X ∩ Y = ∅, then the subgraph B[X, Y ] whose vertex set is X ∪ Y and
whose edge set is {uv ∈ E(G) : u ∈ X, v ∈ Y } contains no 6-cycle.
b) Deduce that p(x, y) ≤ c1 (d(x) + d(y))4/3 for all x, y ∈ V , where c1 is a suitable
positive constant.
c) Using the inequality
 n
γ
n


γ
1−γ
ai ≥ n
ai
i=1

i=1

valid for positive real numbers ai , 1 ≤ i ≤ n, and γ ≥ 1, deduce that G has at
most c2 n2 d4/3 paths of length three, where c2 is a suitable positive constant
and d is the average degree of G.
d) By appealing to Exercise 13.2.6, conclude that m < cn8/5 for some positive
constant c.
(R. Pinchasi and M. Sharir)

12.3 Ramsey’s Theorem
Ramsey Numbers and Ramsey Graphs
Because cliques are complements of stable sets, if a graph has no large cliques, one
might expect it to have a large stable set. That this is indeed the case was ﬁrst
proved by Ramsey (1930). He showed that, given any positive integers k and ,

12.3 Ramsey’s Theorem

309

there exists a smallest integer r(k, ) such that every graph on r(k, ) vertices contains either a clique of k vertices or a stable set of vertices. By complementarity,
r(k, ) = r( , k) (Exercise 12.3.1). Also, it is easily seen that:
r(1, ) = r(k, 1) = 1

(12.3)

and
r(2, ) = ,

r(k, 2) = k

(12.4)

The numbers r(k, ) are known as the Ramsey numbers; when k = , they are
called diagonal Ramsey numbers. The following theorem on Ramsey numbers is
due to Erdős and Szekeres (1935) and Greenwood and Gleason (1955).
Theorem 12.5 For any two integers k ≥ 2 and

≥ 2,

r(k, ) ≤ r(k, − 1) + r(k − 1, )

(12.5)

Furthermore, if r(k, − 1) and r(k − 1, ) are both even, strict inequality holds
in (12.5).
Proof Let G be a graph on r(k, − 1) + r(k − 1, ) vertices, and let v ∈ V . We
distinguish two cases:
1. Vertex v is nonadjacent to a set S of at least r(k, − 1) vertices.
2. Vertex v is adjacent to a set T of at least r(k − 1, ) vertices.
Note that either case 1 or case 2 must hold because the number of vertices to
which v is nonadjacent plus the number of vertices to which v is adjacent is equal
to r(k, − 1) + r(k − 1, ) − 1.
In case 1, G[S] contains either a clique of k vertices or a stable set of − 1
vertices, and therefore G[S ∪ {v}] contains either a clique of k vertices or a stable
set of vertices. Similarly, in case 2, G[T ∪{v}] contains either a clique of k vertices
or a stable set of vertices. Because either case 1 or case 2 must hold, it follows
that G contains either a clique of k vertices or a stable set of vertices. This proves
(12.5).
Now suppose that r(k, − 1) and r(k − 1, ) are both even, and let G be a graph
on r(k, − 1) + r(k − 1, ) − 1 vertices. Because G has an odd number of vertices,
it follows from Corollary 1.2 that some vertex v is of even degree; in particular, v
cannot be adjacent to precisely r(k − 1, ) − 1 vertices. Consequently, either case
1 or case 2 above holds, and G therefore contains either a clique of k vertices or a
stable set of vertices. Thus, as asserted,
r(k, ) ≤ r(k, −1)+r(k−1, )−1



.
The determination of the Ramsey numbers in general is a very diﬃcult unsolved
problem. Lower bounds can be obtained by the construction of suitable graphs.
Consider, for example, the four graphs in Figure 12.8.

310

12 Stable Sets and Cliques

(a)

(b)

0

12

2

10
9

2

14
3

4

3

13

4

12

5

11

5
7

1

15

11

8

0

16

1

6
10

6

7
9

(c)

8
(d)

Fig. 12.8. (a) A (3,3)-Ramsey graph, (b) a (3,4)-Ramsey graph, (c) a (3,5)-Ramsey
graph, (d) a (4,4)-Ramsey graph

The 5-cycle (Figure 12.8a) contains no clique of three vertices and no stable
set of three vertices. It shows, therefore, that
r(3, 3) ≥ 6

(12.6)

The graph of Figure 12.8b is the Wagner graph (see Section 10.5). It contains no
clique of three vertices and no stable set of four vertices. Hence
r(3, 4) ≥ 9

(12.7)

Similarly, the graph of Figure 12.8c shows that
r(3, 5) ≥ 14

(12.8)

and the graph of Figure 12.8d yields
r(4, 4) ≥ 18

(12.9)

With the aid of Theorem 12.5 and equations (12.4) we can now show that
equality in fact holds in (12.6)–(12.9). Firstly, by (12.5) and (12.4),

12.3 Ramsey’s Theorem

r(3, 3) ≤ r(3, 2) + r(2, 3) = 6

311

(12.10)

and therefore, using (12.6), we have r(3, 3) = 6. Noting that r(3, 3) and r(2, 4) are
both even, we apply Theorem 12.5 and (12.4) to obtain
r(3, 4) ≤ r(3, 3) + r(2, 4) − 1 = 9
With (12.7) this gives r(3, 4) = 9. Now we again apply (12.5) and (12.4) to obtain
r(3, 5) ≤ r(3, 4) + r(2, 5) = 14
and
r(4, 4) ≤ r(4, 3) + r(3, 4) = 18
which, together with (12.8) and (12.9), respectively, yield r(3, 5) = 14 and r(4, 4) =
18.
The following table shows all the Ramsey numbers r(k, ) known to date, where
3≤k≤ .
k

33 3 3 3 3 3 4 4
34 5 6 7 8 9 4 5
r(k, ) 6 9 14 18 23 28 36 18 25
A (k, )-Ramsey graph is a graph on r(k, ) − 1 vertices that contains neither a
clique of k vertices nor a stable set of vertices. By deﬁnition of r(k, ), such graphs
exist for all k ≥ 2 and ≥ 2. Ramsey graphs often seem to possess interesting
structures. All of the graphs in Figure 12.8 are Ramsey graphs; the last two can be
obtained from ﬁnite ﬁelds in the following way. We get the (3, 5)-Ramsey graph by
regarding the thirteen vertices as elements of the ﬁeld of integers modulo 13, and
joining two vertices by an edge if their diﬀerence is a cubic residue of 13 (namely,
1, 5, 8, or 12); the (4, 4)-Ramsey graph is obtained by regarding the vertices as elements of the ﬁeld of integers modulo 17, and joining two vertices if their diﬀerence
is a quadratic residue of 17 (namely, 1, 2, 4, 8, 9, 13, 15, or 16). For k = 2, 3, and
4, the (k, k)-Ramsey graphs are self-complementary (that is, isomorphic to their
complements) (Exercise 12.3.2). Whether this is true for all values of k is an open
question.
Bounds on Ramsey Numbers
Theorem 12.5 yields the following upper bound for the Ramsey numbers.
Theorem 12.6 For all positive integers k and ,


k+ −2
r(k, ) ≤
k−1

312

12 Stable Sets and Cliques

Proof By induction on k + . Using (12.3) and (12.4), we see that the theorem
holds when k + ≤ 5. Let m and n be positive integers, and assume that the
theorem is valid for all positive integers k and such that 5 ≤ k + < m + n.
Then, by Theorem 12.5 and the induction hypothesis,
r(m, n) ≤ r(m, n − 1) + r(m − 1, n)

 
 

m+n−3
m+n−3
m+n−2
≤
+
=
m−1
m−2
m−1
Thus the theorem holds for all values of k and .

k+−2
On noting that k−1 is the number of (k − 1)-subsets of a (k + − 2)-set,
whereas 2k+−2 is the total number of subsets of this set, we have
Corollary 12.7 For all positive integers k and , r(k, ) ≤ 2k+−2 , with equality
if and only if k = = 1.

Corollary 12.7 shows, in particular, that the diagonal Ramsey numbers grow at
most exponentially. We now give an exponential lower bound for these numbers.
Due to Erdős (1947), it is obtained by means of a powerful counting technique
known as the probabilistic method. This technique, introduced and developed by
Erdős in collaboration with other Hungarian mathematicians, including P. Turán,
has been applied to remarkable eﬀect in combinatorics, number theory, and computer science, as well as in graph theory. A more formal and detailed account of
the method is given in Chapter 13.
Theorem 12.8 For all positive integers k,
r(k, k) ≥ 2k/2
Proof Because r(1, 1) = 1 and r(2, 2) = 2, we may assume that k ≥ 3. As in Section 1.2, we denote by Gn the set of simple graphs with vertex set {v1 , v2 , . . . , vn }.
Let Gnk be the set of these labelled simple graphs which have a clique of k vertices.
Observe that
n
(12.11)
|Gn | = 2( 2 )
n
since each subset of the 2 possible edges vi vj determines a graph in Gn . Similarly,
the number of graphs in Gn having a particular set of k vertices as a clique is
 
n
k
2( 2 )−(2) . Because there are nk distinct k-element subsets of {v1 , v2 , . . . , vn }, we
have
 
n (n2 )−(k2)
k
2
|Gn | ≤
(12.12)
k
(The inequality arises because the graphs in Gnk which have more than one k-clique
are counted more than once by the expression on the right-hand side.)

12.3 Ramsey’s Theorem

313

By (12.11) and (12.12),
|Gnk |
≤
|Gn |

k
 
n −(k2)
nk 2−(2)
2
<
k
k!

Suppose that n < 2k/2 . Then
k

2k /2 2−(2)
2k/2
1
|Gnk |
<
=
<
|Gn |
k!
k!
2
2

In other words, if n < 2k/2 , then fewer than half of the graphs in Gn contain
a clique of k vertices. Likewise, by complementarity, fewer than half of the graphs
in Gn contain a stable set of k vertices. Hence some graph in Gn contains neither
a clique of k vertices nor a stable set of k vertices. Because this holds for any

n < 2k/2 , we have r(k, k) ≥ 2k/2 .
Corollary 12.7 tells us that there exists a (k, k)-Ramsey graph of order less
than 22k−2 . However, it does not show us how to ﬁnd or construct such a graph.
All known lower bounds for r(k, k) obtained by constructive arguments are much
weaker than the one given by Theorem 12.8. The best is due to Frankl and Wilson
(1981); their construction is described in Section 12.5.
The Ramsey numbers r(k, ) are sometimes deﬁned in a slightly diﬀerent manner from the way in which we introduced them. One easily sees that r(k, ) can
be thought of as the smallest integer n such that every (not necessarily proper)
2-edge-colouring (E1 , E2 ) of Kn contains either a complete subgraph on k vertices,
all of whose edges are assigned colour 1, or a complete subgraph on vertices, all
of whose edges are assigned colour 2.
Expressed in this form, the Ramsey numbers have a natural generalization. For
positive integers ti , 1 ≤ i ≤ k, we deﬁne r(t1 , t2 , . . . , tk ) to be the smallest integer
n such that every k-edge-colouring (E1 , E2 , . . . , Ek ) of Kn contains a complete
subgraph on ti vertices all of whose edges belong to Ei , for some i, 1 ≤ i ≤ k.
The following theorem and corollary generalize inequality (12.5) and Theorem 12.6, and can be proved in a similar manner (Exercise 12.3.3).
Theorem 12.9 For all positive integers ti , 1 ≤ i ≤ k,
r(t1 , t2 , . . . , tk ) ≤ r(t1 − 1, t2 , . . . , tk ) + r(t1 , t2 − 1, . . . , tk ) + · · ·
+ r(t1 , t2 , . . . , tk − 1) − k + 2



Corollary 12.10 For all positive integers ti , 1 ≤ i ≤ k,
r(t1 + 1, t2 + 1, . . . , tk + 1) ≤

(t1 + t2 + · · · + tk )!
t1 !t2 ! . . . tk !



314

12 Stable Sets and Cliques

An Application to Number Theory
We now describe an interesting application of Ramsey’s theorem to combinatorial
number theory.
Consider the partition ({1, 4, 10, 13}, {2, 3, 11, 12}, {5, 6, 7, 8, 9}) of the set of
integers {1, 2, . . . , 13}. Observe that in no subset of the partition are there three
integers x, y, and z (not necessarily distinct) which satisfy the equation
x+y =z

(12.13)

Yet, no matter how we partition {1, 2, . . . , 14} into three subsets, there will always exist a subset of the partition which contains a solution to (12.13) (Exercise 12.3.8a). Schur (1916) proved that, in general, given any positive integer n,
there exists an integer rn such that, for any partition of {1, 2, . . . , rn } into n subsets, one of the subsets contains a solution to (12.13). We show that the Ramsey
number rn := r(t1 , t2 , . . . , tn ), where ti = 3, 1 ≤ i ≤ n, satisﬁes this requirement.
Theorem 12.11 Schur’s Theorem
Let {A1 , A2 , . . . , An } be a partition of the set of integers {1, 2, . . . , rn } into n subsets. Then some Ai contains three integers x, y, and z satisfying the equation
x + y = z.
Proof Consider the complete graph whose vertex set is {1, 2, . . . , rn }. Colour the
edges of this graph in colours 1, 2, . . . , n by the rule that the edge uv is assigned
colour i if |u−v| ∈ Ai . By Ramsey’s Theorem (12.9), there exists a monochromatic
triangle in the graph; that is, there are three vertices a, b, and c such that the edges
ab, bc, and ac all have the same colour j. Assume, without loss of generality, that
a > b > c and write x = a − b, y = b − c, and z = a − c. Then x, y, z ∈ Aj , and
x + y = z.

Let sn be the least integer such that, in any partition of {1, 2, . . . , sn } into n
subsets, there is a subset which contains a solution to (12.13). It can be checked
that s1 = 1, s2 = 5, and s3 = 14 (Exercise 12.3.8a). Also, from Theorem 12.11
and Exercise 12.3.4 we have the upper bound
sn ≤ n! e + 1
A lower bound for sn is the topic of Exercise 12.3.8c.

Exercises
12.3.1 Show that, for all k and l, r(k, ) = r( , k).
12.3.2 Show that the (4, 4)-Ramsey graph (Figure 12.8d) is self-complementary.
12.3.3 Prove Theorem 12.9 and Corollary 12.10.

12.3 Ramsey’s Theorem

315

12.3.4
a) Show that rn ≤ n(rn−1 − 1) + 2.
b) Noting that r2 = 6, use (a) to show that rn ≤ n!e + 1.
c) Deduce that r3 ≤ 17.
12.3.5 Clebsch Graph
a) The Clebsch graph has as vertex set the even subsets of {1, 2, 3, 4, 5}, two being
adjacent if their symmetric diﬀerence has cardinality four. A drawing of the
Clebsch graph is shown in Figure 12.9. Find an appropriate labelling of its
vertices.

Fig. 12.9. The Clebsch graph

b) Show that the Clebsch graph is vertex-transitive and triangle-free, and that
the non-neighbours of any vertex induce a copy of the Petersen graph.
c) Consider two further graphs deﬁned on the same set of vertices as the Clebsch graph. In the ﬁrst, two vertices are adjacent if their symmetric diﬀerence
belongs to the set {12, 23, 34, 45, 51} (where we write ij for {i, j}); in the
second, two vertices are adjacent if their symmetric diﬀerence belongs to the
set {13, 24, 35, 41, 52}. Show that both of these graphs are isomorphic to the
Clebsch graph.
d) Using the bound given in Exercise 12.3.4c, deduce that r3 = 17.
(R.E. Greenwood and A.M. Gleason)
12.3.6 Let G = K3 ∨ C5 , the join of K3 and C5 . Show that:
a) G contains no copy of K6 ,
b) every 2-edge colouring of G contains a monochromatic triangle.
(R.L. Graham)
(Folkman (1970) has constructed a (huge) graph which contains no copy of K4 ,
but every 2-edge colouring of which contains a monochromatic triangle; more generally, Nešetřil and Rödl (1975) have constructed, for every positive integer k,

316

12 Stable Sets and Cliques

a graph containing no copy of K4 , every k-edge colouring of which contains a
monochromatic triangle.)
12.3.7 Let G1 , G2 , . . . , Gk be simple graphs. The generalized Ramsey number
r(G1 , G2 , . . . , Gk ) is the smallest integer n such that every k-edge-colouring
(E1 , E2 , . . . , Ek ) of Kn contains, for some i, a subgraph isomorphic to Gi in colour
i. Let P3 denote the 3-path, C4 the 4-cycle, and Tm any tree on m vertices. Show
that:
a) r(P3 , P3 ) = 5, r(P3 , C4 ) = 5, and r(C4 , C4 ) = 6,
b) r(Tm , K1,n ) ≤ m + n − 1, with equality if n − 1 ≡ 0 (mod (m − 1)),
(V. Chvátal)
c) r(Tm , Kn ) = (m − 1)(n − 1) + 1.
12.3.8
a) Show that:
i) s1 = 2, s2 = 5, and s3 = 14,
ii) sn+1 ≥ 3sn − 1 for all n.
b) Deduce that sn ≥ 12 (3n + 1) for all n.
(Abbott and Moser (1966) determined a sharper lower bound on sn .)
————— —————
12.3.9 Composition
The composition, or lexicographic product, of simple graphs G and H is the simple
graph G[H] with vertex set V (G) × V (H) in which (u, v) is adjacent to (u , v  )
if and only if either uu ∈ E(G) or u = u and vv  ∈ E(H). (This amounts to
replacing each vertex of G by a copy of H, and linking these copies by complete
bipartite graphs according to the edges of G.)
a) Show that α(G[H]) ≤ α(G)α(H).
b) Using (a), show that
r(kl + 1, kl + 1) − 1 ≥ (r(k + 1, k + 1) − 1)(r(l + 1, l + 1) − 1)
c) Deduce that r(2n + 1, 2n + 1) ≥ 5n + 1 for all n ≥ 0.

(H.L. Abbott)

12.3.10 Let k, s, and t be positive integers with s ≤ t. Show that there exists an
integer r := rk (s, t) such that, for every k-edge-colouring (E1 , E2 , . . . , Ek ) of the suniform complete hypergraph H on at least r vertices, H contains a monochromatic
complete subhypergraph on t vertices.
12.3.11
a) Show that every 2-edge-coloured countably inﬁnite complete graph contains a
countably inﬁnite monochromatic complete subgraph.
b) Deduce the ﬁnite version of Ramsey’s Theorem.
12.3.12 Let V be a set of points in the plane in general position (no three
collinear), and let G be the complete geometric graph with vertex set V . Show
that, for every 2-edge-colouring of G, there is a monochromatic spanning tree no
two edges of which cross.
(G. Károlyi, J. Pach, and G. Tóth)

12.4 The Regularity Lemma

317

12.4 The Regularity Lemma
Somewhat paradoxically, the behaviour of random graphs (studied in Chapter 13)
is often highly predictable. For example, when p is a constant, many properties
of the random graph Gn,p hold almost surely. One of the diﬃculties in saying
things about concrete graphs is that they are less homogeneous: their edges can
be scattered about the graph in unpredictable ways, even if information is known
about basic parameters of the graph such as its connectivity or chromatic number
Fortunately, it turns out that any suﬃciently large dense graph can be split
up in such a way that the resulting subgraphs are joined to one another in an
essentially randomlike manner, and this allows one to establish many interesting
properties of such graphs. This remarkable and surprising fact is known as the
Regularity Lemma. It was developed by Szemerédi (1978) in order to prove a
beautiful theorem in number theory: every dense subset of the positive integers
contains arbitrarily long arithmetic progressions. In more recent years, it has been
used to establish numerous results in extremal graph theory, as well as in number
theory, geometry, and other ﬁelds, and is now a major tool in combinatorics.
Regular Pairs and Regular Partitions
Let G = (V, E) be a graph and let X and Y be disjoint subsets of V . The density
d(X, Y ) is the proportion of the |X||Y | possible edges of G that are actually present
in G:
e(X, Y )
d(X, Y ) :=
|X||Y |
In the case of a random graph G = Gn,p , the expected value of e(X, Y ) is p|X||Y |,
so the expected value of the density is simply p, no matter what the sets X and Y
are. Moreover, Chernoﬀ’s Inequality shows that d(X, Y ) is always close to p with
high probability (see Exercise 13.3.7).
Let  be a small ﬁxed positive constant. In what follows, all deﬁnitions are with
respect to , and it is convenient not to make explicit mention of this constant each
time. We refer to a subset of a set X as a small subset of X if it is of cardinality
at most |X|, and a large subset of X if it is of cardinality greater than |X|. With
these conventions, a pair (X, Y ) of disjoint subsets of V is called regular if the
densities of (X  , Y  ) and (X, Y ) diﬀer by at most  whenever X  is a large subset
of X and Y  is a large subset of Y ; otherwise, the pair is irregular. A regular
partition of V with exceptional set X0 is a partition {X0 , X1 , X2 , . . . , Xr } such
that:
 X0 is a small subset of V ,
 |Xi | = |Xj |, 1 ≤ i ≤ r,

 (Xi , Xj ) is regular for all but at most  2r pairs {i, j} ⊂ {1, 2, . . . , r}.
A partition {X0 , X1 , X2 , . . . , Xr } satisfying the ﬁrst two conditions is an equipartition of V .

318

12 Stable Sets and Cliques

Szemerédi’s Regularity Lemma guarantees that every suﬃciently large graph
admits a regular partition into not too many parts.
Theorem 12.12 The Regularity Lemma
Let p be an integer and  a positive real number. Then there is an integer q,
depending only on p and , such that any graph G on at least q vertices has a
regular partition {X0 , X1 , X2 , . . . , Xr } with p ≤ r ≤ q.
The proof of the Regularity Lemma, although not conceptually diﬃcult, is a bit
technical. For this reason, we ﬁrst of all present one of its important applications, a
celebrated theorem due to Erdős and Stone (1946), and another interesting application to Ramsey numbers. These, and many other applications of the Regularity
Lemma, rely on the following basic property of regular pairs.
Lemma 12.13 Let (X, Y ) be a regular pair of density d, let Y  be a large subset of
Y , and let S be the set of vertices of X which have fewer than (d−)|Y  | neighbours
in Y  . Then S is a small subset of X.
Proof Consider a large subset X  of X. Because (X, Y ) is a regular pair,
d(X  , Y  ) ≥ d − . Hence e(X  , Y  ) ≥ (d − )|X  ||Y  |, implying that some vertex of X  has at least (d − )|Y  | neighbours in Y  . Thus X  = S. We conclude
that S is not a large subset of X.

The Erdős–Stone Theorem
Turán’s Theorem tells us that every graph G with at least tk−1 (n) + 1 edges
contains a copy of the complete graph Kk . The Erdős–Stone Theorem says, roughly
speaking, that if n is suﬃciently large and G has not too many more edges, then
G contains a copy of the Turán graph Tk,tk , the complete k-partite graph with t
vertices in each part.
Theorem 12.14 The Erdős–Stone Theorem
Let k and t be integers, where k ≥ 3 and t ≥ 2, and let d be a real number, where
0 < d < 12 . Then there is an integer N , depending only on k, t, and d, such that
every graph G with at least N vertices and at least tk−1 (n) + dn2 edges contains a
copy of the Turán graph Tk,tk .
Proof We apply the Regularity Lemma with




 (k−1)t
k−1
1
d
and N := max q,
(12.14)
p :=
 :=
2
d − 3
8
where q is the function of p and  deﬁned in the Regularity Lemma. The choices
of the parameters , p, and N in (12.14) are made simply to ensure that the
computations below go through smoothly.
Assume that G is a graph on n vertices and at least tk−1 (n) + dn2 edges,
where n ≥ N . Then there is a regular partition {X0 , X1 , . . . , Xr } of V such that
p ≤ r ≤ q. We set := |Xi |, 1 ≤ i ≤ r. Thus r ≥ (1 − )n.
We now consider the subgraph H of G obtained by deleting:

12.4 The Regularity Lemma

319

 the exceptional set X0 ,
 all edges of G[Xi ], 1 ≤ i ≤ r,
 all edges between irregular pairs (Xi , Xj ),
 all edges between regular pairs (Xi , Xj ) of density less than d.
Then H is a graph on r vertices, and the number of edges deleted from G to
form H is at most
 
 
 
r
1
1
1
r 2
d 2 < n2 − n + r 2 + r2 2 + dr2 2
+
n(n − 1) + r
+
2
2
2
2
2
2
Thus


1
1
+ r2 2 + dr2 2
2
2
1
1
≥ tk−1 (n) + (d − )n2 − (d + )r2 2 − r 2
2
2
1
1
2 2
2 2
≥ tk−1 (n) + (d − )r
− (d + )r
− r
2
2
1
1 2
2 2
= tk−1 (n) + (d − 3)r
− r
2
2


1
e(H) − n > e(G) − n2 + r
2

2

2

The fact that r ≥ p and the choice of p in (12.14) yield the inequalities
1
(d − 3) r2
2

2

≥

1
(d − 3) pr
2

2

≥

1
r
2

2

Combining the bound n ≥ N ≥ (k − 1)/8 implied by (12.14) with the bound
(see Exercise 12.2.3a)


1 k−2
k−1
n2 −
tk−1 (n) ≥
2 k−1
8
we now have
1
k−1
e(H) > tk−1 (n) + n ≥ tk−1 (n) +
≥
8
2



k−2
k−1


n2

Let R be the graph with vertex set {x1 , x2 , . . . , xr }, vertices xi and xj being joined
if (Xi , Xj ) is a regular pair of density at least d. Then

 2


n
1 k−2
1 k−2
e(H)
r2
≥
e(R) ≥ 2 >
2
2 k−1
2 k−1
so R contains a copy of Kk , by Turán’s Theorem. In other words, H has k sets Xi
any two of which form a regular pair of density at least d. Without loss of generality, we may assume that these sets are X1 , X2 , . . . , Xk . We show that H[∪ki=1 Xi ]
contains a copy of the desired Turán graph.
Consider a pair (X1 , Xi ). By Lemma 12.13, at most  vertices of X1 have fewer
than c neighbours in Xi , where c := d − . Therefore at most (k − 1) vertices of

320

12 Stable Sets and Cliques

X1 have fewer than c neighbours in one (or more) of the sets Xi , 2 ≤ i ≤ k. In
other words, at least (1−(k−1)) vertices of X1 have at least c neighbours in each
set Xi , 2 ≤ i ≤ k. Let v1 be one such vertex, and let Xi1 be its set of neighbours
in Xi , 2 ≤ i ≤ k. Because c > (d/2) > , this is a large subset of Xi . Therefore,
again by Lemma 12.13, at least (1 − (k − 1)) vertices of X1 each has more than
c2 neighbours in each set Xi1 , 2 ≤ i ≤ k. Let v2 be one such vertex, and let Xi2
be its set of neighbours in Xi1 , 2 ≤ i ≤ k. Continuing in this way, and noting that
t−1
ct−1 ≥ (d/2)
≥ , we may ﬁnd t vertices v1 , v2 , . . . , vt in X1 , and a subset Xit of
t
more than c vertices of Xi , 2 ≤ i ≤ r, such that each vertex vi is joined to every
(k−1)t
vertex of Xit , 2 ≤ i ≤ k. By induction, because c(k−1)t ≥ (d/2)
= , starting
t
with the k − 1 sets Xi , 2 ≤ i ≤ k, we ﬁnd a copy of Tk−1,t(k−1) in H[∪ki=2 Xit ].
Together with the vertices v1 , v2 , . . . , vt this yields a copy of Tk,tk in H, and hence
in G.

An important consequence of the Erdős–Stone Theorem is that it highlights
the intrinsic role played by the chromatic number in extremal graph theory. This
striking fact was ﬁrst noted by Erdős and Simonovits (1966), and the following
result is known as the Erdős–Stone–Simonovits Theorem.
Theorem 12.15 For any simple graph F
limn→∞

1
ex(n, F )
=
n2
2



χ(F ) − 2
χ(F ) − 1



Proof Let k = χ(F ) and let t be the largest size of a colour class in a proper
k-colouring of F . Then F ⊆ Tk,tk . Therefore, by the Erdős–Stone Theorem, for
any d > 0, there is an integer q, depending on k, t, and d, such that every graph
G on at least q vertices and at least tk−1 (n) + dn2 edges contains a copy of F .
Hence, for all d > 0,
tk−1 (n) + dn2
tk−1 (n)
ex(n, F )
≤
=
+d
2
n
n2
n2
On the other hand, because F is k-chromatic and the Turán graph Tk−1,n is (k−1)colourable, F ⊆ Tk−1,n . Therefore ex(n, F ) > tk−1 (n) and
tk−1 (n)
ex(n, F )
>
n2
n2
These two inequalities imply that
1
ex(n, F )
tk−1 (n)
= limn→∞
=
limn→∞
n2
n2
2



χ(F ) − 2
χ(F ) − 1




It should be noted that Theorem 12.15 is only of interest for nonbipartite
graphs: when F is bipartite, it asserts merely that ex(n, F )  n2 , a fact which
follows directly from the theorem of Kővári, Sós, and Turán (Exercise 12.2.11).

12.4 The Regularity Lemma

321

Linear Ramsey Numbers
The Ramsey number of a simple graph G is the least integer p such that every
2-edge-colouring of Kp yields a monochromatic copy of G (see Exercise 12.3.7).
This number is denoted by r(G, G). Because any simple graph G on n vertices is
a subgraph of Kn , one has the obvious upper bound r(G, G) ≤ r(n, n). However,
this exponential bound in n (see Theorem 12.8) is very weak when G is a sparse
graph, one with relatively few edges. Indeed, we show here how the Regularity
Lemma can be applied to prove that the Ramsey numbers of graphs of bounded
maximum degree grow only linearly with their order. This result is due to Chvátal
et al. (1983).
Theorem 12.16 For any graph G of maximum degree ∆,
r(G, G) ≤ cn
where c depends only on ∆.
Proof We set

 := 4−2∆

and p := −1 = 42∆

and take q to be the function of p and  deﬁned in the Regularity Lemma. We now
set c := pq. Note that c depends only on ∆.
Let H be a graph on cn vertices. Clearly, cn ≥ q. Therefore, by the Regularity
Lemma, H has a regular partition {X0 , X1 , X2 , . . . , Xr }, where p ≤ r ≤ q. This
partition is also a regular partition of the complement H of H, for the same value
of  (Exercise 12.4.1). Let R be the graph with vertex set {x1 , x2 , . . . , xr }, vertices
 
xi and xj being adjacent in R if (Xi , Xj ) is a regular pair. Then e(R) ≥ (1 − ) 2r .
Because r > p − 1 = (1 − )/,
 2
 2
 

r
r
1
r
> (1 − 2)
≥ tk (r)
(1 − )
= (1 − ) 1 −
r
2
2
2
where (see Exercise 12.2.3a) k = (2)−1 > 22∆ . By Turán’s Theorem, R contains a
copy of the complete graph Kk . Let F be the spanning subgraph of this complete
graph whose edges correspond to the regular pairs (Xi , Xj ) of density at least
one-half. Because k > 22∆ , either F or F contains a complete subgraph of ∆ + 1
vertices, by Corollary 12.7. If this graph is F , we show that H contains a copy of
G; if it is F , the same argument shows that H contains a copy of G.
Suppose, then, that F contains a complete subgraph of ∆ + 1 vertices. Without loss of generality, we may assume that F has vertex set {x1 , x2 , . . . , x∆+1 }.
Let u1 , u2 , . . . , un be an arbitrary ordering of the vertices of G. We show how
vertices v1 , v2 , . . . , vn can be selected from the sets X1 , X2 , . . . , X∆+1 so that
H[{v1 , v2 , . . . , vj }] contains a copy of G[{u1 , u2 , . . . , uj }], 1 ≤ j ≤ n.
Suppose that the vertices v1 , v2 , . . . , vj have already been selected, where 0 ≤
j ≤ n − 1. We describe how to select the next vertex, vj+1 . For k ≥ j + 1, set
Nj,k := {vi : 1 ≤ i ≤ j and ui uk ∈ E(G)}

322

12 Stable Sets and Cliques

We refer to a set Xi which is disjoint from Nj,k as being eligible for vk at stage j.
A candidate for vk , where k ≥ j + 1, is a vertex of H which:
1. belongs to some eligible set,
2. is adjacent in H to every vertex of Nj,k .
In order to guarantee that a suitable vertex vj+1 can be chosen at each stage,
we shall require that, for 0 ≤ j ≤ n − 1, every eligible set for vk have many
candidates at stage j, at least 4−dj,k of them, where dj,k := |Nj,k | and is the
common cardinality of the sets Xi . This requirement is clearly fulﬁlled at stage 0.
Suppose that it is fulﬁlled at stage j, where 0 ≤ j < n. We select an eligible set
Xs for vj+1 , and consider the set Ys of candidates for vj+1 in Xs . We shall choose
an element of Ys as vj+1 in such a way that, for all k ≥ j + 2, every eligible set for
vk at stage j + 1 has at least 4−dj+1,k candidates.
If uk is not adjacent to uj+1 in G, then dj+1,k = dj,k , and this condition
automatically holds if it holds for j. Suppose, then, that uk is adjacent to uj+1 in
G, so that dj+1,k = dj,k + 1. Consider any set Xt eligible for vk at stage j; there
is at least one such set because dj,k is at most ∆ whereas there are ∆ + 1 sets
Xi . Let Yt be the set of candidates for vk in Xt at this stage. Observe that Yt
is a large subset of Xt , because 4dj,k  < 4∆  < 1. We apply Lemma 12.13 with
X = Xs , Y = Xt , and density at least 12 . Thus the set of vertices of Xs which
are adjacent to at most ( 12 − )|Yt | vertices of Yt is a small subset of Xs ; their
number is at most  . Applying this reasoning to all sets Xt eligible for vk at stage
j (there are at most ∆ of them), and for all k ≥ j + 2 (at most ∆ values of k), we
may conclude that there are at least |Ys | − ∆2  vertices of Ys , each adjacent to
more than ( 12 − )|Yt | vertices of each Yt . Thus, assuming that |Ys | − ∆2  − j > 0,
some vertex of Ys diﬀerent from v1 , v2 , . . . , vj is adjacent to more than ( 12 − )|Yt |
vertices of each Yt such that Xt is eligible for vk at stage j. Now |X0 | ≤ cn, so
(1 − )pqn = (1 − )cn ≤

r


|Xi | = r ≤ q

i=1

whence (1 − )n ≤  and hence j < n ≤ 2 . Because |Ys | ≥ 4−dj,k ≥ 4−∆ and
(∆2 + 2) < 4−∆ ,


|Ys | − ∆2  − j > 4−∆ − ∆2  − 2 = 4−∆ − (∆2 + 2) > 0
Also, because  < 14 and |Yt | ≥ 4−dj,k ,


1
1  −dj,k 
−  |Yt | ≥
4
= 4−dj,k −1 = 4−dj+1,k
2
4
We conclude that there is a candidate for vj+1 in Xs such that, for all k ≥ j + 2,
every eligible set for vk at stage j +1 has at least 4−dj+1,k candidates. The theorem
follows by induction on j.


12.4 The Regularity Lemma

323

A Proof of the Regularity Lemma
The proof of the Regularity Lemma given here is based on a measure of how close
a given partition is to being regular.
For a pair {X, Y } of disjoint sets of vertices of a graph G, we deﬁne its index
of regularity by:
ρ(X, Y ) := |X||Y |(d(X, Y ))2
This index is nonnegative. We extend it to a family P of disjoint subsets of V by
setting:

ρ(P) :=
ρ(X, Y )
X, Y ∈ P
X = Y
In the case where P is a partition of V , we have:


ρ(P) =

|X||Y |(d(X, Y ))2 ≤



|X||Y | <

X, Y ∈ P
X = Y

X, Y ∈ P
X = Y

n2
2

(12.15)

If P is an irregular equipartition of V , we show that there is an equipartition
Q, a reﬁnement of P, whose index of regularity is signiﬁcantly greater than that
of P. By applying this operation a constant number of times (the constant being
a function of ), we end up with a regular partition of V .
The ﬁrst step is to observe that reﬁning a family of subsets never reduces the
index of regularity.
Proposition 12.17 Let G be a graph, let P be a family of disjoint subsets of V ,
and let Q be a reﬁnement of P. Then ρ(Q) ≥ ρ(P).
Proof It suﬃces to show that the conclusion holds when Q is obtained from P
by partitioning one set X ∈ P into two nonempty sets X1 , X2 . We have:

ρ(Q) − ρ(P) = ρ(X1 , X2 ) +
(ρ(X1 , Y ) + ρ(X2 , Y ) − ρ(X, Y ))
Y ∈P
Y = X
Thus it suﬃces to show that, for Y ∈ P, Y = X,
ρ(X1 , Y ) + ρ(X2 , Y ) − ρ(X, Y ) ≥ 0
Set
x := |X|, y := |Y |, d := d(X, Y )
and, for i = 1, 2,
xi := |Xi |, di := d(Xi , Y )

324

12 Stable Sets and Cliques

Then
x = x1 + x2
Also, because e(X, Y ) = e(X1 , Y ) + e(X2 , Y ),
xyd = x1 yd1 + x2 yd2
Therefore, after rearranging terms,
ρ(X1 , Y ) + ρ(X2 , Y ) − ρ(X, Y ) = x1 yd21 + x2 yd22 − xyd2 =

x1 x2 y
(d1 − d2 )2 ≥ 0
x


The conclusion follows.

Next, we show that if (X, Y ) is an irregular pair, then there is a reﬁnement P
of {X, Y } such that ρ(P) is somewhat bigger than ρ(X, Y ).
Lemma 12.18 Let (X, Y ) be an -irregular pair in a graph G, with |d(X1 , Y1 ) −
d(X, Y )| > , where X1 is a large subset of X, and Y1 is a large subset of Y . Deﬁne
X2 := X \ X1 and Y2 := Y \ Y1 . Then
 4 

ρ({X1 , X2 , Y1 , Y2 }) − ρ(X, Y ) ≥
|X||Y |
1 − 2
Proof Set
x := |X|, y := |Y |, d := d(X, Y )
and
xi := |Xi |, yj = |Yj |, dij := d(Xi , Yj ), i, j = 1, 2
In this notation, the hypotheses of the lemma can (essentially) be written as:
2

x1 ≥ x, y1 ≥ y, and (d11 − d) ≥ 2
Also xyd =


i,j=1,2

xi yj dij , so

xyd − x1 y1 d11 = x1 y2 d12 + x2 y1 d21 + x2 y2 d22



Applying the Cauchy–Schwarz Inequality i a2i i b2i ≥ ( i ai bi )2 with
a1 :=
and
b1 :=

√

√

x1 y2 , a2 :=

x1 y2 d12 , b2 =

√

x2 y1 , a3 :=

√

x2 y2

√
√
x2 y1 d21 , b3 = x2 y2 d22

yields
x1 y2 d212 + x2 y1 d221 + x2 y2 d222 ≥
Therefore, by virtue of the inequalities (12.16),

(xyd − x1 y1 d11 )2
xy − x1 y1

(12.16)

12.4 The Regularity Lemma

ρ({X1 , X2 , Y1 , Y2 }) − ρ(X, Y ) ≥



325

xi yj d2ij − xyd2

i,j=1,2

≥ x1 y1 d211 +

(xyd − x1 y1 d11 )2
− xyd2
xy − x1 y1

xy
x1 y1 (d11 − d)2
xy − x1 y1
x1 y1
≥
(d11 − d)2
1 − 2
 4 

xy
≥
1 − 2
=



Lemma 12.18 is the key to the proof of the Regularity Lemma. Given an irregular equipartition P of V , we apply it to each irregular pair of P, and in so doing
show that P can be reﬁned to an equipartition Q whose index of regularity is
signiﬁcantly greater than that of P. For the purposes of the proof, it is convenient
to deﬁne the index of an equipartition {X0 , X1 , . . . , Xk } with exceptional set X0
as the index of the partition obtained on splitting X0 into singletons.
Lemma 12.19 Let P = {X0 , X1 , . . . , Xk } be an equipartition of V . If P is not
regular and |X0 | ≤ ( − 2−k )n, then there is an equipartition Q := {Y0 , Y1 , . . . , Y }
of V such that


n
1− 5 2
 n
k ≤ ≤ k4k and ρ(Q) − ρ(P) ≥
|Y0 | < |X0 | + k ,
2
1+
Proof By Lemma 12.18, the sets Xi and Xj in any irregular pair (Xi , Xj ), can
each be partitioned into two sets so that the index of regularity of the resulting
partition Pij satisﬁes

 4 
 4 

2


1 −  4 n2
2n
 2
|X
(1
−
)
ρ(Pij ) − ρ(Xi , Xj ) ≥
||X
|
≥
=
i
j
1 − 2
1 − 2
k2
1+
k
For each i, 1 ≤ i ≤ k, each of the k − 1 partitions Pij , j = i, induces a partition
of Xi into two parts. Denoting by Pi the coarsest common reﬁnement of these
partitions of Xi , we have |Pi | ≤ 2k−1 . Let P  be the partition of V whose members
are the members of Pi , 1 ≤ i ≤ k, and the singleton elements of X0 . Because
|Pi | < 2k , we have |P  | < k2k . Because there are more than k 2 irregular pairs,




1 −  4 n2
1− 5 2

2
 2 =
 n
ρ(P ) − ρ(P) ≥ k
1+
k
1+
From P  we now construct our desired equipartition Q. Let {Yi : 1 ≤ i ≤ } be
a maximal family of disjoint subsets of V , each of cardinality n/(k4k ) , and each
contained in some member of P  . Set Y0 := V \ (∪i=1 Yi ) and Q := {Y0 , Y1 , . . . , Y }.
Note that Y0 contains at most n/(k4k ) elements of each member of P  , so
 n 
n
|Y0 | < |X0 | + (k2k )
= |X0 | + k ≤ n
k
k4
2

326

12 Stable Sets and Cliques

Also, k ≤ ≤ k4k . The reﬁnement of Q obtained by splitting all vertices of Y0
into singletons is a reﬁnement of P  . Appealing to Proposition 12.17, we have
ρ(Q) ≥ ρ(P  ). Therefore


1− 5 2
 n

ρ(Q)−ρ(P) = (ρ(Q) − ρ(P  ))+(ρ(P  ) − ρ(P)) ≥
1+
The Regularity Lemma now follows on applying Lemma 12.19 iteratively, starting with an equipartition whose exceptional set has fewer than k elements, and
noting the upper bound (12.15) on the index of a partition. We leave these technical details as an exercise (12.4.2). A quite diﬀerent proof of the Regularity Lemma,
based on ergodic theory, can be found in the book by Tao and Vu (2006).
A multitude of applications of the Regularity Lemma are described in the excellent survey articles by Komlós and Simonovits (1996) and Komlós et al. (2002).
The version of the Regularity Lemma given here applies only to dense graphs, but
there exist several variants, including versions for sparse graphs (Kohayakawa and
Rödl (2003)) and hypergraphs (Gowers (2006), Rödl et al. (2005), Tao (2006)).

Exercises
12.4.1 Show that a regular partition of a graph G is also a regular partition of its
complement G (with the same parameter  and the same exceptional set).
12.4.2 Deduce the Regularity Lemma from Lemma 12.19.

12.5 Related Reading
Hypergraph Extremal Problems
The questions treated in this chapter can of course be posed in the context of hypergraphs. Ramsey’s Theorem extends quite easily to hypergraphs (Exercise 12.3.10).
Indeed, it was in this more general setting that Ramsey (1930) proved his theorem. On the other hand, the evaluation of hypergraph Ramsey numbers remains
a totally intractable problem.
The state of aﬀairs with respect to questions of Turán type for hypergraphs is
hardly better, even for 3-uniform hypergraphs. Turán’s conjectures on the number
(3)
(3)
of triples of an n-set needed to guarantee a K4 or a K5 remain unsolved (see
Exercise 12.2.6). The diﬃculty of the former conjecture can perhaps be attributed
to the fact that, should it be true, the number of nonisomorphic extremal conﬁgurations would be very large indeed. Kostochka (1982) has constructed 2k−2 such
‘extremal’ examples.
On the positive side, there have been a number of encouraging advances on
hypergraph extremal problems in recent years. For instance, when n is suﬃciently

12.5 Related Reading

327

large, it was shown independently by Füredi and Simonovits (2005) and by Keevash
and Sudakov (2005) that, as conjectured by Sós (1976), the only extremal 3uniform hypergraph not containing a copy of the Fano hypergraph is the unique
2-colourable 3-uniform hypergraph with the maximum number of edges (see Exercise 12.2.6b). There are several informative surveys on this topic; see, for example,
Füredi (1991) and Sidorenko (1995).
Constructions from Hypergraphs
We have seen several examples of how hypergraphs can be used to construct graphs
with special properties. In particular, the incidence graph of a projective plane of
order k−1 is a (k, 6)-cage (Exercise 3.1.13), and polarity graphs of projective planes
provide examples of extremal graphs without 4-cycles (see Exercise 12.2.14). Frankl
and Wilson (1981) made use of hypergraphs to obtain constructive lower bounds
for Ramsey numbers.
Let S be an n-set, and let q be a prime power with q 2 ≤ n + 1. Consider the
graph whose vertices are the (q 2 −1)-subsets of S, two such subsets X and Y being
adjacent if and only if |X ∩ Y | ≡
 −1 (mod q). Frankl and Wilson (1981)

 nshowed
+ 1,
that this graph has neither a stable set nor a clique of cardinality k := q−1
 n 
3
yielding the Ramsey number bound r(k, k) ≥ q2 −1 + 1. Setting n = q results in
the superpolynomial lower bound r(k, k) ≥ k f (k) , where f (k) ∼ log k/4 log log k.
Ramsey Theorems in Other Contexts
Ramsey’s Theorem exempliﬁes the mathematical dictum, due to T.S. Motzkin,
that complete disorder is impossible: if a large enough structure is partitioned arbitrarily into two or more classes, then one of the classes contains a ‘regular’ substructure of prescribed size. Such theorems appear in many areas of mathematics.
One classical example is the theorem due to Van der Waerden (1927), which asserts
that if the positive integers are partitioned into a ﬁnite number of classes, then
one of the classes contains arbitrarily long arithmetic progressions. (This theorem
has inspired some deep discoveries in number theory, notably the density theorem
of E. Szemerédi mentioned in the section on the Regularity Lemma.)
Ramsey’s Theorem was rediscovered by Erdős and Szekeres (1935) while investigating a problem on combinatorial geometry. It led Erdős and his many collaborators to develop over the years an area of geometry known as euclidean Ramsey
theory. One especially attractive theorem on this topic, due to Křı́ž (1991), states
that if S is the set of points of a regular polygon, and if n is large enough, then in
any 2-colouring of Rn , there exists a monochromatic subset which is congruent to
S. The book by Graham et al. (1990) contains many other beautiful examples of
such Ramsey theorems.

13
The Probabilistic Method

Contents
13.1 Random Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
Independent Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331
Random Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331
13.2 Expectation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
Linearity of Expectation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
The Crossing Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
Asymptotic Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335
Markov’s Inequality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
13.3 Variance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
Chebyshev’s Inequality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
Stability Numbers of Random Graphs . . . . . . . . . . . . . . . 343
13.4 Evolution of Random Graphs . . . . . . . . . . . . . . . . . . . . . . 347
Threshold Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
Balanced Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
The Giant Component . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349
13.5 The Local Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
Two-Colourable Hypergraphs . . . . . . . . . . . . . . . . . . . . . . . 353
Even Cycles in Directed Graphs . . . . . . . . . . . . . . . . . . . . . 353
Linear Arboricity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354
13.6 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
Probabilistic Models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
Sharp Threshold Functions . . . . . . . . . . . . . . . . . . . . . . . . . . 356
Concentration Inequalities . . . . . . . . . . . . . . . . . . . . . . . . . . 356

13.1 Random Graphs
As mentioned in Section 12.3, the lower bound on Ramsey numbers given in Theorem 12.8 was obtained by means of a proof technique known as the probabilistic
method. Roughly speaking, this technique is based on an understanding of how

330

13 The Probabilistic Method

graphs behave on the average. Theorem 12.8, for instance, was proved by showing
that the majority of graphs on 2n/2 vertices have no clique of cardinality n. (This
is evidently not true of all graphs on 2n/2 vertices.) An understanding of the expected behaviour of graphs turns out to be of immense value in demonstrating the
existence of graphs with particular properties. The probabilistic method is also a
remarkably eﬀective tool for establishing properties of graphs in general.
A (ﬁnite) probability space (Ω, P ) consists of a ﬁnite set
Ω, called the sample
space, and a probability function P : Ω → [0, 1] satisfying ω∈Ω P (ω) = 1. We
may regard the set Gn of all labelled graphs on n vertices (or, equivalently, the set
of all spanning subgraphs of Kn ) as the sample space of a ﬁnite probability space
(Gn , P ). The result of selecting an element G of this sample space according to the
probability function P is called a random graph.
The simplest example of such a probability space arises when all graphs G ∈ Gn
have the same probability of being chosen. Because |Gn | = 2N , where N := n2 ,
the probability function in this case is:
P (G) = 2−N ,

for all G ∈ Gn

A natural way of viewing this probability space is to imagine the edges of Kn as
being considered for inclusion one by one, each edge being chosen with probability
one half (for example, by ﬂipping a fair coin), these choices being made independently of one another. The result of such a procedure is a spanning subgraph G of
Kn , with all G ∈ Gn being equiprobable.
A more reﬁned probability space on the set Gn may be obtained by ﬁxing a
real number p between 0 and 1 and choosing each edge with probability p, these
choices again being independent of one another. Because 1 − p is the probability
that any particular edge is not chosen, the resulting probability function P is given
by
P (G) = pm (1 − p)N −m , for each G ∈ Gn
where m := e(G). This space is denoted by Gn,p . For example, G3,p has as sample
3
space the 2(2) = 8 spanning subgraphs of K3 shown in Figure 13.1, with the
probability function indicated.
Note that the smaller the value of p, the higher the probability of obtaining a
sparse graph. We are interested in computing or estimating the probability that a
random graph has a particular property.
To each graph property, such as connectedness, there corresponds a subset of
Gn , namely those members of Gn which have the given property. The probability
that a random graph has this particular property is then just the sum of the
probabilities of these graphs. For instance, the probability that a random graph
in G3,p is connected is equal to 3p2 (1 − p) + p3 = p2 (3 − 2p), the probability that
it is bipartite is (1 − p)3 + 3(1 − p)2 p + 3(1 − p)p2 = (1 − p)(1 + p + p2 ), and the
probability that it is both connected and bipartite is 3p2 (1 − p).
In a probability space (Ω, P ), any subset A of Ω is referred to as an event, and
the probability of the event A is deﬁned by:

13.1 Random Graphs
v1

v3

v1

v2

v3

v1

v2

v3

v1

v2

v3

v2

(1 − p)3

p(1 − p)2

p(1 − p)2

p(1 − p)2

v1

v1

v1

v1

v3

v2

v3

p (1 − p)

v2

v3

p (1 − p)

2

v2

p (1 − p)

2

331

2

v3

v2
p

3

Fig. 13.1. The probability space G3,p

P (A) :=



P (ω)

(13.1)

ω∈A

Independent Events
Events A and B in a probability space (Ω, P ) are independent if P (A ∩ B) =
P (A)P (B); otherwise, they are dependent. More generally, events Ai , i ∈ I, are
(mutually) independent if, for any subset S of I,

P (Ai )
P (∩i∈S Ai ) =
i∈S

For example, if A is the event ‘G is connected’ and B is the event ‘G is bipartite’
in the space G3,p , then (unless p = 0 or p = 1)
P (A)P (B) = p2 (3 − 2p)(1 − p)(1 + p + p2 ) = 3p2 (1 − p) = P (A ∩ B)
Thus these two events are dependent. In other words, the knowledge that G is
bipartite has a bearing on the probability of it being connected.
It is important to realize that a set of events may well be dependent even if
the events are pairwise independent (see Exercise 13.1.2).
Random Variables
Much of graph theory is concerned with the study of basic parameters, such as
the connectivity, the clique number, or the stability number. As we have seen,
the values of these parameters provide much information about a graph and its
properties. In the context of random graphs, functions such as these are known as

332

13 The Probabilistic Method

random variables, because they depend on which graph happens to be selected.
More generally, a random variable on a probability space (Ω, P ) is any real-valued
function deﬁned on the sample space Ω. In the combinatorial context, random
variables are frequently integer-valued. Here is a typical example.
Let S be a set of vertices of a random graph G ∈ Gn,p . We may associate with
S a random variable XS deﬁned by:

1 if S is a stable set of G,
(13.2)
XS (G) :=
0 otherwise.
The random variable XS is an example of what is known as an indicator random
variable, because it indicates whether the set S is a stable set of G. More generally,
each event A in a probability space (Ω, P ) has an associated indicator random
variable XA , deﬁned by:

1 if ω ∈ A,
XA (ω) :=
0 otherwise.
(In the preceding example, A is simply the event that S is a stable set.)
Thus to each event there corresponds a random variable. Conversely, with each
random variable X and each real number t, we may associate the event
{ω ∈ Ω : X(ω) = t}
This event is denoted for short by X = t. Analogously, one may deﬁne four related
events: X < t, X ≤ t, X ≥ t, and X > t. For instance, if X is the number
of components of G ∈ G3,p , the event X ≥ 2 consists of the ﬁrst four graphs in
Figure 13.1; and if XS is the random variable deﬁned in (13.2), the event XS = 1
consists of those graphs G ∈ Gn,p in which S is a stable set. We are interested in
the probabilities of such events.
Random variables Xi , i ∈ I, are (mutually) independent if the events Xi = ti ,
i ∈ I, are independent for all real numbers ti . Random variables are dependent if
they are not independent.

Exercises
13.1.1 Let G ∈ Gn,1/2 . For a subset S of V , let AS denote the event that S is a
stable set of G. Show that if S and T are two distinct k-subsets of V , then A(S)
and A(T ) are independent if |S ∩ T | = 0 or |S ∩ T | = 1, and dependent otherwise.
13.1.2 Let V be an n-set. Consider the probability space (Ω, P ), where Ω is the
set of k-colourings (V1 , V2 , . . . , Vk ) of V , all colourings being equiprobable (thus
each occurring with probability k−n ). An element of this space is called a random
k-colouring of V . Consider a random k-colouring of the vertices of a simple graph
G. For an edge e of G, let Ae denote the event that the two ends of e receive the
same colour. Show that:

13.2 Expectation

333

a) for any two edges e and f of G, the events Ae and Af are independent,
b) if e, f , and g are the three edges of a triangle of G, the events Ae , Af , and Ag
are dependent.
13.1.3
a) Let {Ai : i ∈ I} be a set of events in a probability space (Ω, P ). Express
the probability of the event ∪i∈I Ai in terms of the probabilities of the events
∩i∈S Ai , where S ranges over all nonempty subsets of I.
b) Let V be an n-set. Consider the probability space (Ω, P ), where Ω is the set of
permutations of V , all permutations being equiprobable (thus each occurring
with probability 1/n!). An element of this space is called a random permutation
or random linear ordering of V . A permutation π of V is a derangement of V if
π(v) = v for all v ∈ V . Determine the probability of the set of all derangements
of V , and the asymptotic value of this probability.
13.1.4 Let {Ai : i ∈ I} be a set of independent events in a probability space
(Ω, P ). For all S ⊆ I, show that the events Ai , i ∈ S, and Ai , i ∈ I \ S are
independent.
————— —————

13.2 Expectation
The average value, or mean, of a random variable X is called its expectation, and
is denoted by E(X). Thus

X(ω)P (ω)
(13.3)
E(X) :=
ω∈Ω

For instance, if X denotes the number of components of G ∈ G3,p ,
E(X) = 3 × (1 − p)3 + 2 × 3p(1 − p)2 + 1 × (3p2 (1 − p) + p3 ) = 3 − 3p + p3
Linearity of Expectation
We make use of two basic properties of expectation which follow easily from deﬁnitions (13.1) and (13.3). Firstly, expectation is a linear function. In other words,
for random variables X and Y , and real numbers r and s,
E(rX + sY ) = rE(X) + sE(Y )

(13.4)

This property is referred to as linearity of expectation. Secondly, if XA is an indicator random variable,
(13.5)
E(XA ) = P (XA = 1)
It is important to emphasize that identity (13.4) is valid for any two random
variables X and Y , whether or not they are independent. We repeatedly make
use of this fact. By contrast, the identity E(XY ) = E(X)E(Y ) does not hold
in general, although it is valid when X and Y are independent random variables
(Exercise 13.2.2).

334

13 The Probabilistic Method

The Crossing Lemma
In order to convince the reader of the power of the probabilistic method, we present
a remarkably simple application of this proof technique to crossing numbers of
graphs. We obtain a lower bound for the crossing number of a graph in terms of
its order and size, and then use this bound to derive two theorems in combinatorial
geometry.
Recall that the crossing number cr(G) of a graph G is the least number of
crossings in a plane embedding of G. This parameter satisﬁes the trivial lower
bound cr(G) ≥ m − 3n (in fact cr(G) ≥ m − 3n + 6 for n ≥ 3; Exercise 10.3.1).
The following much stronger lower bound was given by Ajtai et al. (1982) and,
independently, by Leighton (1983). Its very short probabilistic proof is due to N.
Alon; see Alon and Spencer (2000).
Lemma 13.1 The Crossing Lemma
Let G be a simple graph with m ≥ 4n. Then
cr(G) ≥

1 m3
64 n2

 of G with cr(G) crossings. Let S be a
Proof Consider a planar embedding G
random subset of V obtained by choosing each vertex of G independently with
 := G[S].

probability p := 4n/m, and set H := G[S] and H
Deﬁne random variables X, Y, Z on Ω as follows: X is the number of vertices, Y
 The trivial bound noted
the number of edges, and Z the number of crossings of H.
above, when applied to H, yields the inequality Z ≥ cr(H) ≥ Y − 3X. By linearity
of expectation (13.4), E(Z) ≥ E(Y )−3E(X). Now E(X) = pn, E(Y ) = p2 m (each
edge having two ends) and E(Z) = p4 cr(G) (each crossing being deﬁned by four
vertices). Hence
p4 cr(G) ≥ p2 m − 3pn
Dividing both sides by p4 , we have:
cr(G) ≥

pm − 3n
n
1 m3
=
=
3
p3
64 n2
(4n/m)



Székely (1997) realized that the Crossing Lemma (13.1) could be used to derive
very easily a number of theorems in combinatorial geometry, some of which hitherto
had been regarded as extremely challenging. We now give proofs of two of them.
Consider a set of n points in the plane. Any two of these points determine a
line, but it might happen that some of these lines pass through more than two of
the points. Speciﬁcally, given a positive integer k, one may ask how many lines
there can be which pass through at least k points. For instance, if n√is a perfect
square and the points
√ are in the form of a square grid, there are 2 n + 2 lines
which pass through n points. Is there a conﬁguration of points which contains
more lines through this number of points? The following theorem of Szemerédi and
Trotter (1983) gives a general bound on the number of lines which pass through
more than k points.

13.2 Expectation

335

Theorem 13.2 Let P be a set of n points in the plane, and let be the number
√ of
lines in the plane passing through at least k+1 of these points, where 1 ≤ k ≤ 2 2n.
Then < 32n2 /k 3 .
Proof Form a graph G with vertex set P whose edges are the segments between
consecutive points on the lines which pass through at least
 k + 1 points of P . This
graph has at least k edges and crossing number at most 2 . Thus either k < 4n,

in which case < 4n/k ≤ 32n2 /k 3 , or 2 /2 > 2 ≥ cr(G) ≥ (k )3 /64n2 by the

Crossing Lemma (13.1), and again < 32n2 /k 3 .
A second application of the Crossing Lemma (13.1) concerns the number of
pairs of points there can be, among a set of n points, whose distance is exactly
one. The square grid (see Figure 1.27) shows that this number can grow faster
than n, as n tends to inﬁnity. (For this, one has to choose a grid in which the
distance between consecutive points is less than one; the calculation relies on a
little elementary number theory.) The following theorem, due to Spencer et al.
(1984), provides an upper bound on the number of pairs of points at distance one.
Theorem 13.3 Let P be a set of n points in the plane, and let k be the number
of pairs of points of P at unit distance. Then k < 5n4/3 .
Proof Draw a unit circle around each point of P . Let 
ni be the number of
n−1
these circles passing through exactly i points of P . Then i=0 ni = n and k =

n−1
1
i=0 ini . Now form a graph H with vertex set P whose edges are the arcs
2
between consecutive points on the circles that pass through at least three points
of P . Then
n−1

ini = 2k − n1 − 2n2 ≥ 2k − 2n
e(H) =
i=3

Some pairs of vertices of H might be joined by two parallel edges. Delete from H
one of each pair of parallel edges, so as to obtain a simple graph G with e(G) ≥
k−n. Now cr(G) ≤ n(n−1) because G is formed from at most n circles, and any two
circles cross at most twice. Thus either e(G) < 4n, in which case k < 5n < 5n4/3 ,
or n2 > n(n − 1) ≥ cr(G) ≥ (k − n)3 /64n2 by the Crossing Lemma (13.1), and

k < 4n4/3 + n < 5n4/3 .

Asymptotic Notation
In the sequel, we are concerned with probability spaces (Ωn , Pn ) which are deﬁned
for all positive integers n. Because it is with sparse graphs that we are mostly concerned, we study the behaviour of the probability space Gn,p when p is a function
of n and p(n) → 0 as n → ∞. Given a sequence (Ωn , Pn ), n ≥ 1, of probability
spaces, a property A is said to be satisﬁed almost surely if Pn (An ) → 1 as n → ∞,
where An := A ∩ Ωn .
The following asymptotic notation is employed. If f : N → R and g : N → R
are two functions such that g(n) > 0 for n suﬃciently large, we write:

336

13 The Probabilistic Method

f g
f
g
f ∼g

if f (n)/g(n) → 0 as n → ∞
if f (n)/g(n) → ∞ as n → ∞
if f (n)/g(n) → 1 as n → ∞

Markov’s Inequality
The following simple inequality, often used in conjunction with identities (13.4)
and (13.5), is one of the basic tools of the probabilistic method.
Proposition 13.4 Markov’s Inequality
Let X be a nonnegative random variable and t a positive real number. Then
P (X ≥ t) ≤

E(X)
t

Proof

{X(ω)P (ω) : ω ∈ Ω} ≥
{X(ω)P (ω) : ω ∈ Ω, X(ω) ≥ t}


≥
{tP (ω) : ω ∈ Ω, X(ω) ≥ t} = t
{P (ω) : ω ∈ Ω, X(ω) ≥ t}

E(X) =



= tP (X ≥ t)
Dividing the ﬁrst and last members by t yields the asserted inequality.



Markov’s Inequality is frequently applied in the following form in order to show
that a random graph in Gn,p almost surely has a particular property for a certain
value of p. It is obtained by setting X = Xn and t = 1 in Proposition 13.4.
Corollary 13.5 Let Xn be a nonnegative integer-valued random variable in a probability space (Ωn , Pn ), n ≥ 1. If E(Xn ) → 0 as n → ∞, then P (Xn = 0) → 1 as
n → ∞.

As a simple example, let
X be the number of triangles in G ∈ Gn,p . We may
express X as the sum X = {XS : S ⊆ V, |S| = 3}, where XS is the indicator
random variable for the event AS that G[S] is a triangle. Clearly P (AS ) = p3 . By
linearity of expectation, we have
 

n 3
p < (pn)3
E(X) =
{E(XS ) : S ⊆ V, |S| = 3} =
3
Thus if pn → 0 as n → ∞, then E(X) → 0 and, by Corollary 13.5, P (X = 0) → 1;
in other words, if pn → 0 as n → ∞, then G will almost surely be triangle-free.
Using these same tools, we now establish a fundamental and very useful bound
on the stability number of random graphs due to Erdős (1961a). Unless otherwise
speciﬁed, log stands for the natural logarithm (that is, to the base e).
Theorem 13.6 A random graph in Gn,p almost surely has stability number at most
2p−1 log n .

13.2 Expectation

337

Proof Let G ∈ Gn,p and let S be a given set of k + 1 vertices of G, where k ∈ N.
(k+1
2 ) , this being the probability
The probability that
k+1S is a stable set of G is (1 − p)
that none of the 2 pairs of vertices of S is an edge of the random graph G.
Let AS denote the event that S is a stable set of G, and let XS denote the
indicator random variable for this event. By equation (13.5), we have
k+1
E(XS ) = P (XS = 1) = P (AS ) = (1 − p)( 2 )

(13.6)

Let X be the number of stable sets of cardinality k + 1 in G. Then

X=
{XS : S ⊆ V, |S| = k + 1}
and so, by (13.4) and (13.6),
E(X) =




k+1
n
(1 − p)( 2 )
{E(XS ) : S ⊆ V, |S| = k + 1} =
k+1

We bound the right-hand side by invoking two elementary inequalities (Exercise 13.2.1):


nk+1
n
and 1 − p ≤ e−p
≤
(k + 1)!
k+1
This yields the following upper bound on E(X).
 −pk/2 k+1
k+1
ne
nk+1 e−p( 2 )
=
E(X) ≤
(k + 1)!
(k + 1)!

(13.7)

Suppose now that k = 2p−1 log n . Then k ≥ 2p−1 log n, so ne−pk/2 ≤ 1. Because k grows at least as fast as the logarithm of n, (13.7) implies that E(X) → 0
as n → ∞. Because X is integer-valued and nonnegative, we deduce from Corollary 13.5 that P (X = 0) → 1 as n → ∞. Consequently, a random graph in Gn,p
almost surely has stability number at most k.

In the case where p = 12 , a slightly sharper bound on α than the one provided by
Theorem 13.6 can be obtained, yielding the lower bound on the Ramsey numbers
given in Theorem 12.8 (see Exercise 13.2.11). We encounter further interesting and
surprising applications of Theorem 13.6 in Chapter 14.
This ﬁrst excursion into the probabilistic method should have given the reader
an idea of its remarkable power. A number of the exercises in this and subsequent
sections provide further applications of the method. Many more can be found in
the monographs by Spencer (1987), Alon and Spencer (2000), and Molloy and
Reed (2002).

Exercises
13.2.1 Prove the inequalities:

338

13 The Probabilistic Method

 
a) nk /k k ≤ nk ≤ nk /k!, for n ≥ k ≥ 0,
b) 1 + x ≤ ex , for all x ∈ R.
13.2.2


a) 
Let Xi , i ∈ I, be independent random variables. Show that E( i∈I Xi ) =
i∈I E(Xi ).
b) Give an example of dependent random variables X and Y such that E(XY ) =
E(X)E(Y ).

13.2.3 Let X be a nonnegative integer-valued random variable. Using the Cauchy–
Schwarz Inequality, show that E(X 2 )P (X ≥ 1) ≥ E 2 (X).
13.2.4 Find an inﬁnite family of graphs G with cr(G) = cm3 /n2 , where c is a
suitable positive constant.
13.2.5 Let G := (V, E) be a simple graph, let S be a random subset of V obtained
by choosing each vertex of G independently with probability p, and let F := G[S].
Consider the random variables X := v(F ) and Y := e(F ).
a) Show that α(F ) ≥ X − Y .
b) By calculating E(X) and E(Y ), and selecting the value of p appropriately,
deduce that α(G) ≥ n2 /4m, provided that m ≥ n/2.
13.2.6 Let G = (V, E) be a simple graph.
a) If m = n, show that G contains a 3-path unless it has a speciﬁc structure.
b) Deduce that G contains at least m − n 3-paths.
c) If m ≥ 3n/2, show that G contains at least 4m3 /27n2 3-paths.
(R. Pinchasi and M. Sharir)
d) By adopting the same approach, and appealing to Exercise 4.1.9b, show that
if m ≥ kn, where k is a positive integer, then G contains at least k −k mk /nk−1
copies of every tree on k + 1 vertices.
13.2.7
a) Let G := (V, E) be a graph. Consider a random 2-colouring of V . Show that
the expected number of edges of G whose ends receive distinct colours is m/2.
b) Deduce that every (loopless) graph G contains a spanning bipartite subgraph
(P. Erdős)
F with e(F ) ≥ 12 e(G) (compare Exercise 2.2.2a).
13.2.8 Let G = (V, E) be a complete graph on n vertices. Consider the probability space (Ω, P ), where Ω is the set of orientations of G, all orientations
  being
equiprobable (thus each occurring with probability 2−N , where N := n2 ). An
element of this space is called a random tournament.
a) Show that the expected number of directed Hamilton paths in a random tournament is 2−(n−1) n!
b) Deduce that, for all n ≥ 1, there is a tournament on n vertices which has at
(T. Szele)
least 2−(n−1) n! directed Hamilton paths.

13.2 Expectation

339

13.2.9 A hypergraph is 2-colourable if there is a 2-colouring of its vertex set with
respect to which no edge is monochromatic.
a) Show that the Fano hypergraph is not 2-colourable and is minimal with respect
to this property.
b) Let H := (V, F ) be a k-uniform hypergraph.
i) Consider a random 2-colouring of V . For each edge F of H, denote by AF
the event that F is monochromatic. Show that P (AF ) = 21−k .
(P. Erdős)
ii) Deduce that if |F| < 2k−1 , then H is 2-colourable.
c) By considering an appropriate hypergraph deﬁned on the edge set of Kn ,
 
k
deduce from (b)(ii) that if nk 21−(2) < 1, then r(k, k) > n.
————— —————
13.2.10 Let G = (V, E) be a graph.
a) Let σ be a linear ordering of V . For x, y ∈ V , write x ≺σ y if x precedes y in
the ordering σ. Show that Sσ := {x ∈ V : x ≺σ y for all y ∈ N (x)} is a stable
set of G.
b) Consider a random linear ordering σ of V . For each vertex v, let Xv be the
indicator random variable for the event v ∈ Sσ . Show that E(Xv ) = 1/(d(v) +
1), where d(v) is the degree of 
v.
c) Determine E(X), where
X
:=
v∈V Xv .

d) Deduce that α(G) ≥ v∈V 1/(d(v) + 1).
e) Prove that equality holds in (d) if and only if G is a disjoint union of complete
graphs.
f) Deduce Turán’s Theorem (12.3).
(N. Alon and J. Spencer)
 
k
13.2.11 Let n be a positive integer. For 0 ≤ k ≤ n, set f (k) := nk 2−(2) .
a) Denote by k ∗ the least value of k for which f (k) is less than one. Show that:
i) k ∗ ≤ 2 log2 n ≤ k ∗ + log2 k ∗ − 1,
ii) f (k ∗ + 1) → 0 as n → ∞,
iii) f (k ∗ )  f (k ∗ − 1),
iv) f (k ∗ − 2) ≥ n/4 for k ∗ ≥ 2.
b) Deduce from (a)(i) and (a)(ii) that:
i) if G ∈ Gn,1/2 , then almost surely α(G) ≤ 2 log2 n ,
ii) the Ramsey number r(k, k) is at least 2k/2 .
(P. Erdős)
13.2.12 A dominating set in a graph G := (V, E) is a subset S of V such that
each vertex of G either belongs to S or is adjacent to some element of S; that is,
S ∪ N (S) = V . Let G = (V, E) be a graph with minimum degree δ, and let S be
a random subset of V obtained by selecting each vertex of G independently with
probability p. Set T := V \ (S ∪ N (S)).
a) Show that:
i) E(|S|) = pn,
ii) E(|T |) ≤ (1 − p)δ+1 n,

340

13 The Probabilistic Method

iii) S ∪ T is a dominating set of G.
b) Deduce that G contains a dominating set of at most (log(δ + 1) + 1)n/(δ + 1)
vertices.
13.2.13
i) Let F := {(Xi , Yi ) : 1 ≤ i ≤ m} be a family of pairs of sets such that:
 |Xi | = k and |Yi | = , 1 ≤ i ≤ m,
 Xi ∩ Yj = ∅ if and only if i = j.
m
By considering
  a random linear ordering of the set ∪i=1 (Xi ∪ Yi ), show
.
(B. Bollobás)
that m ≤ k+
k
k+
ii) Give an example of such a family F with m = k .
b) i) Suppose that each edge-deleted subgraph of a graph G has
 stable
 more
.
sets on k vertices than G itself. Using (a), show that m ≤ n−k+2
2


ii) Give an example of such a graph G with m = n−k+2
.
2
a)

13.2.14 Let G := G[V1 , V2 , . . . , Vk ] be a k-partite graph on n vertices. Denote by
dij the density d(Vi , Vj ) (as deﬁned in Section 12.4), and by dk the smallest value
of d such that every k-partite graph in which all densities dij are greater than d
contains a triangle.
a) By considering the graph derived from Kk,k by deleting a perfect matching,
prove that dk ≥ 12 for all k ≥ 3.
b) A transversal of G is a set S ⊆ V such that |S ∩ Vi | = 1 for all i, 1 ≤ i ≤ k. Let
S be a transversal obtained by selecting one vertex from each set Vi uniformly
and at random. Denote by X the number of edges of G[S], and by Xij the
number of
edges of G[S] linking Vi and Vj . Prove that E(Xij ) = dij and that
E(X) = 1≤i<j≤k dij .

c) Deduce that G has a transversal with at least 1≤i<j≤k dij edges.
d) By applying Turán’s Theorem (12.3), conclude that dk → 12 as k → ∞.
(J.A. Bondy, J. Shen, S. Thomassé, and C. Thomassen)
t2  2t2 
/ 2t .
13.2.15 Let t be a positive integer. Set k := 2t, n := 2t2 , and p := 2 2t
Consider a set V of n elements and a 2-colouring c of V .
a) Let S be a random k-subset of V . Denote by AS the event that the colouring
c assigns the same colour to all vertices of S. Show that P (AS ) ≥ p.
b) Let F be a family of m random k-subsets of V . Denote by AF the event that c
is a proper 2-colouring of the hypergraph (V, F). Show that P (AF ) ≤ (1−p)m .
c) Deduce that there exists a non-2-colourable hypergraph (V, F ) with |V | = n
and |F| = n log 2/p .
d) Estimate p by using the asymptotic formula, valid for k ∼ γn1/2 (γ being a
positive constant):
 
nk −k2 /2n
n
e
∼
k!
k
e) Deduce that there exists a non-2-colourable k-uniform hypergraph H := (V, F )
with |V | = k 2 /2 and |F| ≤ αk 2 2k , for some constant α.

13.2 Expectation

341

13.2.16 The LYM Inequality and Sperner’s Theorem
A clutter is a hypergraph no edge of which is properly contained in another.
a) Let (V, F ) be a clutter on n vertices. Consider a random permutation σ of V .
For F ∈ F, let AF denote the event that the ﬁrst |F | symbols of σ are precisely
the elements of F . Show that:
disjoint,
i) the events AF , F ∈ F, are pairwise
 
ii) if |F | = k, then P (AF ) = 1/ nk .
b) Deduce:
i) The LYM Inequality: if (V, F) is a clutter on
 where n ≥ 1, and
nn vertices,
Fk := {F ∈ F : |F | = k}, 1 ≤ k ≤ n, then k=1 |Fk |/ nk ≤ 1.
(D. Lubell; K. Yamamoto; I.D. Meshalkin)
 n 
ii) Sperner’s Theorem: for all n ≥ 1, a clutter on n vertices has at most n/2
edges.
(E. Sperner)
 n 
c) For all n ≥ 1, give an example of a clutter on n vertices with exactly n/2
edges.
13.2.17 The Erdős–Ko–Rado Theorem
Let (V, F ) be an intersecting k-uniform hypergraph, where V := {1, 2, . . . , n} and
n ≥ 2k.
a) Set Fi := {i, i + 1, . . . , i + k − 1}, 1 ≤ i ≤ n, addition being modulo n. Show
that F contains at most k of the sets Fi , 1 ≤ i ≤ n.
b) Consider a random permutation σ of V and a random element i of V , and set
F := {σ(i), σ(i + 1), . . . , σ(i + k − 1)}.
i) Deduce from (a) that P (F ∈ F) ≤ k/n.
 
ii) Show, on the other hand, that P (F ∈ F) = |F|/ nk .
c) Deduce the Erdős–Ko–Rado Theorem: an intersecting
k-uniform hypergraph

edges.
(G.O.H. Katona)
on n vertices, where n ≥ 2k, has at most n−1
k−1
d) For n ≥ 2k and k ≥ 1, give an
example
of
an
intersecting
k-uniform
hypergraph


edges.
on n vertices with exactly n−1
k−1
13.2.18 The Countable Random Graph
Consider a random graph G on a countably inﬁnite set of vertices in which each
potential edge is selected independently with probability 12 . Show that:
a) with probability one G satisﬁes the following adjacency property: given any
two disjoint ﬁnite sets X and Y of vertices of G, there exists a vertex z which
is adjacent to every vertex of X and to no vertex of Y ,
b) any two countable graphs satisfying the above property are isomorphic.
(P. Erdős and A. Rényi; R. Rado)
(The unique countable graph which satisﬁes this adjacency property is called
the Rado graph or countable random graph; many of its remarkable properties are
discussed by Cameron (1997, 2001).)

342

13 The Probabilistic Method

13.3 Variance
For a random variable X, it is often useful to know not only its expectation E(X)
but also how concentrated is its distribution about this value. A basic measure of
this degree of concentration is the variance V (X) of X, deﬁned by
V (X) := E((X − E(X))2 )
Thus the smaller the variance, the more concentrated is the random variable about
its expectation.
The variance is evidently nonnegative. Using linearity of expectation, it can be
expressed in the form
V (X) = E(X 2 ) − E 2 (X)
In particular, if X is an indicator random variable, then E(X 2 ) = E(X), so
V (X) = E(X) − E 2 (X) ≤ E(X).
Chebyshev’s Inequality
The following inequality bounds the divergence of a random variable from its mean.
It plays, in some sense, a complementary role to that of Markov’s Inequality.
Theorem 13.7 Chebyshev’s Inequality
Let X be a random variable and let t be a positive real number. Then
P (|X − E(X)| ≥ t) ≤

V (X)
t2

Proof By Markov’s Inequality,
P (|X − E(X)| ≥ t) = P ((X − E(X))2 ≥ t2 ) ≤

E((X − E(X))2 )
V (X)
=
t2
t2



Chebyshev’s Inequality is frequently applied in the following form.
Corollary 13.8 Let Xn be a random variable in a probability space (Ωn , Pn ), n ≥
1. If E(Xn ) = 0 and V (Xn )  E 2 (Xn ), then
P (Xn = 0) → 0 as n → ∞
Proof Set X := Xn and t := |E(Xn )| in Chebyshev’s Inequality, and observe
that P (Xn = 0) ≤ P (|Xn − E(Xn )| ≥ |E(Xn )|) because |Xn − E(Xn )| = |E(Xn )|

when Xn = 0.
Let us illustrate the use of Chebyshev’s Inequality by considering triangles in
random graphs. Let G ∈ Gn,p be a random graph. We showed earlier, with the
aid of Markov’s Inequality, that G almost surely is triangle-free when pn → 0. We
prove here, on the other hand, that if pn → ∞, then G almost surely has at least
one triangle.

13.3 Variance

343

As before, we denote by AS the event that G[S] is a triangle, where S is a
3-subset of V , and by XS the indicator random variable for AS . As before, we set

X :=
{XS : S ⊆ V, |S| = 3}
 
so that X is the number of triangles in G. Recall that E(X) = n3 p3 . We now
apply Corollary 13.8. The following concept is useful in this regard.
The covariance C(X, Y ) of two random variables X and Y is deﬁned by
C(X, Y ) := E(XY ) − E(X)E(Y )
Because X is a sum of indicator random variables XS , its variance can be bounded
in terms of covariances as follows (Exercise 13.3.1).

C(XS , XT )
(13.8)
V (X) ≤ E(X) +
S=T

The value of C(XS , XT ) depends only on |S ∩ T |. If either |S ∩ T | = 0 or
|S ∩ T | = 1, then G[S] and G[T ] can have no common edges, so E(XS XT ) = p6 =
E(XS )E(XT ) and C(XS , XT ) = 0. However, if |S ∩ T | = 2, then G[S] and G[T ]
have one potential edge
  in common, so C(XS , XT ) = E(XS XT ) − E(XS )E(XT ) =
p5 − p6 . There are n2 (n − 2)(n − 3) such pairs (S, T ). Thus
 
 

n 3
n
p +
(n − 2)(n − 3)p5
V (X) ≤ E(X) +
C(XS , XT ) ≤
3
2
S=T

It follows that if pn → ∞, then V (X)/E 2 (X) → 0 as n → ∞. Corollary 13.8 now
tells us that P (X = 0) → 0 as n → ∞; in other words, G almost surely has at
least one triangle.
The bound in Chebyshev’s Inequality can be sharpened signiﬁcantly when the
random variable X has a particular structure, for instance when X is a sum of
independent random variables Xi , 1 ≤ i ≤ n, such that P (Xi = +1) = P (Xi =
−1) = 1/2 (see Exercise 13.3.4).
Stability Numbers of Random Graphs
We showed in Theorem 13.6 that a random graph in Gn,p almost surely has stability
number at most 2p−1 log n . We also noted that this bound can be reﬁned to
2 log2 n when p = 12 (see Exercise 13.2.11). Here we use Corollary 13.8 to derive
a very much sharper result, due independently to Bollobás and Erdős (1976) and
Matula (1976).
 
k
Theorem 13.9 Let G ∈ Gn,1/2 . For 0 ≤ k ≤ n, set f (k) := nk 2−(2) and let k ∗
be the least value of k for which f (k) is less than one. Then almost surely α(G)
takes one of the three values k∗ − 2, k ∗ − 1, k ∗ .

344

13 The Probabilistic Method

Proof As in the proof of Theorem 13.6, let XS denote the indicator random
variable
 for the event AS that a given subset S of V is a stable set of G, and set
X := {XS : S ⊆ V, |S| = k} so that E(X) = f (k). Almost surely α(G) ≤ k ∗
(Exercise 13.2.11b). Consequently, by virtue of Corollary 13.8, it will suﬃce to
prove that V (X)  E 2 (X) when k = k ∗ − 2. We assume from now on that k takes
this value. By Exercise 13.2.11a, we have:
k < 2 log2 n and f (k) ≥ n/4

(13.9)

As above, we bound the variance V (X) by applying inequality (13.8).
Let S and T be two sets of k vertices. The value of the covariance C(XS , XT )
depends only on |S ∩ T |. If either |S ∩ T | = 0 or |S ∩ T | = 1, then C(XS , XT ) = 0
because no edge has both ends in S ∩ T . If |S ∩ T | = i, where 2 ≤ i ≤ k − 1, then
i
k
C(XS , XT ) ≤ E(XS XT ) = P (AS ∩ AT ) = 2(2)−2(2)
 


 
There are nk choices for S, ki choices for S ∩ T , and n−k
k−i choices for T . Thus,
by inequality (13.8),

V (X) ≤ E(X) +


S=T

C(XS , XT ) ≤ E(X) +


 
n − k (2i )−2(k2)
n k
2
k−i
i
k

k−1

i=2

Because E(X)  E 2 (X), it remains to show that

 
 2
k
n − k (2i )−2(k2)
n k
n
2
2−2(2)
 E 2 (X) =
k−i
i
k
k

k−1

i=2

or equivalently that

 −1 k−1

n
g(i) → 0 as n → ∞
k
i=2

(13.10)

 

k
n − k (2i )
g(i) :=
2
i
k−i

where

We have:


 


n
k
n−k
g(2) = 2
< k2
k−2
2
k−2

and, for 2 ≤ i ≤ k − 2,
g(i + 1)
(k − i)2 2i
k 2 2i
=
<
=
g(i)
(i + 1)(n − 2k + i + 1)
i(n − 2k)



2i
i



k2
n − 2k



Set t := c log2 n, where 0 < c < 1. Then, for 2 ≤ i ≤ t − 1 and n suﬃciently
large,

13.3 Variance

g(i + 1)
<
g(i)
so



345


 


2t
k2
nc
(2 log2 n)2
4nc log2 n
<
=
≤1
t
n − 2k
c log2 n
n − 4 log2 n
c(n − 4 log2 n)
 −1 
 −1
t
n
n
tk 4
g(i) < t
g(2) ∼ 2 → 0 as n → ∞
k
k
n
i=2

(13.11)

We now consider the remaining terms of the sum in (13.10). We have:
k−1
k−1
k−1

 k n − k  i
  k n − k
k
2(2) = 2(2)
2−(k−i)(k+i−1)/2
g(i) =
k
−
i
k
−
i
i
k
−
i
i=t+1
i=t+1
i=t+1
k
= 2(2)

k−t−1
 

k
j

j=1
k

< 2(2)



k−t−1
 


n − k −j(2k−j−1)/2
2
j

k(n − k)2−(k+t)/2

j

j=1

In order to bound the right-hand side, we use the fact that k ∗ +log2 k ∗ −1 ≥ 2 log2 n
(Exercise 13.2.11a) and hence that 2−k/2 < (2k + 4)1/2 n−1 . We deduce that for n
suﬃciently large,
k(n − k)2−(k+t)/2 < k(n − k)(2k + 4)1/2 n−1 n−c/2 ≤ 1
and so

k−1


k

g(i) < 2(2) (k − t − 1)

i=t+1

Using the bound (13.9) on f (k), we now have:
 −1
 −1 k−1

k
n
(k − t − 1)
n
→ 0 as n → ∞ (13.12)
g(i) <
2(2) (k − t − 1) =
k
f (k)
k
i=t+1
The limits (13.11) and (13.12) imply (13.10).



Theorem 13.9, striking though it is, can be sharpened still further, to a ‘twopoint’ concentration theorem (Exercise 13.3.2).
Corollary 13.10 Let G ∈ Gn,1/2 , and let f and k ∗ be as deﬁned in Theorem 13.9.
Then either:
1. f (k ∗ )  1, in which case almost surely α(G) is equal to either k ∗ − 2 or k ∗ − 1,
or
1, in which case almost surely α(G) is equal to either k ∗ − 1 or
2. f (k ∗ − 1)
∗

k .
1, then Corollary 13.10(i) and (ii)
Observe that if f (k ∗ )  1 and f (k ∗ − 1)
together imply that almost surely α(G) = k ∗ − 1. This is indeed the case for most
values of n.

346

13 The Probabilistic Method

Exercises
13.3.1 Let X =

n

Xi be a sum of random variables.
n

a) Show that V (X) = i=1 V (Xi ) + i=j C(Xi , Xj ).
b) Deduce
that if the Xi are indicator random variables, then V (X) ≤ E(X) +

C(X
i , Xj ).
i=j
i=1

13.3.2 Using Exercise 13.2.11a(iii), deduce Corollary 13.10 from Theorem 13.9.
————— —————
13.3.3
a) Show that, for every positive integer n and every real number p ∈ (0, 1], there
exists a graph on n vertices with at most (np)3 triangles and stability number
at most 2p−1 log n .
b) Deduce that the Ramsey number r(3, k) satisﬁes the inequality r(3, k) > n −
(np)3 for every positive integer n and every real number p ∈ (0, 1], where
k = 2p−1 log n + 1.
c) Deduce, further, that r(3, k) > 2n/3, where k = 2p−1 log n + 1 and p−1 =
31/3 n2/3 .
d) Conclude that r(3, k) > c (k/ log k)3/2 for a suitable positive constant c.
(It is known that c1 k 2 / log k < r(3, k) < c2 k 2 / log k for suitable positive constants c1 and c2 . The lower bound is due to Kim (1995), the upper bound to
Ajtai et al. (1980).)
13.3.4 Chernoff’s Inequality
Let Xi , 1 ≤ i ≤ n, be independent randomvariables such that P (Xi = +1) =
n
P (Xi = −1) = 1/2, 1 ≤ i ≤ n, and let X := i=1 Xi .
a) Show that:
i) for any real number α, the random variables eαXi , 1 ≤ i ≤ n, are independent,
2
ii) E(eαXi ) ≤ eα /2 , 1 ≤ i ≤ n.
2
b) Deduce that E(eαX ) ≤ eα n/2 .
c) By applying Markov’s Inequality and choosing an appropriate value of α, derive
the following concentration bound, valid for all t > 0, known as Chernoﬀ ’s
Inequality.
P (X ≥ t) ≤ e−t

2

/2n

(H. Chernoff)

13.3.5 Let H := (V, F ) be ahypergraph. Given a 2-vertex-colouring c : V →
{+1, −1} of H, set c(F ) :=
{c(v) : v ∈ F }, F ∈ F. The discrepancy of the
colouring c is the maximum value of |c(F )| taken over all edges F of H. (The
discrepancy is thus a measure of how far the colouring is from being ‘balanced’.)
By applying Chernoﬀ’s Inequality (Exercise 13.3.4), show that every hypergraph
with n vertices and n edges has a 2-vertex-colouring whose discrepancy is at most
(2n log 2n)1/2 .

13.4 Evolution of Random Graphs

347

13.3.6 Let T be a tournament with vertex set V := {1, 2, . . . , n}. Given an ordering
σ of V and an arc a = (i, j) of T , deﬁne f (a,
σ) := +1 if σ(i) < σ(j) and
f (a, σ) := −1 if σ(i) > σ(j). Now set f (T, σ) := {f (a, σ) : a ∈ A(T )}. The ﬁt of
T is the maximum value of f (T, σ), taken over all orderings σ of V . (Thus the ﬁt
of a tournament is a measure
of how close it is to being a transitive tournament,
 
whose ﬁt is equal to n2 .) By applying Chernoﬀ’s Inequality (Exercise 13.3.4),
show that there is a tournament on n vertices whose ﬁt is at most (n3 log n)1/2 .
(J. Spencer)
13.3.7 . Let G = G[X, Y ] be a random bipartite graph obtained by selecting each
edge xy with x ∈ X and y ∈ Y independently with probability p. Let  be a
positive real number. Show that, almost surely:
a) |d(X, Y ) − p| ≤ 
b) (X, Y ) is a regular pair (as deﬁned in Section 12.4).

13.4 Evolution of Random Graphs
Threshold Functions
We have seen that the behaviour of a random graph G ∈ Gn,p changes abruptly
at the threshold p = n−1 : if p  n−1 , then G almost surely has no triangles,
whereas if p
n−1 , then G almost surely has at least one triangle. The function
n−1 is called a threshold function for the property of containing a triangle. More
generally, if P is any monotone property of graphs (one which is preserved when
edges are added), a threshold function for P is a function f (n) such that:
 if p  f (n), then G ∈ Gn,p almost surely does not have P,
 if p
f (n), then G ∈ Gn,p almost surely has P.
Note that we say ‘a threshold function’, and not ‘the threshold function’. This is
because the function is not unique. For example, 1010 n−1 and n−1 + n−2 are also
threshold functions for the property of containing a triangle.
Balanced Graphs
It turns out that every monotone property of graphs has a threshold function
(Exercise 13.4.1). For instance, if F is a ﬁxed graph, there is a threshold function
for the property of containing a copy of F as a subgraph. We determine such a
function in the special case where F is balanced, that is, where the average degrees
of the proper subgraphs of F do not exceed the average degree d(F ) = 2e(F )/v(F )
of the graph F itself. Balanced graphs can be recognized in polynomial time (see
Exercise 21.4.5 and its hint). They include trees and regular graphs (for instance,
cycles and complete graphs).
The following theorem is due to Erdős and Rényi (1960). As in the case of
triangles, the proof relies on both Markov’s Inequality and Chebyshev’s Inequality.

348

13 The Probabilistic Method

Theorem 13.11 Let F be a nonempty balanced graph with k vertices and l edges.
Then n−k/l is a threshold function for the property of containing F as a subgraph.
Proof Let G ∈ Gn,p . For each k-subset S of V , let AS be the event that G[S]
contains a copy of F , and let XS be the indicator random variable for AS . Set

X :=
{XS : S ⊆ V, |S| = k}
so that X is the number of k-subsets which span copies of F , and thus is no greater
than the total number of copies of F in G.
We ﬁrst bound the expectation of X. Consider a k-subset S of V . If G[S]
contains a copy of F , there is a bijection f : V (F ) → S such that f (u)f (v) is an
edge of G[S] whenever uv is an edge of F . The probability that all these l edges
f (u)f (v) are present in G[S] is p l . Thus E(XS ) = P (AS ) ≥ pl . On the other hand,
because there are k! bijections f : V (F ) → S, hence k! possible copies of F in G[S]
in all, E(XS ) ≤ k!pl . (The inequality arises here because copies of F in G[S] may
have edges in common, so are not independent.) By linearity of expectation and
Exercise 13.2.1a, it follows that
 
 
n l
n
nk pl
p
k!pl < nk pl
≤
≤
E(X)
≤
(13.13)
k
k
kk
If p  n−k/l , then E(X) < nk pl → 0 as n → ∞ and, by Markov’s Inequality, G
almost surely contains no copy of F .
We now bound the variance of X with the aid of (13.8). As before, the value
of C(XS , XT ) depends only on |S ∩ T |. If |S ∩ T | = 0 or |S ∩ T | = 1, then again
C(XS , XT ) = 0. If |S ∩ T | = i, where 2 ≤ i ≤ k − 1, then each copy FS of F in
G[S] meets each copy FT of F in G[T ] in i vertices. Because F is balanced, the
intersection FS ∩ FT of these two copies of F has at most il/k edges, so their union
FS ∪ FT has at least 2l − (il/k) edges. The probability that both copies are present
in G is therefore at most p2l−(il/k) . Because there are k! possible copies FS of F
in G[S] and k! possible copies FT of F in G[T ],
C(XS , XT ) ≤ E(XS XT ) = P (AS ∩ AT ) ≤ (k!)2 p2l−(il/k)

 
pairs (S, T ) of k-subsets with |S ∩ T | = i. Since
Altogether, there are nk n−k
k−i
n 
n−k
k
k−i
,
k ≤ n and k−i ≤ n

S=T

C(XS , XT ) ≤

k−1


n2k−i (k!)2 p2l−(il/k) = (k!)2

i=2

k−1


(nk pl )2 (np l/k )−i

(13.14)

i=2

If p
n−k/l , then (np l/k )−i → 0 for i ≥ 1. Moreover, by (13.13), E(X) ≥
k l
k
n p /k → ∞ as n → ∞. Thus E(X)  E 2 (X) and (nk pl )2 ≤ k 2k E 2 (X). Inequalities (13.8) and (13.14) now yield:

C(XS , XT )  E 2 (X)
V (X) ≤ E(X) +
S=T

13.4 Evolution of Random Graphs

349

Applying Corollary 13.8, we conclude that the random graph G almost surely
contains a copy of F .


The Giant Component
Erdős and Rényi (1960) showed that as the probability p := p(n) increases (while n
stays ﬁxed), a typical random graph G ∈ Gn,p passes through a number of critical
phases during which its structure changes abruptly. Besides being very interesting
in itself, an understanding of this behaviour can be of great help when applying
the probabilistic method. We are content here to give a broad description of the
phenomenon without entering into the intricate technical details.
Choosing F to be a tree on k vertices in Theorem 13.11, we see that n−k/(k−1)
is a threshold function for G to contain such a tree. Because the number of nonisomorphic trees on k vertices is certainly less than k k−2 (the number of labelled
trees, Theorem 4.8), this implies that when p  n−k/(k−1) , G has no component
on k or more vertices (as such a component would contain a tree on k vertices),
but when p
n−k/(k−1) , G has such components. Moreover, these components
are trees because, again by Theorem 13.11, cycles only appear at the threshold
p = 1/n. Therefore, at p = n−k/(k−1) , G is a forest all of whose components have
at most k vertices. These components become larger and larger as k increases. By a
more sophisticated probabilistic analysis using branching processes, one can show
that when p = c/n with c < 1, the largest component of G has size roughly log n,
whereas at p = 1/n it already has size about n2/3 , and there are many components
of this size. When p = c/n with c > 1, another major transformation takes place,
with the emergence of a ‘giant component’ containing a positive fraction of all n
vertices. This dramatic change at the threshold p = 1/n is referred to variously as
the Double Jump or the Big Bang.
Another remarkable evolution occurs at the threshold p = log n/n. At this
stage, G may still have isolated vertices (Exercise 13.4.2). When these disappear, G
becomes connected and then, almost immediately, hamiltonian (see Section 18.5).
For a thorough account of the evolution of random graphs, we refer the reader
to Bollobás (2001) or Janson et al. (2000).

Exercises
————— —————
13.4.1 Let P be a monotone property of graphs. Assume that P is nontrivial, so
that for large n, Kn does not have P whereas Kn does have P.
a) Set P (p) := P (G ∈ Gn,p has P).
i) Show that, for every ﬁxed large n, P (p) is a monotone increasing polynomial in p satisfying P (0) = 0 and P (1) = 1.

350

13 The Probabilistic Method

ii) Deduce that, for every r, 0 ≤ r ≤ 1, there is a p, 0 ≤ p ≤ 1, such that
P (p) = r.
b) Suppose that P (G ∈ Gn,p has P) = r. Let Gi ∈ Gn,p be independent members
of Gn,p , 1 ≤ i ≤ k. Show that:
P (G ∈ Gn,kp has P) ≥ P (∪ki=1 Gi has P)
≥ P (Gi has P for some i, 1 ≤ i ≤ k) = 1 − (1 − r)k
c) For large n, let f (n) satisfy P (G ∈ Gn,f (n) has P) = 1/2, and suppose that
k(n) satisﬁes f (n)k(n) ≤ 1. Show that:
P (G ∈ Gn,f (n)/k(n) has P) ≤ 1/k(n)
and that
P (G ∈ Gn,f (n)k(n) has P) ≥ 1 −
d) Conclude that f (n) is a threshold function for P.

1
2k
(N. Alon)

13.4.2 Let G ∈ G(n, p).
a) Calculate E(X) and V (X), where X is the number of isolated vertices of G.
b) Suppose that p = (log n + f (n))/n, where f (n) → ∞ as n → ∞. Show that
almost surely G has no isolated vertices.
c) Suppose that p = (log n − f (n))/n, where f (n) → ∞ as n → ∞. Show that
almost surely G has at least one isolated vertex.
d) Obtain similar estimates on p for the nonexistence or existence (almost surely)
of vertices of degree one in G.
13.4.3 Let G ∈ G(n, p).
a) Calculate E(X), where X is the number of spanning trees of G.
b) Determine a function p := p(n) such that E(X) → ∞ and P (X = 0) → 1 as
n → ∞.
c) Conclude that, for this function p(n), E 2 (X) ∼ E(X 2 ).

13.5 The Local Lemma
In this section, we discuss an important and much used probabilistic tool known as
the Local Lemma. In order to motivate it, let us consider the problem of colouring
a graph G in k colours. We would like to know if G has a proper k-colouring. A
naive approach would be to randomly colour G in k colours and then examine
whether this random k-colouring is a proper colouring. This will be the case if the
ends of each edge of G receive distinct colours. Therefore, if we denote by Ae the
event that the ends of e are assigned the same colour, we are interested in the
probability P (∩e∈E Ae ) that none of these ‘bad’ events occurs. If we can show that
this probability is positive, we have a proof that G is k-colourable.

13.5 The Local Lemma

351

More generally, let {Ai : i ∈ N }, be a set of events in a probability space
(Ω, P ), where N := {1, 2, . . . , n}. We regard these events as undesirable or ‘bad’
events, and are interested in the probability that none of them occurs, namely
P (∩i∈N Ai ). This probability will be positive if the events Ai are independent and
each occurs with probability less than one, because then (see Exercise 13.2.2)


P (Ai ) =
(1 − P (Ai )) > 0
P (∩i∈N Ai ) =
i∈N

i∈N

Usually, however, the events under consideration are not independent. In the above
example, for instance, if e, f , and g are the edges of a triangle and k ≥ 2,
P (Ae ∩ Af ∩ Ag ) = k −2 > k −3 = P (Ae )P (Af )P (Ag )
But all is not lost. Erdős and Lovász (1975) showed that the probability P (∩i∈N Ai )
will still be positive provided that the events Ai occur with low probability and
are, to a suﬃcient extent, independent of one another.
It is convenient to adopt the following notation. If {Ai : i ∈ S} is a set of
events, we denote their intersection ∩i∈S Ai by AS . Using this notation, an event
Ai is independent of a set of events {Aj : j ∈ J} if, for all subsets S of J,
P (Ai ∩ AS ) = P (Ai )P (AS ).
Theorem 13.12 The Local Lemma
Let Ai , i ∈ N , be events in a probability space (Ω, P ), and let Ni , i ∈ N , be subsets
of N . Suppose that, for all i ∈ N ,
/ Ni },
i) Ai is independent of the set of events {Aj : j ∈

ii) there exists a real number pi such that 0 < pi < 1 and P (Ai ) ≤ pi j∈Ni (1 −
pj ).
Set Bi := Ai , i ∈ N . Then, for any two disjoint subsets R and S of N ,

P (BR ∩ BS ) ≥ P (BR )
(1 − pi )

(13.15)

i∈S

In particular (when R = ∅ and S = N )
P (∩i∈N Ai ) ≥



(1 − pi ) > 0

(13.16)

i∈N

Remark 13.13 When the events Ai are independent, the quantities pi in condition
(ii) of the Local Lemma can be regarded as probabilities. When the Aiare not independent, each such ‘probability’ is reduced by a ‘compensation factor’ j∈Ni (1−pj ),
according to the ‘probabilities’ pj of the events upon which Ai is dependent.
Proof We prove (13.15) by induction with respect to the lexicographic order of
the pair (|R ∪ S|, |S|).

352

13 The Probabilistic Method

If S = ∅, then BS = Ω and



i∈S (1

− pi ) = 1, so

P (BR ∩ BS ) = P (BR ) ≥ P (BR )



(1 − pi )

i∈S

If S = {i}, then BS = Bi and
S1 := R ∩ Ni , we have:



j∈S (1

− pj ) = 1 − pi . Setting R1 := R \ Ni and

P (Ai ∩ BR ) ≤ P (Ai ∩ BR1 ) = P (Ai )P (BR1 )
By assumption, and the fact that S1 ⊆ Ni ,


P (Ai ) ≤ pi
(1 − pj ) ≤ pi
(1 − pj )
j∈Ni

j∈S1

Because |R1 | + |S1 | = |R| < |R| + |S|, we have by induction,

P (BR1 )
(1 − pj ) ≤ P (BR1 ∩ BS1 )
j∈S1

Therefore,
P (Ai ∩ BR ) ≤ pi P (BR1 ∩ BS1 ) = pi P (BR )
and so
P (BR ∩ BS ) = P (BR ∩ Bi ) = P (BR ) − P (Ai ∩ BR )
≥ P (BR ) − pi P (BR ) = P (BR )(1 − pi )
If |S| ≥ 2, we set R1 ∪ S1 := S, where R1 ∩ S1 = ∅ and R1 , S1 = ∅. Then
P (BR ∩ BS ) = P (BR ∩ BR1 ∪S1 ) = P (BR ∩ BR1 ∩ BS1 ) = P (BR∪R1 ∩ BS1 )
We now apply induction twice. Because |S1 | < |S|,


P (BR∪R1 ∩ BS1 ) ≥ P (BR∪R1 )
(1 − pi ) = P (BR ∩ BR1 )
(1 − pi )
i∈S1

i∈S1

and since |R ∪ R1 | < |R ∪ S|,
P (BR ∩ BR1 ) ≥ P (BR )



(1 − pi )

i∈R1

Therefore
P (BR ∩ BS ) ≥ P (BR )


i∈R1

(1 − pi )


i∈S1

(1 − pi ) = P (BR )



(1 − pi )



i∈S

Given events Ai , i ∈ N , in a probability space, and subsets Ni of N such that Ai
is independent of {Aj : j ∈
/ Ni }, one may form the digraph D with vertex set N and

13.5 The Local Lemma

353

arc set {(i, j) : i ∈ N, j ∈ Ni }. Such a digraph is called a dependency digraph (or,
if symmetric, a dependency graph) for {Ai : i ∈ N }. For instance, in our colouring
example the event Ae is clearly independent of {Af : f nonadjacent to e}. Thus
the line graph of G is a dependency graph for {Ae : e ∈ E}. In general, there are
many possible choices of dependency digraph (or graph) for a given set of events;
usually, however, one natural choice presents itself, as in this illustration.
For many applications, the following simpler version of the Local Lemma, in
which the probabilities of the events Ai have a common upper bound, is suﬃcient.
(Here e denotes the base of natural logarithms.)
Theorem 13.14 The Local Lemma – Symmetric Version
Let Ai , i ∈ N , be events in a probability space (Ω, P ) having a dependency
graph with maximum degree d. Suppose that P (Ai ) ≤ 1/(e(d + 1)), i ∈ N . Then
P (∩i∈N Ai ) > 0.
Proof Set pi := p, i ∈ N , in the Local Lemma. Now set p := 1/(d+1) in order to
maximize p(1 − p)d and apply the inequality (d/(d + 1))d = (1 − 1/(d + 1))d > e−1 .

Two-Colourable Hypergraphs
Although the proof of the Local Lemma is rather subtle, applying it is frequently a
routine matter. We give three examples. Whereas the one below is straightforward
(it was, in fact, one of the original applications of the lemma in Erdős and Lovász
(1975)), the others require additional ideas.
Theorem 13.15 Let H := (V, F ) be a hypergraph in which each edge has at least
k elements and meets at most d other edges. If e(d + 1) ≤ 2k−1 , then H is 2colourable.
Proof Consider a random 2-colouring of V . For each edge F , denote by AF the
event that F is monochromatic. Then P (AF ) = 2 · 2−k = 21−k . The result now
follows from Theorem 13.14.

Corollary 13.16 Let H := (V, F ) be a k-uniform k-regular hypergraph, where
k ≥ 9. Then H is 2-colourable.
Proof Set d := k(k − 1) in Theorem 13.15.



Even Cycles in Directed Graphs
The disarmingly simple question of which digraphs contain directed cycles of even
length turns out to be surprisingly hard to answer. Indeed, it remained open for
many years before being settled both by McCuaig (2000) and by Robertson et al.
(1999). On the other hand, by a clever application of the Local Lemma, Alon
and Linial (1989) showed very easily that all diregular digraphs of suﬃciently
high degree contain such cycles. (Note that the 3-diregular Koh–Tindell digraph
of Figure 1.26a has no directed even cycles.)

354

13 The Probabilistic Method

Theorem 13.17 Let D be a strict k-diregular digraph, where k ≥ 8. Then D
contains a directed even cycle.
Proof Consider a random 2-colouring c of V . For each vertex v of D, denote
by Av the event that c(u) = c(v) for all u ∈ N + (v). For each colour i, we have
P (Av ) = P (Av | c(v) = i) = 2−d . Thus Av is independent of all Au such that
({u} ∪ N + (u)) ∩ N + (v) = ∅. Setting d := k2 in Theorem 13.14, it follows that
there is a 2-colouring of V in which each vertex has an outneighbour of the opposite
colour. With respect to this colouring, let uP v be a maximal properly 2-coloured
directed path, and let w be an outneighbour of v of the opposite colour. The
directed cycle wP vw is then a cycle of even length in D.

Linear Arboricity
A linear forest in a graph G = (V, E) is a subgraph each component of which
is a path. Particular instances are Hamilton paths and 1-factors. Our aim here
is to decompose a graph G into as few linear forests as possible. This number is
called the linear arboricity of G, denoted la(G). In the case of a complete graph
K2n , the linear arboricity is equal to n, because K2n admits a decomposition into
Hamilton paths (Exercise 2.4.5). For an arbitrary graph, the linear arboricity is
bounded above by the edge chromatic number, the minimum number of 1-factors
into which the graph can be decomposed. We show in Chapter 17 that this number
is at most ∆ + 1 for any simple graph G. On the other hand, a lower bound for
the linear arboricity can be obtained very simply, by counting edges. For example,
if G is 2r-regular, then m = rn and, because no linear forest has more than n − 1
edges,


rn
=r+1
(13.17)
la (G) ≥
n−1
We shall apply the Local Lemma to show that this lower bound is tight for 2rregular graphs of large enough girth. This result, due to Alon (1988), is based on
the following lemma.
Lemma 13.18 Let G = (V, E) be a simple graph, and let {V1 , V2 , . . . , Vk } be a
partition of V into k sets, each of cardinality at least 2e∆. Then there is a stable
set S in G such that |S ∩ Vi | = 1, 1 ≤ i ≤ k.
Proof By deleting vertices from G if necessary, we may assume that |Vi | = t :=
2e∆ , 1 ≤ i ≤ k. We select one vertex vi at random from each set Vi , 1 ≤ i ≤ k,
and set S := {v1 , v2 , . . . , vn }.
For an edge e of G, let Ae denote the event that both ends of e belong to S.
Then P (Ae ) = 1/t2 for all e ∈ E, and Ae is dependent only on those events Af
such that an end of f lies in the same set Vi as an end of e. There are fewer than
2t∆ such events. Setting d := 2t∆ − 1 in Theorem 13.14, we see that with positive
probability the set S is stable, provided that 1/t2 ≤ 1/(e2t∆); that is, t ≥ 2e∆.
Because t = 2e∆ , we conclude that there does indeed exist such a stable set S.


13.6 Related Reading

355

Theorem 13.19 Let G = (V, E) be a simple 2r-regular graph with girth at least
2e(4r − 2). Then la (G) = r + 1.
Proof By (13.17), we must show that la (G) ≤ r + 1. We make use of the fact
that every regular graph of even degree admits a decomposition into 2-factors (see
Exercise 16.4.16).
Consider such a decomposition {F1 , F2 , . . . , Fr } of G, and let Ci , 1 ≤ i ≤ k, be
the constituent cycles of these 2-factors. Set Vi := E(Ci ), 1 ≤ i ≤ k. The line graph
H of G is (4r − 2)-regular. Because G has girth at least 2e(4r − 2), {V1 , V2 , . . . , Vk }
is a partition of V (H) into k sets, each of cardinality at least 2e(4r − 2). Applying
Lemma 13.18 to H, we deduce that H has a stable set S meeting each set Vi in
one vertex. The subgraphs Li := Fi \ M , 1 ≤ i ≤ r, are therefore linear forests in
G, as is L0 := G[M ], so {L0 , L1 , . . . , Lr } is a decomposition of G into r + 1 linear
forests.

We present an application of the asymmetric version of the Local Lemma in
Chapter 18.

Exercises
13.5.1

  n 
k
a) Suppose that e( k2 k−2
+ 1) ≤ 2(2) − 1. Show that r(k, k) > n.
b) Deduce that r(k, k) > c k 2(k+1)/2 , where c → e−1 as k → ∞.
————— —————

13.5.2 Let D be a strict digraph with maximum indegree ∆− and minimum out+
degree δ + . Suppose that e(∆− δ + + 1) ≤ (k/(k − 1))δ . Show that D contains a
directed cycle of length congruent to 0 (mod k).
(N. Alon and N. Linial)

13.6 Related Reading
Probabilistic Models
In this chapter, we have focussed on properties of the probability space Gn,p , in
which each edge is chosen independently with probability p. We have also encountered the model in which each vertex of a particular graph is chosen independently
with a given probability p. There are several other natural models of random
graphs. For instance, one may consider the space Gn,m consisting of all labelled
graphs on n vertices and m edges, each such graph being equiprobable. This is
the model studied by Erdős and Rényi (1959, 1960) in their pioneering work on
the evolution of random graphs. As might be expected,there
is a close connection

between the properties of Gn,m and Gn,p when p = m/ n2 . Another much-studied
model is that of random k-regular graphs, introduced by Bollobás (1980).

356

13 The Probabilistic Method

In discussing the evolution of random graphs, the concept of a graph process
is illuminating. Here, one starts with an empty graph on n vertices, and edges
are added one at a time, each potential new edge having the same probability of
being chosen. One is then interested in the time (as measured by the number of
edges) at which the evolving graph acquires a particular monotone property, such
as being connected, or hamiltonian. This is a very ﬁne measure of the evolution of
a random graph. It can be shown, for example, that almost surely a graph becomes
connected as soon as it loses its last isolated vertex, and becomes hamiltonian as
soon as all of its vertices have degree two or more; see Bollobás (2001).
More recently, the Internet, molecular biology, and various other applied areas,
have fuelled interest and research into diverse models of random graphs, designed
speciﬁcally to reﬂect the particular structures and evolution of such Web graphs,
biological networks and random geometric graphs; see, for example, Dousse et al.
(2006), Kumar et al. (2000), or Leonardi (2004).
Sharp Threshold Functions
In order to gain a clearer picture of the behaviour of a random graph G ∈ Gn,p
at a critical threshold such as p = (log n)/n, it is common to introduce and study
sharper threshold functions. Erdős and Rényi (1960) showed, for example, that if
p = (log n + c)/n, where c ∈ R, then the probability that G is connected tends
−c
to e−e as n tends to inﬁnity. A thorough discussion of sharp threshold functions
can be found in Bollobás (2001), Janson et al. (2000), or Palmer (1985).
Concentration Inequalities
We have discussed in this chapter the most basic concentration bound, namely
Chebyshev’s Inequality. Another such bound, Chernoﬀ’s Inequality, is described
in Exercise 13.3.4. There exist several variants of these bounds, and indeed many
further concentration inequalities, each designed to handle a certain class of problems. Azuma’s Inequality and Talagrand’s Inequality, for instance, are especially
useful in connection with colouring problems. We refer the reader to Alon and
Spencer (2000) or Molloy and Reed (2002) for the statements of these inequalities
and examples of their application.

14
Vertex Colourings

Contents
14.1 Chromatic Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357
A Greedy Colouring Heuristic . . . . . . . . . . . . . . . . . . . . . . 359
Brooks’ Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 360
Colourings of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361
14.2 Critical Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366
14.3 Girth and Chromatic Number . . . . . . . . . . . . . . . . . . . . . 370
Mycielski’s Construction . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371
14.4 Perfect Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373
The Perfect Graph Theorem . . . . . . . . . . . . . . . . . . . . . . . . 374
The Strong Perfect Graph Theorem . . . . . . . . . . . . . . . . 376
14.5 List Colourings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377
List Chromatic Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378
14.6 The Adjacency Polynomial . . . . . . . . . . . . . . . . . . . . . . . . 380
Proof Technique: The Combinatorial Nullstellensatz382
14.7 The Chromatic Polynomial . . . . . . . . . . . . . . . . . . . . . . . . 386
14.8 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389
Fractional Colourings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389
Homomorphisms and Circular Colourings . . . . . . . . . . . . 390

14.1 Chromatic Number
Recall that a k-vertex-colouring, or simply a k-colouring, of a graph G = (V, E)
is a mapping c : V → S, where S is a set of k colours; thus, a k-colouring is an
assignment of k colours to the vertices of G. Usually, the set S of colours is taken
to be {1, 2, . . . , k}. A colouring c is proper if no two adjacent vertices are assigned
the same colour. Only loopless graphs admit proper colourings.
Alternatively, a k-colouring may be viewed as a partition {V1 , V2 , . . . , Vk } of V ,
where Vi denotes the (possibly empty) set of vertices assigned colour i. The sets

358

14 Vertex Colourings

Vi are called the colour classes of the colouring. A proper k-colouring is then a
k-colouring in which each colour class is a stable set. In this chapter, we are only
concerned with proper colourings. It is convenient, therefore, to refer to a proper
colouring as a ‘colouring’ and to a proper k-colouring as a ‘k-colouring’.
A graph is k-colourable if it has a k-colouring. Thus a graph is 1-colourable
if and only if it is empty, and 2-colourable if and only if it is bipartite. Clearly,
a loopless graph is k-colourable if and only if its underlying simple graph is kcolourable. Therefore, in discussing vertex colourings, we restrict our attention to
simple graphs.
The minimum k for which a graph G is k-colourable is called its chromatic
number, and denoted χ(G). If χ(G) = k, the graph G is said to be k-chromatic.
The triangle, and indeed all odd cycles, are easily seen to be 3-colourable. On
the other hand, they are not 2-colourable because they are not bipartite. They
therefore have chromatic number three: they are 3-chromatic. A 4-chromatic graph
known as the Hajós graph is shown in Figure 14.1. The complete graph Kn has
chromatic number n because no two vertices can receive the same colour. More
generally, every graph G satisﬁes the inequality
χ≥

n
α

(14.1)

because each colour class is a stable set, and therefore has at most α vertices.

Fig. 14.1. The Hajós graph: a 4-chromatic graph

Colouring problems arise naturally in many practical situations where it is
required to partition a set of objects into groups in such a way that the members
of each group are mutually compatible according to some criterion. We give two
examples of such problems. Others will no doubt occur to the reader.
Example 14.1 Examination Scheduling
The students at a certain university have annual examinations in all the courses
they take. Naturally, examinations in diﬀerent courses cannot be held concurrently
if the courses have students in common. How can all the examinations be organized
in as few parallel sessions as possible? To ﬁnd such a schedule, consider the graph
G whose vertex set is the set of all courses, two courses being joined by an edge
if they give rise to a conﬂict. Clearly, stable sets of G correspond to conﬂict-free
groups of courses. Thus the required minimum number of parallel sessions is the
chromatic number of G.

14.1 Chromatic Number

359

Example 14.2 Chemical Storage
A company manufactures n chemicals C1 , C2 , . . . , Cn . Certain pairs of these chemicals are incompatible and would cause explosions if brought into contact with each
other. As a precautionary measure, the company wishes to divide its warehouse
into compartments, and store incompatible chemicals in diﬀerent compartments.
What is the least number of compartments into which the warehouse should be
partitioned? We obtain a graph G on the vertex set {v1 , v2 , . . . , vn } by joining two
vertices vi and vj if and only if the chemicals Ci and Cj are incompatible. It is easy
to see that the least number of compartments into which the warehouse should be
partitioned is equal to the chromatic number of G.
If H is a subgraph of G and G is k-colourable, then so is H. Thus χ(G) ≥ χ(H).
In particular, if G contains a copy of the complete graph Kr , then χ(G) ≥ r.
Therefore, for any graph G,
χ≥ω
(14.2)
The odd cycles of length ﬁve or more, for which ω = 2 and χ = 3, show that this
bound for the chromatic number is not sharp. More surprisingly, as we show in
Section 14.3, there exist graphs with arbitrarily high girth and chromatic number.
A Greedy Colouring Heuristic
Because a graph is 2-colourable if and only if it is bipartite, there is a polynomialtime algorithm (for instance, using breadth-ﬁrst search) for deciding whether a
given graph is 2-colourable. In sharp contrast, the problem of 3-colourability is
already N P-complete. It follows that the problem of ﬁnding the chromatic number
of a graph is N P-hard. In practical situations, one must therefore be content with
eﬃcient heuristic procedures which perform reasonably well. The most natural
approach is to colour the vertices in a greedy fashion, as follows.
Heuristic 14.3 The Greedy Colouring Heuristic
Input: a graph G
Output: a colouring of G
1. Arrange the vertices of G in a linear order: v1 , v2 , . . . , vn .
2. Colour the vertices one by one in this order, assigning to vi the smallest
positive integer not yet assigned to one of its already-coloured neighbours.
It should be stressed that the number of colours used by this greedy colouring
heuristic depends very much on the particular ordering chosen for the vertices. For
example, if Kn,n is a complete bipartite graph with parts X := {x1 , x2 , . . . , xn }
and Y := {y1 , y2 , . . . , yn }, then the bipartite graph G[X, Y ] obtained from this
graph by deleting the perfect matching {xi yi : 1 ≤ i ≤ n} would require n
colours if the vertices were listed in the order x1 , y1 , x2 , y2 , . . . , xn , yn . On the
other hand, only two colours would be needed if the vertices were presented in
the order {x1 , x2 , . . . , xn , y1 , y2 , . . . , yn }; indeed there is always an ordering which

360

14 Vertex Colourings

yields an optimal colouring (Exercise 14.1.9). The problem is that it is hard to
know in advance which orderings will produce optimal colourings.
Nevertheless, the number of colours used by the greedy heuristic is never greater
than ∆ + 1, regardless of the order in which the vertices are presented. When a
vertex v is about to be coloured, the number of its neighbours already coloured is
clearly no greater than its degree d(v), and this is no greater than the maximum
degree, ∆. Thus one of the colours 1, 2, . . . , ∆ + 1 will certainly be available for v.
We conclude that, for any graph G,
χ≤∆+1

(14.3)

In other words, every k-chromatic graph has a vertex of degree at least k − 1.
In fact, every k-chromatic graph has at least k vertices of degree at least k − 1
(Exercise 14.1.3b).
The bound (14.3) on the chromatic number gives essentially no information on
how many vertices of each colour there are in a (∆ + 1)-colouring. A far-reaching
strengthening of inequality (14.3) was obtained by Hajnal and Szemerédi (1970),
who showed that every graph G admits a balanced (∆ + 1)-colouring, that is, one
in which the numbers of vertices of each colour diﬀer by at most one. A shorter
proof of this theorem was found by Kierstead and Kostochka (2006).
Brooks’ Theorem
Although the bound (14.3) on the chromatic number is best possible, being attained by odd cycles and complete graphs, Brooks (1941) showed that these are
the only connected graphs for which equality holds.
Our proof of Brooks’ Theorem is similar in spirit to one given by Lovász
(1975b), but makes essential use of DFS-trees. In particular, we appeal to a result
of Chartrand and Kronk (1968), who showed that cycles, complete graphs, and
complete bipartite graphs whose parts are of equal size are the only graphs with
the property that every DFS-tree is a Hamilton path rooted at one of its ends (see
Exercise 6.1.10).
Theorem 14.4 Brooks’ Theorem
If G is a connected graph, and is neither an odd cycle nor a complete graph, then
χ ≤ ∆.
Proof Suppose ﬁrst that G is not regular. Let x be a vertex of degree δ and
let T be a search tree of G rooted at x. We colour the vertices with the colours
1, 2, . . . , ∆ according to the greedy heuristic, selecting at each step a leaf of the
subtree of T induced by the vertices not yet coloured, assigning to it the smallest
available colour, and ending with the root x of T . When a vertex v diﬀerent from
x is about to be coloured, it is adjacent in T to at least one uncoloured vertex,
and so is adjacent in G to at most d(v) − 1 ≤ ∆ − 1 coloured vertices. It is
therefore assigned one of the colours 1, 2, . . . , ∆. Finally, when x is coloured, it,

14.1 Chromatic Number

361

too, is assigned one of the colours 1, 2, . . . , ∆, because d(x) = δ ≤ ∆ − 1. The
greedy heuristic therefore produces a ∆-colouring of G.
Suppose now that G is regular. If G has a cut vertex x, then G = G1 ∪ G2 ,
where G1 and G2 are connected and G1 ∩ G2 = {x}. Because the degree of x in
Gi is less than ∆(G), neither subgraph Gi is regular, so χ(Gi ) ≤ ∆(Gi ) = ∆(G),
i = 1, 2, and χ(G) = max{χ(G1 ), χ(G2 )} ≤ ∆(G) (Exercise 14.1.2). We may
assume, therefore, that G is 2-connected.
If every depth-ﬁrst search tree of G is a Hamilton path rooted at one of its
ends, then G is a cycle, a complete graph, or a complete bipartite graph Kn,n
(Exercise 6.1.10). Since, by hypothesis, G is neither an odd cycle nor a complete
graph, χ(G) = 2 ≤ ∆(G).
Suppose, then, that T is a depth-ﬁrst search tree of G, but not a path. Let x be
a vertex of T with at least two children, y and z. Because G is 2-connected, both
G − y and G − z are connected. Thus y and z are either leaves of T or have proper
descendants which are joined to ancestors of x. It follows that G := G − {y, z} is
connected. Consider a search tree T  with root x in G . By colouring y and z with
colour 1, and then the vertices of T  by the greedy heuristic as above, ending with
the root x, we obtain a ∆-colouring of G.


Colourings of Digraphs
A (proper) vertex colouring of a digraph D is simply a vertex colouring of its
underlying graph G, and its chromatic number χ(D) is deﬁned to be the chromatic number χ(G) of G. Why, then, consider colourings of digraphs? It turns out
that the chromatic number of a digraph provides interesting information about
its subdigraphs. The following theorem of Gallai (1968a) and Roy (1967) tells us
that digraphs with high chromatic number always have long directed paths. It can
be viewed as a common generalization of a theorem about chains in posets (see
Exercise 2.1.23) and Rédei’s Theorem on directed Hamilton paths in tournaments
(Theorem 2.3).
Theorem 14.5 The Gallai–Roy Theorem
Every digraph D contains a directed path with χ vertices.
Proof Let k be the number of vertices in a longest directed path of D. Consider
a maximal acyclic subdigraph D of D. Because D is a subdigraph of D, each
directed path in D has at most k vertices. We k-colour D by assigning to vertex
v the colour c(v), where c(v) is the number of vertices of a longest directed path
in D starting at v. Let us show that this colouring is proper.
Consider any arc (u, v) of D. If (u, v) is an arc of D , let vP w be a longest
/ V (P ), otherwise vP uv would be a directed cycle
directed v-path in D . Then u ∈
in D . Thus uvP w is a directed u-path in D , implying that c(u) > c(v).
If (u, v) is not an arc of D , then D + (u, v) contains a directed cycle, because
the subdigraph D is maximally acyclic, so D contains a directed (v, u)-path P . Let
Q be a longest directed u-path in D . Because D is acyclic, V (P ) ∩ V (Q) = {u}.

362

14 Vertex Colourings

Thus P Q is a directed v-path in D , implying that c(v) > c(u). In both cases,
c(u) = c(v).


Exercises
14.1.1 Chvátal Graph
The Chvátal graph, shown in Figure 14.2, is a 4-regular graph of girth four on
twelve vertices. Show that this graph is 4-chromatic.
(V. Chvátal)

Fig. 14.2. The Chvátal graph: a 4-chromatic 4-regular graph of girth four

14.1.2 Show that χ(G) = max{χ(B) : B a block of G}.
14.1.3
a) In a k-colouring of a k-chromatic graph, show that there is a vertex of each
colour which is adjacent to vertices of every other colour.
b) Deduce that every k-chromatic graph has at least k vertices of degree at least
k − 1.
14.1.4 Show that χ(G) ≤ k1 k2 if and only if G = G1 + G2 , where χ(Gi ) ≤ ki ,
i = 1, 2.
(S.A. Burr)
14.1.5 k-Degenerate Graph
A graph is k-degenerate if it can be reduced to K1 by repeatedly deleting vertices
of degree at most k.
a) Show that a graph is k-degenerate if and only if every subgraph has a vertex
of degree at most k.
b) Characterize the 1-degenerate graphs.
c) Show that every k-degenerate graph is (k + 1)-colourable.
d) Using Exercise 14.1.4, deduce that the union of a k-degenerate graph and an
-degenerate graph is (k + 1)( + 1)-colourable.

14.1 Chromatic Number

363

14.1.6 Establish the following bounds on the chromatic number of the Kneser
graph KGm,n .
n
≤ χ(KGm,n ) ≤ n − 2m + 2
m
(Lovász (1978) proved the conjecture of Kneser (1955) that the upper bound is
sharp; see, also, Bárány (1978) and Greene (2002).)
14.1.7 Show that, for any graph G, χ ≥ n2 /(n2 − 2m).
14.1.8 Let G be a graph in which any two odd cycles intersect. Show that:
a) χ ≤ 5,
b) if χ = 5, then G contains a copy of K5 .
14.1.9 Given any graph G, show that there is an ordering of its vertices such that
the greedy heuristic, applied to that ordering, yields a colouring with χ colours.
14.1.10 Let G have degree sequence (d1 , d2 , . . . , dn ), where d1 ≥ d2 ≥ · · · ≥ dn .
a) Using a greedy heuristic, show that χ ≤ max{min {di + 1, i} : 1 ≤ i ≤ n}.
(D.J.A. Welsh and M.B. Powell)
b) Deduce that χ ≤ (2m)1/2 .
14.1.11
a) Show that χ(G)χ(G) ≥ n.
√
b) Using Exercise 14.1.10, deduce that 2 n ≤ χ(G) + χ(G) ≤ n + 1.
(E.A. Nordhaus and J.W. Gaddum)
14.1.12 Let k be a positive integer, and let G be a graph which contains no cycle
of length 1 (mod k). Show that G is k-colourable.
(Zs. Tuza)
14.1.13 Catlin Graph
The composition G[H] was deﬁned in Exercise 12.3.9.
a) Show that χ(G[H]) ≤ χ(G)χ(H), for any two graphs G and H.
b) The graph C5 [K3 ] shown in Figure 14.3 is known as the Catlin graph. Show
(P. Catlin)
that χ(C5 [K3 ]) < χ(C5 )χ(K3 ).
14.1.14 Let G be the graph C5 [Kn ].
a) Show that χ =  5n
2 .
b) Deduce that χ = (ω + ∆ + 1)/2 .

(A. Kostochka)

14.1.15
a) Show that every graph G has an orientation each of whose induced subdigraphs
has a kernel.
b) Consider any such orientation D. Show that G is (∆+ (D) + 1)-colourable.
c) Deduce inequality (14.3).

364

14 Vertex Colourings

Fig. 14.3. The Catlin graph C5 [K3 ]

14.1.16 The Erdős–Szekeres Theorem
a) Let D be a digraph with χ ≥ kl + 1, and let f be a real-valued function
deﬁned on V . Show that D contains either a directed path (u0 , u1 , . . . , uk )
with f (u0 ) ≤ f (u1 ) ≤ · · · ≤ f (uk ) or a directed path (v0 , v1 , . . . , vl ) with
(V. Chvátal and J. Komlós)
f (v0 ) > f (v1 ) > · · · > f (vl ).
b) Deduce that any sequence of kl + 1 distinct integers contains either an increasing subsequence of k + 1 terms or a decreasing sequence of l + 1 terms.
(P. Erdős and G. Szekeres)
14.1.17 Let G be an undirected graph. Show that
χ(G) = min {λ(D) : D an orientation of G}
where λ(D) denotes the number of vertices in a longest directed path of D.
14.1.18 Weak Product
The weak product of graphs G and H is the graph G × H with vertex set V (G) ×
V (H) and edge set {((u, u ), (v, v  )) : (u, v) ∈ E(G), (u , v  ) ∈ E(H)}. Show that,
for any two graphs G and H, χ(G × H) ≤ min {χ(G), χ(H)}. (S. Hedetniemi)
14.1.19 Chromatic Number of a Hypergraph
The chromatic number χ(H) of a hypergraph H := (V, F) is the least number of
colours needed to colour its vertices so that no edge of cardinality more than one
is monochromatic. (This is one of several ways of deﬁning the chromatic number
of a hypergraph; it is often referred to as the weak chromatic number.) Determine
the chromatic number of:
a) the Fano hypergraph (Figure 1.15a),
b) the Desargues hypergraph (Figure 1.15b).

14.1 Chromatic Number

365

14.1.20
a) Show that the Hajós graph (Figure 14.1) is a unit-distance graph.
(P. O’Donnell has shown that there exists a 4-chromatic unit-distance graph
of arbitrary girth.)
b) Let G be a unit-distance graph. Show that χ ≤ 7 by considering a plane
hexagonal lattice and ﬁnding a suitable 7-face colouring of it.
————— —————
14.1.21 Show that:
a) if χ(G) = 2k, then G has a bipartite subgraph with at least mk/(2k − 1) edges,
b) if χ(G) = 2k+1, then G has a bipartite subgraph with at least m(k+1)/(2k+1)
edges.
(L.D. Andersen, D. Grant and N. Linial)
14.1.22 Let G := (V, E) be a graph, and let f (G) be the number of proper kcolourings of G. By applying the inequality of Exercise 13.2.3, show that



m
m
n
n
≤ f (G) ≤ k 1 −
k 1−
k
k+m−1
14.1.23 Let G be a 5-regular graph on 4k vertices, the union of a Hamilton cycle
C and k disjoint copies G1 , G2 , . . . , Gk of K4 . Let F and F  be the two 1-factors
of G contained in C, and let Fi be a 1-factor of Gi , 1 ≤ i ≤ k. By combining a
2-vertex colouring of F ∪i Fi with a 2-vertex colouring of F  ∪i Fi , where Fi is an
appropriately chosen 1-factor of Gi , 1 ≤ i ≤ k, deduce that χ(G) = 4.
(N. Alon)
14.1.24 Let G be a 3-chromatic graph on n vertices. Show√how to ﬁnd, in polynomial time, a proper colouring of G using no more than 3 n colours.
(A. Wigderson)
(Blum and Karger (1997) have described a polynomial-time algorithm for colouring
a 3-chromatic graph on n vertices using O(n3/14 ) colours.)
14.1.25 Let G be a simple connected claw-free graph with α ≥ 3.
a) Show that ∆ ≤ 4(ω − 1) by induction on n, proceeding as follows.
 If G is separable, apply induction.
 If G is 2-connected, let x be a vertex of degree ∆ and set X := N (x) ∪ {x}.
Show that α(G[X]) = 2. Deduce that Y := V \ X = ∅.
 If α(G − v) ≥ 3 for some v ∈ Y , apply induction.
 If α(G − v) = 2 for all v ∈ Y , show that Y consists either of a single vertex
or of two nonadjacent vertices.
 Show that, in the former case, N (x) is the union of four cliques, and in the
latter case, the union of two cliques.
 Conclude.
b) Deduce that χ ≤ 4(ω − 1).
(M. Chudnovsky and P.D. Seymour)

366

14 Vertex Colourings

(Chudnovsky and Seymour have in fact shown that χ ≤ 2ω.)
14.1.26
a) Show that every digraph D contains a spanning branching forest F in which
the sets of vertices at each level are stable sets of D (the vertices at level zero
being the roots of the components of F ).
b) Deduce the Gallai–Roy Theorem (14.5).
c) A (k, l)-path is an oriented path of length k + l obtained by identifying the
terminal vertices of a directed path of length k and a directed path of length
l. Let D be a digraph and let k and l be positive integers such that k + l = χ.
Deduce from (a) that D contains either a (k, l − 1)-path or a (k − 1, l)-path.
(A. El-Sahili and M. Kouider)
14.1.27 Let k be a positive integer. Show that every inﬁnite k-chromatic graph
contains a ﬁnite k-chromatic subgraph.
(N.G. de Bruijn and P. Erdős)

14.2 Critical Graphs
When dealing with colourings, it is helpful to study the properties of a special
class of graphs called colour-critical graphs. We say that a graph G is colourcritical if χ(H) < χ(G) for every proper subgraph H of G. Such graphs were ﬁrst
investigated by Dirac (1951). Here, for simplicity, we abbreviate the term ‘colourcritical’ to ‘critical’. A k-critical graph is one that is k-chromatic and critical.
Note that a minimal k-chromatic subgraph of a k-chromatic graph is k-critical, so
every k-chromatic graph has a k-critical subgraph. The Grötzsch graph, a 4-critical
graph discovered independently by Grötzsch (1958/1959) and, independently by
Mycielski (1955), is shown in Figure 14.4 (see Exercise 14.3.1).

Fig. 14.4. The Grötzsch graph: a 4-critical graph

Theorem 14.6 If G is k-critical, then δ ≥ k − 1.

14.2 Critical Graphs

367

Proof By contradiction. Let G be a k-critical graph with δ < k − 1, and let v
be a vertex of degree δ in G. Because G is k-critical, G − v is (k − 1)-colourable.
Let {V1 , V2 , . . . , Vk−1 } be a (k − 1)-colouring of G − v. The vertex v is adjacent
to δ < k − 1 vertices. It therefore must be nonadjacent in G to every vertex in
some Vj . But then {V1 , V2 , . . . , Vj ∪ {v}, . . . , Vk−1 } is a (k − 1)-colouring of G, a
contradiction. Thus δ ≥ k − 1.

Theorem 14.6 implies that every k-chromatic graph has at least k vertices of
degree at least k − 1, as noted already in Section 14.1.
Let S be a vertex cut of a connected graph G, and let the components of G − S
have vertex sets V1 , V2 , . . . , Vt . Recall that the subgraphs Gi := G[Vi ∪ S] are the
S-components of G. We say that colourings of G1 , G2 , . . . , Gt agree on S if, for
every v ∈ S, vertex v is assigned the same colour in each of the colourings.
Theorem 14.7 No critical graph has a clique cut.
Proof By contradiction. Let G be a k-critical graph. Suppose that G has a clique
cut S. Denote the S-components of G by G1 , G2 , . . . , Gt . Because G is k-critical,
each Gi is (k − 1)-colourable. Furthermore, because S is a clique, the vertices of
S receive distinct colours in any (k − 1)-colouring of Gi . It follows that there are
(k − 1)-colourings of G1 , G2 , . . . , Gt which agree on S. These colourings may be
combined to yield a (k − 1)-colouring of G, a contradiction.



Corollary 14.8 Every critical graph is nonseparable.

By Theorem 14.7, if a k-critical graph has a 2-vertex cut {u, v}, then u and v
cannot be adjacent. We say that a {u, v}-component Gi of G is of type 1 if every
(k − 1)-colouring of Gi assigns the same colour to u and v, and of type 2 if every
(k − 1)-colouring of Gi assigns distinct colours to u and v. Figure 14.5 depicts
the {u, v}-components of the Hajós graph with respect to a 2-vertex cut {u, v}.
Observe that there are just two {u, v}-components, one of each type. Dirac (1953)
showed that this is always so in critical graphs.
u

u

v
(a)

u

v
Type 1

v
(b)

Type 2

Fig. 14.5. (a) A 2-vertex cut {u, v} of the Hajós graph, (b) its two {u, v}-components

368

14 Vertex Colourings

Theorem 14.9 Let G be a k-critical graph with a 2-vertex cut {u, v}, and let e be
a new edge joining u and v. Then:
1. G = G1 ∪ G2 , where Gi is a {u, v}-component of G of type i, i = 1, 2,
2. both H1 := G1 + e and H2 := G2 / {u, v} are k-critical.
Proof
1. Because G is critical, each {u, v}-component of G is (k−1)-colourable. Now there
cannot exist (k − 1)-colourings of these {u, v}-components all of which agree on
{u, v}, as such colourings would together yield a (k − 1)-colouring of G. Therefore
there are two {u, v}-components G1 and G2 such that no (k − 1)-colouring of G1
agrees with any (k −1)-colouring of G2 . Clearly one, say G1 , must be of type 1, and
the other, G2 , of type 2. Because G1 and G2 are of diﬀerent types, the subgraph
G1 ∪ G2 of G is not (k − 1)-colourable. The graph G being critical, we deduce that
G = G1 ∪ G2 .
2. Because G1 is of type 1, H1 is k-chromatic. We prove that H1 is critical by
showing that, for every edge f of H1 , the subgraph H1 \ f is (k − 1)-colourable.
This is clearly so if f = e, since in this case H1 \ e = G1 . Let f be some other
edge of H1 . In any (k − 1)-colouring of G \ f , the vertices u and v receive diﬀerent
colours, because G2 is a subgraph of G \ f . The restriction of such a colouring
to the vertices of G1 is a (k − 1)-colouring of H1 \ f . Thus H1 is k-critical. An

analogous argument shows that H2 is k-critical.

Exercises
14.2.1 Show that χ(G) ≤ 1 + max {δ(F ) : F ⊆ G}.
14.2.2 Show that the only 1-critical graph is K1 , the only 2-critical graph is K2 ,
and the only 3-critical graphs are the odd cycles of length three or more.
14.2.3 Show that the Chvátal graph (Figure 14.2) is 4-critical.
14.2.4 Let G be the 4-regular graph derived from the cartesian product of a triangle x1 x2 x3 x1 and a path y1 y2 y3 y4 y5 by identifying the vertices (x1 , y1 ) and (x1 , y5 ),
(x2 , y1 ) and (x3 , y5 ), and (x3 , y1 ) and (x2 , y5 ). Show that G is 4-critical.
(T. Gallai)
14.2.5 Let G = CG (Zn , S) be a circulant, where n ≡ 1 (mod 3), |S| = k, 1 ∈ S,
and i ≡ 2 (mod 3) for all i ∈ S, i = 1. Show that G is a 4-critical k-regular k-connected graph.
(L.S. Melnikov)
14.2.6 Uniquely Colourable Graph
A k-chromatic graph G is uniquely k-colourable, or simply uniquely colourable, if
any two k-colourings of G induce the same partition of V .
a) Determine the uniquely 2-colourable graphs.

14.2 Critical Graphs

369

b) Generalize Theorem 14.7 by showing that no vertex cut of a critical graph
induces a uniquely colourable subgraph.
14.2.7
a) Show that if u and v are two vertices of a critical graph G, then N (u) ⊆ N (v).
b) Deduce that no k-critical graph has exactly k + 1 vertices.
14.2.8 Show that:
a) χ(G1 ∨ G2 ) = χ(G1 ) + χ(G2 ),
b) G1 ∨ G2 is critical if and only if both G1 and G2 are critical.
14.2.9 Hajós Join
Let G1 and G2 be disjoint graphs, and let e1 := u1 v1 and e2 := u2 v2 be edges of
G1 and G2 , respectively. The graph obtained from G1 and G2 by identifying u1
and u2 , deleting e1 and e2 , and adding a new edge v1 v2 is called a Hajós join of
G1 and G2 . Show that the Hajós join of two graphs is k-critical if and only if both
graphs are k-critical.
(G. Hajós)
14.2.10 For n = 4 and all n ≥ 6, construct a 4-critical graph on n vertices.
14.2.11 Schrijver Graph
Let S := {1, 2, . . . , n}. The Schrijver graph SGm,n is the subgraph of the Kneser
graph KGm,n induced by the m-subsets of S which contain no two consecutive
elements in the cyclic order (1, 2, . . . , n, 1).
a) Draw the Schrijver graph SG3,8 .
b) Show that this graph is 4-chromatic, whereas every vertex-deleted subgraph
of it is 3-chromatic.
(Schrijver (1978) has shown that SGm,n is (n − 2m + 2)-chromatic, and that every
vertex-deleted subgraph of it is (n − 2m + 1)-chromatic.)
14.2.12
a) Let G be a k-critical graph with a 2-vertex cut {u, v}. Show that d(u) + d(v) ≥
3k − 5.
b) Deduce Brooks’ Theorem (14.4) for graphs with 2-vertex cuts.
14.2.13 Show that Brooks’ Theorem (14.4) is equivalent to the following statement: if G is k-critical (k ≥ 4) and not complete, then 2m ≥ (k − 1)n + 1.
(Dirac (1957) sharpened this bound to 2m ≥ (k − 1)n + (k − 3).)
14.2.14 A hypergraph H is k-critical if χ(H) = k, but χ(H  ) < k for every proper
subhypergraph H  of H. Show that:
a) the only 2-critical hypergraph is K2 ,
b) the Fano hypergraph (depicted in Figure 1.15a) is 3-critical.

370

14 Vertex Colourings

14.2.15 Let H := (V, F ) be a 3-critical hypergraph, where V := {v1 , v2 , . . . , vn }
and F := {F1 , F2 , . . . , Fm }, and let M be the incidence matrix of H.
a) Suppose that the rows of M are linearly dependent,
so that there are real

numbers λi , 1 ≤ i ≤ n, not all zero, such that {λi : vi ∈ Fj } = 0, 1 ≤ j ≤ m.
Set Z := {i : λi = 0}, P := {i : λi > 0}, and N := {i : λi < 0}. Show that:
i) H  := H[Z] has a 2-colouring {R, B},
ii) H has the 2-colouring {R ∪ P, B ∪ N }.
b) Deduce that the rows of M are linearly independent.
c) Conclude that |F| ≥ |V |.
(P.D. Seymour)
————— —————
14.2.16 Let G be a k-chromatic graph which has a colouring in which each colour is
assigned to at least two vertices. Show that G has a k-colouring with this property.
(T. Gallai)
14.2.17
a) By appealing to Theorem 2.5, show that a bipartite graph with average degree
2k or more contains a path of length 2k + 1. (A. Gyarfás and J. Lehel)
b) Using Exercise 14.1.21, deduce that every digraph D contains an antidirected
path of length at least χ/4.
14.2.18 An antidirected cycle in a digraph is a cycle of even length whose edges
alternate in direction.
a) Find a tournament on ﬁve vertices which contains no antidirected cycle.
b) Show that every 8-chromatic digraph contains an antidirected cycle.
(D. Grant, F. Jaeger, and C. Payan)

14.3 Girth and Chromatic Number
As we noted in the previous section, a graph which contains a large clique necessarily has a high chromatic number. On the other hand, and somewhat surprisingly,
there exist triangle-free graphs with arbitrarily high chromatic number. Recursive
constructions of such graphs were ﬁrst described by (Blanche) Descartes (see Ungar and Descartes (1954) and Exercise 14.3.3). Later, Erdős (1961a) applied the
probabilistic method to demonstrate the existence of graphs with arbitrarily high
girth and chromatic number.
Theorem 14.10 For each positive integer k, there exists a graph with girth at least
k and chromatic number at least k.
Proof Consider G ∈ Gn,p , and set t := 2p−1 log n . By Theorem 13.6, almost
surely α(G) ≤ t. Let X be the number of cycles of G of length less than k. By
linearity of expectation (13.4),

14.3 Girth and Chromatic Number

E(X) =

k−1

i=3

371

(np)k − 1
(n)i i 
p <
(np)i =
2i
np − 1
i=0
k−1

where (n)i denotes the falling factorial n(n − 1) · · · (n − i + 1). Markov’s Inequality
(13.4) now yields:
P (X > n/2) <

2((np)k − 1)
E(X)
<
n/2
n(np − 1)

Therefore, if p := n−(k−1)/k ,
P (X > n/2) <

2(n − 1)
→ 0 as n → ∞
n(n1/k − 1)

in other words, G almost surely has no more than n/2 cycles of length less than k.
It follows that, for n suﬃciently large, there exists a graph G on n vertices with
stability number at most t and no more than n/2 cycles of length less than k. By
deleting one vertex of G from each cycle of length less than k, we obtain a graph
G on at least n/2 vertices with girth at least k and stability number at most t.
By inequality (14.1),
n
n1/k
v(G )
≥
∼
χ(G ) ≥

α(G )
2t
8 log n
It suﬃces, now, to choose n large enough to guarantee that χ(G ) ≥ k.



Mycielski’s Construction
Note that the above proof is nonconstructive: it merely asserts the existence of
graphs with arbitrarily high girth and chromatic number. Recursive constructions
of such graphs were given by Lovász (1968a) and also by Nešetřil and Rödl (1979).
We describe here a simpler construction of triangle-free k-chromatic graphs, due
to Mycielski (1955).
Theorem 14.11 For any positive integer k, there exists a triangle-free k-chromatic
graph.
Proof For k = 1 and k = 2, the graphs K1 and K2 have the required property. We
proceed by induction on k. Suppose that we have already constructed a trianglefree graph Gk with chromatic number k ≥ 2. Let the vertices of Gk be v1 , v2 , . . . , vn .
Form the graph Gk+1 from Gk as follows: add n + 1 new vertices u1 , u2 , . . . , un , v,
and then, for 1 ≤ i ≤ n, join ui to the neighbours of vi in Gk , and also to v.
For example, if G2 := K2 , then G3 is the 5-cycle and G4 the Grötzsch graph (see
Figure 14.6).
The graph Gk+1 certainly has no triangles. For, because u1 , u2 , . . . , un is a
stable set in Gk+1 , no triangle can contain more than one ui ; and if ui vj vk ui

372

14 Vertex Colourings
v1

v1
u1

v5

v2

v5
u5

u2

v2

v
u4
v4

v3

u3

v4

G3

v3
G4

Fig. 14.6. Mycielski’s construction

were a triangle in Gk+1 , then vi vj vk vi would be a triangle in Gk , contrary to our
assumption.
We now show that Gk+1 is (k + 1)-chromatic. Note, ﬁrst, that Gk+1 is (k + 1)colourable, because any k-colouring of Gk can be extended to a (k + 1)-colouring
of Gk+1 by assigning the colour of vi to ui , 1 ≤ i ≤ n, and then assigning a new
colour to v. Therefore, it remains to show that Gk+1 is not k-colourable.
Suppose that Gk+1 has a k-colouring. This colouring, when restricted to
{v1 , v2 , . . . , vn }, is a k-colouring of the k-chromatic graph Gk . By Exercise 14.1.3,
for each colour j, there exists a vertex vi of colour j which is adjacent in Gk to
vertices of every other colour. Because ui has precisely the same neighbours in
Gk as vi , the vertex ui must also have colour j. Therefore, each of the k colours
appears on at least one of the vertices ui . But no colour is now available for the
vertex v, a contradiction. We infer that Gk+1 is indeed (k + 1)-chromatic, and the
theorem follows by induction.

Other examples of triangle-free graphs with arbitrarily high chromatic number
are the shift graphs (see Exercise 14.3.2).

Exercises
————— —————
14.3.1 Let G2 := K2 , and let Gk be the graph obtained from Gk−1 by Mycielski’s
construction, k ≥ 3. Show that Gk is a k-critical graph on 3 · 2k−2 − 1 vertices.
14.3.2 Shift Graph
The shift graph SGn is the graph whose vertex set is the set of 2-subsets of
{1, 2, . . . , n}, there being an edge joining two pairs {i, j} and {k, l}, where i < j
and k < l, if and only if j = k. Show that SGn is a triangle-free graph of chromatic
(P. Erdős and A. Hajnal)
number log2 n .

14.4 Perfect Graphs

373

14.3.3 Let G be a k-chromatic graph on n vertices with girth at least six, where
k ≥ 2. Form a new graph H as follows.
 
disjoint copies of G and a set S of kn new vertices, and set up a
 Take kn
n
one-to-one correspondence between the copies of G and the n-element subsets
of S.
 For each copy of G, pair up its vertices with the members of the corresponding
n-element subset of S and join each pair by an edge.
Show that H has chromatic number at least k + 1 and girth at least six.
(B. Descartes)

14.4 Perfect Graphs
Inequality (14.2), which states that χ ≥ ω, leads one to ask which graphs G satisfy
it with equality. One soon realizes, however, that this question as it stands is
not particularly interesting, because if H is any k-colourable graph and G is the
disjoint union of H and Kk , then χ(G) = ω(G) = k. Berge (1963) noted that
such artiﬁcial examples may be avoided by insisting that inequality (14.2) hold
not only for G but also for all of its induced subgraphs. He called such graphs
G ‘perfect’, and observed that the graphs satisfying this property include many
basic families of graphs, such as bipartite graphs, line graphs of bipartite graphs,
chordal graphs, and comparability graphs. He also noted that well-known min–max
theorems concerning these seemingly disparate families of graphs simply amount
to saying that they are perfect.
A graph G is perfect if χ(H) = ω(H) for every induced subgraph H of G;
otherwise, it is imperfect. An imperfect graph is minimally imperfect if each of its
proper induced subgraphs is perfect. The triangular prism and the octahedron are
examples of perfect graphs (Exercise 14.4.1), whereas the odd cycles of length ﬁve
or more, as well as their complements, are minimally imperfect (Exercise 14.4.2).
The cycle C7 and its complement C7 are shown in Figure 14.7.
1

1

7

2

6

7

3

5

(a)

4

2

6

3

5

(b)

4

Fig. 14.7. The minimally imperfect graphs (a) C7 , and (b) C7

374

14 Vertex Colourings

Being 2-colourable, bipartite graphs are clearly perfect. The fact that their line
graphs are perfect is a consequence of a theorem concerning edge colourings of
bipartite graphs (see Exercise 17.1.17). By Theorem 9.20, every chordal graph has
a simplicial decomposition, and this property can be used to show that chordal
graphs are perfect (Exercise 14.4.3). Comparability graphs are perfect too. That
this is so may be deduced from a basic property of partially ordered sets (see
Exercise 14.4.4).
The Perfect Graph Theorem
Berge (1963) observed that all the perfect graphs in the above classes also have
perfect complements. For example, the König–Rado Theorem (8.30) implies that
the complement of a bipartite graph is perfect, and Dilworth’s Theorem (19.5)
implies that the complement of a comparability graph is perfect. Based on this
empirical evidence, Berge (1963) conjectured that a graph is perfect if and only if
its complement is perfect. This conjecture was veriﬁed by Lovász (1972b), resulting
in what is now known as the Perfect Graph Theorem.
Theorem 14.12 The Perfect Graph Theorem
A graph is perfect if and only if its complement is perfect.



Shortly thereafter, A. Hajnal (see Lovász (1972a)) proposed the following beautiful characterization of perfect graphs. This, too, was conﬁrmed by Lovász (1972a).
Theorem 14.13 A graph G is perfect if and only if every induced subgraph H of
G satisﬁes the inequality
v(H) ≤ α(H)ω(H)
Observe that the above inequality is invariant under complementation, because
v(H) = v(H), α(H) = ω(H), and ω(H) = α(H). Theorem 14.13 thus implies the
Perfect Graph Theorem (14.12).
The proof that we present of Theorem 14.13 is due to Gasparian (1996). It
relies on an elementary rank argument (the proof technique of Linear Independence
discussed in Section 2.4). We need the following property of minimally imperfect
graphs.
Proposition 14.14 Let S be a stable set in a minimally imperfect graph G. Then
ω(G − S) = ω(G).
Proof We have the following string of inequalities (Exercise 14.4.5).
ω(G − S) ≤ ω(G) ≤ χ(G) − 1 ≤ χ(G − S) = ω(G − S)
Because the left and right members are the same, equality holds throughout. In
particular, ω(G − S) = ω(G).

We can now establish a result on the structure of minimally imperfect graphs.
This plays a key role in the proof of Theorem 14.13.

14.4 Perfect Graphs

375

Lemma 14.15 Let G be a minimally imperfect graph with stability number α and
clique number ω. Then G contains αω + 1 stable sets S0 , S1 , . . . , Sαω and αω + 1
cliques C0 , C1 , . . . , Cαω such that:
 each vertex of G belongs to precisely α of the stable sets Si ,
 each clique Ci has ω vertices,
 Ci ∩ Si = ∅, for 0 ≤ i ≤ αω,
 |Ci ∩ Sj | = 1, for 0 ≤ i < j ≤ αω.
Proof Let S0 be a stable set of α vertices of G, and let v ∈ S0 . The graph G − v
is perfect because G is minimally imperfect. Thus χ(G − v) = ω(G − v) ≤ ω(G).
This means that for any v ∈ S0 , the set V \ {v} can be partitioned into a family
Sv of ω stable sets. Denoting {∪Sv : v ∈ S0 } by {S1 , S2 , . . . , Sαω }, it can be seen
that {S0 , S1 , . . . , Sαω } is a family of αω + 1 stable sets of G satisfying the ﬁrst
property above.
By Proposition 14.14, ω(G − Si ) = ω(G), 0 ≤ i ≤ αω. Therefore there exists a
maximum clique Ci of G that is disjoint from Si . Because each of the ω vertices
in Ci lies in α of the stable sets Sj , 0 ≤ i ≤ αω, and because no two vertices of Ci
can belong to a common stable set, |Ci ∩ Sj | = 1, for 0 ≤ i < j ≤ αω.

Let us illustrate Lemma 14.15 by taking G to be the minimally imperfect
graph C7 , labelled as shown in Figure 14.7b. Here α = 2 and ω = 3. Applying
the procedure described in the proof of the lemma, we obtain the following seven
stable sets and seven cliques.
S0 = 12, S1 = 23, S2 = 45, S3 = 67, S4 = 34, S5 = 56, S6 = 17
C0 = 357, C1 = 146, C2 = 136, C3 = 135, C4 = 257, C5 = 247, C6 = 246
(where we write 12 for the set {1, 2}, and so on.) The incidence matrices S and C
of these families are shown in Figure 14.8.

S:

1
2
3
4
5
6
7

S0
1
1
0
0
0
0
0

S1
0
1
1
0
0
0
0

S2
0
0
0
1
1
0
0

S3
0
0
0
0
0
1
1

S4
0
0
1
1
0
0
0

S5
0
0
0
0
1
1
0

S6
1
0
0
0
0
0
1

C:

1
2
3
4
5
6
7

C0
0
0
1
0
1
0
1

C1
1
0
0
1
0
1
0

C2
1
0
1
0
0
1
0

C3
1
0
1
0
1
0
0

C4
0
1
0
0
1
0
1

C5
0
1
0
1
0
0
1

C6
0
1
0
1
0
1
0

Fig. 14.8. Incidence matrices of families of stable sets and cliques of C7

We are now ready to prove Theorem 14.13.
Proof Suppose that G is perfect, and let H be an induced subgraph of G. Because

376

14 Vertex Colourings

G is perfect, H is ω(H)-colourable, implying that v(H) ≤ α(H)ω(H). We prove the
converse by showing that if G is minimally imperfect, then v(G) ≥ α(G)ω(G) + 1.
Consider the families {Si : 0 ≤ i ≤ αω} and {Ci : 0 ≤ i ≤ αω} of stable sets
and cliques described in Lemma 14.15. Let S and C be the n × (αω + 1) incidence
matrices of these families. It follows from Lemma 14.15 that St C = J − I, where
J is the square matrix of order αω + 1 all of whose entries are 1 and I is the
identity matrix of order αω + 1. Now J − I is a nonsingular matrix (with inverse
(1/αω)J − I). Its rank is thus equal to its order, αω + 1. Hence both S and C are
also of rank αω + 1. But these matrices have n rows, so n ≥ αω + 1.

Two consequences of the Perfect Graph Theorem are (Exercise 14.4.6):
Corollary 14.16 A graph G is perfect if and only if, for any induced subgraph H
of G, the maximum number of vertices in a stable set of H is equal to the minimum
number of cliques required to cover all the vertices of H.

Corollary 14.17 The Shannon capacity of a perfect graph G is equal to its stability
number: Θ(G) = α(G).

Corollary 14.17 prompts the problem of determining the Shannon capacities
of the minimally imperfect graphs. Of these, only Θ(C5 ) is known (see Exercise 12.1.14). It would be interesting to determine Θ(C7 ).
The Strong Perfect Graph Theorem
If a graph is perfect, then so are all of its induced subgraphs. This means that one
can characterize perfect graphs by describing all minimally imperfect graphs. We
have remarked that the odd cycles of length ﬁve or more are minimally imperfect,
as are their complements. Berge (1963) proposed the conjecture that these are
the only minimally imperfect graphs; equivalently, that a graph is perfect if and
only if it contains no odd cycle of length at least ﬁve, or its complement, as an
induced subgraph. He named this conjecture, whose truth would imply the Perfect
Graph Theorem, the Strong Perfect Graph Conjecture. Some forty years later, it
was proved by Chudnovsky et al. (2006).
Theorem 14.18 The Strong Perfect Graph Theorem
A graph is perfect if and only if it contains no odd cycle of length at least ﬁve, or
its complement, as an induced subgraph.

This theorem was a major achievement, as much eﬀort had been expended over
the years on attempts to settle the Strong Perfect Graph Conjecture. Furthermore,
a polynomial-time recognition algorithm for perfect graphs was developed shortly
thereafter by Chudnovsky et al. (2005).
Perfect graphs play an important role in combinatorial optimization and polyhedral combinatorics. Schrijver (2003) dedicates three chapters of his scholarly
treatise to this widely studied area. The survey article by Chudnovsky et al. (2003)
includes an excellent account of some of the recent developments in the subject.
The original motivations for the study of perfect graphs, and its early history, are
described by Berge (1996, 1997).

14.5 List Colourings

377

Exercises
14.4.1 Show that the triangular prism and the octahedron are perfect graphs.
14.4.2 For each k ≥ 2, show that both C2k+1 and C2k+1 are minimally imperfect
graphs.
14.4.3
a) Let G be a chordal graph and (X1 , X2 , . . . , Xk ) a simplicial decomposition of
G. Show that χ = max {|Xi | : 1 ≤ i ≤ k}.
b) Deduce that every chordal graph is perfect.
14.4.4 Using the result stated in Exercise 2.1.23, show that every comparability
graph is perfect.
14.4.5 Verify the three inequalities in the proof of Proposition 14.14.
14.4.6 Prove Corollaries 14.16 and 14.17.
————— —————
14.4.7 Without appealing to the Strong Perfect Graph Theorem, show that every
minimally imperfect graph G satisﬁes the relation n = αω + 1.
14.4.8 Deduce from Theorem 14.13 that the problem of recognizing perfect graphs
belongs to co-N P.
(K. Cameron; V. Chvátal)

14.5 List Colourings
In most practical colouring problems, there are restrictions on the colours that
may be assigned to certain vertices. For example, in the chemical storage problem
of Example 14.2, radioactive substances might require special storage facilities.
Thus in the corresponding graph there is a list of colours (appropriate storage
compartments) associated with each vertex (chemical). In an admissible colouring
(assignment of compartments to chemicals), the colour of a vertex must be chosen
from its list. This leads to the notion of list colouring.
Let G be a graph and let L be a function which assigns to each vertex v of G a
set L(v) of positive integers, called the list of v. A colouring c : V → N such that
c(v) ∈ L(v) for all v ∈ V is called a list colouring of G with respect to L, or an Lcolouring, and we say that G is L-colourable. Observe that if L(v) = {1, 2, . . . , k}
for all v ∈ V , an L-colouring is simply a k-colouring. For instance, if G is a
bipartite graph and L(v) = {1, 2} for all vertices v, then G has the L-colouring
which assigns colour 1 to all vertices in one part and colour 2 to all vertices in the
other part. Observe, also, that assigning a list of length one to a vertex amounts
to precolouring the vertex with that colour.

378

14 Vertex Colourings
{1, 2}

{1, 3}

{2, 3}

{2, 3}

{1, 3}

{1, 2}

Fig. 14.9. A bipartite graph whose list chromatic number is three

List Chromatic Number
At ﬁrst glance, one might believe that a k-chromatic graph in which each list L(v)
is of length at least k necessarily has an L-colouring. However, this is not so. It can
be checked that the bipartite graph shown in Figure 14.9 has no list colouring with
respect to the indicated lists. On the other hand, if arbitrary lists of length three
are assigned to the vertices of this graph, it will have a compatible list colouring
(Exercise 14.5.1).
A graph G is said to be k-list-colourable if it has a list colouring whenever all
the lists have length k. Every graph G is clearly n-list-colourable. The smallest
value of k for which G is k-list-colourable is called the list chromatic number of
G, denoted χL (G). For example, the list chromatic number of the graph shown in
Figure 14.9 is equal to three, whereas its chromatic number is two. (More generally,
there exist 2-chromatic graphs whose list chromatic number is arbitrarily large, see
Exercise 14.5.5.)
Bounds on the list chromatic numbers of certain graphs can be found by means
of kernels. This might seem odd at ﬁrst, because the kernel (introduced in Section 12.1) is a notion concerning directed graphs, whereas the list chromatic number is one concerning undirected graphs. The following theorem (a strengthening
of Exercise 14.1.15) provides a link between kernels and list colourings.
Theorem 14.19 Let G be a graph, and let D be an orientation of G each of whose
induced subdigraphs has a kernel. For v ∈ V , let L(v) be an arbitrary list of at least
d+
D (v) + 1 colours. Then G admits an L-colouring.
Proof By induction on n, the statement being trivial for n = 1. Let V1 be the
set of vertices of D whose lists include colour 1. (We may assume that V1 = ∅ by
renaming colours if necessary.) By assumption, D[V1 ] has a kernel S1 . Colour the
vertices of S1 with colour 1, and set G := G − S1 , D := D − S1 and L (v) :=
L(v) \ {1}, v ∈ V (D ). For any vertex v of D whose list did not contain colour 1,
+
|L (v)| = |L(v)| ≥ d+
D (v) + 1 ≥ dD  (v) + 1

and for any vertex v of D whose list did contain colour 1,
+
|L (v)| = |L(v)| − 1 ≥ d+
D (v) ≥ dD  (v) + 1

14.5 List Colourings

379

The last inequality holds because, in D, the vertex v dominates some vertex of
the kernel S1 , so its outdegree in D is smaller than in D. By induction, G has an
L -colouring. When combined with the colouring of S1 , this yields an L-colouring
of G.

As a simple illustration of Theorem 14.19, consider the case where D is
an acyclic orientation of G. Because every acyclic digraph has a kernel (Exercise 12.1.10b), D satisﬁes the hypothesis of the theorem. Clearly, d+
D (v) ≤
∆+ (D) ≤ ∆(G). Theorem 14.19 therefore tells us that G has a list colouring
whenever each list is comprised of ∆ + 1 colours.
A similar approach can be applied to list colourings of interval graphs. Woodall
(2001) showed that every interval graph G has an acyclic orientation D with ∆+ ≤
ω − 1 (Exercise 14.5.10). Appealing to Theorem 14.19 yields the following result.
Corollary 14.20 Every interval graph G has list chromatic number ω.



Exercises
14.5.1 Show that the list chromatic number of the graph shown in Figure 14.9 is
equal to three.
14.5.2
a) Show that χL (K3,3 ) = 3.
b) Using the Fano plane, obtain an assignment of lists to the vertices of K7,7
which shows that χL (K7,7 ) > 3.
14.5.3 Generalize Brooks’ Theorem (14.4) by proving that if G is a connected
graph, and is neither an odd cycle nor a complete graph, then G is ∆-list-colourable.
(P. Erdős, A.L. Rubin, and H. Taylor; V.G. Vizing)
14.5.4 Show that Km,n is k-list-colourable for all k ≥ min{m, n} + 1.
14.5.5 Show that χL (Kn,nn ) = n + 1.

(N. Alon and M. Tarsi)

14.5.6 By choosing as lists the edges of the non-2-colourable hypergraph whose
existence was established in Exercise 13.2.15, show that χL (Kn,n ) ≥ cn log2 n,
where cn ∼ 1.
14.5.7 Let S be a set of cardinality
 − 1, where k ≥ 1. Consider the complete
 2k
, in which the lists attached to the vertices
bipartite graph Kn,n , where n = 2k−1
k
in each part are the k-subsets of S. Show that Kn,n has no list colouring with this
assignment of lists.
(P. Erdős, A.L. Rubin, and H. Taylor)
————— —————
14.5.8 A theta graph TGk,l,m is a graph obtained by joining two vertices by three
internally disjoint paths of lengths k, l, and m. Show that:

380

14 Vertex Colourings

a) TG2,2,2k is 2-list-colourable for all k ≥ 1,
b) a connected simple graph is 2-list-colourable if and only if the subgraph obtained by recursively deleting vertices of degree one is an isolated vertex, an
even cycle, or a theta graph TG2,2,2k , where k ≥ 1.
(P. Erdős, A.L. Rubin, and H. Taylor)
14.5.9 Let G = (V, E) be a simple graph. For v ∈ V , let L(v) be a list of k or
more colours. Suppose that, for each vertex v and each colour in L(v), no more
than k/2e neighbours of v have that same colour in their lists (where e is the base
of natural logarithms). By applying the Local Lemma (Theorem 13.12), show that
G has a list colouring with respect to L.
(B.A. Reed)
14.5.10 Let G be an interval graph.
a) Show that G has an acyclic orientation D with ∆+ = ω − 1.
(D.R. Woodall)
b) Deduce that χL = χ = ω.

14.6 The Adjacency Polynomial
We have already seen how linear algebraic techniques can be used to prove results in
graph theory, for instance by means of rank arguments (see the inset in Chapter 2)
or by studying the eigenvalues of the adjacency matrix of the graph (see the inset
in Chapter 3). In this section, we develop yet another algebraic tool, this time
related to polynomials, and apply it to obtain results on list colouring. To this
end, we deﬁne a natural polynomial associated with a graph, indeed so natural
that it is often referred to as the graph polynomial.
Let G be a graph with vertex set V := {v1 , v2 , . . . , vn }. Set x := (x1 , x2 , . . . , xn ).
The adjacency polynomial of G is the multivariate polynomial

{(xi − xj ) : vi vj ∈ E}
A(G, x) :=
i<j

Upon expanding A(G, x) we obtain 2m monomials (some of which might cancel
out). Each of these monomials is obtained by selecting exactly one variable from
every factor xi − xj , and thus corresponds to an orientation of G: we orient the
edge vi vj of G in such a way that the vertex corresponding to the chosen variable
is designated to be the tail of the resulting arc.
For example, if G is the graph shown in Figure 14.10, its adjacency polynomial
is given by
A(G, x) = (x1 − x2 )(x1 − x3 )(x1 − x4 )(x2 − x3 )(x3 − x4 )

(14.4)

There are 25 = 32 terms in the expansion of this expression before cancellation,
whereas after cancellation only 24 terms remain:

14.6 The Adjacency Polynomial
v1
v4

v1
v2

v4

v1
v2

v4

381

v1
v2

v4

v2

v3

v3

v3

v3

G

−

+

−

Fig. 14.10. A labelled graph G and the three orientations corresponding to the term
x21 x2 x3 x4 of its adjacency polynomial

A(G, x) =

x31 x2 x3 − x31 x2 x4 − x31 x23 + x31 x3 x4 − x21 x22 x3 + x21 x22 x4
− x21 x2 x3 x4 + x21 x2 x24 + x21 x33 − x21 x3 x24 + x1 x22 x23 − x1 x22 x24
− x1 x2 x33 + x1 x2 x23 x4 − x1 x33 x4 + x1 x23 x24 − x22 x23 x4 + x22 x3 x24
+ x2 x33 x4 − x2 x23 x24 + x2 x3 x34 − x2 x44 − x23 x34 + x3 x44

The graph G has the three orientations with outdegree sequence (2, 1, 1, 1) shown
in Figure 14.10. These orientations are precisely the ones which correspond to the
monomial x21 x2 x3 x4 . Observe that the coeﬃcient of this term in A(G,x) is −1.
This is because two of the three terms in the expansion of the product (14.4) have
a negative sign, whereas the remaining one has a positive sign.
As a second example, consider the complete graph Kn . We have
 n−1 n−1

n−1 
x
 1n−2 x2n−2 . . . xn 
n−2 
x
 1 x2 . . . xn 

 ·
· . . . · 
A(Kn , x) =
(xi − xj ) = 
· . . . · 
 ·
1≤i<j≤n
 x1 x2 . . . xn 


 1
1 ... 1 
The number of monomials in the expansion of this Vandermonde determinant is n!
n
(Exercise 14.6.1) which is much smaller (due to cancellation of terms) than 2( 2 ) ,
the number of monomials in the expansion of the adjacency polynomial.
In order to express the adjacency polynomial of a graph in terms of its orientations, we need a little notation. In the expansion of A(G, x), each monomial occurs
with a given sign. We associate this same sign with the corresponding orientation
D of G by deﬁning

σ(D) :=
{σ(e) : a ∈ A(D)}


where
σ(a) :=

+1 if a = (vi , vj ) with i < j
−1 if a = (vi , vj ) with i > j

For example, the three orientations of the graph G in Figure 14.10 have the signs
indicated.

382

14 Vertex Colourings

Now let d := (d1 , d2 , . . . , dn ) be a sequence of nonnegative integers whose sum
is m. We deﬁne the weight of d by

w(d) :=
σ(D)
where the sum is taken over all orientations D of G whose outdegree sequence is
d. Setting
n

xdi i
xd :=
i=1

we can now express the adjacency polynomial as:

A(G, x) =
w(d)xd
d

In order to understand the relevance of the latter expression to list colourings,
we need an algebraic tool developed by Alon (1999) and known as the Combinatorial Nullstellensatz, by analogy with a celebrated theorem of D. Hilbert.

Proof Technique: The Combinatorial Nullstellensatz
The Combinatorial Nullstellensatz is based on the following proposition, a
generalization to n variables of the fact that a polynomial of degree d in one
variable has at most d distinct roots.
Proposition 14.21 Let f be a nonzero polynomial over a ﬁeld F in the variables x = (x1 , x2 , . . . , xn ), of degree di in xi , 1 ≤ i ≤ n. Let Li be a set of
di + 1 elements of F , 1 ≤ i ≤ n. Then there exists t ∈ L1 × L2 × · · · × Ln
such that f (t) = 0.
Proof As noted above, the case n = 1 simply expresses the fact that a
polynomial of degree d in one variable has at most d distinct roots. We proceed
by induction on n, where n ≥ 2.
We ﬁrst express f as a polynomial in xn whose coeﬃcients fj are polynomials
in the variables x1 , x2 , . . . , xn−1 :
f=

dn


fj xjn

j=0

Because f is nonzero by hypothesis, fj is nonzero for some j, 0 ≤ j ≤ dn . By
induction, there exist ti ∈ Li , 1 ≤ i ≤ n − 1, such that fj (t1 , t2 , . . . , tn−1 ) = 0.
dn
fj (t1 , t2 , . . . , tn−1 ) xjn is nonzero. Applying the
Therefore the polynomial j=0
case n = 1 to this polynomial, we deduce that f (t1 , t2 , . . . , tn ) = 0 for some

tn ∈ Ln .

14.6 The Adjacency Polynomial

383

The Combinatorial Nullstellensatz (continued)
Theorem 14.22 The Combinatorial Nullstellensatz
Let f be a polynomial over a ﬁeld Fin the variables x = (x1 , x2 , . . . , xn ).
n
Suppose that the total degree of f is 1=1 di and that the coeﬃcient in f of
n
di
i=1 xi is nonzero. Let Li be a set of di + 1 elements of F , 1 ≤ i ≤ n. Then
there exists t ∈ L1 × L2 × · · · × Ln such that f (t) = 0.
Proof For 1 ≤ i ≤ n, set
fi :=



(xi − t)

t∈Li

Then fi is a polynomial of degree |Li | = di + 1, with leading term xidi +1 , so
we may write fi = gi + xidi +1 , where gi is a polynomial in xi of degree at most
di . By repeatedly substituting −gi for xidi +1 in the polynomial f , we obtain a
new polynomial in which the degree of xi does not exceed di . Performing this
substitution operation for all i, 1 ≤ i ≤ n, results in a polynomial g of degree
at most di in xi , 1 ≤ i ≤ n.
Moreover, because fi (t) = 0 for all t ∈ Li , we have tdi +1 = −gi (t) for all
t ∈ Li , 1 ≤ i ≤ n. It follows that
g(t) = f (t)

for all t ∈ L1 × L2 × · · · × Ln

n
Observe that every monomial of g is of total degree strictly less than 1=1 di ,
n
apart from the monomial i=1 xdi i , which is unchanged. Thus g is nonzero.
By Proposition 14.21, applied to g, there exists t ∈ L1 × L2 × · · · × Ln such
that g(t) = 0. This implies that f (t) = 0.

Corollary 14.23 Let G be a graph, and let D be an orientation of G without
directed odd cycles. Then G is (d + 1)-list-colourable, where d is the outdegree
sequence of D.
Proof Every orientation of G with outdegree sequence d has the same sign
as D (Exercise 14.6.2a). Therefore w(d) = 0. The result follows on applying
Theorem 14.22 with f (x) = A(G, x).

Corollary 14.24 If G has an odd number of orientations D with outdegree
sequence d, then G is (d + 1)-list-colourable.
Proof In this case w(d) is also odd, thus nonzero.



Further applications of the Combinatorial Nullstellensatz are given in the
exercises which follow.

384

14 Vertex Colourings

Exercises
14.6.1 Show that the number of monomials in the expansion of the Vandermonde
determinant of order n is n!
14.6.2
a) Let G be a graph, and let D be an orientation of G with outdegree sequence
d.
i) If D is an orientation of G with outdegree sequence d, show that σ(D ) =
σ(D) if and only if |A(D) \ A(D )| is even.
ii) Deduce that if D has no directed odd cycles, then all orientations of G
with outdegree sequence d have the same sign.
b) For a graph G, denote by G(d) the graph whose vertices are the orientations of
G with outdegree sequence d, two such orientations D and D being adjacent
in G(d) if and only if A(D) \ A(D ) is the arc set of a directed cycle. Denote
by B(d) the spanning subgraph of G(d) whose edges correspond to directed
odd cycles. Show that:
i) G(d) is connected,
ii) B(d) is bipartite.
14.6.3 Let T be a transitive tournament on n vertices with outdegree sequence
d := (d1 , d2 , . . . , dn ), where d1 ≤ d2 ≤ · · · ≤ dn .
a) Express the number of directed triangles of T in terms of n and d.
b) Deduce that if G = Kn and d = (0, 1, 2, . . . , n − 1), then the bipartite graph
B(d) (deﬁned in Exercise 14.6.2) has parts of equal size.
c) Deduce that (0, 1, 2, . . . , n − 1) is the only sequence d such that w(d) = 0.
14.6.4 Let G(x, y) be a graph, where N (x) \ {y} = N (y) \ {x}, and let D be
an orientation of G with d+ (x) = d+ (y). Show that w(d) = 0, where d is the
outdegree sequence of D.
(S. Ceroi)
14.6.5 The Fleischner–Stiebitz Theorem
Let G be a 4-regular graph on 3k vertices, the union of a cycle of length 3k and k
pairwise disjoint triangles.
a) Show that the number of eulerian orientations of G with a given sign is even.
b) Fleischner and Stiebitz (1992) have shown (by induction on n) that the total
number of eulerian orientations of G is congruent to 2 (mod 4). Deduce that
G is 3-list-colourable and thus 3-colourable.
(H. Fleischner and M. Stiebitz)
(Sachs (1993) has shown that the number of 3-colourings of G is odd.)
14.6.6
a) For a graph G, as in Exercise 21.4.5, deﬁne d∗ (G) := max{d(F ) : F ⊆ G},
the maximum of the average degrees of the subgraphs of G. Show that every
bipartite graph G is (d∗ /2 + 1)-list-colourable.

14.6 The Adjacency Polynomial

385

b) Deduce that every planar bipartite graph is 3-list-colourable.
c) Find a planar bipartite graph whose list chromatic number is three.
(N. Alon and M. Tarsi)
————— —————
14.6.7 The Cauchy–Davenport Theorem
Let A and B be nonempty subsets of Zp , where p is a prime. Deﬁne the sum A + B
of A and B by A + B := {a + b : a ∈ A, b ∈ B}.
a) If |A| + |B| > p, show that A + B = Zp .
b) Suppose that |A| + |B| ≤ p and also that |A + B| ≤ |A| + |B| − 2. Let C be a set
of |A| + |B|− 2 elements of Zp that contains A + B. Consider the polynomial
f (x, y) := c∈C (x + y − c). Show that:
i) f (a, b) = 0 for all a ∈ A and all b ∈ B,
ii) the coeﬃcient of x|A|−1 y |B|−1 in f (x, y) is nonzero.
c) By applying the Combinatorial Nullstellensatz, deduce the Cauchy–Davenport
Theorem: if A and B are nonempty subsets of Zp , where p is a prime, then
either A + B = Zp or |A + B| ≥ |A| + |B| − 1.
(N. Alon, M.B. Nathanson, and I.Z. Rusza)
14.6.8 Let G = (V, E) be a loopless graph with average degree greater than 2p − 2
and maximum degree at most 2p − 1, where p is a prime. Show that G has a
p-regular subgraph by proceeding as follows.
Consider the polynomial f over Zp in the variables x = (xe : e ∈ E) deﬁned by
⎛
p−1 ⎞




⎝1 −
⎠−
f (x) :=
mve xe
(1 − xe )
v∈V

e∈E

e∈E

a) Show that:
i) the degree of f is
e(G),
ii) the coeﬃcient of e∈E xe in f is nonzero.
b) Deduce from the Combinatorial Nullstellensatz that f (c) = 0 for some vector
c = (ce : e ∈ E) ∈ {0, 1}E .
c) Show that c = 0 and Mc = 0.
d) By considering the spanning subgraph of G with edge set {e ∈ E : ce = 1},
deduce that G has a p-regular subgraph.
e) Deduce, in particular, that every 4-regular loopless graph with one additional
link contains a 3-regular subgraph.
(N. Alon, S. Friedland, and G. Kalai)
(Tashkinov (1984) proved that every 4-regular simple graph contains a 3regular subgraph.)

386

14 Vertex Colourings

14.7 The Chromatic Polynomial
We have seen how the adjacency polyomial provides insight into the complex topic
of graph colouring. Here, we discuss another polynomial related to graph colouring,
the chromatic polynomial. In this ﬁnal section, we permit loops and parallel edges.
In the study of colourings, some insight can be gained by considering not only
the existence of k-colourings but the number of such colourings; this approach was
developed by Birkhoﬀ (1912/13) as a possible means of attacking the Four-Colour
Conjecture.
We denote the number of distinct k-colourings c : V → {1, 2, . . . , k} of a graph
G by C(G, k). Thus C(G, k) > 0 if and only if G is k-colourable. In particular, if
G has a loop then C(G, k) = 0. Two colourings are to be regarded as distinct if
some vertex is assigned diﬀerent colours in the two colourings; in other words, if
{V1 , V2 , . . . , Vk } and {V1 , V2 , . . . , Vk } are two k-colourings, then {V1 , V2 , . . . , Vk } =
{V1 , V2 , . . . , Vk } if and only if Vi = Vi for 1 ≤ i ≤ k. A triangle, for example, has
six distinct 3-colourings.
If G is empty, then each vertex can be independently assigned any one of the
k available colours, so C(G, k) = kn . On the other hand, if G is complete, then
there are k choices of colour for the ﬁrst vertex, k − 1 choices for the second, k − 2
for the third, and so on. Thus, in this case, C(G, k) = k(k − 1) · · · (k − n + 1).
There is a simple recursion formula for C(G, k), namely:
C(G, k) = C(G \ e, k) − C(G / e, k)

(14.5)

where e is any link of G. Formula (14.5) bears a close resemblance to the recursion
formula for t(G), the number of spanning trees of G (Proposition 4.9). We leave
its proof as an exercise (14.7.1). The formula gives rise to the following theorem.
Theorem 14.25 For any loopless graph G, there exists a polynomial P (G, x) such
that P (G, k) = C(G, k) for all nonnegative integers k. Moreover, if G is simple
and e is any edge of G, then P (G, x) satisﬁes the recursion formula:
P (G, x) = P (G \ e, x) − P (G / e, x)

(14.6)

The polynomial P (G, x) is of degree n, with integer coeﬃcients which alternate in
sign, leading term xn , and constant term zero.
Proof By induction on m. If m = 0, then C(G, k) = kn , and the polynomial
P (G, x) = xn satisﬁes the conditions of the theorem trivially.
Suppose that the theorem holds for all graphs with fewer than m edges, where
m ≥ 1, and let G be a loopless graph with m edges. If G is not simple, deﬁne
P (G, x) := P (H, x), where H is the underlying simple graph of G. By induction,
H satisﬁes the conditions of the theorem, so G does also. If G is simple, let e be an
edge of G. Both G \ e and G / e have m − 1 edges and are loopless. By induction,
there exist polynomials P (G \ e, x) and P (G / e, x) such that, for all nonnegative
integers k,

14.7 The Chromatic Polynomial

P (G \ e, k) = C(G \ e, k)

and

P (G / e, k) = C(G / e, k)

387

(14.7)

Furthermore, there are nonnegative integers a1 , a2 , . . . , an−1 and b1 , b2 , . . . , bn−1
such that:
P (G\e, x) =

n−1


(−1)n−i ai xi +xn

and

P (G / e, x) =

i=1

n−1


(−1)n−i−1 bi xi (14.8)

i=1

Deﬁne P (G, x) := P (G \ e, x) − P (G / e, x), so that the desired recursion (14.6)
holds. Applying (14.6), (14.7), and (14.5), we have:
P (G, k) = P (G \ e, k) − P (G / e, k) = C(G \ e, k) − C(G / e, k) = C(G, k)
and applying (14.6) and (14.8) yields
P (G, x) = P (G \ e, x) − P (G / e, x) =

n−1


(−1)n−i (ai + bi )xi + xn

i=1

Thus P (G, x) satisﬁes the stated conditions.



The polynomial P (G, x) is called the chromatic polynomial of G. Formula (14.6)
provides a means of calculating chromatic polynomials recursively. It can be used
in either of two ways:
i) by repeatedly applying the recursion P (G, x) = P (G \ e, x) − P (G / e, x),
thereby expressing P (G, x) as an integer linear combination of chromatic polynomials of empty graphs,
ii) by repeatedly applying the recursion P (G \ e, x) = P (G, x) + P (G / e, x),
thereby expressing P (G, x) as an integer linear combination of chromatic polynomials of complete graphs.
Method (i) is more suited to graphs with few edges, whereas (ii) can be applied
more eﬃciently to graphs with many edges (see Exercise 14.7.2).
The calculation of chromatic polynomials can sometimes be facilitated by the
use of a number of formulae relating the chromatic polynomial of a graph to
the chromatic polynomials of certain subgraphs (see Exercises 14.7.6a, 14.7.7, and
14.7.8). However, no polynomial-time algorithm is known for ﬁnding the chromatic
polynomial of a graph. (Such an algorithm would clearly provide a polynomial-time
algorithm for computing the chromatic number.)
Although many properties of chromatic polynomials have been found, no one
has yet discovered which polynomials are chromatic. It has been conjectured by
Read (1968) that the sequence of coeﬃcients in any chromatic polynomial must
ﬁrst rise in absolute value and then fall; in other words, that no coeﬃcient may
be ﬂanked by two coeﬃcients having greater absolute value. But even if true, this
property together with the properties listed in Theorem 14.25 would not be enough
to characterize chromatic polynomials. For example, the polynomial x4 −3x3 +3x2

388

14 Vertex Colourings

satisﬁes all of these properties but is not the chromatic polynomial of any graph
(Exercise 14.7.3b).
By deﬁnition, the value of the chromatic polynomial P (G, x) at a positive
integer k is the number of k-colourings of G. Surprisingly, evaluations of the polynomial at certain other special values of x also have interesting interpretations.
For example, it was shown by Stanley (1973) that (−1)n P (G, −1) is the number
of acyclic orientations of G (Exercise 14.7.11).
Roots of chromatic polynomials, or chromatic roots, exhibit a rather curious behaviour. Using the recursion (14.6), one can show that 0 is the only real chromatic
root less than 1 (Exercise 14.7.9); note that 0 is a chromatic root of every graph
and 1 is a chromatic root of every nonempty loopless graph. Jackson (1993b) extended these observations by proving that no chromatic polynomial can have a root
in the interval (1, 32/27]. Furthermore, Thomassen (1997c) showed that the only
real intervals that are free of chromatic roots are (−∞, 0), (0, 1), and (1, 32/27].
Thomassen (2000) also established an unexpected link between chromatic roots
and Hamilton paths.
In the context of plane triangulations, the values of P (G, x) at the Beraha
numbers Bk := 2 + 2 cos(2π/k), k ≥ 1, are remarkably small, suggesting that the
polynomial might have roots close to these numbers (see Tutte (1970)).
For a survey of this intriguing topic, we refer the reader to Read and Tutte
(1988).

Exercises
14.7.1 Prove the recursion formula (14.5).
14.7.2
a) Calculate the chromatic polynomial of the 3-star K1,3 by using the recursion
P (G, x) = P (G\e, x)−P (G / e, x) to express it as an integer linear combination
of chromatic polynomials of empty graphs.
b) Calculate the chromatic polynomial of the 4-cycle C4 by using the recursion
P (G\e, x) = P (G, x)+P (G / e, x) to express it as an integer linear combination
of chromatic polynomials of complete graphs.
14.7.3
a) Show that if G is simple, then the coeﬃcient of xn−1 in P (G, x) is −m.
b) Deduce that no graph has chromatic polynomial x4 − 3x3 + 3x2 .
14.7.4 Show that:
a) if G is a tree, then P (G, x) = x(x − 1)n−1 ,
b) if G is connected and P (G, x) = x(x − 1)n−1 , then G is a tree.
14.7.5 Show that if G is a cycle of length n, then P (G, x) = (x−1)n +(−1)n (x−1).

14.8 Related Reading

389

14.7.6
a) Show that P (G ∨ K1 , x) = xP (G, x − 1).
b) Using (a) and Exercise 14.7.5, show that if G is a wheel with n spokes, then
P (G, x) = x(x − 2)n + (−1)n x(x − 2).
14.7.7
a) Show that if G and H are disjoint, then P (G ∪ H, x) = P (G, x)P (H, x).
b) Deduce that the chromatic polynomial of a graph is equal to the product of
the chromatic polynomials of its components.
14.7.8 If G ∩ H is complete, show that P (G ∪ H, x)P (G ∩ H, x) = P (G, x)P (H, x).
14.7.9 Show that zero is the only real root of P (G, x) smaller than one.
————— —————
14.7.10 Show that no real root of P (G, x) can exceed n.

(L. Lovász)

14.7.11 Show that the number of acyclic orientations of a graph G is equal to
(R.P. Stanley)
(−1)n P (G, −1).
14.7.12 Let G be a graph. For a subset S of E, denote by c(S) the number of
components of the spanning subgraph of G with edge set S. Show that P (G, x) =

|S| c(S)
x
.
(H. Whitney)
S⊆E (−1)

14.8 Related Reading
Fractional Colourings
A vertex colouring {V1 , V2 , . . . , Vk } of a graph G = (V, E) can be viewed as expressing the incidence vector 1 := (1, 1, . . . , 1) of V as the sum of the incidence
vectors of the stable sets V1 , V2 , . . . , Vk . This suggests the following relaxation of
the notion of vertex colouring.
A fractional colouring of a graph G = (V, E) is an expression of 1 as a nonnegative rational linear combination of incidence vectors of stable sets of G. The
least sum of the coeﬃcients in such an expression is called the fractional chromatic
number of G, denoted χ∗ (G). Thus
!


λS :
λS fS = 1
χ∗ := min
where the sums are taken over all stable sets S of G. The fractional chromatic
number is clearly a lower bound on the chromatic number. However, it is still
N P-hard to compute this parameter.
By applying linear programming duality and using the fact that the stable
sets of a graph G are the cliques of its complement G, it can be shown that

390

14 Vertex Colourings

χ∗ (G) = α∗∗ (G). Thus χ∗ (G) is an upper bound for the Shannon capacity of G
(see (12.2)).
The fractional chromatic number is linked to list colourings in a simple way. A
graph G is (k, l)-list-colourable if, from arbitrary lists L(v) of k colours, sets C(v)
of l colours can be chosen so that C(u) ∩ C(v) = ∅ whenever uv ∈ E. It was shown
by Alon et al. (1997) that χ∗ = inf {k/l : G is (k, l)-list-colourable}.
Further properties of the fractional chromatic number can be found in Scheinerman and Ullman (1997) and Schrijver (2003).
Homomorphisms and Circular Colourings
A homomorphism of a graph G into another graph H is a mapping f : V (G) →
V (H) such that f (u)f (v) ∈ E(H) for all uv ∈ E(G). When H is the complete
graph Kk , a homomorphism from G into H is simply a k-colouring of G. Thus
the concept of a homomorphism may be regarded as a generalization of the notion
of vertex colouring studied in this chapter. Many intriguing unsolved problems
arise when one considers homomorphisms of graphs into graphs which are not
necessarily complete (see Hell and Nešetřil (2004)). One particularly interesting
instance is described below.
Let k and d be two positive integers such that k ≥ 2d. A (k, d)-colouring of a
graph G is a function f : V → {1, 2, . . . , k} such that d ≤ |f (u) − f (v)| ≤ k − d for
all uv ∈ E. Thus a (k, 1)-colouring of a graph is simply a proper k-colouring, and
a (k, d)-colouring is a homomorphism from the graph into Ckd−1 , the complement
of the (d − 1)st power of a k-cycle. Vince (1988) (see also Bondy and Hell (1990))
showed that, for any graph G, min{k/d: G has a (k, d)-colouring} exists. This
minimum, denoted by χc (G), is known as the circular chromatic number of G.
(The name of this parameter derives from an alternative deﬁnition, due to X.
Zhu, in which the vertices are associated with arcs of a circle, adjacent vertices
corresponding to disjoint arcs.) One can easily show that χ(G) − 1 < χc (G) ≤
χ(G), so χ(G) = χc (G) . However, there are graphs whose chromatic numbers
are the same but whose circular chromatic numbers are diﬀerent. For example,
χc (K3 ) = 3 whereas χc (C5 ) = 5/2. One challenging unsolved problem in this
area is to characterize the graphs for which these two parameters are equal. This
question remains unsolved even for planar graphs. The comprehensive survey by
Zhu (2001) contains many other intriguing problems.

15
Colourings of Maps

Contents
15.1 Chromatic Numbers of Surfaces . . . . . . . . . . . . . . . . . . . 391
Heawood’s Inequality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392
The Map Colour Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . 393
15.2 The Four-Colour Theorem . . . . . . . . . . . . . . . . . . . . . . . . 395
Kempe Chains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396
Kempe’s Erroneous Proof . . . . . . . . . . . . . . . . . . . . . . . . . . . 397
Reducibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399
Unavoidability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401
Proof Technique: Discharging . . . . . . . . . . . . . . . . . . . . . . . 402
15.3 List Colourings of Planar Graphs . . . . . . . . . . . . . . . . . . 405
Thomassen’s Proof of the Five-Colour Theorem . . . . . 405
15.4 Hadwiger’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407
Hadwiger’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407
Hajós’ Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409
15.5 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
Near 4-Colourings of Graphs on Surfaces . . . . . . . . . . . 411

15.1 Chromatic Numbers of Surfaces
The Four-Colour Theorem tells us that every graph embeddable on the sphere has
chromatic number at most four. More generally, for every closed surface Σ, there
is a least integer k such that every graph embeddable on Σ has chromatic number
at most k.
To see this, consider an arbitrary graph G embedded on Σ. In seeking an
upper bound on the chromatic number of G, we may clearly assume G to be
colour-critical. Let d := d(G) denote the average degree of G. Noting that δ ≤ d,
Theorem 14.6 yields:
χ≤d+1

392

15 Colourings of Maps

On the other hand, by Corollary 10.39, the number m of edges of G is at most
3n − 3c, where c := c(Σ) is the Euler characteristic of Σ. Because d = 2m/n, we
have:
6c
d≤6−
n
These two inequalities now imply the following upper bound for the chromatic
number of G.
6c
χ≤7−
n
For a surface Σ, the least integer k such that every graph embeddable on Σ is
k-colourable is called the chromatic number of Σ, denoted χ(Σ). We thus have:
χ(Σ) ≤ 7 −

6c
n

(15.1)

The table in Figure 15.1 shows the resulting upper bounds on χ(Σ) for the four
closed surfaces of smallest genus.
Σ
c(Σ)
sphere
2
projective plane
1
torus
0
Klein bottle
0

χ(Σ)
≤6
≤6
≤7
≤7

Fig. 15.1. Bounds on the chromatic numbers of various surfaces

Heawood’s Inequality
When c ≤ 0, a general upper bound for the chromatic number χ := χ(Σ) of a
surface Σ in terms of its Euler characteristic can be derived from (15.1). Noting
that χ ≤ n, (15.1) yields the inequality χ ≤ 7 − 6c/χ,
and so χ2 − 7χ + 6c ≤ 0;
√
1
that is, (χ − α)(χ − β) ≤ 0, where α, β = 2 (7 ± 49 − 24c). This results in the
following bound, due to Heawood (1890).
Theorem 15.1 Heawood’s Inequality
For any surface Σ with Euler characteristic c ≤ 0:
χ(Σ) ≤

√

1
7 + 49 − 24c
2



As Heawood observed, in order to show that the bound in Theorem 15.1 is
attainable for a given surface Σ, it suﬃces to ﬁnd just one graph which is embeddable on the surface and requires the appropriate number of colours. Because the
inequality χ ≤ n was employed in deriving Heawood’s Inequality, the graphs G
for which χ = n (that is, the complete graphs) are natural candidates. Heawood

15.1 Chromatic Numbers of Surfaces

393

himself found an embedding of K7 on the torus (see Figure 3.9a), and deduced
that the chromatic number of the torus is seven. On the other hand, although the
Klein bottle has characteristic zero, Franklin (1934) showed that this surface is not
7-chromatic (the bound given by the table in Figure 15.1) but only 6-chromatic.
Figure 15.2a depicts a 6-chromatic triangulation of the Klein bottle (an embedding
of the graph obtained from K6 by duplicating three pairwise nonadjacent edges),
and Figure 15.2b shows its dual, known as the Franklin graph. Another drawing
of the Franklin graph is given in Figure 15.3.

1
2
3

4
5
6
(a)

1

1
2

2
3

1

4

3

5
6

2
3

(b)

Fig. 15.2. (a) A 6-chromatic triangulation of the Klein bottle, and (b) its dual, the
Franklin graph

Fig. 15.3. Another drawing of the Franklin graph

The Map Colour Theorem
With the exception of the Klein bottle, it has been proved that equality holds in
Heawood’s bound (Theorem 15.1) for every surface Σ of characteristic at most
zero. This result, due to Ringel and Youngs (1968), is known as the Map Colour
Theorem (see Ringel (1974)). There remain the two surfaces of positive characteristic, namely the projective plane and the sphere. Figure 10.25a shows an embedding
of K6 on the projective plane. Thus, the chromatic number of the projective plane

394

15 Colourings of Maps

is six, the bound given by the table in Figure 15.1. On the other hand, as the FourColour Theorem shows, Heawood’s bound for the chromatic number of the sphere
(see Figure 15.1) is oﬀ by two. We sketch a proof of the Four-Colour Theorem in
the next section.
Although in this chapter we are interested in closed surfaces, one may deﬁne
in an analogous manner chromatic numbers of surfaces with boundaries, such as
the Möbius band (see Exercise 15.1.1).

Exercises
15.1.1 Tietze Graph
The graph shown in Figure 15.4 is known as the Tietze graph. Find an embedding of
this graph on the Möbius band showing that the chromatic number of the Möbius
band is at least six.

Fig. 15.4. The Tietze graph

————— —————
15.1.2 Let G be a triangulation of a closed surface.
a) Suppose that G has a proper 4-vertex-colouring c : V → {1, 2, 3, 4}.
i) Show that the parity of the number of faces of G whose vertices are coloured
i, j, k is the same for each of the four triples {i, j, k} ⊂ {1, 2, 3, 4}.
ii) Deduce from (a) that the parity of the number of vertices of odd degree
coloured i is the same for each i ∈ {1, 2, 3, 4}.
b) Suppose that G has exactly two vertices of odd degree, and that these two
vertices are adjacent. Deduce that G is not 4-colourable.
(J.P. Ballantine; S. Fisk)
15.1.3 Let G be a quadrangulation of the projective plane.
a) Show that if G is not bipartite, then χ(G) ≥ 4, by proceeding as follows.

15.2 The Four-Colour Theorem

395

 Assume that c : V → Z3 is a 3-colouring of G. Orient each edge uv of G,
where c(v) = c(u) + 1, from u to v. Show that, in the resulting digraph,
each 4-cycle of G has two arcs oriented in each sense.
 Because G is nonbipartite, it must have an odd cycle C := v1 v2 . . . v2k+1
and, because each face of G is a quadrangle, C must be a noncontractible cycle. Cutting the projective plane along C produces a planar
near quadrangulation G in which C corresponds to the (4k + 2)-cycle


v1 v2 . . . v2k+1
, where vi and vi are the two copies of vi
C  := v1 v2 . . . v2k+1
resulting from cutting along C. Obtain a contradiction by arguing that, in
the derived orientation of G , the numbers of arcs of C  oriented in the two
senses cannot be equal.
b) Using Euler’s Formula for the projective plane (see Theorem 10.37), show that
every subgraph of G has a vertex of degree at most three.
c) Deduce that χ = 2 or χ = 4.
(D.A. Youngs)
15.1.4 Let Gk denote the graph with vertex set {(i, S) : 1 ≤ i ≤ k, ∅ ⊂ S ⊆
{1, 2, . . . , k}, and i ∈
/ S}, by joining two vertices (i, S) and (j, T ) if and only if
i ∈ T, j ∈ S and S ∩ T = ∅.
a) Draw G2 and G3 .
b) Find an embedding of G4 as a quadrangulation of the projective plane.
c) For k = 2, 3, 4, ﬁnd a k-colouring of Gk in which the neighbour set of each of
the k colour classes is a stable set.
d) Using Exercise 15.1.3, deduce that χ(G4 ) = 4.
(Gyárfás et al. (2004) have shown that, for k ≥ 2, Gk is the unique smallest kchromatic graph with a k-colouring in which the neighbour set of each of the k
colour classes is a stable set.)
15.1.5
a) Show that the circulant CG(Z13 , {1, −1, 5, −5}) is a triangle-free 4-chromatic
graph.
b) Find a quadrangular embedding of this graph on the torus.
(D. Archdeacon, J. Hutchinson, A. Nakamoto, S. Negami and K.
Ota)

15.2 The Four-Colour Theorem
The Four-Colour Theorem, introduced in Section 11.1, states that every loopless
planar graph is 4-colourable. Here, we give a brief outline of the ideas involved in
its proof, due to Appel and Haken (1977a) and Appel et al. (1977).
The proof is by contradiction. Suppose that the Four-Colour Theorem is false.
Then there is a smallest loopless plane graph which is not 4-colourable. The idea
is to study the properties of such a hypothetical smallest counterexample, and
eventually arrive at a contradiction. Throughout this section, therefore, G denotes
a smallest counterexample to the Four-Colour Theorem, in the following sense.

396

15 Colourings of Maps

i) G is not 4-colourable.
ii) Subject to (i), v(G) + e(G) is as small as possible.
The starting point of our analysis consists of several basic observations concerning any such graph G.
Proposition 15.2 Let G be a smallest counterexample to the Four-Colour Theorem. Then:
i) G is 5-critical,
ii) G is a triangulation,
iii) G has no vertex of degree less than four.
Proof
i) Clearly, G must be 5-critical, otherwise there would exist a proper subgraph
of G that is not 4-colourable, contradicting the minimality of v(G) + e(G).
ii) To see that G is a triangulation, suppose that it has a face whose boundary is a
cycle C of length greater than three. Because G is planar, there are two vertices
x and y of C which are nonadjacent in G. The graph G / {x, y} obtained by
identifying x and y into a single vertex z is a planar graph with fewer vertices
than G, and the same number of edges, hence has a 4-colouring c. The colouring
of G derived from c by assigning the colour c(z) to both x and y is then a 4colouring of G, a contradiction.

iii) Because G is 5-critical, Theorem 14.6 implies that δ ≥ 4.

Kempe Chains
By Corollary 10.22, every simple plane graph has a vertex of degree at most ﬁve. To
obtain the needed contradiction, it would therefore suﬃce to show that a smallest
counterexample G has no such vertex. Proposition 15.2(iii) states that G has no
vertex of degree less than four. Kempe (1879) extended this result to vertices of
degree four.
Theorem 15.3 G has no vertex of degree four.
Proof By contradiction. Let v be a vertex of degree four in G, and let {V1 , V2 , V3 ,
V4 } be a 4-colouring of G − v; such a colouring exists because G is 5-critical.
Because G itself is not 4-colourable, v must be adjacent to a vertex of each colour.
Therefore, we can assume that the neighbours of v in clockwise order around v are
v1 , v2 , v3 , and v4 , where vi ∈ Vi for 1 ≤ i ≤ 4.
Denote by Gij the subgraph of G induced by Vi ∪ Vj . The vertices vi and vj
belong to the same component of Gij . If not, consider the component of Gij that
contains vi . By interchanging the colours i and j in this component, we obtain
a new 4-colouring of G − v in which only three colours (all but i) are assigned
to the neighbours of v. We have already shown that this situation cannot arise.

15.2 The Four-Colour Theorem

v1
P24

v2
P13

v

v4

397

v3

Fig. 15.5. Kempe’s proof of the case d(v) = 4

Therefore, vi and vj indeed belong to the same component of Gij . Let Pij be a
vi vj -path in Gij , and let C denote the cycle vv1 P13 v3 v (see Figure 15.5).
Because C separates v2 and v4 (in Figure 15.5, v2 ∈ int(C) and v4 ∈ ext(C)),
it follows from the Jordan Curve Theorem (10.1) that the path P24 meets C in
some point. Because G is a plane graph, this point must be a vertex. But this is
impossible, because the vertices of P24 have colours 2 and 4, whereas no vertex of
C has either of these colours.

The bicoloured paths Pij considered in the proof of Theorem 15.3 are known as
Kempe chains, and the procedure of switching the two colours on a Kempe chain is
referred to as a Kempe interchange. These ideas can be employed to establish the
following more general theorem. We leave its proof, and the proof of its corollary,
as an exercise (15.2.1).
Theorem 15.4 G contains no separating 4-cycle.



Corollary 15.5 G is 5-connected.



By virtue of Theorem 15.3, any smallest counterexample to the Four-Colour
Theorem has a vertex of degree ﬁve, so its neighbours induce a 5-cycle, and this cycle is a separating 5-cycle. Birkhoﬀ (1913) showed, moreover, that every separating
5-cycle in a smallest counterexample is one of this type, namely one induced by the
set of neighbours of a vertex of degree ﬁve. A 5-connected graph with this property
is said to be essentially 6-connected. (Essential connectivity is the vertex analogue
of essential edge connectivity, treated in Section 9.3.) Combining Birkhoﬀ’s result
with Proposition 15.2 and Corollary 15.5, we now have:
Theorem 15.6 G is an essentially 6-connected triangulation.



Kempe’s Erroneous Proof
Proceeding in much the same way as in the proof of Theorem 15.3, Kempe (1879)
believed that he had also proved that a smallest counterexample can contain no

398

15 Colourings of Maps

vertex of degree ﬁve, and thus that he had established the Four-Colour Theorem.
Here is Kempe’s erroneous argument.
Suppose that G has a vertex v of degree ﬁve with N (v) = {v1 , v2 , v3 , v4 , v5 }.
By the minimality of G, the subgraph G − v has a 4-colouring (V1 , V2 , V3 , V4 ). Our
aim is to ﬁnd such a 4-colouring in which at most three colours are assigned to
the neighbours of v; the vertex v can then be coloured with one of the remaining
colours, resulting in a 4-colouring of G.
Consider a 4-colouring of G − v. As before, v is adjacent to a vertex of each of
the four colours. Without loss of generality, suppose that vi ∈ Vi , 1 ≤ i ≤ 4, and
v5 ∈ V2 (see Figure 15.6).

v1 (1)
P14

v5 (2)

v2 (2)

P13

v

v4 (4)

v3 (3)

Fig. 15.6. Kempe’s erroneous proof of the case d(v) = 5

We may assume that v1 and v3 belong to the same component of G13 and that
v1 and v4 belong to the same component of G14 , otherwise the colours could be
switched in the component of G13 or G14 containing v1 , resulting in a 4-colouring
in which only three colours are assigned to the neighbours of v.
Let P13 be a v1 v3 -path in G13 and P14 a v1 v4 -path in G14 . The cycle vv1 P13 v3 v
separates vertices v2 and v4 ; thus v2 and v4 belong to diﬀerent components of G24 .
Similarly, the cycle vv1 P14 v4 v separates v3 and v5 , so v3 and v5 belong to diﬀerent
components of G23 . In light of these observations, Kempe argued that the colours
2 and 4 in the component of G24 containing v2 , and the colours 2 and 3 in the
component of G23 containing v5 , could be interchanged to produce a 4-colouring
of G − v in which just the three colours 1, 3, and 4, are assigned to the neighbours
of v. On assigning colour 2 to v, a 4-colouring of G would then be obtained.
At ﬁrst sight, Kempe’s line of argument seems perfectly reasonable, and his
‘proof’ remained unchallenged for over a decade. But eventually, after carefully
analysing Kempe’s argument, Heawood (1890) discovered that the double Kempe
interchange does not necessarily result in a 4-colouring of G − v in which just three
colours are used on the neighbours of v (see Exercise 15.2.2). Heawood noted, however, that Kempe interchanges could be used to prove the Five-Colour Theorem.
(In essence, the proof presented in Section 11.1.)

15.2 The Four-Colour Theorem

399

Reducibility
Although Kempe’s proof was incorrect, it did contain the two main ingredients —
reducibility and unavoidability — that led eventually to a proof of the Four-Colour
Theorem. These notions both involve the concept of a conﬁguration.
Let C be a cycle in a simple plane triangulation G. If C has no inner chords
and exactly one inner bridge B, we call B ∪ C a conﬁguration of G. The cycle C is
the bounding cycle of the conﬁguration, and B is its bridge. By a conﬁguration, we
mean a conﬁguration of some simple plane triangulation. For example, the wheel
Wk with k spokes (k ≥ 2) is a conﬁguration.
A conﬁguration is reducible if it cannot be a conﬁguration of a smallest counterexample to the Four-Colour Conjecture. It follows from Proposition 15.2(iii)
and Theorem 15.3 that W2 , W3 , and W4 are reducible. (By Theorem 15.6, every
conﬁguration bounded by a 5-cycle, except possibly W5 , is reducible. Kempe’s
failed proof was an attempt to show that W5 , also, is reducible.) Another example
of a reducible conﬁguration is the Birkhoﬀ diamond, shown in Figure 15.7.
v6

v1
u1

v5

u4

u2

v2

u3
v4

v3

Fig. 15.7. The Birkhoﬀ diamond

Theorem 15.7 The Birkhoﬀ diamond is reducible.
Proof If possible, let G be a smallest counterexample that contains this conﬁguration. Because G is essentially 6-connected by Theorem 15.6, no edge of G
can join nonconsecutive vertices on the bounding cycle (Exercise 15.2.3). Consider
the plane graph G derived from G by deleting the four internal bridge vertices,
u1 , u2 , u3 , and u4 , identifying v1 and v3 to form a new vertex v0 , joining v0 and v5
by a new edge, and deleting one of the two multiple edges between v0 and v2 (see
Figure 15.8). (Observe that the operation of deriving G from G does not create
loops, since G is essentially 6-connected.)
Because v(G )+e(G ) < v(G)+e(G) and G is a smallest counterexample, there
exists a 4-colouring c of G . The colouring c gives rise to a partial 4-colouring of
G (a 4-colouring of G − {u1 , u2 , u3 , u4 }) in which:



v1 and v3 receive the same colour, say 1,
v5 receives a colour diﬀerent from 1, say 2,

400

15 Colourings of Maps
v6

v1

v6

u1
v5

u4

u2

v2

v0

v5

v2

u3
v4

v3

v4
G

G

Fig. 15.8. Reduction of a graph containing the Birkhoﬀ diamond




v2 receives a colour diﬀerent from 1, without loss of generality either 2 or 3,
v4 and v6 each receives a colour diﬀerent from 1 and 2, namely either 3 or 4.

Thus, up to permutations of colours and symmetry, there are ﬁve possible ways
in which the bounding cycle C := v1 v2 v3 v4 v5 v6 v1 may be coloured, as indicated
in the following table.
c1
c2
c3
c4
c5

v1
1
1
1
1
1

v2
2
2
3
3
3

v3
1
1
1
1
1

v4
3
4
4
4
3

v5
2
2
2
2
2

v6
3
3
3
4
3

In each of the ﬁrst four cases, the given colouring can be extended to a 4colouring of G by assigning appropriate colours to u1 , u2 , u3 , and u4 . For instance,
the ﬁrst colouring c1 can be extended by assigning colour 4 to u1 , colour 3 to u2 ,
colour 2 to u3 , and colour 1 to u4 . We leave it to the reader to ﬁnd appropriate
extensions of the colourings c2 , c3 , and c4 (Exercise 15.2.4a).
Consider, now, the colouring c5 , in which v1 and v3 have colour 1, v5 has
colour 2, and v2 , v4 , and v6 have colour 3. In this case, we shall see that a Kempe
interchange may be applied so that the resulting partial 4-colouring of G can be
extended to a 4-colouring.
Firstly, consider the bipartite subgraph G34 induced by the vertices coloured 3
or 4. We may assume that v2 , v4 , and v6 belong to the same component H of G34 .
Suppose, for example, that some component of G34 contains v2 but neither v4 nor
v6 . By swapping the colours 3 and 4 in this component, we obtain a colouring of
type c4 (with the colours 3 and 4 interchanged). The other cases can be disposed
of similarly. We leave their veriﬁcation to the reader (Exercise 15.2.4b).
It follows that H is an outer bridge of C in G, with v2 , v4 , and v6 as its
vertices of attachment. Now consider the bipartite subgraph G12 induced by the
vertices coloured 1 and 2. If there were a component of G12 which contained both
v3 and v5 , this component would be an outer bridge of C overlapping H, which is

15.2 The Four-Colour Theorem

401

5

5

5

5
Fig. 15.9. The Heesch representation of the Birkhoﬀ diamond

impossible. Thus the component H  of G12 which contains v3 does not contain v5 .
By interchanging the colours 1 and 2 in H  , we obtain a new partial 4-colouring of
G. In this colouring, v1 has colour 1, v3 and v5 colour 2, and v2 , v4 , and v6 colour
3. This colouring may now be extended to a 4-colouring of G by assigning colour
2 to u1 , colour 4 to u2 and u4 , and colour 1 to u3 . This contradicts the minimality
of G. We conclude that the Birkhoﬀ diamond is reducible.


Unavoidability
A set U of conﬁgurations is unavoidable if every essentially 6-connected triangulation necessarily contains at least one member of U. As a simple example, the
singleton {W5 } is an unavoidable set.
It follows from the above deﬁnitions that a smallest counterexample can contain
no reducible conﬁguration but must contain at least one conﬁguration from each
unavoidable set. To obtain a contradiction to the existence of such a counterexample, it thus suﬃces to ﬁnd an unavoidable set of conﬁgurations, each of which
is reducible. The original set constructed by Appel and Haken (1977a) had 1936
members. Robertson et al. (1997a), using more reﬁned techniques, constructed a
smaller set, consisting of 633 conﬁgurations.
We have seen that the relation m = 3n − 6 between the numbers of edges and
vertices of a triangulation implies that every essentially 6-connected triangulation
contains a vertex of degree ﬁve, and hence that {W5 } is an unavoidable set. By
exploiting the same identity in subtler ways, one may derive further constraints on
the degrees of vertices in triangulations, and thereby obtain other unavoidable sets
of conﬁgurations. For this purpose, it is convenient to represent each conﬁguration
F := B ∪ C by the subgraph H induced by the internal vertices of its bridge B,
together with the function d on V (H), where d(v) is the degree of v in G. Heesch
(1969) was the ﬁrst to propose this representation. For this reason, we refer to
the pair (H, d) as the Heesch representation of F . Figure 15.9 shows the Heesch
representation of the Birkhoﬀ diamond.

402

15 Colourings of Maps

Proof Technique: Discharging
Unavoidable sets are found by a process called discharging. In the context
of plane graphs, this process is nothing more than an ingenious and highly
eﬀective way of applying Euler’s Formula (10.2). Initially, each vertex v is
assigned a weight of 6 − d(v), called its charge. Thus the charge on v is positive if d(v) < 6, zero if d(v) = 6, and negative if d(v) > 6. We then attempt
to discharge G (that is, make the charge at each vertex negative or zero)
by redistributing the charge in some methodical fashion. Each such discharging algorithm deﬁnes a set U of conﬁgurations such that any triangulation
which contains no member of U will be discharged by the algorithm. Observe,
however, that no discharging algorithm can completely discharge a triangulation, because the sum of the charges, which remains constant throughout the
procedure, is positive:


(6 − d(v)) = 6v(G) −
d(v) = 6v(G) − 2e(G) = 12
v∈V

v∈V

We conclude that every triangulation must contain at least one member of U;
in other words, U is an unavoidable set of conﬁgurations.
The following is a simple example of a discharging algorithm: for each vertex
of degree ﬁve, distribute its charge of 1 equally amongst its ﬁve neighbours.
Every vertex of degree eight or more is discharged by this algorithm, because
the maximum charge that a vertex v can receive from its neighbours is 15 d(v),
and if d(v) ≥ 8,
1
6 − d(v) + d(v) < 0
5
Also, each vertex of degree seven with no more than ﬁve neighbours of degree
ﬁve is discharged, as is each vertex of degree ﬁve or six with no neighbour
of degree ﬁve. Thus every essentially 6-connected triangulation must contain
either a vertex of degree ﬁve that is adjacent to a vertex of degree ﬁve or
six, or else a vertex of degree seven with at least ﬁve neighbours of degree
ﬁve. However, a vertex of degree seven with ﬁve neighbours of degree ﬁve
clearly has two consecutive neighbours of degree ﬁve, and these are adjacent
in G. Thus the set U consisting of the two conﬁgurations shown below is the
unavoidable set corresponding to this discharging algorithm.
5

5

5

6

In recent years, this discharging technique has been used with success to attack
a variety of other colouring problems for graphs embeddable on the plane and
other surfaces. Here is one example.

15.2 The Four-Colour Theorem

403

Discharging (continued)
In 1975, R. Steinberg conjectured that every planar graph without cycles of
length four or ﬁve is 3-colourable (see Steinberg (1993)). Abbott and Zhou
(1991) employed discharging to prove the weaker statement that a planar
graph is 3-colourable if it contains no cycles of length k for 4 ≤ k ≤ 11. To
see this, observe ﬁrst that a smallest counterexample to the assertion must
be a 2-connected planar graph with minimum degree at least three. Let G
be a planar embedding of such a graph. Assign a charge of d(v) − 6 to each
vertex v ∈ V , and a charge of 2d(f ) − 6 to each face f ∈ F . Using Euler’s
Formula, it can be veriﬁed that the total charge assigned to vertices and
faces is −12. Now, for each face of degree twelve or more, transfer a charge
of 3/2 to each of the vertices incident with it. Because G is 2-connected, all
faces of G are bounded by cycles, by Theorem 10.7. Also, because G has
no 4-cycles, no edge of G is incident with two triangles. Thus each vertex
v is incident with at least d(v)/2 distinct faces of degree twelve or more.
A simple computation shows that, after the transfers of charges, all vertices
and faces have nonnegative charges. This contradiction establishes the result.
By using more complicated discharging rules, Borodin et al. (2005) showed
that every planar graph without cycles of lengths between four and seven is
3-colourable. An analogous result for surfaces was established by Zhao (2000).
He showed that, given any surface Σ, there exists a constant f (Σ) such that
any graph embeddable on Σ and containing no k-cycles, 4 ≤ k ≤ f (Σ), is
3-colourable. For a survey of applications of the discharging technique, see
Salavatipour (2003).
The original proof of the Four-Colour Theorem by Appel and Haken (1977a)
and Appel et al. (1977) relies heavily on the computer for checking details involved
in ﬁnding an unavoidable set and verifying that all conﬁgurations in that set are
reducible. It employs no fewer than 487 discharging rules, resulting in a set of over
1400 unavoidable conﬁgurations. The smaller conﬁgurations in this list could be
shown to be reducible by using the fact that a smallest counterexample to the Four
Colour Conjecture is essentially 6-connected. However, in order to handle some of
the larger conﬁgurations, results of Bernhart (1947) on the reducibility of certain
special conﬁgurations were crucial.
The more recent proof by Robertson et al. (1997a), although also dependent
on the computer, is simpler in many ways. Only thirty-two discharging rules are
needed, generating a list of 633 unavoidable conﬁgurations. (The deﬁnition of a
conﬁguration used there diﬀers slightly from the one given here.)
Further information about the Four-Colour Theorem and its proof can be found
in the expository article by Woodall and Wilson (1978) and the book by Wilson
(2002).

404

15 Colourings of Maps

Exercises
15.2.1 Give proofs of Theorem 15.4 and Corollary 15.5.
15.2.2 By considering the partially coloured plane triangulation depicted in Figure 15.10, show that the ‘double switching’ of colours proposed by Kempe leads
to an improper colouring.
(W.T. Tutte and H. Whitney)
1

3

4

1

2

2
v
4

3

Fig. 15.10. An example illustrating the ﬂaw in Kempe’s argument

15.2.3 Show that if G is a smallest counterexample that contains the Birkhoﬀ diamond, no two nonconsecutive vertices on the bounding cycle of that conﬁguration
can be adjacent in G.
15.2.4 Complete the proof that the Birkhoﬀ diamond is reducible by:
i) ﬁnding appropriate extensions of the colourings c2 , c3 , and c4 ,
ii) verifying the cases in which some component of G34 contains v4 but neither
v2 nor v6 , or v6 but neither v2 nor v4 .
15.2.5
a) Determine the conﬁguration whose Heesch representation is shown in Figure 15.11.
b) Show that this conﬁguration is reducible.
————— —————
15.2.6 Consider the discharging algorithm in which, for each vertex v of degree
ﬁve, the unit charge of v is distributed equally among its neighbours of degree nine
or more. Find the unavoidable set (consisting of seven conﬁgurations) determined
by this algorithm.
15.2.7 Invent a discharging algorithm and determine the set U of unavoidable
conﬁgurations to which it gives rise.

15.3 List Colourings of Planar Graphs

405

5

5

5

6
Fig. 15.11. The Heesch representation for Exercise 15.2.5

15.3 List Colourings of Planar Graphs
Thomassen’s Proof of the Five-Colour Theorem
List colourings are of interest not only because they extend the usual notion of
colouring, but also because, when judiciously used, they can provide remarkably
simple proofs of theorems concerning standard colourings. The following theorem
on list colourings of planar graphs, due to Thomassen (1994), implies the FiveColour Theorem.
A near-triangulation is a plane graph all of whose inner faces have degree three.
Theorem 15.8 Let G be a near-triangulation whose outer face is bounded by a
cycle C, and let x and y be consecutive vertices of C. Suppose that L : V → 2N is
an assignment of lists of colours to the vertices of G such that:
i) |L(x)| = |L(y)| = 1, where L(x) = L(y),
ii) |L(v)| ≥ 3 for all v ∈ V (C) \ {x, y},
iii) |L(v)| ≥ 5 for all v ∈ V (G) \ V (C).
Then G is L-colourable.
Proof By induction on v(G). If v(G) = 3, then G = C and the statement is
trivial. So we may assume that v(G) > 3.
Let z and x be the immediate predecessors of x on C. Consider ﬁrst the case
where x has a neighbour y  on C other than x and z (see Figure 15.12a.) In this
case, C1 := x Cy  x and C2 := x y  Cx are two cycles of G, and G is the union
of the near-triangulation G1 consisting of C1 together with its interior and the
near-triangulation G2 consisting of C2 together with its interior. Let L1 denote
the restriction of L to V (G1 ). By induction, G1 has an L1 -colouring c1 . Now let
L2 be the function on V (G2 ) deﬁned by L2 (x ) := {c1 (x )}, L2 (y  ) := {c1 (y  )},
and L2 (v) := L(v) for v ∈ V (G2 ) \ {x , y  }. Again by induction (with x and y 
playing the roles of x and y, respectively), there is an L2 -colouring c2 of G2 . By the
deﬁnition of L2 , the colourings c1 and c2 assign the same colours to x and y  , the
two vertices common to G1 and G2 . Thus the function c deﬁned by c(v) := c1 (v)
for v ∈ V (G1 ) and c(v) := c2 (v) for v ∈ V (G2 ) \ V (G1 ) is an L-colouring of G.
Suppose now that the neighbours of x lie on a path xP z internally disjoint
from C, as shown in Figure 15.12b. In this case, G := G−x is a near-triangulation

406

15 Colourings of Maps
x

x
x

z

x

z
y

G2

y

P

G1

G
C

C
y



(a)

(b)

Fig. 15.12. Proof of Theorem 15.8

whose outer face is bounded by the cycle C  := xCzP −1 x. Let α and β be two
distinct colours in L(x ) \ L(x). Consider the function L on V (G ) deﬁned by
L (v) := L(v) \ {α, β} for v ∈ V (P ) \ {x, z}, and L (v) := L(v) for all other
vertices v of G . By induction, there exists an L -colouring c of G . One of the
colours α and β is diﬀerent from c (z). By assigning that colour to x , the colouring

c is extended to an L-colouring c of G.
An immediate consequence of Theorem 15.8 is the following strengthening of
the Five-Colour Theorem.
Corollary 15.9 Every planar graph is 5-list-colourable.
This is one of the more illuminating proofs of the Five-Colour Theorem. Unfortunately, no list colouring analogue of the Four-Colour Theorem is known. Indeed,
Voigt (1993) found examples of planar graphs which are not 4-list-colourable. Even
so, it is conceivable that an appropriate list colouring version of the Four-Colour
Theorem will provide a more transparent (and shorter) proof of that theorem as
well. (For instance, Kündgen and Ramamurthi (2002) have suggested that every
planar graph admits a list colouring when the available colours come in pairs and
each list consists of two of these pairs.)
Voigt (1995) also gave examples of triangle-free planar graphs that are not 3list-colourable. These show that there is no natural list-colouring extension of the
following ‘three-colour theorem’, due to Grötzsch (1958/1959).
Theorem 15.10 Grötzsch’s Theorem
Every triangle-free planar graph is 3-colourable.



Nonetheless, it turns out that every planar graph of girth ﬁve is 3-listcolourable. This result was established by Thomassen (1994) using similar but
more involved arguments than those he employed to establish Theorem 15.8. It

15.4 Hadwiger’s Conjecture

407

may legitimately be regarded as a list-colouring extension of Grötzsch’s Theorem,
because the latter can be reduced quite easily to planar graphs of girth ﬁve.
Grötzsch’s Theorem can also be proved in much the same way as the FourColour Theorem, but the arguments are considerably simpler. The 4-chromatic
Grötzsch graph (Figure 14.4) shows that Grötzsch’s Theorem does not extend to
nonplanar graphs. Indeed, it was constructed by Grötzsch (1958/1959) for this
very purpose.

Exercises
15.3.1
a) Show that every k-degenerate graph is (k + 1)-list-colourable.
b) Deduce that:
i) every simple outerplanar graph is 3-list-colourable,
ii) every simple triangle-free planar graph is 4-list-colourable,
(J. Kratochvı́l and Zs. Tuza)
iii) every simple planar graph is 6-list-colourable.
————— —————
15.3.2 The list chromatic number of a surface Σ is the smallest positive integer k
such that every loopless graph embeddable on Σ is k-list-colourable. Show that,
except for the sphere, the list chromatic number of any closed surface (whether
orientable or not) is equal to its chromatic number.

15.4 Hadwiger’s Conjecture
As we saw in Section 14.3, there exist graphs of arbitrarily high girth and chromatic
number. What, then, can one say about the structure of graphs with high chromatic
number? A longstanding conjecture due to Hadwiger (1943) asserts that any such
graph necessarily contains a large clique, not as a subgraph but as a minor. (Recall
that a minor of a graph G is a graph which can be obtained from G by deleting
vertices and deleting or contracting edges.)

Hadwiger’s Conjecture
Conjecture 15.11 Every k-chromatic graph has a Kk -minor.

For k = 1 and k = 2, the validity of Hadwiger’s conjecture is obvious. It is also
easily veriﬁed for k = 3, because a 3-chromatic graph necessarily contains an odd
cycle, and every odd cycle contains K3 as a minor. Hadwiger (1943) settled the
case k = 4, and Dirac (1952a) proved the following somewhat stronger theorem.

408

15 Colourings of Maps

Theorem 15.12 Every 4-chromatic graph contains a K4 -subdivision.
Proof Let G be a 4-chromatic graph, and let F be a 4-critical subgraph of G.
By Theorem 14.6, δ(F ) ≥ 3. By Exercise 10.1.5, F contains a subdivision of K4 ,
so G does too.

Wagner (1964) showed that the case k = 5 of Hadwiger’s Conjecture is equivalent to the Four-Colour Theorem; thus it also is true. The case k = 6 was veriﬁed
by Robertson et al. (1993); this proof, too, relies on the Four-Colour Theorem.
However, the conjecture has not yet been settled in general, and some mathematicians now believe that it might even be false. Although it has been veriﬁed
for small values of k, the conjecture appears to be hard to prove when k is large
relative to n, in particular when k = n/2 (and n is even). More precisely, if α = 2,
then χ ≥ n/2 by (14.1), so G should have a Kn/2 -minor according to Hadwiger’s
Conjecture. It is not hard to show that every graph G with α = 2 has a Kn/3 minor (Exercise 15.4.4), but no one has yet succeeded in bridging the gap between
n/3 and n/2.
On the other hand, a weaker form of Hadwiger’s Conjecture can be proved. Due
to Mader (1967), it states that every graph of suﬃciently high chromatic number
has a Kk -minor. As is frequently the case with results about the chromatic number,
this theorem is really one about graphs with high average degree; the link with the
chromatic number is made via Theorem 14.6 (as in the proof of Theorem 15.12).
Theorem 15.13 Every simple graph G with m ≥ 2k−3 n has a Kk -minor.
Proof By induction on m. The validity of the theorem is readily veriﬁed when
k ≤ 3. Thus we may assume that k ≥ 4 and m ≥ 10. Let G be a graph with n
vertices and m edges, where m ≥ 2k−3 n. If G has an edge e which lies in at most
2k−3 − 1 triangles, the underlying simple graph of G / e has n − 1 vertices and at
least 2k−3 n − 2k−3 = 2k−3 (n − 1) edges, and so has a Kk -minor by induction. Thus
G, too, has a Kk -minor.
We may assume, therefore, that each edge of G lies in at least 2k−3 triangles.
For e ∈ E, let us denote by t(e) the number of triangles containing e. Because an
edge e lies in the subgraph G[N (v)] induced by the neighbours of a vertex v if and
only if v is the ‘apex’ of a triangle whose ‘base’ is e, we have:



|E(G[N (v)])| =
t(e) ≥ 2k−3 m =
2k−4 d(v)
v∈V

e∈E

v∈V

We deduce that G has a vertex v whose neighbourhood subgraph H := G[N (v)]
satisﬁes the inequality:
e(H) ≥ 2k−4 d(v) = 2k−4 v(H)
By induction, H has a Kk−1 -minor. Therefore G has a Kk -minor.



Corollary 15.14 For k ≥ 2, every (2k−2 + 1)-chromatic graph has a Kk -minor.

15.4 Hadwiger’s Conjecture

409

Proof Let G be a (2k−2 + 1)-chromatic graph, and let F be a (2k−2 + 1)-critical
subgraph of G. By Theorem 14.6, δ(F ) ≥ 2k−2 , and so e(F ) ≥ 2k−3 v(F ). Theorem

15.13 implies that F has a Kk -minor. Therefore G, too, has a Kk -minor.
If, instead of the chromatic number, one considers the fractional chromatic
number, Corollary 15.14 can be sharpened to a linear bound, as was shown by
Reed and Seymour (1998): every graph with fractional chromatic number greater
than 2k − 2 has a Kk -minor.
Hajós’ Conjecture
An even stronger conjecture than Hadwiger’s was proposed by G. Hajós, probably
in the early 1950s (see Dirac (1952a)). It asserted that every k-chromatic graph
contains a subdivision of Kk . (For k = 4, this is Theorem 15.12.) Hajós’ Conjecture was disproved by Catlin (1979), who found the 8-chromatic graph shown in
Figure 14.3, which contains no subdivision of K8 (see Exercise 15.4.3). Shortly
thereafter, Erdős and Fajtlowicz (1981) totally demolished the conjecture by proving that almost every graph (in the probabilistic sense) is a counterexample. This
is but one more illustration of the power of the probabilistic method.
Theorem 15.15 Almost every graph is a counterexample to Hajós’ Conjecture.
Proof Let G ∈ Gn,1/2 . Then almost surely α ≤ 2 log2 n (Exercise 13.2.11).
Thus almost surely
n
n
(15.2)
χ≥ ≥
α
2 log2 n

Now the expected number of subgraphs of G with s vertices and t := 2s − n
edges is
 s
 s
s
s
n
(s2 /2)n n−(2s)
n
2
2
2
2−t =
2n−(2) ≤ n!
= s2n 2−(2)
s
s
n!
t
n
If s := nc , where 12 < c < 1, this latter quantity tends to zero as n tends
to inﬁnity. Therefore, by Markov’s Inequality (Proposition
13.4), almost surely

every subgraph of G on s vertices has fewer than 2s − n edges. Now this implies
that G almost surely contains no subdivision of Ks . For, in order to form such a
subdivision, at least n + 1 edges would need to be be subdivided, and there are
simply not enough vertices available for this. Because s is much smaller than the
lower bound on χ given by (15.2) for n suﬃciently large, we conclude that almost
every graph G is a counterexample to Hajós’ Conjecture.

More recently, Thomassen (2005) made the surprising observation that several
classical results in extremal graph theory (discussed in Chapter 12) furnish counterexamples to Hajós’ Conjecture (see Exercise 15.4.5). Ironically, these extremal
results were known long before Catlin announced his counterexamples to Hajós’
Conjecture, indeed even before Hajós proposed the conjecture in the ﬁrst place!
Hadwiger’s Conjecture, whether true or false, will not suﬀer the sorry fate of
Hajós’ Conjecture. In contrast to Theorem 15.15, it has been shown by Bollobás
et al. (1980) that almost no graph is a counterexample to Hadwiger’s Conjecture.

410

15 Colourings of Maps

Exercises
15.4.1
a) Show that K4,4 contains no K5 -subdivision.
b) Find a K5 -subdivision in K4,5 .
15.4.2
a) Show that if G is simple with n ≥ 4 and m ≥ 2n − 2, then G contains a
K4 -subdivision.
b) For n ≥ 4, ﬁnd a simple graph G with m = 2n − 3 that contains no K4 subdivision.
15.4.3 By verifying that it is 8-chromatic but contains no K8 -subdivision, show
that the Catlin graph (Figure 14.3) is a counterexample to Hajós’ Conjecture.
15.4.4 Let G be a graph with α = 2.
a) If G is not connected, show that G contains Kn/2 (as a subgraph).
b) If G is connected, show that G contains a path uvw with uw ∈
/ E and that
every vertex of G − {u, v, w} is adjacent to either u or w (or both).
c) Deduce, by induction, that G has a Kn/3 -minor.
————— —————
15.4.5 Let G be a graph on n := 2k 3 vertices with α ≤ k and ω ≤ k, where k ≥ 40.
a) Using Theorem 12.8, show that there exists such a graph G.
b) Show that χ ≥ 2k 2 .
c) Suppose that G contains a subdivision of K2k2 .
i) By applying Turán’s Theorem (12.3), show that at least 2k 3 − k 2 ‘edges’
of this subdivision are subdivided by vertices of G (that is, correspond to
paths of length at least two in G).
ii) Deduce that n ≥ 2k 3 + k 2 .
d) Conclude that G is a counterexample to Hajós’ Conjecture. (C. Thomassen)
15.4.6 Show that any graph G has Kn/(2α−1) as a minor.
(P. Duchet and H. Meyniel)
15.4.7 Show that Hadwiger’s Conjecture is true for graphs with stability number
two if and only if every graph G with α = 2 has Kn/2 as a minor.

15.5 Related Reading

411

15.5 Related Reading
Near 4-Colourings of Graphs on Surfaces
The Map Colour Theorem, discussed in Section 11.1, implies that the chromatic
number of Sk , the sphere with k handles, increases with k. On the other hand,
Albertson and Hutchinson (1978) showed that if G is a graph embeddable√on Sk ,
then one can always obtain a planar graph
by deleting no more than k 2n of
√
its vertices. This implies that all but k 2n vertices of any graph G embeddable
on Sk can be 4-coloured. A far stronger assertion was conjectured by Albertson
(1981): given any surface Σ, there exists an integer f (Σ) such that that all but
f (Σ) vertices of any graph embeddable on Σ can be 4-coloured. He conjectured,
in particular, that all but three vertices of any toroidal graph can be 4-coloured.
Thomassen (1994) proved that there are precisely four 6-critical graphs on the
torus, and deduced that all but two vertices of any toroidal graph can be 5-coloured.
Thomassen (1997b) showed, furthermore, that for any ﬁxed surface Σ, the number
of 6-critical graphs embeddable on Σ is ﬁnite. By contrast, Fisk (1978) constructed
inﬁnitely many 5-critical graphs on every surface but the sphere. For a discussion
of Albertson’s conjecture and related topics, see Jensen and Toft (1995).

16
Matchings

Contents
16.1 Maximum Matchings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413
Augmenting Paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
Berge’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
16.2 Matchings in Bipartite Graphs . . . . . . . . . . . . . . . . . . . . 419
Hall’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
Matchings and Coverings . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420
16.3 Matchings in Arbitrary Graphs . . . . . . . . . . . . . . . . . . . . 426
Barriers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426
The Tutte–Berge Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . 427
16.4 Perfect Matchings and Factors . . . . . . . . . . . . . . . . . . . . 430
Tutte’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
Factors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 431
T -Joins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432
16.5 Matching Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
Augmenting Path Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
Egerváry’s Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440
Blossoms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
Flowers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 444
Edmonds’ Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446
16.6 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 449
Stable Sets in Claw-Free Graphs . . . . . . . . . . . . . . . . . . . . 449
Transversal Matroids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 449
Rado’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 449
Pfaffians . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 449

16.1 Maximum Matchings
A matching in a graph is a set of pairwise nonadjacent links. If M is a matching,
the two ends of each edge of M are said to be matched under M , and each vertex

414

16 Matchings

incident with an edge of M is said to be covered by M . A perfect matching is one
which covers every vertex of the graph, a maximum matching one which covers as
many vertices as possible. A graph is matchable if it has a perfect matching. Not all
graphs are matchable. Indeed, no graph of odd order can have a perfect matching,
because every matching clearly covers an even number of vertices. Recall that the
number of edges in a maximum matching of a graph G is called the matching
number of G and denoted α (G). A maximal matching is one which cannot be
extended to a larger matching. Equivalently, it is one which may be obtained
by choosing edges in a greedy fashion until no further edge can be incorporated.
Such a matching is not necessarily a maximum matching. Examples of maximal
and perfect matchings in the pentagonal prism are indicated in Figures 16.1 and
16.1b, respectively.

(a)

(b)

Fig. 16.1. (a) A maximal matching, (b) a perfect matching

The main question we address in this chapter is:
Problem 16.1 The Maximum Matching Problem
Given: a graph G,
Find: a maximum matching M ∗ in G.
There are many questions of practical interest which, when translated into the
language of graph theory, amount to ﬁnding a maximum matching in a graph. One
such is:
Problem 16.2 The Assignment Problem
A certain number of jobs are available to be ﬁlled. Given a group of applicants for
these jobs, ﬁll as many of them as possible, assigning applicants only to jobs for
which they are qualiﬁed.
This situation can be represented by means of a bipartite graph G[X, Y ] in
which X represents the set of applicants, Y the set of jobs, and an edge xy with
x ∈ X and y ∈ Y signiﬁes that applicant x is qualiﬁed for job y. An assignment
of applicants to jobs, one person per job, corresponds to a matching in G, and the

16.1 Maximum Matchings

415

problem of ﬁlling as many vacancies as possible amounts to ﬁnding a maximum
matching in G.
As we show in Section 16.5, the Assignment Problem can be solved in polynomial time. Indeed, we present there a polynomial-time algorithm for ﬁnding a
maximum matching in an arbitrary graph. The notions of alternating and augmenting paths with respect to a given matching, deﬁned below, play an essential
role in these algorithms.
Augmenting Paths
Let M be a matching in a graph G. An M -alternating path or cycle in G is a path
or cycle whose edges are alternately in M and E \ M . An M -alternating path
might or might not start or end with edges of M (see Figure 16.2).

Fig. 16.2. Types of M -alternating paths

If neither its origin nor its terminus is covered by M (as in the top-left path
in Figure 16.2) the path is called an M -augmenting path. Figure 16.3a shows an
M -augmenting path in the pentagonal prism, where M is the matching indicated
in Figure 16.1a.

(a)

(b)

Fig. 16.3. (a) An M -augmenting path P , (b) the matching M  E(P )

Berge’s Theorem
The following theorem, due to Berge (1957), points out the relevance of augmenting
paths to the study of maximum matchings.

416

16 Matchings

Theorem 16.3 Berge’s theorem
A matching M in a graph G is a maximum matching if and only if G contains no
M -augmenting path.
Proof Let M be a matching in G. Suppose that G contains an M -augmenting
path P . Then M  := M  E(P ) is a matching in G, and |M  | = |M | + 1 (see
Figure 16.3). Thus M is not a maximum matching.
Conversely, suppose that M is not a maximum matching, and let M ∗ be a
maximum matching in G, so that |M ∗ | > |M |. Set H := G[M M ∗ ], as illustrated
in Figure 16.4.
Each vertex of H has degree one or two in H, for it can be incident with at
most one edge of M and one edge of M ∗ . Consequently, each component of H is
either an even cycle with edges alternately in M and M ∗ , or else a path with edges
alternately in M and M ∗ .

(a)
Fig. 16.4. (a) Matchings M (heavy) and M
G[M  M ∗ ]

(b)
∗

(broken), and (b) the subgraph H :=

Because |M ∗ | > |M |, the subgraph H contains more edges of M ∗ than of M ,
and therefore some path-component P of H must start and end with edges of M ∗ .
The origin and terminus of P , being covered by M ∗ , are not covered by M . The
path P is thus an M -augmenting path in G.


Exercises
16.1.1
a) Show that the Petersen graph has exactly six perfect matchings.
b) Determine pm(K2n ) and pm(Kn,n ), where pm(G) denotes the number of perfect matchings in graph G.
16.1.2 Show that it is impossible, using 1 × 2 rectangles (dominoes), to tile an
8 × 8 square (chessboard) from which two opposite 1 × 1 corner squares have been
removed.

16.1 Maximum Matchings

417

Fig. 16.5. The Sylvester graph: a 3-regular graph with no perfect matching

16.1.3 Show that if G is triangle-free, then α (G) = n − χ(G).
16.1.4 Find a maximal matching M and a perfect matching M ∗ in the pentagonal
prism such that the subgraph induced by M M ∗ has two components, one a cycle
and the other an M -augmenting path.
16.1.5
a) Let M and M  be maximum matchings of a graph G. Describe the structure
of the subgraph H := G[M  M  ].
b) Let M and M  be perfect matchings of a graph G. Describe the structure of
the subgraph H := G[M  M  ].
c) Deduce from (b) that a tree has at most one perfect matching.
16.1.6 Let M and N be matchings of a graph G, where |M | > |N |. Show that there
are disjoint matchings M  and N  of G such that |M  | = |M | − 1, |N  | = |N | + 1
and M  ∪ N  = M ∪ N .
16.1.7
a) Let M be a perfect matching in a graph G and S a subset of V . Show that
|M ∩ ∂(S)| ≡ |S| (mod 2).
b) Deduce that if M is a perfect matching of the Petersen graph, and C is the
edge set of one of its 5-cycles, then |M ∩ C| is even.
16.1.8
a) Let M be a perfect matching in a graph G, all of whose vertices are of odd
degree. Show that M includes every cut edge of G.
b) Deduce that the 3-regular graph of Figure 16.5 has no perfect matching.
c) For each k ≥ 2, ﬁnd a (2k + 1)-regular simple graph with no perfect matching.
16.1.9 Let M be a maximal matching in a graph G, and let M ∗ be a maximum
matching in G. Show that |M | ≥ 12 |M ∗ |.

418

16 Matchings

————— —————
16.1.10 Consider a complete graph K on 2n vertices embedded in the plane, with
n vertices coloured red, n vertices coloured blue, and each edge a straight-line
segment. Show that K has a perfect matching whose edges do not cross, with each
edge joining a red vertex and a blue vertex.
16.1.11 The game of Slither is played as follows. Two players alternately select
distinct vertices v0 , v1 , v2 , . . . of a graph G, where, for i ≥ 0, vi+1 is required to be
adjacent to vi . The last player able to select a vertex wins the game. Show that
the ﬁrst player has a winning strategy if and only if G has no perfect matching.
(W.N. Anderson, Jr.)
16.1.12 Let G be a simple graph with n ≥ 2δ. Show that α ≥ δ.
16.1.13 Let G be a nonempty graph which has a unique perfect matching M .
a) Show that G has no M -alternating cycle, and that the ﬁrst and last edges of
every M -alternating path belong to M .
b) Deduce that if G := G[X, Y ] is bipartite, then X and Y each contain a vertex
of degree one.
c) Give an example of a graph with a unique perfect matching and no vertex of
degree one.
16.1.14
a) Let M be a matching in a graph G. Show that there is a maximum matching
in G which covers every vertex covered by M .
b) Deduce that every vertex of a connected nontrivial graph is covered by some
maximum matching.
c) Let G[X, Y ] be a bipartite graph and let A ⊆ X and B ⊆ Y . Suppose that
G has a matching which covers every vertex in A and also one which covers
every vertex in B. Show that G has a matching which covers every vertex in
A ∪ B.
(L. Dulmage and N.S. Mendelsohn)
16.1.15 Essential Vertex
A vertex v of a graph G is essential if v is covered by every maximum matching
in G, that is, if α (G − v) = α (G) − 1.
a) Describe an inﬁnite family of connected graphs which contain no essential
vertices.
b) Show that every nonempty bipartite graph has an essential vertex.
(D. de Caen)
16.1.16 A factory has n jobs 1, 2, . . . , n, to be processed, each requiring one day
of processing time. There are two machines available. One can handle one job at
a time and process it in one day, whereas the other can process two jobs simultaneously and complete them both in one day. The jobs are subject to precedence
constraints represented by a binary relation ≺, where i ≺ j signiﬁes that job i

16.2 Matchings in Bipartite Graphs

419

must be completed before job j is started. The objective is to complete all the jobs
while minimizing d1 + d2 , where di is the number of days during which machine
i is in use. Formulate this problem as one of ﬁnding a maximum matching in a
suitably deﬁned graph.
(M. Fujii, T. Kasami, and N. Ninomiya)

16.2 Matchings in Bipartite Graphs
Hall’s Theorem
In many applications, one wishes to ﬁnd a matching in a bipartite graph G[X, Y ]
which covers every vertex in X. Necessary and suﬃcient conditions for the existence of such a matching were ﬁrst given by Hall (1935). Recall that if S is a set
of vertices in a graph G, the set of all neighbours of the vertices in S is denoted
by N (S).
Theorem 16.4 Hall’s Theorem
A bipartite graph G := G[X, Y ] has a matching which covers every vertex in X if
and only if
|N (S)| ≥ |S| for all S ⊆ X
(16.1)
Proof Let G := G[X, Y ] be a bipartite graph which has a matching M covering
every vertex in X. Consider a subset S of X. The vertices in S are matched under
M with distinct vertices in N (S). Therefore |N (S)| ≥ |S|, and (16.1) holds.
Conversely, let G := G[X, Y ] be a bipartite graph which has no matching
covering every vertex in X. Let M ∗ be a maximum matching in G and u a vertex
in X not covered by M ∗ . Denote by Z the set of all vertices reachable from u
by M ∗ -alternating paths. Because M ∗ is a maximum matching, it follows from
Theorem 16.3 that u is the only vertex in Z not covered by M ∗ . Set R := X ∩ Z
and B := Y ∩ Z (see Figure 16.6).
R
u

B
Fig. 16.6. Proof of Hall’s Theorem (16.4)

Clearly the vertices of R \ {u} are matched under M ∗ with the vertices of B.
Therefore |B| = |R| − 1 and N (R) ⊇ B. In fact N (R) = B, because every vertex

420

16 Matchings

in N (R) is connected to u by an M ∗ -alternating path. These two equations imply
that
|N (R)| = |B| = |R| − 1
Thus Hall’s condition (16.1) fails for the set S := R.



Theorem 16.4 is also known as the Marriage Theorem, because it can be restated more picturesquely as follows: if every group of girls in a village collectively
like at least as many boys as there are girls in the group, then each girl can marry
a boy she likes.
Hall’s Theorem has proved to be a valuable tool both in graph theory and in
other areas of mathematics. It has several equivalent formulations, including the
following one in terms of set systems.
Let A := (Ai : i ∈ I) be a ﬁnite family of (not necessarily distinct) subsets
of a ﬁnite set A. A system of distinct representatives (SDR) for the family A is a
set {ai : i ∈ I} of distinct elements of A such that ai ∈ Ai for all i ∈ I. In this
language, Hall’s Theorem says that A has a system of distinct representatives if
and only if | ∪i∈J Ai | ≥ |J| for all subsets J of I. (To see that this is indeed a
reformulation of Hall’s Theorem, let G := G[X, Y ], where X := I, Y := A, and
N (i) := Ai for all i ∈ I.) This was, in fact, the form in which Hall presented his
theorem. He used it to answer a question in group theory (see Exercise 16.2.20).
Hall’s Theorem provides a criterion for a bipartite graph to have a perfect
matching.
Corollary 16.5 A bipartite graph G[X, Y ] has a perfect matching if and only if
|X| = |Y | and |N (S)| ≥ |S| for all S ⊆ X.

This criterion is satisﬁed by all nonempty regular bipartite graphs.
Corollary 16.6 Every nonempty regular bipartite graph has a perfect matching.
Proof Let G[X, Y ] be a k-regular bipartite graph, where k ≥ 1. Then |X| = |Y |
(Exercise 1.1.9).
Now let S be a subset of X and let E1 and E2 denote the sets of edges of G
incident with S and N (S), respectively. By deﬁnition of N (S), we have E1 ⊆ E2 .
Therefore
k|N (S)| = |E2 | ≥ |E1 | = k|S|
Because k ≥ 1, it follows that |N (S)| ≥ |S| and hence, by Corollary 16.5, that G
has a perfect matching.


Matchings and Coverings
Recall that a covering of a graph G is a subset K of V such that every edge of
G has at least one end in K. A covering K ∗ is a minimum covering if G has no
covering K with |K| < |K ∗ |. The number of vertices in a minimum covering of G

16.2 Matchings in Bipartite Graphs

(a)

421

(b)

Fig. 16.7. (a) A minimal covering, (b) a minimum covering

is called the covering number of G, and is denoted by β(G). A covering is minimal
if none of its proper subsets is itself a covering. Minimal and minimum coverings
of the Petersen graph are indicated (by solid vertices) in Figure 16.7.
If M is a matching of a graph G, and K is a covering of G, then at least one end
of each edge of M belongs to K. Because all these ends are distinct, |M | ≤ |K|.
Moreover, if equality holds, then M is a maximum matching and K is a minimum
covering (Exercise 16.2.2):
Proposition 16.7 Let M be a matching and K a covering such that |M | = |K|.
Then M is a maximum matching and K is a minimum covering.

The König–Egerváry Theorem (8.32) tells us that equality always holds when
G is bipartite: for all bipartite graphs G,
α (G) = β(G)
This identity can be derived with ease from the theory of alternating paths.
Let G := G[X, Y ] be a bipartite graph, let M ∗ be a maximum matching in G, and
let U denote the set of vertices in X not covered by M ∗ . Denote by Z the set of
all vertices in G reachable from some vertex in U by M ∗ -alternating paths, and
set R := X ∩ Z and B := Y ∩ Z. Then K ∗ := (X \ R) ∪ B is a covering with
|K ∗ | = |M ∗ | (Exercise 16.2.7). By Proposition 16.7, K ∗ is a minimum covering.

Exercises
16.2.1
a) Show that a bipartite graph G has a perfect matching if and only if |N (S)| ≥
|S| for all S ⊆ V .
b) Give an example to show that this condition does not guarantee the existence
of a perfect matching in an arbitrary graph.
16.2.2 Prove Proposition 16.7.

422

16 Matchings

16.2.3 A line of a matrix is a row or column of the matrix. Show that the minimum
number of lines containing all the nonzero entries of a matrix is equal to the
maximum number of nonzero entries, no two of which lie in a common line.
16.2.4 Using Exercise 16.1.15, give an inductive proof of the König–Egerváry Theorem (8.32).
(D. de Caen)
16.2.5 Let A := (Ai : i ∈ I) be a ﬁnite family of subsets of a ﬁnite set A, and let
f : I → N be a nonnegative integer-valued function. An f -SDR of A is a family
(Si : i ∈ I) of disjoint subsets of A such that Si ⊆ Ai and |Si | = f (i), i ∈ I. (Thus,
when f (i) = 1 for all i ∈ I, an f -SDR of A is simply an SDR of A.)
a) Consider the family B of subsets of A consisting of f (i) copies of Ai , i ∈ I.
Show that A has an f -SDR if and only if B has an SDR.
b) Deduce, with the aid of Hall’s Theorem (16.4), that A has an f -SDR if and
only if


"  


f (i) for all J ⊆ I
 Ai  ≥


i∈J

i∈J

16.2.6
a) Show that every minimal covering of a bipartite graph G[X, Y ] is of the form
N (S) ∪ (X \ S) for some subset S of X.
b) Deduce Hall’s Theorem (16.4) from the König–Egerváry Theorem (8.32).
16.2.7 Let G := G[X, Y ] be a bipartite graph, let M ∗ be a maximum matching
in G, and let U be the set of vertices in X not covered by M ∗ . Denote by Z the
set of all vertices in G reachable from some vertex in U by M ∗ -alternating paths,
and set R := X ∩ Z and B := Y ∩ Z. Show that:
a) K ∗ := (X \ R) ∪ B is a covering of G,
b) |K ∗ | = |M ∗ |.
16.2.8 The König–Ore Formula
a) Let G := G[X, Y ] be a bipartite graph, M a matching in G, and U the set of
vertices in X not covered by M . Show that:
i) for any subset S of X, |U | ≥ |N (S)| − |S|,
ii) |U | = |N (S)| − |S| if and only if M is a maximum matching of G.
b) Prove the following generalization of Hall’s Theorem (16.4):
The matching number of a bipartite graph G := G[X, Y ] is given by:
α = |X| − max{|S| − |N (S)| : S ⊆ X}
This expression for α is known as the König–Ore Formula.
16.2.9 Deduce from the König–Egerváry Theorem (8.32) that if G := G[X, Y ] is
a simple bipartite graph, with |X| = |Y | = n and m > (k − 1)n, then α ≥ k.

16.2 Matchings in Bipartite Graphs

423

16.2.10
a) Let G be a graph and let (X, Y ) be a partition of V such that G[X] and G[Y ]
are both k-colourable. If the edge cut [X, Y ] has at most k − 1 edges, show
that G also is k-colourable.
(P. Kainen)
b) Deduce that every k-critical graph is (k − 1)-edge-connected. (G.A. Dirac)
————— —————
16.2.11 Recall that an edge covering of a graph without isolated vertices is a set
of edges incident with all the vertices, and that the number of edges in a minimum
edge covering of a graph G is denoted by β  (G). Show that α + β  = n for any
graph G without isolated vertices.
(T. Gallai)
16.2.12 Let G := G[X, Y ] be a bipartite graph in which each vertex of X is of odd
degree. Suppose that any two vertices of X have an even number of common neighbours. Show that G has a matching covering every vertex of X.
(N. Alon)
16.2.13 Let G := G[X, Y ] be a bipartite graph such that d(x) ≥ 1 for all x ∈ X
and d(x) ≥ d(y) for all xy ∈ E, where x ∈ X and y ∈ Y . Show that G has a
matching covering every vertex of X.
(N. Alon)
16.2.14 Show that a bipartite graph G[X, Y ] has an f -factor with f (x) = 1 for
all x ∈ X and f (y) ≤ k for all y ∈ Y if and only if |N (S)| ≥ |S|/k for all S ⊆ X.
16.2.15 A 2-branching is a branching in which each vertex other than the root has
outdegree at most two. Let T be a tournament, and let v be a vertex of maximum
outdegree in T . Set Y :=N + (v) and X := V \ (Y ∪ {v}), and denote by G[X, Y ]
the bipartite graph in which x ∈ X is adjacent to y ∈ Y if and only if y dominates
x in T . For S ⊆ X, denote by N (S) the set of neighbours of S in G.
a) Show that |N (S)| ≥ 12 |S|, for all S ⊆ X.
b) By applying Exercise 16.2.14, deduce that T has a spanning 2-branching of
depth at most two with root x.
(X. Lu)
16.2.16 Let C = {Ci : 1 ≤ i ≤ n} be a family of n directed cycles in a digraph D.
Show that there exist arcs ai ∈ A(Ci ), 1 ≤ i ≤ n, such that D[{ai : 1 ≤ i ≤ n}]
contains a directed cycle.
(A. Frank and L. Lovász)
16.2.17
a) Let G be a graph in which each vertex is of degree either k or k + 1, where
k ≥ 1. Prove that G has a spanning subgraph H in which:
i) each vertex is of degree either k or k + 1,
ii) the vertices of degree k + 1 form a stable set.
b) Let H be a graph satisfying conditions (i) and (ii) of (a), where k ≥ 1. Denote
by X the set of vertices in H of degree k + 1 and by Y the set of vertices in
H of degree k. Prove that H has a spanning bipartite subgraph B(X, Y ) in
which:

424

16 Matchings

i) each vertex of X has degree k + 1,
ii) each vertex of Y has degree at most k.
c) Let B(X, Y ) be a bipartite graph satisfying conditions (i) and (ii) of (b). Prove
that there is a matching M in B which covers every vertex of X.
d) Deduce from (a), (b), and (c) that if G is a graph in which each vertex is of
degree either k or k + 1, where k ≥ 1, then G contains a spanning subgraph
in which each vertex is of degree either k − 1 or k.
(W.T. Tutte; C. Thomassen)
16.2.18 The Birkhoff–von Neumann Theorem
A nonnegative real matrix is doubly stochastic if each of its line sums is 1. A
permutation matrix is a (0, 1)-matrix which has exactly one 1 in each line. (Thus
every permutation matrix is doubly stochastic.) Let Q be a doubly stochastic
matrix. Show that:
a) Q is a square matrix,
b) Q can be expressed as a convex linear combination of permutation matrices,
that is,
Q = c1 P1 + c2 P2 + · · · + ck Pk
where
Pi is a permutation matrix, each ci is a nonnegative real number,
each
k
(G. Birkhoff; J. von Neumann)
and i=1 ci = 1.
16.2.19 Let A := (Ai : i ∈ I) and B := (Bi : i ∈ I) be two ﬁnite families of subsets
of a ﬁnite set A. Construct a digraph D(x, y) with the property that some SDR
of A is also an SDR of B if and only if there are |I| internally disjoint directed
(x, y)-paths in D.
16.2.20 Let H be a ﬁnite group and let K be a subgroup of H. Show that there
exist elements h1 , h2 , . . . , hn ∈ H such that h1 K, h2 K, . . . , hn K are the left cosets
(P. Hall)
of K and Kh1 , Kh2 , . . . , Khn are the right cosets of K.
16.2.21 Let G[X, Y ] be a bipartite graph, and let S1 and S2 be subsets of X.
Show that
|N (S1 )| + |N (S2 )| ≥ |N (S1 ∪ S2 )| + |N (S1 ∩ S2 )|
16.2.22 Let G[X, Y ] be a bipartite graph in which |N (S)| ≥ |S| for all S ⊆ X.
a) A subset S of X is said to be tight if |N (S)| = |S|. Deduce from Exercise 16.2.21
that the union and intersection of tight subsets are tight also.
b) Deduce Hall’s Theorem (16.4), that G has a matching covering X, by induction
on n, proceeding as follows.
i) Suppose, ﬁrst, that there are no nonempty proper tight subsets of X. Let
xy be an edge of G[X, Y ] with x ∈ X and y ∈ Y . Show that, for every
subset S of X \ {x}, |NG (S)| ≥ |S|, where G = G − {x, y}. (In this case,
by induction, G has a matching M  that covers X \ {x}, and M  ∪ {xy}
is a matching of G that covers X.)

16.2 Matchings in Bipartite Graphs

425

ii) Suppose, now, that T is a nonempty proper tight subset of X. Let G1
denote the subgraph of G induced by T ∪ N (T ) and let G2 := G − (T ∪
N (T )). Show that |NG1 (S)| ≥ |S|, for all S ⊆ T and |NG2 (S)| ≥ |S|, for
all S ⊆ X \ T . (In this case, by induction, G1 has a matching M1 that
covers T , and G2 has a matching M2 that covers X \ T , so M1 ∪ M2 is a
matching of G that covers X.)
(P.R. Halmos and H.E. Vaughn)
16.2.23 A nonempty connected graph is matching-covered if every edge belongs
to some perfect matching. Let G := G[X, Y ] be a connected bipartite graph with
a perfect matching. Show that:
a) G is matching-covered if and only if X has no nonempty proper tight subsets,
b) if G is matching covered, then G − {x, y} has a perfect matching for all x ∈ X
and all y ∈ Y .
16.2.24 Dulmage–Mendelsohn Decomposition
Let G[X, Y ] be a bipartite graph with a perfect matching. Show that there exist a
positive integer k and partitions (X1 , X2 , . . . , Xk ) of X and (Y1 , Y2 , . . . , Yk ) of Y
such that, for 1 ≤ i ≤ k,
i) the subgraph G[Xi ∪ Yi ] of G[X, Y ] induced by Xi ∪ Yi is matching-covered,
(L. Dulmage and N.S. Mendelsohn)
ii) N (Xi ) ⊆ Y1 ∪ Y2 ∪ · · · ∪ Yi .
16.2.25 Let G be a matching-covered bipartite graph.
a) Show that G has an odd-ear decomposition, that is, a nested sequence of subgraphs (G0 , G1 , . . . , Gk ) such that G0 ∼
= K2 , Gk = G, and, Gi+1 = Gi ∪ Pi ,
0 ≤ i < k, where Pi is an ear of Gi of odd length.
b) Show that, in any such decomposition, Gi is matching-covered for all i, 0 ≤
i ≤ k.
c) Deduce that G has m − n + 2 perfect matchings whose incidence vectors are
linearly independent.
d) The matching space of G is the vector space generated by the set of incidence
vectors of perfect matchings of G. Show that the dimension of this space is
m − n + 2.
(J. Edmonds, L. Lovász, and W.R. Pulleyblank)
(The corresponding results for nonbipartite matching-covered graphs are considerably more diﬃcult; see Carvalho et al. (2002).)
16.2.26
a) Let G[X, Y ] be a bipartite graph on 2n vertices in which all vertices have degree
three except for one vertex in X and one vertex in Y , which have degree two.
Show that pm(G) ≥ 2(4/3)n−1 .
b) Deduce that if G is a cubic bipartite graph on 2n vertices, then pm(G) ≥
(M. Voorhoeve)
(4/3)n .

426

16 Matchings

16.2.27
a) Let G[X, Y ] be an inﬁnite bipartite graph. Show that the condition |N (S)| ≥
|S|, for every ﬁnite subset S of X, is a necessary condition for G to have a
matching covering every vertex of X.
b) Give an example of a countable bipartite graph G[X, Y ] for which this condition is not suﬃcient for the existence of such a matching.

16.3 Matchings in Arbitrary Graphs
In this section, we derive a min–max formula for the number of edges in a maximum
matching of an arbitrary graph, analogous to the König–Ore Formula for bipartite
graphs (see Exercise 16.2.8). We begin by establishing an upper bound for this
number.
Barriers
If M is a matching in a graph G, each odd component of G must clearly include
at least one vertex not covered by M . Therefore |U | ≥ o(G), where U denotes the
set of such vertices and o(G) the number of odd components of G. This inequality
can be extended to all induced subgraphs of G as follows.
Let S be a proper subset of V and let M be a matching in G. Consider an odd
component H of G − S. If every vertex of H is covered by M , at least one vertex
of H must be matched with a vertex of S. Because no more than |S| vertices of
G − S can be matched with vertices of S, at least o(G − S) − |S| odd components
of G must contain vertices not covered by M . This observation yields the following
inequality, valid for all proper subsets S of V .
|U | ≥ o(G − S) − |S|

(16.2)

From this inequality we may deduce, for example, that the Sylvester graph (of
Figure 16.5) has no perfect matching, because three odd components are obtained
upon deleting its central cut vertex. Likewise, the indicated set S of three vertices
in the graph G of Figure 16.8a shows that any matching M must leave at least
5 − 3 = 2 uncovered vertices because G − S has ﬁve odd components (and one
even component), as shown in Figure 16.8b.
Note that if equality should hold in (16.2) for some matching M and some
subset S := B of V , that is, if
|U | = o(G − B) − |B|

(16.3)

where |U | = v(G) − 2|M |, then the set B would show that the matching M
leaves as few uncovered vertices as possible, and hence is a maximum matching
(Exercise 16.3.1). Thus, B would serve as a succinct certiﬁcate of the optimality
of M . Such a set B is called a barrier of G. The set of three vertices indicated in

16.3 Matchings in Arbitrary Graphs

(a)

427

(b)
Fig. 16.8. A set S with o(G − S) > |S|

the graph of Figure 16.8 is a barrier, because this graph has a matching covering
all but two of its vertices (see Figure 16.15a).
A matchable graph (one with a perfect matching) has both the empty set
and all singletons as barriers. The empty set is also a barrier of a graph when
some vertex-deleted subgraph is matchable. Graphs which are very nearly matchable, in the sense that every vertex-deleted subgraph is matchable, are said to be
hypomatchable or factor-critical. In particular, trivial graphs are hypomatchable.
For future reference, we state as a lemma the observation that all hypomatchable
graphs have the empty set as a barrier. (Indeed, the empty set is their only barrier,
see Exercise 16.3.8.)
Lemma 16.8 The empty set is a barrier of every hypomatchable graph.



The Tutte–Berge Theorem
In a bipartite graph, a minimum covering constitutes a barrier of the graph (Exercise 16.3.4). More generally, every graph has a barrier. This fact is known as the
Tutte–Berge Theorem. We present a proof by Gallai (1964a) of this theorem. It
proceeds by induction on the number of vertices. By Lemma 16.8, a trivial graph
has the empty set as barrier.
Recall that a vertex v of a graph G is essential if every maximum matching
covers v, and inessential otherwise. Thus v is essential if α (G − v) = α (G) − 1
and inessential if α (G − v) = α (G). We leave the proof of the following lemma as
an exercise (16.3.5).
Lemma 16.9 Let v be an essential vertex of a graph G and let B be a barrier of
G − v. Then B ∪ {v} is a barrier of G.

By Lemma 16.9, in order to show that every graph has a barrier, it suﬃces to
consider graphs with no essential vertices. It turns out that such graphs always
have the empty set as a barrier. We establish this fact for connected graphs. Its
validity for all graphs can be deduced without diﬃculty from this special case
(Exercise 16.3.6).

428

16 Matchings

Lemma 16.10 Let G be a connected graph no vertex of which is essential. Then
G is hypomatchable.
Proof Since no vertex of G is essential, G has no perfect matching. It remains
to show that every vertex-deleted subgraph has a perfect matching. If this is not
so, then each maximum matching leaves at least two vertices uncovered. Thus it
suﬃces to show that for any maximum matching and any two vertices in G, the
matching covers at least one of these vertices. We establish this by induction on
the distance between these two vertices.
Consider a maximum matching M and two vertices x and y in G. Let xP y be a
shortest xy-path in G. Suppose that neither x nor y is covered by M . Because M
is maximal, P has length at least two. Let v be an internal vertex of P . Since xP v
is shorter than P , the vertex v is covered by M , by induction. On the other hand,
because v is inessential, G has a maximum matching M  which does not cover v.
Furthermore, because xP v and vP y are both shorter than P , the matching M 
covers both x and y, again by induction.
The components of G[M  M  ] are even paths and cycles whose edges belong
alternately to M and M  (Exercise 16.1.5). Each of the vertices x, v, y is covered by
exactly one of the two matchings and thus is an end of one of the paths. Because
the paths are even, x and y are not ends of the same path. Moreover, the paths
starting at x and y cannot both end at v. We may therefore suppose that the path
Q that starts at x ends neither at v nor at y. But then the matching M   E(Q)
is a maximum matching which covers neither x nor v, contradicting the induction
hypothesis and establishing the lemma.

One may now deduce (Exercise 16.3.7) the following fundamental theorem and
corollary. These results, obtained by Berge (1958), can also be derived from a
theorem of Tutte (1947a) on perfect matchings (Theorem 16.13).
Theorem 16.11 The Tutte–Berge Theorem
Every graph has a barrier.

Corollary 16.12
For any graph G:



The Tutte–Berge Formula

α (G) =

1
min{v(G)−(o(G−S)−|S|) : S ⊂ V }
2



A reﬁnement of Theorem 16.11 states that every graph G has a barrier B such
that each odd component of G − B is hypomatchable and each even component
of G − B has a perfect matching. Such a barrier is known as a Gallai barrier.
In Section 16.5, we present a polynomial-time algorithm which ﬁnds not only a
maximum matching in a graph, but also a succinct certiﬁcate for the optimality
of the matching, namely a Gallai barrier.

16.3 Matchings in Arbitrary Graphs

429

Exercises
16.3.1 Let M be a matching in a graph G, and let B be a set of vertices of G
such that |U | = o(G − B) − |B|, where U is the set of vertices of G not covered by
M . Show that M is a maximum matching of G.
16.3.2 Let G be a graph and S a proper subset of V . Show that o(G − S) − |S| ≡
v(G) (mod 2).
16.3.3 Show that the union of barriers of the components of a graph is a barrier
of the entire graph.
16.3.4 Show that, in a bipartite graph, any minimum covering is a barrier of the
graph.
16.3.5 Give a proof of Lemma 16.9.
16.3.6 Deduce from Lemma 16.10 that the empty set is a barrier of every graph
without essential vertices.
16.3.7
a) Prove the Tutte–Berge Theorem (Theorem 16.11) by induction on the number
of vertices.
b) Deduce the Tutte–Berge Formula (Corollary 16.12) from the Tutte–Berge Theorem.
————— —————
16.3.8
a) Show that:
i) a graph is hypomatchable if and only if each of its blocks is hypomatchable,
ii) a graph G is hypomatchable if and only if o(G − S) ≤ |S| − 1 for every
nonempty proper subset S of V .
b) Deduce that a graph is hypomatchable if and only if the empty set is its only
barrier.
16.3.9 Let B be a maximal barrier of a graph G. Show that each component of
G − B is hypomatchable.
16.3.10 Let G be a graph and let (X, Y ) be a partition of V with X, Y = ∅. Show
that if both G / X and G / Y are hypomatchable, then G is hypomatchable.
16.3.11 Let G be a nonseparable graph which has an odd-ear decomposition starting with an odd cycle (instead of K2 ). Show that G is hypomatchable.

430

16 Matchings

16.3.12
a) Let x and y be adjacent inessential vertices of a graph G and let M and N
be maximum matchings of G − x and G − y, respectively. Show that G has an
xy-path of even length whose edges belong alternately to N and M .
b) Deduce that every nontrivial hypomatchable graph G contains an odd cycle C
such that G / C is hypomatchable.
c) Prove the converse of the statement in Exercise 16.3.11: show that every nontrivial nonseparable hypomatchable graph has an odd-ear decomposition start(L. Lovász)
ing with an odd cycle (instead of K2 ).
16.3.13 Let G be a k-chromatic graph containing no stable set of three vertices
and no clique of k vertices, where k ≥ 3. Let k1 + k2 be a partition of k + 1 such
that k1 , k2 ≥ 2. By appealing to Exercises 16.1.3 and 16.3.9, show that G has
disjoint subgraphs G1 and G2 such that χ(G1 ) = k1 and χ(G2 ) = k2 .
(L. Lovász and P.D. Seymour)

16.4 Perfect Matchings and Factors
Tutte’s Theorem
If a graph G has a perfect matching M , then it follows from (16.2) that o(G−S) ≤
|S| for all S ⊆ V , because the set U of uncovered vertices is empty. The following
fundamental theorem due to Tutte (1947a) shows that the converse is true. It is a
special case of the Tutte–Berge Formula (Corollary 16.12).
Theorem 16.13 Tutte’s Theorem
A graph G has a perfect matching if and only if
o(G − S) ≤ |S| for all S ⊆ V

(16.4)

Proof As already noted, (16.4) holds if G has a perfect matching. Conversely, let
G be a graph which has no perfect matching. Consider a maximum matching M ∗ of
G, and denote by U the set of vertices in G not covered by M ∗ . By Theorem 16.11,
G has a barrier, that is, a subset B of V such that o(G − B) − |B| = |U |. Because
M ∗ is not perfect, |U | is positive. Thus
o(G − B) = |B| + |U | ≥ |B| + 1
and Tutte’s condition (16.4) fails for the set S := B.



The ﬁrst signiﬁcant result on perfect matchings in graphs was obtained by
Petersen (1891) in connection with a problem about factoring homogeneous polynomials into irreducible factors (see Biggs et al. (1986) and Sabidussi (1992)). In
this context, perfect matchings correspond to factors of degree one; it is for this
reason that they are also referred to as ‘1-factors’; it is also the origin of the term
‘degree’. Petersen was particularly interested in the case of polynomials of degree
three; these correspond to 3-regular graphs.

16.4 Perfect Matchings and Factors

431

Theorem 16.14 Petersen’s Theorem
Every 3-regular graph without cut edges has a perfect matching.
Proof We derive Petersen’s Theorem from Tutte’s Theorem (16.13).
Let G be a 3-regular graph without cut edges, and let S be a subset of V .
Consider the vertex sets S1 , S2 , . . . , Sk , of the odd components of G − S. Because
G has no cut edges, d(Si ) ≥ 2, 1 ≤ i ≤ k. But because |Si | is odd, d(Si ) is odd
also (Exercise 2.5.5). Thus, in fact,
d(Si ) ≥ 3, 1 ≤ i ≤ k
Now the edge cuts ∂(Si ) are pairwise disjoint, and are contained in the edge cut
∂(S), so we have:
3k ≤

k


d(Si ) = d(∪ki=1 Si ) ≤ d(S) ≤ 3|S|

i=1

Therefore o(G − S) = k ≤ |S|, and it follows from Theorem 16.13 that G has a
perfect matching.

The condition in Petersen’s Theorem that the graph be free of cut edges cannot be omitted: the Sylvester graph of Figure 16.5, for instance, has no perfect
matching. However, a stronger form of the theorem may be deduced from Tutte’s
Theorem (16.13), namely that each edge of a 3-regular graph without cut edges
belongs to some perfect matching (Exercise 16.4.8).
Factors
Let G be a graph and let f be a nonnegative integer-valued function on V . An
f -factor of G is a spanning subgraph F of G such that dF (v) = f (v) for all v ∈ V .
A k-factor of G is an f -factor with f (v) := k for all v ∈ V ; in particular, a 1-factor
is a spanning subgraph whose edge set is a perfect matching and a 2-factor is a
spanning subgraph whose components are cycles.
Many interesting graph-theoretical problems can be solved in polynomial time
by reducing them to problems about 1-factors. One example is the question of
deciding whether a given graph G has an f -factor. Tutte (1954b) showed how this
problem can be reduced to the problem of deciding whether a related graph G
has a 1-factor. We now describe this reduction procedure. We may assume that
d(v) ≥ f (v) for all v ∈ V ; otherwise G obviously has no f -factor. For simplicity,
we assume that our graph G is loopless.
For each vertex v of G, we ﬁrst replace v by a set Yv of d(v) vertices, each of
degree one. We then add a set Xv of d(v) − f (v) vertices and form a complete
bipartite graph Hv by joining each vertex of Xv to each vertex of Yv . In eﬀect, the
resulting graph H is obtained from G by replacing each vertex v by a complete
bipartite graph Hv [Xv , Yv ] and joining each edge incident to v to a separate element
of Yv . Figure 16.9 illustrates this construction in the case of 2-factors. Note that

432

16 Matchings

Fig. 16.9. Polynomial reduction of the 2-factor problem to the 1-factor problem

G can be recovered from H simply by shrinking each bipartite subgraph Hv to a
single vertex v.
In H, the vertices of Xv are joined only to the vertices of Yv . Thus if F is a
1-factor of H, the d(v) − f (v) vertices of Xv are matched by F with d(v) − f (v) of
the d(v) vertices in Yv . The remaining f (v) vertices of Yv are therefore matched
by F with f (v) vertices of V (H) \ V (Hv ). Upon shrinking H to G, the 1-factor F
of H is therefore transformed into an f -factor of G. Conversely, any f -factor of G
can easily be converted into a 1-factor of H.
This reduction of the f -factor problem to the 1-factor problem is a polynomial
reduction (Exercise 16.4.2).
T -Joins
A number of problems in graph theory and combinatorial optimization amount to
ﬁnding a spanning subgraph H of a graph G (or a spanning subgraph of minimum
weight, in the case of weighted graphs) whose degrees have prescribed parities
(rather than prescribed values, as in the f -factor problem). Precise statements of
such problems require the notion of a T -join.

16.4 Perfect Matchings and Factors

433

Let G be a graph and let T be an even subset of V . A spanning subgraph H
of G is called a T -join if dH (v) is odd for all v ∈ T and even for all v ∈ V \ T . For
example, a 1-factor of G is a V -join; and if P is an xy-path in G, the spanning
subgraph of G with edge set E(P ) is an {x, y}-join.
Problem 16.15 The Weighted T -Join Problem
Given: a weighted graph G := (G, w) and a subset T of V ,
Find: a minimum-weight T -join in G (if one exists).
As remarked above, the Shortest Path Problem may be viewed as a particular case of the Weighted T -Join Problem. Another special case is the Postman
Problem, described in Exercise 16.4.22, whose solution involves ﬁnding a minimumweight T -join when T is the set of vertices of odd degree in the graph (see Exercises 16.4.21 and 16.4.22).
By means of a construction similar to Tutte’s reduction of the 2-factor problem
to the 1-factor problem, one may obtain a polynomial reduction of the Weighted
T -Join Problem to the following problem (see Exercise 16.4.21).
Problem 16.16 The Minimum-Weight Matching Problem
Given: a weighted complete graph G := (G, w) of even order,
Find: a minimum-weight perfect matching in G.
This latter problem can be seen to include the maximum matching problem: it
suﬃces to embed the input graph G in a complete graph of even order, and assign
weight zero to each edge of G and weight one to each of the remaining edges.
Edmonds (1965b) found a polynomial-time algorithm for solving the MinimumWeight Matching Problem. His algorithm relies on techniques from the theory of
linear programming, and on his characterization of the perfect matching polytope
(see Exercise 17.4.5).

Exercises
16.4.1 Show that a tree G has a perfect matching if and only if o(G − v) = 1 for
all v ∈ V .
(V. Chungphaisan)
16.4.2
a) Show that Tutte’s reduction of the f -factor problem to the 1-factor problem
is a polynomial reduction.
b) Describe how this polynomial reduction of the f -factor problem to the 1-factor
problem can be generalized to handle graphs with loops.
16.4.3 Let G be a graph, and let F := G[X] be an induced subgraph of V . Form
a graph H from G as follows.
 Add edges between nonadjacent pairs of vertices in V \ X.
 If n is odd, add a new vertex and join it to all vertices in V \ X.

434

16 Matchings

a) Show that there is a matching in G covering all vertices in X if and only if H
has a perfect matching.
b) By applying Tutte’s Theorem (16.13), deduce that G has a matching covering
every vertex in X if and only, for all S ⊆ V , the number of odd components
of G − S which are subgraphs of F − S is at most |S|.
c) Now suppose that F is bipartite. Using Exercise 16.3.9, strengthen the statement in (b) to show that there is a matching covering all vertices in X if and
only if, for all S ⊆ V , the number of isolated vertices of G − S which belong
to F − S is at most |S|.
16.4.4 Using Exercise 16.4.3b, derive Hall’s Theorem (16.4) from Tutte’s Theorem
(16.13).
16.4.5 Let G be a graph whose vertices of degree ∆ induce a bipartite subgraph.
Using Exercise 16.4.3c, show that there is a matching in G covering all vertices of
degree ∆.
(H. Kierstead)
————— —————
16.4.6 Derive the Tutte–Berge Formula (Corollary 16.12) from Tutte’s Theorem
(16.13).
16.4.7 Let G be a graph with a perfect matching and let x, y ∈ V .
a) Show that there is a barrier of G containing both x and y if and only if
G − {x, y} has no perfect matching.
b) Suppose that x and y are adjacent. Deduce from (a) that there is a perfect
matching containing the edge xy if and only if no barrier of G contains both
x and y.
16.4.8 Deduce from Tutte’s Theorem (16.13) that every edge of a 3-regular graph
without cut edges belongs to some perfect matching.
16.4.9
a) For k ≥ 1, show that every (k − 1)-edge-connected k-regular graph on an even
number of vertices has a perfect matching.
b) For each k ≥ 2, give an example of a (k − 2)-edge-connected k-regular graph
on an even number of vertices with no perfect matching.
16.4.10 A graph G on at least three vertices is bicritical if, for any two vertices u
and v of G, the subgraph G − {u, v} has a perfect matching.
a) Show that a graph is bicritical if and only if it has no barriers of cardinality
greater than one.
b) Deduce that every essentially 4-edge-connected cubic nonbipartite graph is
bicritical.

16.4 Perfect Matchings and Factors

435

16.4.11
a) Show that every connected claw-free graph on an even number of vertices has
a perfect matching.
(M. Las Vergnas; D. Sumner)
b) Deduce that every 2-connected claw-free graph on an odd number of vertices
is hypomatchable.
16.4.12 Let G be a simple graph with δ ≥ 2(n − 1) and containing no induced
(K. Ota and T. Tokuda)
K1,n , where n ≥ 3. Show that G has a 2-factor.
16.4.13 Show that every 2-connected graph that has one perfect matching has at
least two perfect matchings.
(A. Kotzig)
16.4.14
a) Show that a simple graph on 2n vertices with exactly one perfect matching
has at most n2 edges.
b) For all n ≥ 1, construct a simple graph on 2n vertices with exactly one perfect
matching and exactly n2 edges.
16.4.15 Let H = (V, F) be a hypergraph. A cycle in H is a sequence v1 F1 v2 F2 . . . vk
Fk vk+1 , where vi , 1 ≤ i ≤ k, are distinct vertices, Fi , 1 ≤ i ≤ k, are distinct edges,
vk+1 = v1 , and {vi , vi+1 } ⊆ Fi , 1 ≤ i ≤ k. The hypergraph H is balanced if every odd cycle v1 F1 v2 F2 . . . v2k+1 F2k+1 v1 includes an edge containing at least three
vertices of the cycle. A perfect matching in H is a set of disjoint edges whose union
is V . Show that a balanced hypergraph (V, F) has a perfect matching if and only if
there exist disjoint subsets X and Y of V such that |X| > |Y | and |X ∩F | ≤ |Y ∩F |
for all F ∈ F
16.4.16 A graph G is k-factorable if it admits a decomposition into k-factors.
Show that:
a) every k-regular bipartite graph is 1-factorable,
b) every 2k-regular graph is 2-factorable.

(D. König)
(J. Petersen)

16.4.17
a) Show that the thickness of a 2k-regular graph is at most k.
b) Find a 4-regular graph of thickness two and a 6-regular graph of thickness
three.
16.4.18 Show that every triangulation with m edges contains a spanning bipartite
subgraph with 2m/3 edges.
(F. Harary and D. Matula)
16.4.19 Show that every 2-connected 3-regular graph on four or more vertices
admits a decomposition into paths of length three.
16.4.20 Let G be a graph. For v ∈ V , let L(v) ⊆ {0, 1, . . . , d(v)} be a list of
integers associated with v.

436

16 Matchings

a) Show that G has an f -factor with f (v) ∈ L(v) for all v ∈ V if |L(v)| ≥ d+ (v)+1
for all v ∈ V , where D is an orientation of G.
(A. Frank, L. Lao, and J. Szabó; J.A. Bondy)
b) Deduce that G has an f -factor with f (v) ∈ L(v) for all v ∈ V if |L(v)| >
d(v)/2 , for all v ∈ V .
(H. Shirazi and J. Verstraëte)
16.4.21
a) Find a reduction of the Minimum-Weight T -Join Problem (16.15) to the
Minimum-Weight Matching Problem (16.16).
b) Let G be a graph, let T be the set of vertices of odd degree in G, and let H be
a T -join of G. Show that the graph obtained from G by duplicating the edges
of H is an even graph.
16.4.22 The Postman Problem
In his job, a postman picks up mail at the post oﬃce, delivers it, and then returns
to the post oﬃce. He must, of course, cover each street at least once. Subject to
this condition, he wishes to choose a route entailing as little walking as as possible.
a) Show that the Postman Problem is equivalent to the following graph-theoretic
problem.
Problem 16.17 Minimum-Weight Eulerian Spanning Subgraph
Given: a weighted connected graph G := (G, w) with nonnegative weights,
Find: by duplicating edges (along with their weights), an eulerian weighted
spanning supergraph H of G whose weight w(H) is as small as possible.
(An Euler tour in H can then be found by applying Fleury’s Algorithm (3.3).)
(M. Guan)
b) In the special case where G has just two vertices of odd degree, explain how
the above problem can be solved in polynomial time.
16.4.23 Shortest Even and Odd Paths
Let G := G(x, y) be a graph, and let H be the graph obtained from G  K2 by
deleting the copies of x and y in one of the two copies of G.
a) Find a bijection between the xy-paths of even length in G and the perfect
matchings in H.
b) By assigning weights 0 and 1 to the edges of H in an appropriate way and
applying the weighted version of Edmonds’ Algorithm, show how to ﬁnd, in
polynomial time, a shortest xy-path of even length in G.
c) By means of a similar construction, show how to ﬁnd, in polynomial time, a
shortest xy-path of odd length in G.
(J. Edmonds)
16.4.24 By using minimum-weight matchings, reﬁne the 2-approximation algorithm for the Metric Travelling Salesman Problem presented in Section 8.4,
so as to obtain a polynomial-time 32 -approximation algorithm for this problem.
(N. Christofides)

16.5 Matching Algorithms

437

16.5 Matching Algorithms
This ﬁnal section of the chapter is devoted to the description of a polynomialtime algorithm for ﬁnding a maximum matching in an arbitrary graph. We ﬁrst
consider the easier case of bipartite graphs, and then show how that algorithm can
be reﬁned to yield one applicable to all graphs.
Augmenting Path Search
Berge’s Theorem (16.3) suggests a natural approach to ﬁnding a maximum matching in a graph. We start with some matching M (for example, the empty matching)
and search for an M -augmenting path. If such a path P is found, we replace M by
M  E(P ). We repeat the procedure until no augmenting path with respect to the
current matching can be found. This ﬁnal matching is then a maximum matching.
The challenge here is to carry out an exhaustive search for an M -augmenting
path in an eﬃcient manner. This can indeed be achieved. In this section, we describe a polynomial-time algorithm which either ﬁnds an M -augmenting path in
a bipartite graph, or else supplies a succinct certiﬁcate that there is no such path.
This algorithm, as well as its extension to arbitrary graphs, is based on the notion
of an M -alternating tree.
Let G be a graph, M a matching in G, and u a vertex not covered by M . A
tree T of G is an M -alternating u-tree if u ∈ V (T ) and, for any v ∈ V (T ), the
path uT v is an M -alternating path. An M -alternating u-tree T is M -covered if
the matching M ∩ E(T ) covers all vertices of T except u (see Figures 16.10a and
16.10c).
There is a simple tree-search algorithm, which we refer to as Augmenting Path
Search, that ﬁnds either an M -augmenting u-path or else a maximal M -covered
u-tree (that is, an M -covered u-tree which can be grown no further). We call such
a tree an APS-tree (rooted at u).
Augmenting Path Search begins with the trivial M -covered tree consisting of
just the vertex u. At each stage, it attempts to extend the current M -covered
u-tree T to a larger one. We refer to those vertices at even distance from u in T as
red vertices and those at odd distance as blue vertices; these sets will be denoted
by R(T ) and B(T ), respectively (so that (R(T ), B(T )) is a bipartition of T , with
u ∈ R(T )). In the M -covered u-tree T displayed in Figure 16.10a, the red vertices
are shown as solid dots and the blue vertices as shaded dots.
Consider an M -covered u-tree T . Being M -covered, T contains no M -augmenting u-path. If there is such a path in G, the edge cut ∂(T ) necessarily includes an
edge of this path. Accordingly, we attempt to extend T to a larger M -alternating
u-tree by adding to it an edge from its associated edge cut ∂(T ). This is possible
only if there is an edge xy with x ∈ R(T ) and y ∈ V (G) \ V (T ). If there is no such
edge, then T is an APS-tree rooted at u, and the procedure terminates. If, on the
other hand, there is such an edge, two possibilities arise. Either y is not covered
by M , in which case we have found our M -augmenting path (Figure 16.10b), or y

438

16 Matchings

is incident to an edge yz of M , and we grow T into a larger M -covered u-tree by
adding the two vertices y and z and the two edges xy and yz (Figure 16.10c).
u

x

u

u

x

x

y

y
z

(a)

(b)

(c)

Fig. 16.10. Augmenting Path Search: growing an M -covered tree

This tree-growing operation is repeated until either an M -augmenting u-path P
is found, in which case the matching M is replaced by M E(P ), or the procedure
terminates with an APS-tree T . It can be summarized as follows.
Algorithm 16.18 Augmenting Path Search: APS(G, M, u)
Input: a graph G, a matching M in G, and an uncovered vertex u of G
Output: a matching M with one more edge than the input matching, or an
APS-tree T with root u(T ), a bipartition (R(T ), B(T )) of T , and the set M (T )
of matching edges in T
1: set V (T ) := {u}, E(T ) := ∅, R(T ) := {u}
2: while there is an edge xy with x ∈ R(T ) and y ∈ V (G) \ V (T ) do
3:
replace V (T ) by V (T ) ∪ {y} and E(T ) by E(T ) ∪ {xy}.
4:
if y is not covered by M then
5:
replace M by M  E(P ), where P := uT y
6:
return M
7:
else
8:
replace V (T ) by V (T ) ∪ {z}, E(T ) by E(T ) ∪ {yz}, and R(T ) by
R(T ) ∪ {z}, where yz ∈ M
9:
end if
10: end while
11: set: T := (V (T ), E(T )), u(T ) := u, B(T ) := V (T ) \ R(T ), and M (T ) :=
M ∩ E(T )
12: return (T, u(T ), R(T ), B(T ), M (T ))
In the event that APS outputs an APS-tree T , we note for future reference
that:

16.5 Matching Algorithms

439

 because T is M -covered, the vertices of R(T ) \ u(T ) are matched with the
vertices of B(T ), so
|B(T )| = |R(T )| − 1
(16.5)
and
B(T ) ⊆ N (R(T ))

(16.6)

(where N (R(T )) denotes the set of neighbours of R(T ) in G).
 because T is maximal, no vertex of R(T ) is adjacent in G to any vertex of
V (G) \ V (T ); that is,
N (R(T )) ⊆ R(T ) ∪ B(T )
(16.7)
If APS ﬁnds an M -augmenting path uP y, well and good. We simply apply APS
once more, replacing M by the augmented matching M  E(P ) returned by APS.
But what if APS returns an APS-tree T ? Can we then be sure that G contains no
M -augmenting u-path? Unfortunately we cannot, as the example in Figure 16.11b
illustrates. However, if it so happens that no two red vertices of T are adjacent in
G, that is, if N (R(T )) ∩ R(T ) = ∅, then (16.6) and (16.7) imply that
N (R(T )) = B(T )

(16.8)

In this case, we may restrict our search for an M -augmenting path to the subgraph
G − T . Indeed, the following stronger statement is true (Exercise 16.5.3).
Proposition 16.19 Let T be an APS-tree returned by AP S(G, M, u). Suppose
that no two red vertices of T are adjacent in G. Then no M -augmenting path in
G can include any vertex of T .


u

u

r
z
y
(a)

v
x

(b)

Fig. 16.11. (a) An APS-tree, (b) an M -augmenting u-path

w

440

16 Matchings

One important instance where condition (16.8) is satisﬁed is when G is bipartite. In this case, no two red vertices of T can be adjacent in G because they all
belong to the same part of the bipartition of G. Thus APS(G, M, u) ﬁnds all the
vertices of G that can be reached by M -alternating u-paths. This observation is
the basis of the following algorithm for ﬁnding a maximum matching in a bipartite
graph. It was conceived by the Hungarian mathematician Egerváry (1931), and
for this reason is sometimes referred to as the Hungarian Algorithm.
Egerváry’s Algorithm
Let G[X, Y ] be a bipartite graph. In searching for a maximum matching of G,
we start with an arbitrary matching M of G (for instance, the empty matching)
and apply APS to search for an M -augmenting u-path, where u is an uncovered
vertex. (If there are no such vertices, M is a perfect matching.) The output of APS
is either an M -augmenting u-path P , or else an APS-tree T rooted at u. In the
former case, we replace the matching M by M  E(P ) and apply APS once more,
starting with an uncovered vertex of G with respect to the new matching M , if
there is one. In the latter eventuality, by Proposition 16.19 we may restrict our
attention to the subgraph G−V (T ) in continuing our search for an M -augmenting
path. We simply record the set M (T ) := M ∩ E(T ) (this set will be part of our
maximum matching), replace the matching M by the residual matching M \ E(T )
and the graph G by the subgraph G − V (T ), and then apply APS once more,
starting with an uncovered vertex of this subgraph, if there is one. We proceed in
this way until the subgraph we are left with has no uncovered vertex (so has a
perfect matching). The output of this algorithm is as follows.







A
A
A
A
A
A

set T of pairwise disjoint APS-trees.
set R := ∪{R(T ) : T ∈ T } of red vertices.
set B := ∪{B(T ) : T ∈ T } of blue vertices.
subgraph F := G − (R ∪ B) with a perfect matching M (F ).
matching M ∗ := ∪{M (T ) : T ∈ T } ∪ M (F ) of G.
set U := {u(T ) : T ∈ T } of vertices not covered by M ∗ .

(When the initial matching M is perfect, T = R = B = ∅, F = G, M ∗ = M , and
U = ∅.)
Example 16.20 Consider the bipartite graph in Figure 16.12a, with the indicated
matching M . Figure 16.12b shows an M -alternating x1 -tree, which is grown until
the M -augmenting x1 -path P := x1 y2 x2 y1 is found. As before, the red vertices are
indicated by solid dots and the blue vertices by shaded dots. Figure 16.12c shows
the augmented matching M  E(P ) (the new matching M ), and Figure 16.12d
an M -alternating x4 -tree which contains no M -augmenting x4 -path and can be
grown no further, and thus is an APS-tree T1 with R(T1 ) = {x1 , x3 , x4 } and
B(T1 ) = {y2 , y3 }. The set of all vertices reachable in G from x4 by M -alternating
paths is therefore V (T1 ) = {x1 , x3 , x4 , y2 , y3 }. This set does not include y4 , the
only other vertex not covered by M . Thus we may conclude that M ∗ := M is a

16.5 Matching Algorithms

441

maximum matching. However, for the purpose of illustrating the entire algorithm,
we continue, deleting V (T1 ) from G and growing an M -alternating y4 -tree in the
resulting subgraph (see Figure 16.12e), thereby obtaining the APS-tree T2 with
R(T2 ) = {y1 , y4 , y5 } and B(T2 ) = {x2 , x5 }, as shown in Figure 16.12f. The procedure ends there, because every vertex of the graph F := G − V (T1 ∪ T2 ), which
consists of the vertices x6 and y6 and the edge x6 y6 , is covered by M . The output
of the algorithm is therefore:
T = {T1 , T2 },

R = {x1 , x3 , x4 , y1 , y4 , y5 },
V (F ) = {x6 , y6 },

B = {y2 , y3 , x2 , x5 }

E(F ) = {x6 y6 }

M ∗ = {x1 y2 , x2 y1 , x3 y3 , x5 y5 , x6 y6 },

U = {x4 , y4 }

x1

x2

x3

x4

x5

x6

x1

x2

x3

x4

x5

x6

y1

y2

y3

y4

y5

y6

y1

y2

y3

y4

y5

y6

(a)

(b)

x1

x2

x3

x4

x5

x6

x1

x2

x3

x4

x5

x6

y1

y2

y3

y4

y5

y6

y1

y2

y3

y4

y5

y6

x5

x6

y5

y6

(c)

(d)

x2

y1

y4

x5

x6

y5

y6

x2

y1

(e)

y4
(f )

Fig. 16.12. Egerváry’s Algorithm: ﬁnding a maximum matching in a bipartite graph

We now verify the correctness of Egerváry’s Algorithm.

442

16 Matchings

Theorem 16.21 The matching M ∗ returned by Egerváry’s Algorithm is a maximum matching.
Proof Let T , R, B, and U be the sets of trees, red vertices, blue vertices, and
uncovered vertices returned by Egerváry’s Algorithm. Because each tree T ∈ T
contains exactly one uncovered vertex, namely its root u(T ), we have |U | = |T |.
Also, by (16.5), |B(T )| = |R(T )| − 1 for each tree T ∈ T . Summing this identity
over all T ∈ T gives
|B| = |R| − |T |
Therefore
|U | = |R| − |B|

(16.9)

Because red vertices are adjacent in G only to blue vertices, in any matching M of
G, red vertices can only be matched with blue vertices. There are therefore at least
|R|−|B| red vertices not covered by M . Thus, by (16.9), there are at least |U | such
vertices, no matter what the matching M . Because there are exactly this number
of vertices not covered by M ∗ , we conclude that M ∗ is a maximum matching. 
Egerváry’s Algorithm returns not only a maximum matching M ∗ but also a
covering K ∗ of the same size, which is consequently a minimum covering. To see
this, let G[X, Y ] be a bipartite graph, and let M ∗ be a maximum matching of G.
Consider the sets R and B of red and blue vertices output by Egerváry’s Algorithm
when applied to G with input matching M ∗ . Set F := G − (R ∪ B).
By (16.6) and (16.7), N (R) = B. Thus B covers all edges of G except those
of F . Because X ∩ V (F ) clearly covers E(F ), the union B ∪ (X ∩ V (F )) of these
two sets is a covering K ∗ of G. Moreover, there is a bijection between M ∗ and K ∗
because each vertex of K ∗ is covered by M ∗ and each edge of M ∗ is incident with
just one vertex of K ∗ . Hence |M ∗ | = |K ∗ |. It follows from Proposition 16.7 that
the covering K ∗ is a minimum covering.
In view of the relationship between matchings in bipartite graphs and families
of internally disjoint directed paths in digraphs (as described in Exercise 8.6.7),
Egerváry’s Algorithm may be viewed as a special case of the Max-Flow Min-Cut
Algorithm presented in Chapter 7.
Blossoms
As the example in Figure 16.11b illustrates, Augmenting Path Search is not guaranteed to ﬁnd an M -augmenting u-path, even if there is one, should there be two
red vertices in the APS-tree that are adjacent in G. However, if we look more
closely at this example, we see that the cycle rvxyzr contains two alternating
rv-paths, namely, the edge rv and the path rzyxv. Because the latter path ends
with a matching edge, it may be extended by the edge vw, thereby yielding a
uw-alternating path.
In general, suppose that T is an APS-tree of G rooted at u, and that x and y
are two red vertices of T which are adjacent in G. The cycle contained in T + xy
is then called a blossom. A blossom C is necessarily of odd length, because each

16.5 Matching Algorithms

443

blue vertex is matched with a red vertex and there is one additional red vertex,
which we call the root of C and denote by r := r(C) (see Figure 16.13a). Note
that M ∩ E(C) is a perfect matching of C − r. Note, also, that the path uT r is
M -alternating, and terminates with a matching edge (unless r = u). Moreover,
this path is internally disjoint from C.
u

u

r
z
y
(a)

v

w

u
P

P

r

r

w

C

z
y

x
(b)

v

w

C
x

(c)

Fig. 16.13. (a) A blossom C, (b) an M -alternating u-path P  in G := G / C, (c) an
M -alternating u-path P in G

The key to ﬁnding a maximum matching in an arbitrary graph is to shrink
blossoms (that is, contract them to single vertices) whenever they are encountered
during APS. By shrinking a blossom and continuing to apply APS to the resulting
graph, one might be able to reach vertices by M -alternating u-paths which could
not have been reached before. For example, if T is an APS-tree with a blossom
C, and if there happens to be an edge vw with v ∈ V (C) and w ∈ V (G) \ V (T ),
as in Figure 16.13a), then w is reachable from u by an M -alternating path P 
in G := G / C (see Figure 16.13b, where the shrunken blossom C = rvxyzr
is indicated by a large solid dot), and this path P  can be modiﬁed to an M alternating path P in G by inserting the rv-segment of C that ends with a matching
edge (Figure 16.13c). In particular, if P  is an M -augmenting path in G / C, then
the modiﬁed path P is an M -augmenting path of G. We refer to this process of
obtaining an M -alternating path of G from an M -alternating path of G / C as
unshrinking C.
If C is a blossom with root r, we denote the vertex resulting from shrinking C
by r also (and keep a record of the blossom C). The eﬀect of shrinking a blossom
C is to replace the graph G by G / C, the tree T by (T + xy) / C, where x and
y are the adjacent red vertices of C, and the matching M by M \ E(C). When
we incorporate this blossom-shrinking operation into APS, we obtain a modiﬁed
search procedure, APS+ .
By way of illustration, consider the graph G and the matching M shown in
Figure 16.14a.

444

16 Matchings

(a)

y
s
u

v

w

t

u

x

z

(c)

(b)

y

u

v

w
(d)

x

z
(e)

Fig. 16.14. Finding an M -augmenting path

We grow an M -alternating tree T rooted at the uncovered vertex u. A blossom
C = uvwu is found (Figure 16.14b) and shrunk to its root u. In Figure 16.14c, the
contracted tree (now a single vertex) is grown further, and an M -augmenting path
uxyz is found in the contracted graph G / C, giving rise (after unshrinking the
blossom C) to the M -augmenting path uvwxyz in G, as shown in Figure 16.14d.
The augmented matching is indicated in Figure 16.14e.
Starting with this new matching M and the vertex a not covered by it, the
above procedure is now repeated, and evolves as illustrated in Figure 16.15, terminating with the APS-tree depicted in Figure 16.15g. Note that, because the vertex
a of Figure 16.15c was obtained by shrinking the blossom abca, the blossom adea
is, in fact, a ‘compound’ blossom. We now examine the structure of such compound
blossoms.
Flowers
As the above example illustrates, during the execution of APS+ , the graph G
is repeatedly modiﬁed by the operation of shrinking blossoms. Suppose that
(C0 , C1 , . . . , Ck−1 ) is the sequence of blossoms shrunk, in that order, during the

16.5 Matching Algorithms

c

a

d

a
b

(a)

(b)

e

f

a

a

s

(c)

s

g

h

i

t
w

x

f

g

(d)
f

a

445

g

t
w

x

a

s

u

v

t
w

x

j

f

g

s

t

(f )

(e)
g

f

y
a

s

a

t
w

w

x

x

z

(h)

(g)
Fig. 16.15. Growing an APS-tree

execution of APS+ . The original graph G is thus progressively modiﬁed, yielding
a sequence of graphs (G0 , G1 , . . . , Gk ), where G0 := G and, for 0 ≤ i ≤ k − 1,
Gi+1 := Gi / Ci . If APS+ fails to ﬁnd an M -augmenting u-path, it terminates
with an APS-tree Tk in Gk , no two red vertices of which are adjacent in Gk . Let
us suppose that APS+ returns such a tree.
Because a blossom Ci is always shrunk to its root, a red vertex, the blue vertices
in each of the graphs Gi are simply vertices of the original input graph. However,
the red vertices might well correspond to nontrivial induced subgraphs of the input
graph. The subgraphs of G corresponding to the red vertices of Gi are called the

446

16 Matchings

ﬂowers of G associated with Ti . For instance, the three ﬂowers of the graph G
of Figure 16.14a associated with the APS-tree shown in Figure 16.15g are the
subgraphs of G induced by {a, b, c, d, e}, {g, h, i}, and {u, v, w}.
Flowers satisfy two basic properties, described in the following proposition.
Proposition 16.22 Let F be a ﬂower of G. Then:
i) F is connected and of odd order,
ii) for any vertex v of F , there is an M -alternating uv-path in G of even length
(that is, one terminating in an edge of M ).
Proof The proof is by induction on i, where F is a ﬂower associated with Ti . We
leave the details to the reader (Exercise 16.5.8).

We are now ready to prove the validity of Algorithm APS+ .
Corollary 16.23 Let Tk be an APS-tree of Gk no two red vertices of which are
adjacent in Gk . Then the red vertices of Tk are adjacent in Gk only to blue vertices
of Tk . Equivalently, the ﬂowers of G associated with Tk are adjacent only to the
blue vertices of G in Tk .
Proof It follows from Proposition 16.22(ii) that if Gk has an M -augmenting upath, then so has G. Thus if G has no M -augmenting u-path, no red vertex of Tk
can be adjacent in Gk to any vertex in V (Gk ) \ V (Tk ) that is not covered by M .
On the other hand, by the maximality of the APS-tree Tk , no red vertex of Tk is
adjacent in Gk to any vertex in V (Gk ) \ V (Tk ) that is covered by M . Because no
two red vertices of Tk are adjacent in Gk , we deduce that the red vertices of Tk
are adjacent only to the blue vertices of Tk .

Recall that when G is a bipartite graph, APS(G, M, u) ﬁnds all vertices that can
be reached by M -alternating u-paths. Algorithm APS+ (G, M, u) achieves the same
objective in an arbitrary graph G. This follows from the fact that if APS+ (G, M, u)
terminates with an APS-tree Tk , every M -alternating u-path in G that terminates
in a blue vertex is of odd length (Exercise 16.5.10).
Edmonds’ Algorithm
The idea of combining Augmenting Path Search with blossom-shrinking is due to
Edmonds (1965d). It leads to a polynomial-time algorithm for ﬁnding a maximum
matching in an arbitrary graph, in much the same way as Augmenting Path Search
leads to Egerváry’s Algorithm for ﬁnding a maximum matching in a bipartite
graph.
In searching for a maximum matching of a graph G, we start with an arbitrary
matching M of G, and apply APS+ to search for an M -augmenting u-path in
G, where u is an uncovered vertex. If such a path P is found, APS+ returns the
larger matching M E(P ); if not, APS+ returns an APS-tree T rooted at u. In the
former case, we apply APS+ starting with an uncovered vertex of G with respect

16.5 Matching Algorithms

447

to the new matching M , if there is one. In the latter eventuality, in continuing
our search for an M -augmenting path, we restrict our attention to the subgraph
G − V (T ) (where, by V (T ), we mean the set of blue vertices of T together with
the set of vertices of G included in the ﬂowers of T ). In this case, we record the set
M (T ) := M ∩ E(T ) (this set will be part of our maximum matching), replace the
matching M by the residual matching M \ E(T ) and the graph G by the subgraph
G − V (T ), and then apply APS+ once more, starting with an uncovered vertex of
G with respect to this new matching, if there is one. We proceed in this way until
the graph F we are left with has no uncovered vertices (and thus has a perfect
matching).
For example, after having found the APS-tree in Figure 16.15g, there remains
one uncovered vertex, namely j. The APS-tree grown from this vertex is just the
trivial APS-tree. The subgraph F consists of the vertices y and z, together with the
edge linking them. The red and blue vertices in the two APS-trees are indicated
in Figure 16.15h.
The output of Edmonds’ Algorithm is as follows.







A
A
A
A
A
A

set T of pairwise disjoint APS-trees.
set R := ∪{R(T ) : T ∈ T } of red vertices.
set B := ∪{B(T ) : T ∈ T } of blue vertices.
subgraph F := G − (R ∪ B) of G with a perfect matching M (F ).
matching M ∗ := ∪{M (T ) : T ∈ T } ∪ M (F ) of G.
set U := {u(T ) : T ∈ T } of vertices not covered by M ∗ .

(As in Egerváry’s Algorithm, when the initial matching M is perfect, T = R =
B = ∅, F = G, M ∗ = M , and U = ∅.)
The proof that Edmonds’ Algorithm does indeed return a maximum matching
closely resembles the proof of Theorem 16.21. We leave it as an exercise (16.5.9).
Theorem 16.24 The set B returned by Edmonds’ Algorithm is a barrier and the

matching M ∗ returned by the algorithm is a maximum matching.
To conclude, we note that Edmonds’ Algorithm, combined with the polynomial
reduction of the f -factor problem to the 1-factor problem described in Section 16.4,
yields a polynomial-time algorithm for solving the f -factor problem.

Exercises
16.5.1 Apply Egerváry’s Algorithm to ﬁnd a maximum matching in the bipartite
graph of Figure 16.16a.
16.5.2 Show that Egerváry’s Algorithm is a polynomial-time algorithm.
16.5.3 Prove Proposition 16.19.

448

16 Matchings

(a)

(b)

Fig. 16.16. Find maximum matchings in these graphs (Exercises 16.5.1 and 16.5.7)

16.5.4 Describe how the output of Egerváry’s Algorithm can be used to ﬁnd a
minimum edge covering of an input bipartite graph without isolated vertices.
16.5.5 Find minimum coverings, maximum stable sets, and minimum edge coverings in the graphs of Figures 16.12 and 16.16a.
16.5.6 For any positive integer k, show that the complete k-partite graph G :=
(P. Erdős, A.L. Rubin, and H. Taylor)
K2,2,...,2 is k-choosable.
16.5.7 Apply Edmonds’ Algorithm to ﬁnd a maximum matching in the graph of
Figure 16.16b, starting with the matching M indicated. Determine the barrier
output by the algorithm.
16.5.8 Prove Proposition 16.22.
16.5.9
a) Show that the set B of blue vertices returned by Edmonds’ Algorithm constitutes a barrier of G.
b) Give a proof of Theorem 16.24.
16.5.10
a) Let T be an APS-tree returned by APS+ (G, M, u). Show that every M alternating u-path in G that terminates in a blue vertex is of odd length.
b) Deduce that APS+ (G, M, u) ﬁnds all vertices of G that can be reached by
M -alternating u-paths.
16.5.11 Show that Edmonds’ Algorithm is a polynomial-time algorithm.
————— —————
16.5.12 Deduce from Exercise 16.3.10 that the ﬂowers created during the execution of APS+ are hypomatchable.
16.5.13 Let B be the barrier obtained by applying Edmonds’ Algorithm to an
input graph G. Show that:
a) every even component of G − B has a perfect matching,

16.6 Related Reading

449

b) every odd component of G − B is hypomatchable,
c) a vertex v of G is inessential if and only if it belongs to an odd component of
G − B,
d) B is the set of all essential vertices that have some inessential neighbour.
(Gallai (1964a) was the ﬁrst to show that every graph has a barrier satisfying the
above conditions.)

16.6 Related Reading
Stable Sets in Claw-Free Graphs
Maximum stable sets in line graphs can be determined in polynomial time, by
virtue of Edmonds’ Algorithm (described in Section 16.5), because a stable set
in a line graph L(G) corresponds to a matching in G. More generally, there exist
polynomial-time algorithms for ﬁnding maximum stable sets in claw-free graphs,
a class which includes all line graphs (see Minty (1980), Sbihi (1980), or Lovász
and Plummer (1986)).
Transversal Matroids
Let G := G[X, Y ] be a bipartite graph. A subset S of X is matchable with a subset
of T of Y if there is a matching in G which covers S ∪ T and no other vertices.
A subset of X is matchable if it is matchable with some subset of Y . Edmonds
and Fulkerson (1965) showed that the matchable subsets of X are the independent
sets of a matroid on X; matroids that arise in this manner are called transversal
matroids. Various results described in Section 16.2 may be seen as properties of
transversal matroids. For example, the König–Ore Formula (Exercise 16.2.8) is an
expression for the rank of this matroid.
Rado’s Theorem
Let G := G[X, Y ] be a bipartite graph, and let M be a matroid deﬁned on Y with
rank function r. As a far-reaching generalization of Hall’s Theorem (16.4), Rado
(1942) showed that X is matchable with a subset of Y which is independent in
the matroid M if and only if r(N (S)) ≥ |S|, for all S ⊆ X. Many variants and
applications of Rado’s Theorem can be found in Welsh (1976).
Pfaffians
Let D := (V, A) be a strict digraph, and let {xa : a ∈ A} be a set of variables
associated with the arcs of D. The Tutte matrix of D is the n × n skew-symmetric
matrix T = (tuv ) deﬁned by:

450

16 Matchings

⎧
⎨
tuv :=

0 if u and v are not adjacent in D,
xa if a = (u, v),
⎩
−xa if a = (v, u).

Because T is skew-symmetric, its determinant is zero when n is odd. But when
n is even, say n = 2k, the determinant of T is the square of a certain polynomial,
called the Pfaﬃan of T, which may be deﬁned as follows.
For any perfect matching M := {a1 , a2 , . . . , ak } of D, where ai := (ui , vi ),
1 ≤ i ≤ k, let π(M ) denote the product tu1 v1 tu2 v2 . . . tuk vk and let sgn(M ) denote
the sign of the permutation (u1 v1 u2 v2 . . . uk vk ). (Observe that sgn(M ) does not
depend on the order in which the elements of M are listed.) The Pfaﬃan of T is
the sum of sgn(M )π(M ) taken over all perfect matchings M of D.
Now, a polynomial in indeterminates is zero if and only if it is identically zero.
Thus the digraph D has a perfect matching if and only if the Pfaﬃan of T is
nonzero. Because the determinant of T is the square of its Pfaﬃan, it follows
that D has a perfect matching if and only if det T = 0. Tutte’s original proof
of Theorem 16.13 was based on an ingenious exploitation of this fact (see Tutte
(1998) for a delightful account of how he was led to this discovery). In more recent
times, properties of the Tutte matrix have played surprisingly useful roles both in
the theory of graphs and in its algorithmic applications; see, for example, Lovász
and Plummer (1986), McCuaig (2000), and Robertson et al. (1999).

17
Edge Colourings

Contents
17.1 Edge Chromatic Number . . . . . . . . . . . . . . . . . . . . . . . . . . 451
Edge Colourings of Bipartite Graphs . . . . . . . . . . . . . . . 452
17.2 Vizing’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 455
17.3 Snarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 461
17.4 Coverings by Perfect Matchings . . . . . . . . . . . . . . . . . . . 464
Fulkerson’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 465
17.5 List Edge Colourings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 466
The List Edge Colouring Conjecture . . . . . . . . . . . . . . . . 467
Galvin’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 467
17.6 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 470
Total Colourings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 470
Fractional Edge Colourings . . . . . . . . . . . . . . . . . . . . . . . . 470

17.1 Edge Chromatic Number
In Chapter 14 we studied vertex colourings of graphs. We now turn our attention
to the analogous concept of edge colouring.
Recall that a k-edge-colouring of a graph G = (V, E) is a mapping c : E → S,
where S is a set of k colours, in other words, an assignment of k colours to the
edges of G. Usually, the set of colours S is taken to be {1, 2, . . . , k}. A k-edgecolouring can then be thought of as a partition {E1 , E2 , . . . , Ek } of E, where Ei
denotes the (possibly empty) set of edges assigned colour i.
An edge colouring is proper if adjacent edges receive distinct colours. Thus
a proper k-edge-colouring is a k-edge-colouring {M1 , M2 , . . . , Mk } in which each
subset Mi is a matching. (Because loops are self-adjacent, only loopless graphs
admit proper edge colourings.) As we are concerned here only with proper edge
colourings, all graphs are assumed to be loopless, and we refer to a proper edge

452

17 Edge Colourings
d

a
e
f

c

g

b

Fig. 17.1. A 4-edge-chromatic graph

colouring simply as an ‘edge colouring’. The graph of Figure 17.1 has the 4-edgecolouring {{a, g}, {b, e}, {c, f }, {d}}.
A graph is k-edge-colourable if it has a k-edge-colouring. Clearly, if G is kedge-colourable, G is also -edge colourable for every > k; moreover, every graph
G is m-edge-colourable. The edge chromatic number, χ (G), of a graph G is the
minimum k for which G is k-edge colourable, and G is k-edge-chromatic if χ (G) =
k. It is straightforward to verify that the graph in Figure 17.1 is not 3-edgecolourable (see Exercise 17.1.3). This graph is therefore 4-edge-chromatic.
In an edge colouring, the edges incident with any one vertex must evidently be
assigned diﬀerent colours. This observation yields the lower bound
χ ≥ ∆

(17.1)

Edge colouring problems arise in practice in much the same way as do vertex
colouring problems. Here is a typical example.
Example 17.1 The Timetabling Problem
In a school, there are m teachers x1 , x2 , . . . , xm , and n classes y1 , y2 , . . . , yn . Given
that teacher xi is required to teach class yj for pij periods, schedule a complete
timetable in the minimum number of periods.
To solve this problem, we represent the teaching requirements by a bipartite
graph H[X, Y ], where X = {x1 , x2 , . . . , xm }, Y = {y1 , y2 , . . . , yn }, and vertices xi
and yj are joined by pij edges. It is easy to see (Exercise 17.1.9a) that the problem
posed amounts to ﬁnding an edge colouring of H in as few colours as possible.
This can be solved by means of a polynomial-time algorithm, as indicated below.
For a more detailed discussion of this Timetabling Problem, see Bondy and Murty
(1976).
Edge Colourings of Bipartite Graphs
Referring to the example of Figure 17.1, we see that inequality (17.1) can be strict.
However, as we prove shortly, equality always holds in (17.1) when G is bipartite.
In Section 17.2, we derive upper bounds on χ for other classes of graphs. We
show, in particular, that if G is any simple graph, then χ ≤ ∆ + 1. The proofs
we present are constructive, and demonstrate how, under suitable conditions, a

17.1 Edge Chromatic Number

453

k-edge-colouring of a graph G may be obtained by colouring the edges one by
one, adjusting the colouring along the way if necessary. We assume that we have
already obtained a k-edge-colouring of a certain subgraph H of G and describe
how to extend it to a k-edge-colouring of G. The following notions are basic to our
approach.
Let H be a spanning subgraph of a graph G and let C := {M1 , M2 , . . . , Mk } be
a k-edge-colouring of H. A colour i is represented at a vertex v if it is assigned to
some edge of H incident with v; otherwise it is available at v. A colour is available
for an edge of E(G) \ E(H) if it is available at both ends of the edge. Thus, if an
edge e is uncoloured, any colour available for e may be assigned to it to extend C
to a k-edge-colouring of H + e.
Let i and j be any two distinct colours, and set Hij := H[Mi ∪ Mj ]. Because
Mi and Mj are disjoint matchings, each component of Hij is either an even cycle
or a path (see the proof of Theorem 16.3); we refer to the path-components of
Hij as ij-paths. These are akin to Kempe chains (see Section 15.2), and one of
the main tools used in our proofs consists of selecting suitable colours i and j and
swapping the colours on an appropriately chosen ij-path so as to obtain a new
k-edge-colouring with respect to which there is an available colour for some edge
of E(G) \ E(H). The proof of the following theorem provides a simple illustration
of this technique.
Theorem 17.2 If G is bipartite, then χ = ∆.
Proof By induction on m. Let e = uv be an edge of G. We assume that H = G\e
has a ∆-edge-colouring {M1 , M2 , . . . , M∆ }. If some colour is available for e, that
colour can be assigned to e to yield a ∆-edge-colouring of G. So we may assume
that each of the ∆ colours is represented either at u or at v. Because the degree
of u in G \ e is at most ∆ − 1, at least one colour i is available at u, hence
represented at v. Likewise, at least one colour j is available at v and represented
at u. Consider the subgraph Hij . Because u has degree one in this subgraph, the
component containing u is an ij-path P . This path does not terminate at v. For if
it did, it would be of even length, starting with an edge coloured i and ending with
an edge coloured j, and P + e would be a cycle of odd length in G, contradicting
the hypothesis that G is bipartite. Interchanging the colours on P , we obtain a
new ∆-edge-colouring of H with respect to which the colour i is available at both
u and v. Assigning colour i to e, we obtain a ∆-edge-colouring of G.

One may easily extract from the above proof a polynomial-time algorithm
for ﬁnding a ∆-edge-colouring of a bipartite graph G. An alternative proof of
Theorem 17.2, using Exercise 16.4.16, is outlined in Exercise 17.1.10.

Exercises
17.1.1 Show that a d-regular graph G is d-edge-colourable if and only if its edge
set can be partitioned into perfect matchings.

454

17 Edge Colourings

17.1.2 By exhibiting an appropriate edge colouring, show that χ (Km,n ) =
∆(Km,n ) (= max{m, n}).
17.1.3
a) Show that every graph G satisﬁes the inequality χ ≥ m/n/2 .
b) Deduce that the graph in Figure 17.1 is not 3-edge-colourable.
17.1.4 Deduce from Exercise 16.1.7 that a cubic graph with a cut edge is not
3-edge-colourable.
17.1.5 Let G be a 2-edge-connected cubic graph with a 2-edge cut {e1 , e2 }. For
i = 1, 2, let ei := ui vi , where ui and vi belong to the component Hi of G \ {e1 , e2 }.
Show that:
a) the graph Gi obtained from Hi by joining ui and vi by a new edge fi is a
2-edge-connected cubic graph, i = 1, 2,
b) G is 3-edge-colourable if and only if both G1 and G2 are 3-edge-colourable.
17.1.6 Let ∂(X) be a 3-edge cut of a cubic graph G. Show that G is 3-edgecolourable if and only if both G / X and G / X are 3-edge-colourable, where X :=
V \ X.
17.1.7
a) Show that the Petersen graph is not 3-edge-colourable (either directly, by considering a hypothetical 3-edge-colouring of one of its 5-cycles, or by appealing
to Exercises 16.1.7 and 17.1.1).
b) Deduce that the Petersen graph is 4-edge-chromatic.
17.1.8
a) Show that every hamiltonian cubic graph is 3-edge-colourable.
b) Deduce from Exercise 17.1.7b that the Petersen graph is not hamiltonian.
17.1.9
a) Show that the Timetabling Problem (Example 17.1) amounts to ﬁnding an
edge colouring of a bipartite graph in the minimum possible number of colours.
b) Let p denote the minimum possible number of periods and the total number
of lessons to be given. Show that there exists a timetable in which no more
than  /p classrooms are required in any one period.
17.1.10
a) Show that if G is bipartite, then G has a ∆-regular bipartite supergraph.
b) Using (a) and Exercise 16.4.16, give an alternative proof of Theorem 17.2.
17.1.11 Let G be a graph with ∆ ≤ 3. Show that G is 4-edge-colourable
a) by appealing to Exercise 2.2.2 and Theorem 17.2,

17.2 Vizing’s Theorem

455

b) by applying Brooks’ Theorem (14.4).
17.1.12 Describe a polynomial-time algorithm for ﬁnding a proper ∆-edgecolouring of a bipartite graph G.
17.1.13 Eight schoolgirls go for a walk in pairs every day. Show how they can
arrange their outings so that each girl has diﬀerent companions on diﬀerent days
of the week?
————— —————
17.1.14 Kirkman’s Schoolgirl Problem
A k-edge-colouring of a hypergraph (V, F ) is a partition {F1 , F2 , . . . , Fk } of F such
that, for 1 ≤ i ≤ k, no two edges in Fi have a vertex in common. Formulate as a
hypergraph edge colouring problem, and solve, the following puzzle, posed by the
Reverend T. P. Kirkman in 1847. Fifteen schoolgirls in an English boarding school
go for a walk every day in groups of three abreast. Can their walks be arranged so
that no two shall walk abreast more than once during a week?
17.1.15
a) By exhibiting an appropriate edge colouring, show that χ (K2n ) = 2n − 1,
n ≥ 1.
b) Deduce that χ (K2n−1 ) = 2n − 1, n ≥ 2.
17.1.16 Gupta’s Theorem
Let G be a bipartite graph with no isolated vertices. Show that G has a (not
necessarily proper) δ-edge-colouring in which all δ colours are represented at each
vertex.
(R. P. Gupta)
17.1.17 Deduce from Theorem 17.2 that line graphs of bipartite graphs are perfect.
17.1.18 Consider a (not necessarily proper) 3-edge colouring of a complete graph
in which each colour class induces a connected spanning subgraph. Show that there
is a triangle which has an edge of each colour.
(T. Gallai)

17.2 Vizing’s Theorem
As has already been noted, if G is not bipartite one cannot necessarily conclude
that χ = ∆. An important theorem due to Vizing (1964), and independently
Gupta (1966), asserts that for any simple graph G, either χ = ∆ or χ = ∆ + 1.
In proving Vizing’s Theorem by induction on m, one may assume (as in the
proof of Theorem 17.2) that there is a (∆+1)-edge-colouring of G\e, where e ∈ E.
To complete the proof it suﬃces to show how a (∆ + 1)-edge-colouring of G itself
can be obtained from this (∆+1)-edge-colouring of G\e. With further applications
in mind (see, for example, Exercise 17.2.9), we consider the more general problem
of deriving a k-edge-colouring of G from a k-edge-colouring of G \ e, where k is
any integer greater than or equal to ∆.

456

17 Edge Colourings

Lemma 17.3 Let G be a simple graph, v a vertex of G, e an edge of G incident
to v, and k an integer, k ≥ ∆. Suppose that G \ e has a k-edge-colouring c with
respect to which every neighbour of v in G has at least one available colour. Then
G is k-edge-colourable.
Proof Consider the k-edge-colouring c of G \ e. In seeking a k-edge-colouring of
G, it is convenient to study the bipartite graph H[X, Y ], where X := NG (v) and
Y := {1, 2, . . . , k}, vertices x ∈ X and i ∈ Y being adjacent if colour i is available
at vertex x in the restriction c̃ of c to G − v. In particular, for all x ∈ X \ {u},
where u denotes the other end of e, the colour of the edge xv is available at x in
G − v, so H contains the matching
M := {(x, c(xv)) : x ∈ X \ {u}}
Conversely, every matching in H corresponds to a partial colouring of ∂(v) that is
compatible with c̃. In particular, any matching in H which saturates X corresponds
to a full colouring of ∂(v) and thus yields, together with c̃, a k-edge-colouring of G.
We may suppose that H has no such colouring. Our goal is to modify the colouring
c to a colouring c so that the corresponding bipartite graph H  does contain a
matching saturating X.
By hypothesis, each vertex of X \ {u} is incident with at least one edge of
H \ M , and the vertex u is incident with at least one such edge as well, because
dG\e (u) = dG (u) − 1 ≤ ∆(G) − 1 ≤ k − 1
Therefore each vertex of X is incident with at least one edge of H \ M .
Denote by Z the set of all vertices of H reachable from u by M -alternating
paths, and set R := X ∩ Z and B := Y ∩ Z. As in the proof of Hall’s Theorem
(16.4), NH (R) = B and B is matched under M with R \ {u}, so |B| = |R| − 1.
Because at least one colour is available at each vertex of R and |B| = |R| − 1, some
colour i ∈ B is available at two vertices x, y of R, by the pigeonhole principle. Note
that every colour in B is represented at v, because B is matched under M with
R \ {u}. In particular, colour i is represented at v. On the other hand, because
the degree of v in G \ e is at most k − 1, some colour j is available at v. Observe
that j ∈
/ B because every colour in B is represented at v. Thus j is represented at
every vertex of R, in particular at both x and y.
Let us return now to the graph G \ e. By the above observations, each of the
vertices v, x, and y is an end of an ij-path in G \ e. Consider the ij-path starting
at v. Evidently, this path cannot terminate at both x and y. We may suppose that
the path starting at v does not terminate at y, and let z be the terminal vertex of
the ij-path P starting at y. Interchanging the colours i and j on P , we obtain a
new colouring c of G \ e.
Let H  [X, Y ] be the bipartite graph corresponding to c . The only diﬀerences
in the edge sets of H and H  occur at y and possibly z (if z ∈ X). Moreover,
because v does not lie on P , the matching M is still a matching in H  . Consider
the alternating uy-path Q in H. If z lies on Q, then z ∈ R and the alternating

17.2 Vizing’s Theorem

457

path uQz is still an M -alternating path in H  , as it terminates with an edge of M .
Also, because j ∈
/ B, the path P must have originally terminated at z in an edge of
colour j, and now terminates in an edge of colour i. With respect to the colouring
c , the colour j is therefore available at z, and Q := uQzj is an M -augmenting
path in H  . On the other hand, if z does not lie on Q, then Q := uQyj is an
M -augmenting path in H  .
Set M  := M  E(Q ). Then M  is a matching in H  which covers every vertex
in X, and this matching corresponds to a full colouring of ∂(v). Combining this
colouring with the restriction of c to G − v, we obtain a proper k-edge-colouring
of G.

Figure 17.2 illustrates the steps in this proof as applied to the Petersen graph,
with the initial 4-edge-colouring c shown in Figure 17.2a. The bipartite graph H is
shown in Figure 17.2b, with X := {s, t, u}, Y := {1, 2, 3, 4}, and the matching M
indicated by heavy lines. We may take i = 1, j = 3, u = x, and t = y. The ij-path
from v (to u) and the ij-path P from t to z are shown in Figure 17.2c, and the
4-edge-colouring c in Figure 17.2d. The corresponding bipartite graph H  is shown
in Figure 17.2e, with an M -augmenting u-path Q indicated. Figure 17.2f shows
the augmented matching M  , and Figure 17.2g the resulting 4-edge-colouring of
the Petersen graph.
The above proof yields a polynomial-time algorithm for ﬁnding a k-edgecolouring of a simple graph G, given a k-edge-colouring of G \ e satisfying the
hypothesis of Lemma 17.3. Because the hypothesis of Lemma 17.3 is satisﬁed
when k = ∆ + 1, Vizing’s Theorem follows directly by induction on m. Moreover,
a (∆ + 1)-edge-colouring of any simple graph G can be found, by adding one edge
at a time, in polynomial time.
Theorem 17.4 Vizing’s Theorem
For any simple graph G, χ ≤ ∆ + 1.



The observant reader will have noticed that the bound on the edge chromatic
number in Vizing’s Theorem (17.4) bears a striking formal resemblance to the
bound (14.3) on the chromatic number.
There is a natural generalization of Theorem 17.4 to all loopless graphs. Consider such a graph G. For vertices u and v of G, we denote by µ(u, v) the number
of parallel edges joining u and v. The multiplicity of G, denoted by µ(G), is the
maximum value of µ, taken over all pairs of vertices of G. Vizing (1964) extended
his theorem as follows.
Theorem 17.5 For any graph G, χ ≤ ∆ + µ.



This more general theorem can be established by adapting the proof of Theorem 17.4 (Exercise 17.2.6). The graph G depicted in Figure 17.3 shows that the
theorem is best possible for any value of µ. Here ∆ = 2µ and, the edges being
pairwise adjacent, χ = m = 3µ = ∆ + µ.

458

17 Edge Colourings
4
3

1
4

3

u

2

v

u

t

3

1

t
3

s

1

s
4

2

4

1

4

3

2

1
(b)

(a)

4

4
3

1
4

3

u

2

v

3

1

t
3

4
1

2

4

2 v
4

1

2

4

(d)
u

t

s

4

3

2

3

1

3

(c)
s

1

s

z

1

3

u

t

s
4

1

3

1

1

3

2

(e)

u

t

4

(f )
4
1

3

3

u

1

2
4

3 v
t

1

3

1
s

4

4

2

3
(g)
Fig. 17.2. Finding a 4-edge-colouring of the Petersen graph by means of Lemma 17.3

17.2 Vizing’s Theorem

µ

459

µ

µ
Fig. 17.3. A graph G with χ = ∆ + µ

Returning to simple graphs, Theorem 17.4 implies that the edge chromatic
number of a simple graph G is equal to either ∆ or ∆ + 1. Those simple graphs
G for which χ = ∆ are said to belong to Class 1, and the others to Class 2. The
problem of deciding to which class a graph belongs is N P-hard (Holyer (1981)
and Leven and Galil (1983)). It is therefore useful to have simple criteria for a
graph to belong to Class 1 or Class 2. For example, with the aid of Lemma 17.3
one can show that a graph G belongs to Class 1 if its vertices of degree ∆ induce a
forest (Exercise 17.2.9). Also, by virtue of the Four-Colour Theorem (11.2), Tait’s
Theorem (11.4), and Exercise 17.1.5, every 2-edge-connected cubic planar graph
belongs to Class 1. Moreover, the proof of the Four-Colour Theorem outlined in
Chapter 15 yields (via Tait’s Theorem) a polynomial-time algorithm for 3-edgecolouring such a graph. A simple condition for a graph to belong to Class 2 is
described in Exercise 17.2.1.

Exercises
17.2.1 Overfull Graph
A simple graph G is overfull if m > n/2∆.
a) Show that every overfull graph:
i) is of odd order,
ii) belongs to Class 2.
b) Show that a nonempty simple graph is overfull if either:
i) it is obtained from a regular graph of even order by subdividing one edge,
or
ii) it is obtained from a simple k-regular graph of odd order by deleting fewer
than k/2 edges.
(L. W. Beineke and R. J. Wilson)
17.2.2
a) Show that, for every loopless graph G,

460

17 Edge Colourings


χ ≥ max





2e(H)
: H ⊆ G, v(H) odd, v(H) ≥ 3
v(H) − 1

(17.2)

b) Find a graph G for which neither the bound χ ≥ ∆ nor the bound (17.2) is
tight.
(Goldberg (1974) and Seymour (1979a) have conjectured that if neither bound is
tight, then χ = ∆ + 1.)
17.2.3 Let G be a graph obtained from a cycle by replacing each edge by a set of
one or more parallel edges. Show that G satisﬁes the Goldberg bound (17.2) with
equality.
17.2.4
a) Using Vizing’s Theorem (17.4), show that χ (G  K2 ) = ∆(G  K2 ).
b) Deduce that if H is nontrivial with χ (H) = ∆(H), then χ (G  H) =
∆(G  H).
17.2.5 Describe a polynomial-time algorithm for ﬁnding a proper (∆ + 1)-edge
colouring of a simple graph G.
17.2.6
a) Let G be a graph, let e = uv be an edge of G, and let k ≥ ∆ + µ be an integer,
where µ := µ(G). Suppose that G \ e has a k-edge-colouring with respect to
which every neighbour of v has at least µ available colours. Show that G is
k-edge-colourable.
b) Deduce that χ ≤ ∆ + µ.
17.2.7 Using Exercise 16.4.16b, show that if ∆ is even, then χ ≤ 3∆/2.
17.2.8
a) Show that χ ≤ 2∆ − µ.
b) Deduce that χ ≤ 3∆/2.

(C. Shannon)

17.2.9 Let G be a simple graph whose vertices of maximum degree ∆ induce a
forest. Show that χ = ∆.
17.2.10 Uniquely Edge-Colourable Graph
A k-edge-chromatic graph which has exactly one proper k-edge-colouring is said
to be uniquely k-edge-colourable.
a) Let G be a uniquely k-edge-colourable k-regular graph with k-edge-colouring
{M1 , M2 , . . . , Mk }. Show that G[Mi ∪ Mj ] is hamiltonian, 1 ≤ i < j ≤ k.
(D. L. Greenwell and H. V. Kronk)
b) Let G be a cubic graph with a triangle T . Show that G is uniquely 3-edgecolourable if and only if H := G / T is uniquely 3-edge-colourable.

17.3 Snarks

461

c) For every even n ≥ 4, construct a uniquely 3-edge-colourable cubic graph on
n vertices. (T. Fowler and R. Thomas have shown that every uniquely 3-edgecolourable cubic planar graph on four or more vertices contains a triangle, and
thus can be obtained from K4 by recursively expanding vertices into triangles.)
d) Show that the generalized Petersen graph P2,9 is triangle-free and uniquely
3-edge-colourable.
(S. Fiorini)
17.2.11 Show that every uniquely 3-edge-colourable cubic graph has exactly three
Hamilton cycles.
17.2.12 Let P be the Petersen graph. Show that P  K3 belongs to Class 1.
————— —————
17.2.13 Show that a self-complementary graph belongs to Class 2 if and only if it
is regular.
(A.P. Wojda)
17.2.14
a) Show that if G is simple with δ > 1, then G has a (δ − 1)-edge-colouring
(necessarily improper) in which all δ −1 colours are represented at each vertex.
(R. P. Gupta)
b) Describe a polynomial-time algorithm for ﬁnding such a colouring.
17.2.15 Vizing’s Adjacency Lemma
Let G be a minimal simple graph that is not ∆-edge-colourable, and let u and v
be adjacent vertices of G, where d(u) = k.
a) Show that v is adjacent to at least ∆ − k + 1 vertices of degree ∆ diﬀerent
from u.
(V.G. Vizing)
b) Deduce that each vertex of G has at least two neighbours of degree ∆.

17.3 Snarks
The edge chromatic number of a cubic graph G (whether simple or not) always
equals either three or four (Exercise 17.1.11). However, as was mentioned in Section 17.2, the problem of deciding between these two values is N P-complete. Thus,
unless P = co-N P, there is no hope of obtaining any useful characterization of
the cubic graphs which are 3-edge-colourable. Nevertheless, edge colourings of cubic graphs have attracted much attention, mainly on account of their relevance to
the Four-Colour Problem, discussed in Chapters 11 and 15, and the Cycle Double
Cover Conjecture, introduced in Section 3.5.
We have seen that it suﬃces to prove the Cycle Double Cover Conjecture for essentially 4-edge-connected cubic graphs (Theorem 5.5, Exercises 9.3.9 and 9.4.2).
Furthermore, if such a graph is 3-edge-colourable, then it admits a covering by

462

17 Edge Colourings

two even subgraphs (Exercise 17.3.4a) and hence has a cycle double cover (Exercise 3.5.4a). Thus it suﬃces to establish the Cycle Double Cover Conjecture for
essentially 4-edge-connected cubic graphs that are not 3-edge-colourable.
The Petersen graph is the smallest such graph (Exercise 17.3.1). For a long
time, apart from the Petersen graph, only a few sporadic examples of 4-edgechromatic essentially 4-edge-connected cubic graphs were known. Because of the
elusive nature of such graphs, they were named snarks by Descartes (1948), after
the Lewis Carroll poem, ‘The Hunting of the Snark’. A snark on eighteen vertices,
discovered by Blanuša (1946), is shown in Figure 17.4b. That it is indeed a snark
can be deduced from the fact the Petersen graph is one (see Exercise 17.1.6).
It can be seen that this Blanuša snark (one of two) has a Petersen graph
minor. Tutte (1966b) conjectured that every snark has such a minor. Because the
Petersen graph is nonplanar, Tutte’s conjecture implies the Four-Colour Theorem,
via Tait’s Theorem (11.4). Tutte’s conjecture was conﬁrmed by N. Robertson,
D. Sanders, P. D. Seymour, and R. Thomas (unpublished, see Robertson et al.
(1997b)) using the same sorts of techniques as were successful in proving the FourColour Theorem.
Isaacs (1975) was the ﬁrst to succeed in constructing inﬁnite families of snarks
(see Exercise 17.3.3). Examples with many interesting properties were found by
Kochol (1996), but the general structure of snarks remains a mystery.

Exercises
17.3.1 Verify that the Petersen graph is the smallest snark.
17.3.2 Blanuša Snark
Let G1 and G2 be two disjoint snarks, and let ui xi yi vi be a path of length three
in Gi , i = 1, 2. Delete the edges ui xi and vi yi from Gi , i = 1, 2, and identify x1
with x2 and y1 with y2 (and the edge x1 x2 with the edge y1 y2 ). Now add edges
joining u1 and u2 , and v1 and v2 . Show that the resulting graph is again a snark.
(This construction is illustrated in Figure 17.4 when both G1 and G2 are Petersen
graphs. The resulting snark, shown in Figure 17.4b is known as the Blanuša snark.)
————— —————
17.3.3 Flower Snark
a) Show that the graph shown in Figure 17.5 is a snark.
b) Find a Petersen graph minor of this snark.
c) Explain how one may obtain an inﬁnite sequence of snarks by generalizing the
above construction. (These snarks are known as the ﬂower snarks.)
(R. Isaacs)
d) Show that all ﬂower snarks have Petersen graph minors.

17.3 Snarks
u1

463

u2
x1 x2

y1 y2
v1

(a)

v2

(b)

Fig. 17.4. Construction of the Blanuša snark

17.3.4
a) Show that a cubic graph admits a covering by two even subgraphs if and only
if it is 3-edge-colourable.
b) Deduce that the problem of deciding whether a graph admits a covering by
two even subgraphs is N P-complete.
17.3.5 Meredith Graph
a) Let M be a perfect matching of the Petersen graph. For k ≥ 3, let Gk denote
the graph obtained from the Petersen graph by replacing each edge of M by
k − 2 parallel edges. Show that:
i) Gk is k-edge-connected,
ii) Gk is not k-edge-colourable.
b) The simple 4-edge-connected 4-regular graph shown in Figure 17.6 is known as
the Meredith graph. Deduce from (a) that this graph is not 4-edge-colourable.
c) Explain how to obtain a simple k-edge-connected non-k-edge-colourable k-regular graph for all k ≥ 4.
(G.H.J. Meredith)

Fig. 17.5. A ﬂower snark on twenty vertices

464

17 Edge Colourings

Fig. 17.6. The Meredith graph

17.3.6 Show that the Meredith graph (Figure 17.6) has two disjoint perfect matchings.
(Examples of k-regular graphs in which any two perfect matchings intersect have
been constructed by Rizzi (1999) for all k ≥ 4.)

17.4 Coverings by Perfect Matchings
A k-edge-colouring of a k-regular graph is a decomposition of the graph into k
perfect matchings. Thus the only graphs that admit decompositions into perfect
matchings are the regular graphs belonging to Class 1. A decomposition being a
1-covering, it is natural to ask which regular graphs admit uniform coverings by
perfect matchings. According to Exercise 17.4.6b, every 2-connected cubic graph
admits such a covering.
Motivated by certain questions concerning the polyhedra deﬁned by the incidence vectors of perfect matchings, Fulkerson (1971) was led to formulate the
following conjecture on uniform coverings by perfect matchings, a conjecture reminiscent of the Cycle Double Cover Conjecture (3.9).

17.4 Coverings by Perfect Matchings

465

Fulkerson’s Conjecture
Conjecture 17.6 Every 2-connected cubic graph admits a double cover by six
perfect matchings.

Fulkerson’s Conjecture certainly holds for cubic graphs of Class 1: it suﬃces
to consider a 3-edge-colouring {M1 , M2 , M3 } and take two copies of each perfect
matching Mi . The conjecture also holds for the Petersen graph, whose six perfect
matchings constitute a double cover (Exercise 17.4.1).
If Fulkerson’s Conjecture were true, then deleting one of the perfect matchings
from the double cover would result in a covering of the graph by ﬁve perfect matchings. This weaker conjecture was proposed by C. Berge (see Seymour (1979a)).
Conjecture 17.7 Every 2-connected cubic graph admits a covering by ﬁve perfect
matchings.
The bound of ﬁve in this conjecture cannot be reduced: the Petersen graph admits no covering by fewer than ﬁve perfect matchings; with four perfect matchings
one may cover fourteen of its ﬁfteen edges, but not all of them (Exercise 17.4.4a).

Exercises
17.4.1 Show that the six perfect matchings of the Petersen graph constitute a
double cover of the graph.
17.4.2 Let G be a graph obtained from a 2-connected cubic graph H by duplicating
each edge. Show that χ ≤ 7.
17.4.3 Find a double cover of the Blanuša snark (Figure 17.4b) by six perfect
matchings.
————— —————
17.4.4 For a graph G and a positive integer k, denote by mk (G) the largest proportion of the edge set of G that can be covered by k perfect matchings.
   
a) Let P denote the Petersen graph. Show that mk (P ) = 1 − k4 / k6 , 1 ≤ k ≤ 5.
b) Let G be a 2-connected cubic graph which has a double cover by six perfect
matchings, and let k be an integer, 1 ≤ k ≤ 5.
i) Show that if k of these six perfect matchings are selected uniformly at
random, then any given edge of G belongs
to at least one of the chosen
 
matchings with probability 1 − k4 / k6 .
ii) Deduce that mk (G) ≥ mk (P ).
(V. Patel)

466

17 Edge Colourings

17.4.5 Perfect Matching Polytope
a) Let G be a graph with at least one perfect matching. The convex hull of the
set of incidence vectors of the perfect matchings of G is called the perfect
matching polytope of G, denoted P M (G). Let x := (x(e) : e ∈ E) be an
element of P M (G). Show that:
i) x(e) ≥ 0 for all e ∈ E,
ii) x(∂(v)) = 1 for all v ∈ V ,
iii) x(∂(S)) ≥ 1 for all odd subsets S of V .
(Using the result of Exercise 8.6.8, Edmonds (1965b) showed that, conversely,
every vector x ∈ RE which satisﬁes these constraints belongs to P M (G).)
b) Show that when G is bipartite, a vector x ∈ RE belongs to P M (G) if and
only if it satisﬁes constraints (i) and (ii). (This assertion is equivalent to the
Birkhoﬀ–von Neumann Theorem, see Exercise 16.2.18.)
c) By considering the triangular prism, show that when G is nonbipartite, a vector
x satisfying constraints (i) and (ii) does not necessarily satisfy constraint (iii).
17.4.6 Let G be a k-regular graph with k ≥ 1, such that d(S) ≥ k for every odd
subset S of V .
a) Using Exercise 16.4.7b, show that each edge of G belongs to a perfect matching.
b) Apply Edmonds’ characterization of the perfect matching polytope P M (G),
as described in Exercise 17.4.5a, to show that the vector ( k1 , k1 , . . . , k1 ) belongs
to P M (G).
c) Deduce that G admits a uniform covering by perfect matchings.
(J. Edmonds)
17.4.7 Matching Polytope
The matching polytope M P (G) of a graph G is the convex hull of the set of incidence vectors of the matchings of G. Let x := (x(e) : e ∈ E) be an element of
M P (G). Show that:
i) x(e) ≥ 0 for all e ∈ E,
ii) x(∂(v)) ≤ 1 for all v ∈ V ,
iii) x(E(S)) ≤  12 |S| for all odd subsets S of V .
(Edmonds (1965b) proved that, conversely, every vector x ∈ RE which satisﬁes
the above constraints belongs to M P (G). This may be deduced from Edmonds’
characterization of P M (G), described in Exercise 17.4.5a.)

17.5 List Edge Colourings
The deﬁnitions concerning list colourings given in Section 14.5 have obvious analogues for edge colouring: list edge colouring, k-list-edge-colourable and list edge
chromatic number, denoted χL (G). As already observed, χL (G) ≥ χ(G) for any
graph G. Likewise, χL (G) ≥ χ (G). Although the former inequality is strict for

17.5 List Edge Colourings

467

some graphs, such as K3,3 , it is conjectured that the latter inequality is always
satisﬁed with equality.

The List Edge Colouring Conjecture
Conjecture 17.8 For every loopless graph G, χL (G) = χ (G)

Galvin’s Theorem
Conjecture 17.8 was proposed independently by several authors, including V. G.
Vizing, R. P. Gupta, and M. O. Albertson and K. L. Collins. It ﬁrst appeared in
print in an article by Bollobás and Harris (1985) (see Häggkvist and Chetwynd
(1992) for a brief history). Galvin (1995) showed that the conjecture is true for bipartite graphs. His proof relies on the relationship between kernels and list colourings described in Theorem 14.19. Because colouring the edges of a graph amounts
to colouring the vertices of its line graph, the key step in the proof is to show that
line graphs of bipartite graphs can be oriented in such a way that (i) the maximum
outdegree is not too high, and (ii) every induced subgraph has a kernel.
We present a proof of Galvin’s theorem for simple bipartite graphs. Let G :=
G[X, Y ] be such a graph. In the line graph L(G), there is a clique Kv for each
vertex v of G, the vertices of Kv corresponding to the edges of G incident to v.
Each edge xy of G gives rise to a vertex of L(G) which lies in exactly two of these
cliques, namely Kx and Ky . We refer to Kv as an X-clique if v ∈ X, and a Y -clique
if v ∈ Y .
There is a convenient way of visualising this line graph L(G). Because each
edge of G is a pair xy, the vertex set of L(G) is a subset of the cartesian product
X × Y . Therefore, in a drawing of L(G), we can place its vertices at appropriate
lattice points of the m × n grid, where m = |X| and n = |Y |, the rows of the
grid being indexed by X and the columns by Y . Any two vertices which lie in the
same row or column of the grid are adjacent in L(G), and so the sets of vertices in
the same row or column are cliques of L(G), namely its X-cliques and Y -cliques,
respectively (see Figure 17.7).
Theorem 17.9 Let G[X, Y ] be a simple bipartite graph, and let D be an orientation of its line graph L(G) in which each X-clique and each Y -clique induces a
transitive tournament. Then D has a kernel.
Proof By induction on e(G), the case e(G) = 1 being trivial. For v ∈ V (G),
denote by Tv the transitive tournament in D corresponding to v, and for x ∈ X,
denote by tx the sink of Tx . Set K := {tx : x ∈ X}. Every vertex of D − K lies

468

17 Edge Colourings
x1

x2

x3

x3

x2

x1
y1

y2

y3
G

y4

y1

y2

y3

y4

L(G)

Fig. 17.7. Representing the line graph L(G) of a bipartite graph G on a grid

in some Tx , and so dominates some vertex of K. Thus if the vertices of K lie in
distinct Y -cliques, then K is a kernel of D.
Suppose, then, that the Y -clique Ty contains two vertices of K. One of these,
say tx , is not the source sy of Ty , so sy → tx . Set D := D − sy . Then D is an
orientation of the line graph L(G\e), where e is the edge of G corresponding to the
vertex sy of L(G). Moreover, each clique of D induces a transitive tournament.
By induction, D has a kernel K  . We show that K  is also a kernel of D. For this,
it suﬃces to verify that sy dominates some vertex of K  .
/ K  , then tx → v, for
If tx ∈ K  , then sy → tx . On the other hand, if tx ∈

some v ∈ K . Because tx is the sink of its X-clique, v must lie in the Y -clique
Ty \ {sy }. But then sy , being the source of Ty , dominates v. Thus K  is indeed a
kernel of D.

Theorem 17.10 Every simple bipartite graph G is ∆-list-edge-colourable.
Proof Let G := G[X, Y ] be a simple bipartite graph with maximum degree k, and
let c : E(G) → {1, 2, . . . , k} be a k-edge-colouring of G. The colouring c induces
a k-colouring of L(G). We orient each edge of L(G) joining two vertices of an
X-clique from lower to higher colour, and each edge of L(G) joining two vertices
of a Y -clique from higher to lower colour, as in Figure 17.8 (where the colour
c(xi yj ) of the edge xi yj is indicated inside the corresponding vertex of L(G)).
This orientation D clearly satisﬁes the hypotheses of Theorem 17.9; indeed, every
induced subgraph of D satisﬁes these hypotheses. Moreover, ∆+ (D) = k − 1. By
Theorem 14.19, L(G) is k-list-colourable, so G is k-list-edge-colourable.

As mentioned earlier, Galvin (1995) showed that if G[X, Y ] is any (not necessarily simple) bipartite graph, then it is ∆-list-edge-colourable. We leave the proof
of this more general theorem, which is essentially the same as that of the special
case presented above, as Exercise 17.5.3.

17.5 List Edge Colourings
x3

3

2

1

x2 1

2

3

4

x1

4
y2

1
y3

y4

y1

469

Fig. 17.8. Orienting the line graph of a bipartite graph

Exercises
17.5.1
a) An n×n array A = (aij ) whose entries are taken from some set S of n symbols
is called a Latin square of order n if each symbol appears precisely once in each
row and precisely once in each column of A. Show that there is a one-to-onecorrespondence between n-edge-colourings of Kn,n in colours 1, 2, . . . , n and
Latin squares of order n in symbols 1, 2, . . . , n.
b) Deduce from Theorem 17.10 the following assertion, a special case of a conjecture due to J. Dinitz (see, for example Galvin (1995)).
For 1 ≤ i ≤ j ≤ n, let Sij be a set of n elements. Then there exists a Latin
square A = (aij ) of order n using a set S of n symbols such that aij ∈ Sij ∩ S,
1 ≤ i ≤ j ≤ n.
17.5.2 Consider the bipartite graph G shown in Figure 17.9, with the given 5edge-colouring. Find an orientation of its line graph L(G) each of whose induced
subdigraphs has a kernel.

3

5
1

2

2

4
3

5

4
1

Fig. 17.9. Find an appropriate orientation of L(G) (Exercise 17.5.2)

470

17 Edge Colourings

17.5.3 Prove that a bipartite graph G (whether simple or not) is ∆-list-edgecolourable.
(F. Galvin)
————— —————

17.6 Related Reading
Total Colourings
A total colouring of a graph G is a colouring c : V ∪ E → S, where S is a set of
colours. The colouring c is proper if its restriction to V is a proper vertex colouring
of G, its restriction to E is a proper edge colouring of G, and no edge receives the
same colour as either of its ends. The total chromatic number of G, denoted by
χ (G), is the minimum number of colours in a proper total colouring of G. Vizing
(1964) and, independently, Behzad (1965) conjectured that the total chromatic
number of a simple graph G never exceeds ∆ + 2 (and thus is equal to either ∆ + 1
or ∆ + 2). Using probabilistic methods, Molloy and Reed (1998) showed that the
total chromatic number of a simple graph G is at most ∆ + 1026 , provided that ∆
is suﬃciently large. Apart from this result, not much progress has been made on
this conjecture, known as the Total Colouring Conjecture. A number of interesting
problems involving list colouring variants of the total chromatic number have been
studied; see, for example, Woodall (2001).
Fractional Edge Colourings
Fractional edge colourings can be deﬁned in an analogous manner to fractional
vertex colourings, with matchings playing the role of stable sets. The analogue of
the fractional chromatic number is called the fractional edge chromatic number,
denoted χ∗ .
The Goldberg bound (17.2) on the edge chromatic number (without the ceiling
function) is satisﬁed with equality by the fractional edge chromatic number:


2e(H)
: H ⊆ G, v(H) odd
(χ )∗ = max
v(H) − 1
This follows from the characterization by Edmonds (1965b) of the matching polytope (see Exercise 17.4.7).

18
Hamilton Cycles

Contents
18.1 Hamiltonian and Nonhamiltonian Graphs . . . . . . . . . . 471
Tough Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 472
Hypohamiltonian Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 473
18.2 Nonhamiltonian Planar Graphs . . . . . . . . . . . . . . . . . . . . 478
Grinberg’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478
Barnette’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481
18.3 Path and Cycle Exchanges . . . . . . . . . . . . . . . . . . . . . . . . 483
Path Exchanges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484
Cycle Exchanges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485
Dirac’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485
The Closure of a Graph . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486
The Chvátal–Erdős Theorem . . . . . . . . . . . . . . . . . . . . . . . . 488
18.4 Path Exchanges and Parity . . . . . . . . . . . . . . . . . . . . . . . . 492
The Lollipop Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 492
Uniquely Hamiltonian Graphs . . . . . . . . . . . . . . . . . . . . . . . 494
Sheehan’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494
18.5 Hamilton Cycles in Random Graphs . . . . . . . . . . . . . . . 499
Pósa’s Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 499
18.6 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501
The Bridge Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501
The Hopping Lemma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502
Long Paths and Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502

18.1 Hamiltonian and Nonhamiltonian Graphs
Recall that a path or cycle which contains every vertex of a graph is called a
Hamilton path or Hamilton cycle of the graph. Such paths and cycles are named
after Sir William Rowan Hamilton, who described, in a letter to his friend Graves
in 1856, a mathematical game on the dodecahedron (Figure 18.1a) in which one

472

18 Hamilton Cycles

person sticks pins in any ﬁve consecutive vertices and the other is required to complete the path so formed to a spanning cycle (see Biggs et al. (1986) or Hamilton
(1931)). Hamilton was prompted to consider such cycles in his early investigations
into group theory, the three edges incident to a vertex corresponding to three
generators of a group.
A graph is traceable if it contains a Hamilton path, and hamiltonian if it contains a Hamilton cycle. The dodecahedron is hamiltonian; a Hamilton cycle is
indicated in Figure 18.1a. On the other hand, the Herschel graph of Figure 18.1b
is nonhamiltonian, because it is bipartite and has an odd number of vertices. This
graph is, however, traceable.

(a)

(b)

Fig. 18.1. Hamiltonian and nonhamiltonian graphs: (a) the dodecahedron, (b) the Herschel graph

Tough Graphs
As we saw in Section 8.3, the problem of deciding whether a given graph is hamiltonian is N P-complete. It is therefore natural to look for reasonable necessary
or suﬃcient conditions for the existence of Hamilton cycles. The following simple
necessary condition turns out to be surprisingly useful.
Theorem 18.1 Let S be a set of vertices of a hamiltonian graph G. Then
c(G − S) ≤ |S|

(18.1)

Moreover, if equality holds in (18.1), then each of the |S| components of G − S is
traceable, and every Hamilton cycle of G includes a Hamilton path in each of these
components.
Proof Let C be a Hamilton cycle of G. Then C − S clearly has at most |S|
components. But this implies that G − S also has at most |S| components, because
C is a spanning subgraph of G.

18.1 Hamiltonian and Nonhamiltonian Graphs

473

If G − S has exactly |S| components, C − S also has exactly |S| components,
and the components of C − S are spanning subgraphs of the components of G − S.
In other words, C includes a Hamilton path in each component of G − S.

A graph G is called tough if (18.1) holds for every nonempty proper subset S
of V . By Theorem 18.1, a graph which is not tough cannot be hamiltonian. As an
illustration, consider the graph G of Figure 18.2a. This graph has nine vertices.
On deleting the set S of three vertices indicated, four components remain. This
shows that the graph is not tough, and we infer from Theorem 18.1 that it is
nonhamiltonian.
Although condition (18.1) has a simple form, it is not always easy to apply. In
fact, as was shown by Bauer et al. (1990), recognizing tough graphs is N P-hard.

(a)

(b)

Fig. 18.2. (a) A nontough graph G, (b) the components of G − S

Hypohamiltonian Graphs
As the above example shows, Theorem 18.1 can sometimes be applied to deduce
that a graph is nonhamiltonian. Such an approach does not always work. The
Petersen graph is nonhamiltonian (Exercises 2.2.6, 17.1.8), but one cannot deduce
this fact from Theorem 18.1. Indeed, the Petersen graph has a very special property: not only is it nonhamiltonian, but the deletion of any one vertex results in
a hamiltonian graph (Exercise 18.1.16a). Such graphs are called hypohamiltonian.
Deleting a single vertex from a hypohamiltonian graph results in a subgraph with
just one component, and deleting a set S of at least two vertices produces no more
than |S| − 1 components, because each vertex-deleted subgraph is hamiltonian,
hence tough. The Petersen graph is an example of a vertex-transitive hypohamiltonian graph. Such graphs appear to be extremely rare. Another example is the
Coxeter graph (see Exercises 18.1.14 and 18.1.16c); the attractive drawing of this
graph shown in Figure 18.3 is due to Randı́c (1981). Its geometric origins and
many of its interesting properties are described in Coxeter (1983).

474

18 Hamilton Cycles

Fig. 18.3. The Coxeter graph

Exercises
18.1.1 By applying Theorem 18.1, show that the Herschel graph (Figure 18.1b)
is nonhamiltonian. (It is, in fact, the smallest nonhamiltonian 3-connected planar
graph.)
18.1.2 Let G be a cubic graph, and let H be the cubic graph obtained from G by
expanding a vertex to a triangle. Exhibit a bijection between the Hamilton cycles
of G and those of H.
18.1.3 Show that the Meredith graph (Figure 17.6) is nonhamiltonian.
18.1.4
a) Let G be a graph and let X be a nonempty proper subset of V . If G / X is a
nonhamiltonian cubic graph, show that any path of G either misses a vertex
of V \ X or has an end in V \ X.
b) Construct a nontraceable 3-connected cubic graph.
18.1.5 Find a 3-connected planar bipartite graph on fourteen vertices which is not
traceable.
18.1.6 A graph is traceable from a vertex x if it has a Hamilton x-path, Hamiltonconnected if any two vertices are connected by a Hamilton path, and 1-hamiltonian
if it and all its vertex-deleted subgraphs are hamiltonian.
Let G be a graph and let H be the graph obtained from G by adding a new vertex
and joining it to every vertex of G. Show that:
a) H is hamiltonian if and only if G is traceable,

18.1 Hamiltonian and Nonhamiltonian Graphs

475

b) H is traceable from every vertex if and only if G is traceable,
c) H is Hamilton-connected if and only if G is traceable from every vertex,
d) H is 1-hamiltonian if and only if G is hamiltonian.
18.1.7
a) Show that the graph of Figure 18.4 is 1-hamiltonian but not Hamiltonconnected.
(T. Zamfirescu)

Fig. 18.4. A 1-hamiltonian graph which is not Hamilton-connected (Exercise 18.1.7)

b) Find a Hamilton-connected graph which is not 1-hamiltonian.
18.1.8 Find a 2-diregular hypohamiltonian digraph on six vertices.
(J.-L. Fouquet and J.-L. Jolivet)
18.1.9 k-Walk
A k-walk in a graph is a spanning closed walk which visits each vertex at most
k times. (Thus a 1-walk is a Hamilton cycle.) If G has a k-walk, show that G is
(1/k)-tough.
(Jackson and Wormald (1990) showed that, for k ≥ 3, every (1/(k − 2))-tough
graph has a k-walk.)
18.1.10 Path Partition Number
A path partition of a graph is a partition of its vertex set into paths. The path
partition number of a graph G, denoted π(G), is the minimum number of paths
into which its vertex set V can be partitioned. (Thus traceable graphs are those
whose path partition number is one.) Let G be a graph containing an edge e which
lies in no Hamilton cycle, and let H be the graph formed by taking m disjoint
copies of G and adding all possible edges between the ends of the m copies of e,
so as to form a clique of 2m vertices. Show that the path partition number of H
is at least m/2.
18.1.11 A graph G is path-tough if π(G − S) ≤ |S| for every proper subset S of V .

476

18 Hamilton Cycles

a) Show that:
i) every hamiltonian graph is path-tough,
ii) every path-tough graph is tough.
b) Give an example of a nonhamiltonian path-tough graph.
18.1.12 Let G be a vertex-transitive graph of prime order. Show that G is hamiltonian.
18.1.13 Let G be the graph whose vertices are the thirty-ﬁve 3-element subsets of
{1, 2, 3, 4, 5, 6, 7}, two vertices being joined if the subsets are disjoint. Let X be a
set of vertices of G forming a Fano plane. Show that G − X is isomorphic to the
Coxeter graph.
————— —————
18.1.14 Show that the Petersen graph, the Coxeter graph, and the two graphs
derived from them by expanding each vertex to a triangle, are all vertex-transitive
nonhamiltonian graphs. (These four graphs are the only examples of such graphs
known.)
18.1.15 A graph is maximally nonhamiltonian if it is nonhamiltonian but every
pair of nonadjacent vertices are connected by a Hamilton path.
a) Show that:
i) the Petersen graph and the Coxeter graph are maximally nonhamiltonian,
ii) the Herschel graph is not maximally nonhamiltonian.
b) Find a maximally nonhamiltonian spanning supergraph of the Herschel graph.
18.1.16 Show that:
a) the Petersen graph is hypohamiltonian,
b) there is no smaller hypohamiltonian graph,
(J.C. Herz, J.J. Duby, and F. Vigué)
c) the Coxeter graph is hypohamiltonian.
18.1.17 Hypotraceable Graph
A graph is hypotraceable if it is not traceable but each of its vertex-deleted subgraphs is traceable. Show that the graph in Figure 18.5 is hypotraceable.
(C. Thomassen)
18.1.18 Pancyclic Graph
A simple graph on n vertices is pancyclic if it contains at least one cycle of each
length l, 3 ≤ l ≤ n.
a) Let G be a simple graph and v a vertex of G. Suppose that G−v is hamiltonian
and that d(v) ≥ n/2. Show that G is pancyclic.
b) Prove, by induction on n, that if G is a simple hamiltonian graph with more
(J.A. Bondy; C. Thomassen)
than n2 /4 edges, then G is pancyclic.

18.1 Hamiltonian and Nonhamiltonian Graphs

477

Fig. 18.5. A hypotraceable graph

c) For all n ≥ 4, give an example of a simple graph G with n2 /4 edges which is
hamiltonian but not pancyclic.
18.1.19 A simple graph on n vertices is uniquely pancyclic if it contains precisely
one cycle of each length l, 3 ≤ l ≤ n.
a) For n = 3, 5, 8, 14, ﬁnd a uniquely pancyclic graph on n vertices.
b) Let G be a uniquely pancyclic graph. Show that:
i) m ≥ (n − 1)
 + log2 (n − 1),
+ 2, then m ≤ n + r − 1.
ii) if n = r+1
2
18.1.20 Let D be a 2-strong tournament, and let (x, y) be an arc of D such that
d− (x) + d+ (y) ≥ n − 1. Show that (x, y) lies in a directed cycle of each length l,
3 ≤ l ≤ n.
(A. Yeo)
18.1.21 Let H be a vertex-deleted subgraph of the Petersen graph P . Deﬁne a
sequence Gi , i ≥ 0, of 3-connected cubic graphs, as follows.



G0 = P .
Gi+1 is obtained from Gi and v(Gi ) copies (Hv : v ∈ V (Gi )) of H, by splitting
each vertex v of Gi into three vertices of degree one and identifying these
vertices with the three vertices of degree two in Hv .

Set G := Gk .
a) Show that:
i) n = 10 · 9k ,
ii) the circumference of G is 9 · 8k = cnγ , where γ = log 8/ log 9, and c is a
suitable positive constant.
b) By appealing to Exercise 9.1.13, deduce that G has no path of length more
than c nγ , where c is a suitable positive constant.

478

18 Hamilton Cycles

(Jackson (1986) has shown that every 3-connected cubic graph G has a cycle of
length at least nγ for a suitable positive constant γ. For all d ≥ 3, Jackson and
Parsons (1982) have constructed an inﬁnite family of d-connected d-regular graphs
G with circumference less than nγ , where γ < 1 is a suitable positive constant
depending on d.)
18.1.22 Let t be a positive real number. A connected graph G is t-tough if c(G −
S) ≤ |S|/t for every vertex cut S of V . (Thus 1-tough graphs are the same as tough
graphs.) The largest value of t for which a graph is t-tough is called its toughness.
a) Determine the toughness of the Petersen graph.
b) Show that every 1-tough graph on an even number of vertices has a 1-factor.
c) Consider the graph H described in Exercise 18.1.10, where G is the graph
shown in Figure 18.6 and m = 5. Show that H ∨ K2 is 2-tough but not pathtough (hence not hamiltonian).
(D. Bauer, H.J. Broersma, and H.J. Veldman)
(Chvátal (1973) has conjectured the existence of a constant t such that every
t-tough graph is hamiltonian.)

e

Fig. 18.6. An element in the construction of a nonhamiltonian 2-tough graph (Exercise 18.1.22)

18.2 Nonhamiltonian Planar Graphs
Grinberg’s Theorem
Recall (from Section 11.1) that Tait (1880) showed the Four-Colour Conjecture
to be equivalent to the statement that every 3-connected cubic planar graph is
3-edge-colourable. Tait thought that he had thereby proved Four-Colour Conjecture, because he believed that every such graph was hamiltonian, and hence
3-edge-colourable. However, Tutte (1946) showed this to be false by constructing
a nonhamiltonian 3-connected cubic planar graph (depicted in Figure 18.7) using
ingenious ad hoc arguments (Exercise 18.2.1). For many years, the Tutte graph was

18.2 Nonhamiltonian Planar Graphs

479

Fig. 18.7. The Tutte graph

the only known example of a nonhamiltonian 3-connected cubic planar graph. But
then Grinberg (1968) discovered a simple necessary condition for a plane graph
to be hamiltonian. His discovery led to the construction of many nonhamiltonian
planar graphs.
Theorem 18.2 Grinberg’s Theorem
Let G be a plane graph with a Hamilton cycle C. Then
n


(i − 2)(φi − φi ) = 0

(18.2)

i=1

where φi and φi are the numbers of faces of degree i contained in Int C and Ext
C, respectively.
Proof Denote by E  the subset of E(G)\E(C) contained in Int C, and set m :=
|E  |. Then Int C contains exactly m + 1 faces (see Figure 18.8, where m = 3 and
the four faces all have degree four).
Therefore
n

φi = m + 1
(18.3)
i=1


Now each edge in E lies on the boundary of two faces in Int C, and each edge of
C lies on the boundary of exactly one face in Int C. Therefore
n

i=1

iφi = 2m + n

(18.4)

480

18 Hamilton Cycles
5
4

4
5

4

4
4

Fig. 18.8. An illustration for Grinberg’s Identity (18.2)

Using (18.3), we can eliminate m from (18.4) to obtain
n


(i − 2)φi = n − 2

(18.5)

(i − 2)φi = n − 2

(18.6)

i=1

Likewise,

n

i=1

Equations (18.5) and (18.6) now yield (18.2).



Equation (18.2) is known as Grinberg’s Identity. With the aid of this identity,
it is a simple matter to show, for example, that the Grinberg graph, depicted in
Figure 18.9, is nonhamiltonian. Suppose that this graph is hamiltonian. Noting

Fig. 18.9. The Grinberg graph

18.2 Nonhamiltonian Planar Graphs

481

that it only has faces of degrees ﬁve, eight, and nine, Grinberg’s Identity (18.2)
yields
3(φ5 − φ5 ) + 6(φ8 − φ8 ) + 7(φ9 − φ9 ) = 0
We deduce that

7(φ9 − φ9 ) ≡ 0 (modulo 3)

But this is clearly impossible, because the value of the left-hand side is 7 or −7,
depending on whether the unique face of degree nine lies in Int C or in Ext C.
Therefore the graph cannot be hamiltonian.
The Grinberg graph is an example of a nonhamiltonian 3-connected essentially
4-edge-connected cubic planar graph. Tutte (1956) showed, on the other hand,
that every 4-connected planar graph is hamiltonian. (Thomassen (1983b) found a
shorter proof of this theorem, but his proof is still too complicated to be presented
here. The basic idea is discussed in Section 18.6.)
In applying Grinberg’s Identity, the parities of the face degrees play a crucial role. This approach fails to provide examples of bipartite nonhamiltonian
3-connected cubic planar graphs. Indeed, Barnette (1969), and independently Kelmans and Lomonosov (1975), conjectured that there are no such graphs.

Barnette’s Conjecture
Conjecture 18.3 Every 3-connected cubic planar bipartite graph is hamiltonian.

Planarity is essential here. An example of a nonhamiltonian 3-connected cubic
bipartite graph was constructed by J. D. Horton (see Bondy and Murty (1976),
p.240). The smallest example known of such a graph was found independently by
Kelmans (1986, 1994) and Georges (1989). It is shown in Figure 18.10.
Historical note. Interestingly, and ironically, Grinberg’s Identity (18.2) was
known already to Kirkman (1881), some ninety years earlier. But Kirkman, convinced that every 3-connected cubic planar graph was hamiltonian, used it as a
tool in searching for Hamilton cycles in particular examples of such graphs.
In the next section, we derive various suﬃcient conditions for hamiltonicity.

Exercises
18.2.1
a) Show that no Hamilton cycle in the pentagonal prism (the graph G1 in Figure 18.11) can contain both of the edges e and e .
b) Using (a), show that no Hamilton cycle in the graph G2 can contain both of
the edges e and e .

482

18 Hamilton Cycles

Fig. 18.10. The Kelmans–Georges graph: a nonhamiltonian 3-connected cubic bipartite
graph

c) Using (b), show that every Hamilton cycle in the graph G3 must contain the
edge e.
d) Deduce that the Tutte graph (Figure 18.7) is nonhamiltonian.
e

e

e

G1

e

e

G2

G3

Fig. 18.11. Three steps in the construction of the Tutte graph

18.2.2 Give an example of a simple nonhamiltonian cubic planar graph of connectivity two.
18.2.3 Let G = Gk , where G0 is the plane graph K4 , and Gi the plane triangulation obtained from Gi−1 , i ≥ 1, by inserting a vertex in each face and joining it
to the three vertices on the boundary of the face. Let l be the circumference of G.
a) Show that n = 2 · (3k + 1) and l ≤ 2k+2 .
b) Deduce that l < cnlog 2/ log 3 for a suitable constant c.
(J.W. Moon and L. Moser)

18.3 Path and Cycle Exchanges

483

————— —————
18.2.4 Let G be a cubic plane graph which admits a Hamilton double cover (a
double cover by three Hamilton cycles).
a) Show that each of these Hamilton cycles induces the same 4-face-colouring of
G (see Exercise 11.2.5).
b) For i ≥ 1 and 1 ≤ j ≤
let φij be the number of faces of degree i assigned
4,
n
colour j. Show that
i=1 (i − 2)φij = (n − 2)/2, 1 ≤ j ≤ 4 (and thus is
independent of the colour j).
c) Deduce that no cubic planar bipartite graph on 0 (mod 4) vertices admits a
Hamilton double cover.
(H. Fetter)
d) Find an example of such a graph.
18.2.5
a) Using the fact that the Petersen graph, drawn in Figure 18.12a, has no Hamilton cycle, show that the graph in Figure 18.12b has no Hamilton cycle through
both of the edges e and f .
b) The graph shown in Figure 18.12c is a redrawing of the one in Figure 18.12b.
The Kelmans–Georges graph, depicted in Figure 18.10, is obtained from the
Petersen graph of Figure 18.12a by substituting two copies of the graph of
Figure 18.12c for the two edges e and f . Deduce from (a) that this graph has
no Hamilton cycle.
(A.K. Kelmans)
e

e
e

f
f
(a)

f
(b)

(c)

Fig. 18.12. Kelmans’ construction of the Kelmans–Georges graph

18.3 Path and Cycle Exchanges
In this section, we describe how paths and cycles can be transformed into other
paths and cycles by means of simple operations. These operations turn out to be

484

18 Hamilton Cycles

very helpful in searching for long paths and cycles (in particular, Hamilton paths
and cycles).
First, a little notation. If v is a vertex of a path P or cycle C with a speciﬁed
sense of traversal, we denote by v − and v + the predecessor and successor of v,
respectively, on P or C (provided that these vertices exist) (see Figure 18.13).

C
v− v

v−

v+

v
v+

P

(a)

(b)

Fig. 18.13. Predecessors and successors on a path P and a cycle C

This notation is extended to subsets S of V (P ) or V (C) as one would expect:
S − := {v − : v ∈ S} and

S + := {v + : v ∈ S}

Path Exchanges
A natural way of searching for a Hamilton path in a graph is as follows. Let x be
an arbitrary vertex. Suppose that an x-path xP y has already been found. If y is
adjacent to a vertex z which does not lie on P , we can simply extend P by adding
the vertex z and the edge yz. On the other hand, if z is a neighbour of y on P ,
but not the immediate predecessor of y, we can transform P to an x-path P  of
equal length by adding the edge yz to P (thereby forming a lollipop, the union of
a path and a cycle having exactly one common vertex) and deleting the edge zz +
(see Figure 18.14). This transformation from P to P  is called a path exchange. Of
course, if it so happens that z + is adjacent to a vertex not on P  , the path P  can
then be extended to a path longer than P .

x

z+

z

y

x

z

z+
P

P
Fig. 18.14. A path exchange

y

18.3 Path and Cycle Exchanges

485

Cycle Exchanges
There is also a simple way of transforming one cycle C into another cycle C  of
the same length. If there are nonconsecutive vertices x and y on C such that both
xy and x+ y + are edges of the graph, the cycle C  obtained by adding these two
edges to C, and deleting the edges xx+ and yy + from C, is said to be derived from
C by means of a cycle exchange (see Figure 18.15).
x

x+

x

x+

y+

y

C

C
y+

y
Fig. 18.15. A cycle exchange

Let us remark in passing that cycle exchanges lead to an obvious heuristic for
the Travelling Salesman Problem (2.6). If C is a Hamilton cycle in a weighted
graph (G, w), and
w(xy) + w(x+ y + ) < w(xx+ ) + w(yy + )
then the cycle C  will be an improvement on C.
Path and cycle exchanges are the key to establishing the existence of Hamilton
paths and cycles in many classes of graphs.
Dirac’s Theorem
Every complete graph on at least three vertices is evidently hamiltonian; indeed,
the vertices of a Hamilton cycle can be selected one by one, in an arbitrary order.
But suppose that our graph has considerably fewer edges. In particular, we may
ask how large the minimum degree must be in order to guarantee the existence of
a Hamilton cycle. The following theorem of Dirac (1952b) answers this question.
Theorem 18.4 Dirac’s Theorem
Let G be a simple graph of minimum degree δ, where δ ≥ n/2 and n ≥ 3. Then G
is hamiltonian.
Proof Form a 2-edge-coloured complete graph K with vertex set V by colouring
the edges of G blue and the edges of its complement G red. Let C be a Hamilton
cycle of K with as many blue edges as possible. We show that every edge of C is
blue, in other words, that C is a Hamilton cycle of G.

486

18 Hamilton Cycles

Suppose not, and let xx+ be a red edge of C, where x+ is the successor of x on
C. If S := NG (x) is the set of vertices joined to x by blue edges and T := NG (x+ )
is the set of vertices joined to x+ by blue edges, then
|S + | + |T | = |S| + |T | = dG (x) + dG (x+ ) ≥ 2δ ≥ n
/ S + and x+ ∈
/ T , we have S + ∪ T ⊆ V \ {x+ }, so
Because x+ ∈
|S + ∩ T | = |S + | + |T | − |S + ∪ T | ≥ n − (n − 1) = 1
Let y + ∈ S + ∩ T . Then the Hamilton cycle C  obtained from C by exchanging the
edges xx+ and yy + for the blue edges xy and x+ y + has more blue edges than C,
contradicting the choice of C (see Figure 18.15). Thus every edge of C is indeed
blue.

We remark that Theorem 18.4 can also be proved by means of path exchanges
(Exercise 18.3.1).
The Closure of a Graph
Observe that the proof of Theorem 18.4 does not make full use of the hypothesis
that δ ≥ n/2, but only of the weaker condition that the sum of the degrees of the
two nonadjacent vertices x and x+ is at least n. The same method of proof can
therefore be used to establish the following lemma.
Lemma 18.5 Let G be a simple graph and let u and v be nonadjacent vertices in
G whose degree sum is at least n. Then G is hamiltonian if and only if G + uv is
hamiltonian.
Proof If G is hamiltonian, so too is G + uv. Conversely, suppose that G + uv
has a Hamilton cycle C. Then, as in the proof of Theorem 18.4 (with x := u and
x+ := v), there is a cycle exchange transforming C to a Hamilton cycle C  of G.

Lemma 18.5 motivates the following deﬁnition. The closure of a graph G is the
graph obtained from G by recursively joining pairs of nonadjacent vertices whose
degree sum is at least n until no such pair remains. The order in which edges are
added to G in forming the closure has no eﬀect on the ﬁnal result (Exercise 18.3.2).
Lemma 18.6 The closure of G is well-deﬁned.



Figure 18.16 illustrates the formation of the closure G of a graph G on six
vertices. In this example, it so happens that the closure is complete. The pertinence
of the closure operation to the study of Hamilton cycles resides in the following
observation, due to Bondy and Chvátal (1976).
Theorem 18.7 A simple graph is hamiltonian if and only if its closure is hamiltonian.

18.3 Path and Cycle Exchanges

487

G

G
Fig. 18.16. The closure of a graph

Proof Apply Lemma 18.5 each time an edge is added in the formation of the
closure.

Theorem 18.7 has a number of interesting consequences. First, because all
complete graphs on at least three vertices are evidently hamiltonian, we obtain
the following result.
Corollary 18.8 Let G be a simple graph on at least three vertices whose closure
is complete. Then G is hamiltonian.

Consider, for example, the graph of Figure 18.17. One readily checks that its
closure is complete. By Corollary 18.8, this graph is therefore hamiltonian. It is
perhaps interesting to note that the graph of Figure 18.17 can be obtained from the
graph of Figure 18.2 by altering just one end of one edge, and yet we have results
(Corollary 18.8 and Theorem 18.1) which tell us that this graph is hamiltonian
whereas the other is not.

Fig. 18.17. A graph whose closure is complete

Corollary 18.8 can be used to derive various suﬃcient conditions for a graph to
be hamiltonian in terms of its vertex degrees. For example, because the closure is
clearly complete when δ ≥ n/2, Dirac’s Theorem (18.4) is an immediate corollary.
Chvátal (1972) extended Dirac’s Theorem to a wider class of graphs.

488

18 Hamilton Cycles

Theorem 18.9 Let G be a simple graph with degree sequence (d1 , d2 , . . . , dn ),
where d1 ≤ d2 ≤ · · · ≤ dn and n ≥ 3. Suppose that there is no integer k < n/2
such that dk ≤ k and dn−k < n − k. Then G is hamiltonian.
Proof Let G be the closure of G. We show that G is complete. The conclusion
then follows from Corollary 18.8. We denote the degree of a vertex v in G by d (v).
Assume, to the contrary, that G is not complete, and let u and v be two
nonadjacent vertices in G with
d (u) ≤ d (v)


(18.7)



and d (u) + d (v) as large as possible. Because no two nonadjacent vertices in G
can have degree sum n or more, we have
d (u) + d (v) < n

(18.8)

Now denote by S the set of vertices in V \ {v} which are nonadjacent to v
in G , and by T the set of vertices in V \ {u} which are nonadjacent to u in G .
Clearly
|S| = n − 1 − d (v), and |T | = n − 1 − d (u)

(18.9)

Furthermore, by the choice of u and v, each vertex of S has degree at most d (u)
and each vertex of T ∪ {u} has degree at most d (v). Setting k := d (u) and using
(18.8) and (18.9), we ﬁnd that G has at least k vertices of degree not exceeding k
and at least n−k vertices of degree strictly less than n−k. Because G is a spanning
subgraph of G , the same is true of G; that is, dk ≤ k and dn−k < n − k. But this
is contrary to the hypothesis, because k < n/2 by (18.7) and (18.8). We conclude
that the closure G of G is indeed complete, and hence that G is hamiltonian, by
Corollary 18.8.

One can often deduce that a given graph is hamiltonian simply by computing
its degree sequence and applying Theorem 18.9. This method works with the graph
of Figure 18.17, but not with the graph G of Figure 18.16, even though the closure
of the latter graph is complete. From these examples, we see that Theorem 18.9 is
stronger than Theorem 18.4 but not as strong as Corollary 18.8.
The Chvátal–Erdős Theorem
We conclude this section with a suﬃcient condition for hamiltonicity involving a
remarkably simple relationship between the stability number and the connectivity,
due to Chvátal and Erdős (1972). Its proof makes use of bridges, introduced in
Section 10.4.
Theorem 18.10 The Chvátal–Erdős Theorem
Let G be a graph on at least three vertices with stability number α and connectivity
κ, where α ≤ κ. Then G is hamiltonian.

18.3 Path and Cycle Exchanges

489

Proof Let C be a longest cycle in G. Suppose that C is not a Hamilton cycle. Let
B be a proper bridge of C in G, and denote by S its set of vertices of attachment
to C. For any two vertices x and y of S, there is a path xP y in B; this path is
internally disjoint from C and of length at least two (see Figure 18.18). Because
C is a longest cycle, it follows that x and y are not consecutive vertices of C.
For the same reason, x+ and y + are nonadjacent; otherwise, the cycle obtained
by exchanging the edges xx+ and yy + of C for the path xP y and the edge x+ y +
would be longer than C. Thus S + is a stable set of G, and is disjoint from S.
x+

x

B
P

C
y+

y

Fig. 18.18. Proof of the Chvátal–Erdős Theorem (18.10)

Let z be an internal vertex of B. Every neighbour of z on C belongs to S.
Because S and S + are disjoint, S + ∪{z} is a stable set. This implies that |S + | < α.
On the other hand, S is a vertex cut of G because B − S is a component of G − S,
so |S| ≥ κ. Hence
κ ≤ |S| = |S + | < α
But this contradicts the hypothesis. Therefore C is indeed a Hamilton cycle of G.

Theorem 18.10 was generalized in a very nice way by Kouider (1994). A Hamilton cycle is a spanning cycle, that is, one which covers the entire vertex set of the
graph. Kouider proved that the vertex set of any 2-connected graph G can be covered by a family of at most α/κ cycles. When α ≤ κ, this is just Theorem 18.10.
In Section 19.3, we discuss an analogous theorem for digraphs.

490

18 Hamilton Cycles

Exercises
18.3.1 Let G be a simple graph on at least three vertices in which the degree sum
of any two nonadjacent vertices is at least n. Consider a vertex x of G and an
x-path P .
a) Show that P can be transformed to a Hamilton path Q of G, by means of path
extensions and path exchanges.
b) By considering the degree sum of the two ends of Q, deduce that G contains
a Hamilton cycle.
18.3.2 Prove Lemma 18.6.
18.3.3
a) Let G be a nontrivial simple graph with degree sequence (d1 , d2 , . . . , dn ), where
d1 ≤ d2 ≤ . . . ≤ dn . Suppose that there is no integer k < (n + 1)/2 such that
dk < k and dn−k+1 < n − k. Show that G is traceable.
b) Deduce that every self-complementary graph is traceable.
(C.R.J. Clapham)
18.3.4 Show that a simple graph and its complement cannot both satisfy the
hypotheses of Theorem 18.9.
(A.V. Kostochka and D.B. West)
18.3.5 Let G be a simple graph of minimum degree δ. Show that:
a) G contains a path of length 2δ if G is connected and δ ≤ (n − 1)/2,
b) G is traceable if δ ≥ (n − 1)/2.
18.3.6 Let G be a graph with stability number α and connectivity κ, where α ≤
κ + 1. Show that G is traceable.
————— —————
18.3.7 Let G be a simple graph, and let X be the set of vertices of G of degree at
least n/2. If |X| ≥ 3, show that G has a cycle which includes X.
(R. Shi)
18.3.8 A graph G is degree-majorized by a graph H if v(G) = v(H) and the
degree sequence of G (in nondecreasing order) is majorized by that of H (see
Exercise 12.2.5).
a) Let m and n be positive integers with m < n/2 and n ≥ 3. Show that the
graph Km ∨ (Kn−2m + Km ) is nonhamiltonian.
b) Show that every nonhamiltonian simple graph on n vertices, where n ≥ 3, is
degree-majorized by Km ∨ (Kn−2m + Km ) for some m < n/2. (V. Chvátal)
18.3.9 Let G := G[X, Y ] be a simple bipartite graph, where |X| = |Y | ≥ 2, with
degree sequence (d1 , d2 , . . . , dn ), where d1 ≤ d2 ≤ · · · ≤ dn . Suppose that there
is no integer k ≤ n/4 such that dk ≤ k and dn/2 ≤ n/2 − k. Show that G is
hamiltonian.

18.3 Path and Cycle Exchanges

491

18.3.10



+ 1 and n ≥ 3. Show that G is
a) Let G be a simple graph with m > n−1
2
hamiltonian.
(O.

 Ore)
+1
b) Show that the only nonhamiltonian simple graphs with n vertices and n−1
2
edges are the graphs K1 ∨ (Kn−2 + K1 ) and, for n = 5, the graph K2 ∨ K3 .

18.3.11
a) Let G be a Hamilton-connected graph with n ≥ 4. Show that m ≥ 3n/2.
b) For all even n ≥ 4, construct a Hamilton-connected graph G with m = 3n/2.
c) For all odd n ≥ 5, construct a Hamilton-connected graph G with m = (3n +
1)/2.
(J.W. Moon)
18.3.12 Deduce from Theorem 18.10 the following two results.
a) Let G be a simple graph with n ≥ 3 in which the degree sum of any two
nonadjacent vertices is at least n. Then G is hamiltonian. (This is also a direct
consequence of Corollary 18.8.)
(O. Ore)
b) Let G be a simple k-regular graph on 2k + 1 vertices, where k ≥ 2. Then G is
hamiltonian.
(C.St.J.A. Nash-Williams)
18.3.13 A vertex v is insertable into a path P if v is adjacent to two consecutive
vertices z, z + of P . Let xP y and uQv be disjoint paths. The path Q is absorbable
into P if there is a path with vertex set V (P ) ∪ V (Q). Suppose that each vertex
of Q is insertable into P . Show that Q is absorbable into P .
(A. Ainouche)
18.3.14 Let G be a connected graph which contains a path of length k, and in
which every such path is contained in a cycle of length at least l.
a) Show that each path in G of length less than k is contained in a path of length
k.
b) Deduce that each path in G of length less than k is contained in a cycle of
length at least l.
(T.D. Parsons)
18.3.15
a) Let G be a simple 2-connected graph, and let xP y be a longest path in G. For
a vine (xi Qi yi : 1 ≤ i ≤ r) on P , consider the cycles Ci := Pi ∪ Qi , where
Pi := xi P yi , 1 ≤ i ≤ r, and the cycle C := ri=1 Ci . Suppose the vine chosen
so that:
 r is as small as possible,
 subject to this condition, |V (C) ∩ V (P )| is as large as possible.
Show that:
i) {x} ∪ {y} ∪ N (x) ∪ N (y) ⊆ V (C),
ii) C is either a Hamilton cycle of G or a cycle of length at least d(x) + d(y).
b) Deduce the following statements.
i) If G is a simple 2-connected graph with δ ≤ n/2, then G contains a cycle
of length at least 2δ.
(G.A. Dirac)

492

18 Hamilton Cycles

ii) If G := G(x, y) is a simple 2-connected graph such that d(v) ≥ k for all
v = x, y, then G contains an xy-path of length at least k.
(P. Erdős and T. Gallai)
18.3.16 Let G be a claw-free graph.
a) Show that the subgraph of G induced by the neighbours of any vertex is either
connected (Type 1) or has exactly two components, both of which are complete
(Type 2).
b) Let v be a vertex of Type 1 in G whose neighbourhood is not a clique, and
let G be a graph obtained from G by adding an edge joining two nonadjacent
neighbours of v. Show that G is hamiltonian if and only if G is hamiltonian.
c) The Ryjáček closure of G is the graph H obtained by recursively applying the
operation described in (b) until the neighbourhood of every vertex of Type 1
is a clique. Show that:
i) H is the line graph of a triangle-free graph,
ii) H is hamiltonian if and only if G is hamiltonian.
(Z. Ryjáček)

18.4 Path Exchanges and Parity
In the previous section, we saw that a simple graph each vertex of which is adjacent
to more than half of the other vertices contains a Hamilton cycle. More surprising,
perhaps, is the fact that one can say something about Hamilton cycles in cubic
graphs. Such graphs need not have any Hamilton cycles at all (the Petersen and
Coxeter graphs being two familiar examples). However, as C. A. B. Smith proved,
each edge of a cubic graph lies in an even number of Hamilton cycles (see Tutte
(1946)). From this one can deduce that if a cubic graph has one Hamilton cycle,
it has at least three of them (Exercise 18.4.1a). Smith’s Theorem was extended
by Thomason (1978) using the exchange operation between x-paths introduced in
Section 18.1. We now describe his idea.
The Lollipop Lemma
Let G be a graph (not necessarily simple). The x-path graph of G is the graph
whose vertices are the longest x-paths of G, two such paths being adjacent if and
only if they are related by a path exchange (see Figure 18.19). Thomason (1978)
made use of this concept to establish a basic property of x-paths.
Theorem 18.11 The Lollipop Lemma
Let G be a connected graph on at least two vertices, and let x be a vertex of G.
Then the number of longest x-paths of G that terminate in a vertex of even degree
is even.
Proof Let H denote the x-path graph of G and let P be a longest x-path of G.
If P terminates in y,

18.4 Path Exchanges and Parity
x

a

xcbda

b
c

d
G

xadbc

xcbad

xcdab

xbcda

xbadc

xadcb

xabcd

(a)

493

xcdba

xabdc

(b)
Fig. 18.19. (a) A graph G, (b) the x-path graph of G

dH (P ) = dG (y) − 1
Thus y is of even degree in G if and only if P is of odd degree in H. Because the
number of vertices of odd degree in H is even by Corollary 1.2, the number of
longest x-paths in G that terminate in a vertex of even degree is also even.

Corollary 18.12 Let G be a graph on at least three vertices, and let x and y be
two vertices of G. Suppose that each vertex of G other than x and y is of odd
degree. Then the number of Hamilton xy-paths in G is even. In particular, if G is
a graph in which all vertices are of odd degree, then each edge of G lies in an even
number of Hamilton cycles.
Proof We may assume that G has at least one Hamilton xy-path, otherwise the
conclusion is trivial. Set G := G − y. The longest x-paths of G are Hamilton
paths of G , and each Hamilton xy-path of G is an extension of such a path. Let
xP  z be a Hamilton path of G . If z is of odd degree in G , the number of edges
between y and z is even, because z is of odd degree in G. Thus P  gives rise to
an even number of Hamilton xy-paths of G in this case. On the other hand, if z
is of even degree in G , then P  gives rise to an odd number of Hamilton xy-paths
of G. But, by Theorem 18.11, the number of Hamilton x-paths of G ending in a
vertex of even degree is even. Hence the total number of Hamilton xy-paths in G
is even.

A special case of Corollary 18.12 is the theorem of C. A. B. Smith referred to
earlier.
Theorem 18.13 Smith’s Theorem
In any cubic graph, each edge lies in an even number of Hamilton cycles.



The results of this section give rise to intriguing algorithmic questions. Smith’s
Theorem implies that every cubic graph with one Hamilton cycle has a second
Hamilton cycle. Chrobak and Poljak (1988) asked how hard it is to ﬁnd a second
Hamilton cycle in such a graph when supplied with one of them. The answer is
unknown. In particular, no polynomial-time algorithm has been devised for solving
this problem.

494

18 Hamilton Cycles

Uniquely Hamiltonian Graphs
A graph is called uniquely hamiltonian if it has exactly one Hamilton cycle. Corollary 18.12 implies that no regular graph of odd degree is uniquely hamiltonian.
Sheehan (1975) conjectured that the same is true of regular simple graphs of even
degree four or more.
Sheehan’s Conjecture can be restricted without loss of generality to 4-regular
graphs, as stated below. For if C is a Hamilton cycle of G, then the spanning
subgraph G \ E(C) is regular of positive even degree, and hence has a 2-factor F
(Exercise 16.4.16b). The graph H := F ∪ C is a 4-regular spanning subgraph with
a Hamilton cycle C. If we could prove that H had a second Hamilton cycle, then
G would also have this second Hamilton cycle.

Sheehan’s Conjecture
Conjecture 18.14 Every hamiltonian 4-regular simple graph has at least two
Hamilton cycles.

Note that the conditions of simplicity and regularity here are essential. Examples of uniquely hamiltonian 4-regular graphs with multiple edges and of uniquely
hamiltonian simple graphs of minimum degree four were constructed by Fleischner
(1994, 2007).
By applying the methods described in this chapter, Thomassen (1998) obtained
a general suﬃcient condition for the existence of at least two Hamilton cycles in a
hamiltonian graph. Thomassen’s argument is based on the following concepts.
Consider a (not necessarily proper) 2-edge-colouring of a graph G in red and
blue. A set S of vertices of G is called red-stable if no two vertices of S are joined
by a red edge, and blue-dominating if every vertex of V \ S is adjacent by a blue
edge to at least one vertex of S.
Theorem 18.15 Let G be a graph and let C be a Hamilton cycle of G. Colour the
edges of C red and the remaining edges of G blue. Suppose that there is a red-stable
blue-dominating set S in G. Then G has a second Hamilton cycle.
Proof Let S be a red-stable blue-dominating set, and let T := S − ∪S + . Consider
the spanning subgraph H of G the edge set of which consists of all red edges and,
for each vertex y ∈ T , one blue edge joining y to a vertex of S. In H, each vertex
of T has degree three, whereas every other vertex of V \ S has degree two. Because
S is red-stable, it follows that H − S has exactly |S| components, each of which is
a path whose ends are in T . By Theorem 18.1, every Hamilton cycle of H includes
all of these paths. Let e = xy ∈ E(C), where x ∈ S and y ∈ T . By Theorem 18.11,
the number of longest x-paths of H \ e that terminate in a vertex of even degree
is even. But the Hamilton path C \ e is one such path, because y has degree two

18.4 Path Exchanges and Parity

495

in H \ e. Let P be another such path. Then P + e is a second Hamilton cycle of
H, hence also of G.

One easy consequence of Theorem 18.15 is the following result for bipartite
graphs.
Corollary 18.16 Let G[X, Y ] be a simple hamiltonian bipartite graph in which
each vertex of Y has degree three or more. Then G has at least two Hamilton
cycles.
Proof Let C be a Hamilton cycle of G. Colour the edges of C red and the
remaining edges of G blue. Each vertex of Y is then incident to at least one blue
edge, so X is a red-stable blue-dominating set in G. By Theorem 18.15, G has a
second Hamilton cycle.

Thomassen (1998) applied the Local Lemma (Theorem 13.12) to show that if
k is suﬃciently large, then every simple hamiltonian k-regular graph fulﬁlls the
requirements of Theorem 18.15 and hence has at least two Hamilton cycles.
Theorem 18.17 For k ≥ 73, every simple hamiltonian k-regular graph has at
least two Hamilton cycles.
Proof Let G be a simple hamiltonian k-regular graph, and let C be a Hamilton
cycle of G. As in Theorem 18.15, we colour the edges of C red and the remaining
edges of G blue. We now select each vertex of G independently, each with probability p, so as to obtain a random subset S of V . We show that, for an appropriate
choice of p, this set S is, with positive probability, a red-stable blue-dominating
set. The theorem then follows on applying Theorem 18.15.
For each element of E(C) ∪ V (G), we deﬁne a ‘bad’ event, as follows.
 Ae : both ends of edge e of C belong to S.
 Bv : neither vertex v of G nor any vertex joined to v by a blue edge belongs to
S.
We have p(Ae ) = p2 and P (Bv ) = (1 − p)k−1 , because each vertex v has
blue degree k − 2. We deﬁne a dependency graph H for these events, with vertex
set E(C) ∪ V (G), by declaring two vertices to be adjacent in H if the sets of
vertices involved in the corresponding events intersect. The vertices involved in
Ae , namely the two ends of e, are each involved in one other event Af and k − 1
events Bv . Thus e has degree at most 2 + (2k − 2) in the dependency graph H.
The k − 1 vertices involved in Bv are each involved in two events Ae , and are
together involved in a total of at most (k − 2)2 other events Bw . Thus v has degree
at most (2k − 2) + (k − 2)2 in H. In order to apply the Local Lemma, we must
therefore select a value for p and numbers x (associated with each event Ae ) and
y (associated with each event Bv ) such that:
p2 ≤ x(1 − x)2 (1 − y)2k−2

and

(1 − p)k−1 ≤ y(1 − x)2k−2 (1 − y)(k−2)

We may simplify these expressions by setting x := a2 and y := bk−1 :

2

496

18 Hamilton Cycles

p ≤ a(1 − a2 )(1 − bk−1 )k−1

and

1 − p ≤ b(1 − a2 )2 (1 − bk−1 )k−3

Thus
1 ≤ a(1 − a2 )(1 − bk−1 )k−1 + b(1 − a2 )2 (1 − bk−1 )k−3
For k ≥ 73, a solution to this inequality is obtained by setting a = .25 and b = .89,
resulting in a value of .2305 for p.

The bound k ≥ 73 in Theorem 18.17 was reduced to k ≥ 23 by Haxell et al.
(2007). However, Sheehan’s Conjecture remains open.
To conclude this discussion of Sheehan’s Conjecture, let us note a more recent
conjecture, due to Fleischner (2007), which bears a close resemblance to it.
Conjecture 18.18 Fleischner’s Conjecture
Every hamiltonian 4-connected graph has at least two Hamilton cycles.
This conjecture holds for planar graphs (see Section 18.6).

Exercises
18.4.1
a) Show that:
i) every hamiltonian cubic graph has at least three Hamilton cycles,
ii) both the complete graph K4 and the generalized Petersen graph P2,9 have
exactly three Hamilton cycles.
b) For each integer n ≥ 2, construct a simple cubic graph on 2n vertices with
exactly three Hamilton cycles.
18.4.2 Let G be a cubic hamiltonian graph and let e be an edge of G. Form a
bipartite graph H[C, F], where C is the set of proper 3-edge colourings of G and
F is the set of even 2-factors of G (that is, 2-factors all components of which are
even cycles) that include the edge e, with c ∈ C joined to F ∈ F if and only if F
is induced by the union of two of the colours in the 3-edge-colouring c.
a) Show that:
i) every vertex in C has degree two,
ii) a vertex F ∈ F with k components has degree 2k−1 .
b) Deduce Smith’s Theorem (18.13).
18.4.3 Consider the graph G of Figure 18.20.
a) Show that:
i) the edge e lies in no Hamilton cycle and no Hamilton xy-path of G,
ii) G has exactly one Hamilton cycle and exactly one Hamilton xy-path.
b) Deduce that:
i) the graph G + xy, in which one vertex is of degree four and the rest are of
degree three, has exactly two Hamilton cycles,

18.4 Path Exchanges and Parity

497

ii) the graph H of Figure 18.20, in which two vertices are of degree four and
the rest are of degree three, has a unique Hamilton cycle.
(R.C. Entringer and H. Swart)
x

e

y
G

H

Fig. 18.20. Construction of a uniquely hamiltonian almost cubic graph

————— —————
18.4.4 Show that every cubic bipartite graph on at least four vertices has an even
number of Hamilton cycles.
(A. Kotzig)
18.4.5
a) Let G be a simple cubic graph. Show that the line graph of G admits a Hamilton
decomposition if and only if G is 3-edge-colourable.
(A. Kotzig)
b) Deduce that the line graph of the Petersen graph is a 4-connected 4-regular
graph which admits no Hamilton decomposition.
18.4.6
a) Let G be a 4-regular plane graph that admits a decomposition into two Hamilton cycles, C and D. Denote by F11 , F12 , F21 , and F22 the sets of faces of
G interior to both C and D, interior to C but exterior to D, interior to D
but exterior to C, and exterior to both C and D, respectively.
Show that

g(F11 ) = g(F22 ) and g(F12 ) = g(F21 ), where g(Fij ) := f ∈Fij (d(f ) − 2).
b) i) Draw the medial graph of the Herschel graph (Figure 18.1b).
ii) Deduce from (a) that if G is a plane graph and if either G or G∗ fails to
satisfy Grinberg’s Identity, then its medial graph has no Hamilton decomposition.
iii) Conclude that the medial graph of the Herschel graph is a 4-connected
4-regular plane graph which admits no Hamilton decomposition.
(J.A. Bondy and R. Häggkvist)

498

18 Hamilton Cycles

18.4.7
a) Let G be a 4-regular graph on at least three vertices, and let e and f be two
edges of G. Show that:
i) the number of decompositions of G into two Hamilton cycles, one containing e and the other containing f , is even,
ii) the number of decompositions of G into two Hamilton cycles, one of which
contains both e and f , is even.
b) Deduce that the number of decompositions of G into two Hamilton cycles is
even.
c) Deduce also that a 2k-regular graph with one Hamilton decomposition has at
(A.G. Thomason)
least 3k−1 (k − 1)! such decompositions.
18.4.8 By applying Exercise 18.4.7, show that, for k ≥ 4, the only uniquely kedge-colourable simple graph is the star K1,k .
(A.G. Thomason)
18.4.9 Deduce Theorem 18.15 from Corollary 18.16.

(C. Thomassen)

18.4.10 Let G be a graph and x a vertex of G. For k ≥ 1, denote by pk the number
of x-paths in G of length k and by qk the number of x-paths in G of length k ending
in a vertex of even degree.
a) Show that pk ≡ qk−1 (mod 2).
b) Deduce that:
i) if G is even, then pk is even for all k ≥ 1,
ii) if G is odd, then pk is even for all k ≥ 2.
(J.A. Bondy and F. Halberstam)
18.4.11 Let G be a graph and let f be a nonnegative integer-valued function on
V . An f -tree of G is an f -factor which is a spanning tree of G.
a) Suppose that d(v)−f (v) is odd for all v ∈ V . Show that G has an even number
of f -trees.
(K.A. Berman)
b) Let g be a nonnegative integer-valued function on V . Show that the number
of decompositions of G into an f -tree and a g-tree is even. (K.A. Berman)
18.4.12
a) Let G be a path or cycle of length n. Show that the composition G[2K1 ] is
decomposable into two cycles of length 2n.
b) Deduce that if G admits a decomposition into Hamilton cycles, then G[2K1 ]
admits
k a decomposition into any list of even 2-factors F1 , F2 , . . . , Fk such that:

i=1 e(Fi ) = 4e(G),
 each Fi is isomorphic to a subgraph of G[2K1 ],
 each subgraph of G[2K1 ] occurs as an Fi an even number of times (possibly
zero).
c) Show that K4n+2 \M ∼
= K2n+1 [2K1 ], where M is a perfect matching of K4n+2 ,
and that K4n,4n ∼
= K2n,2n [2K1 ].

18.5 Hamilton Cycles in Random Graphs

499

d) Deduce that each of the graphs in (c) admits a decomposition into any list
F1 , F2 , . . . , Fk of even 2-factors satisfying the three conditions listed in (b).
(R. Häggkvist)

18.5 Hamilton Cycles in Random Graphs
The graph Kk,k+1 shows that the bound on the minimum degree required by
Dirac’s Theorem cannot be reduced. This graph is, however, far from typical. For
example, its stability number is k + 1, roughly half its order, whereas the stability
number of a random graph G ∈ Gn,1/2 is almost surely close to 2 log2 n, just twice
the logarithm of its order (see Exercise 13.2.11 and Theorem 13.9). We show here
that a random graph need only have a very small average degree to be almost
surely hamiltonian. The proof is due to Pósa (1976), and makes clever use of path
exchanges.
Pósa’s Lemma
As we have seen, the naı̈ve approach to ﬁnding a long path in a graph is to grow a
maximal x-path P and consider the x-paths obtainable from P by means of path
exchanges. If one of these is not maximal, then it can be extended to a longer xpath. The procedure may then be repeated. Although this approach fails badly on
certain graphs, Pósa (1976) proved that it works remarkably well on most graphs.
His argument hinges on the following result.
Theorem 18.19 Pósa’s Lemma
Let xP y be a longest path in a graph G. Denote by P the set of all x-paths of G
obtainable from P by path exchanges, by T the set of all terminal vertices of paths
in P, and by T − and T + , respectively, the sets of vertices immediately preceding
and following the vertices of T on P . Deﬁne S := V \ (T ∪ T − ∪ T + ). Then
e(S, T ) = 0.
Proof Let u ∈ S and v ∈ T . By the deﬁnition of T , there exists a path xQv in
P. If u ∈ V (G) \ V (P ), then u and v cannot be adjacent because Q is a longest
path in G. So suppose that u ∈ V (P ). Then u has the same neighbours on each
path in P, because an elementary exchange that removed one of these neighbours
would, at the same time, establish either it or u as an element of T , contradicting
the deﬁnition of S. If u and v were adjacent, an elementary exchange applied to Q
would yield a x-path terminating in a neighbour of u on P , a contradiction. Thus,
in both cases, u and v are nonadjacent.

We now apply Pósa’s Lemma to show that the set T deﬁned there is almost
surely large when G is a random graph whose edge probability is suﬃciently high.
Corollary 18.20 Let G ∈ Gn,p , where p = 9 log n/n, and let T be as deﬁned in
the statement of Pósa’s Lemma. Then P (|T | < n/4)  n−1 .

500

18 Hamilton Cycles

Proof Suppose that |T | = k. Then |T − | ≤ k and |T + | ≤ k. By Theorem 18.19,
there is therefore a subset S of V , disjoint from T , such that |S| ≥ n − 1 − 3k
and e(S, T ) = 0. The probability that G has a set of k vertices
all of which are

nonadjacent to a set of n − 1 − 3k vertices is at most nk (1 − p)k(n−1−3k) . Thus
the probability that T has at most l := n/4 − 1 vertices is at most
l  
l
l



n
(1 − p)k(n−1−3k) <
nk e−pk(n−1−3k) <
(ne−pn/4 )k
k
k=1
k=1
k=1


l

1 − n−5l/4
 n−1
=
(n−5/4 )k = n−5/4
−5/4
1
−
n
k=1



Our goal is to show that a random graph in Gn,p , where p = 10 log n/n, is
almost surely hamiltonian. We do so in two stages, establishing ﬁrst of all that
such a graph is almost surely traceable.
Theorem 18.21 Let G ∈ Gn,p , where p = 9 log n/n. Then G is almost surely
traceable.
Proof For v ∈ V , the vertex-deleted subgraph G − v is a random graph on n − 1
vertices with independent edge probability p. Let Tv be the set T as deﬁned in the
statement of Pósa’s Lemma, applied to this random graph G − v. We consider the
following two events.
 Av : |Tv | < (n − 1)/4.
 Bv : |Tv | ≥ (n − 1)/4 and there exists a longest path in G which does not
include v.
By Corollary 18.20, P (Av )  n−1 . On the other hand, if |Tv | ≥ (n − 1)/4 and
there is a longest path in G which does not include v, none of the longest paths
in G − v which terminate in a vertex of Tv can be extended to include v, so v is
nonadjacent to each vertex of Tv . Thus
P (Bv ) ≤ (1 − p)
and



(n−1)/4

< e−p

(n−1)/4

 n−2

(P (Av ) + P (Bv )) ≤ n (P (Av ) + P (Bv )) → 0

v∈V

We conclude that almost surely every vertex of G lies on every longest path. But
this implies that almost surely G is traceable.

Theorem 18.22 Let G ∈ Gn,p , where p = 10 log n/n. Then G is almost surely
hamiltonian.
Proof Let H = G1 ∪ G2 , where Gi ∈ Gn,pi , i = 1, 2, with p1 = 9 log n/n and
p2 = log n/n. Then H ∈ Gn,p , where p = 10 (log n/n) − 9 (log n/n)2 . It suﬃces to
show that H is almost surely hamiltonian.

18.6 Related Reading

501

By Theorem 18.21, the random graph G1 is almost surely traceable. Let T1
be the set T as deﬁned in the statement of Pósa’s Lemma, applied to G1 . By
Corollary 18.20, almost surely |T1 | ≥ n/4. Let u be the initial vertex of the
Hamilton paths in G1 terminating in T1 . The probability that u is joined in G2 to
no vertex of T1 is at most (1 − p2 ) n/4 . Since
(1 − p2 )

n/4

< e−p2

n/4

→ 0 as n → ∞

almost surely u is joined in G2 to at least one vertex of T1 , resulting in a Hamilton

cycle in H = G1 ∪ G2 .

Exercises
18.5.1 Let G be a simple graph and let k and l be integers, where k ≥ −1, l ≥ 1
and k ≤ l. Suppose that d(X) ≥ 2|X| + k for every nonempty set X of vertices
such that |X| ≤ (l − k + 1)/3 . Show that G contains a path of length l.
————— —————

18.6 Related Reading
The Bridge Lemma
We remarked in Section 18.2 that every 4-connected planar graph is hamiltonian.
Tutte (1956) proved this theorem by establishing inductively the following stronger
assertion concerning bridges in plane graphs.
The Bridge Lemma
Let G be a 2-connected plane graph, e an edge of G, C  and C  the facial cycles of
G which include e, and e any edge of C  . Then there is a cycle C in G including
both e and e such that:
i) each bridge of C in G has either two or three vertices of attachment,
ii) each bridge of C in G that includes an edge of C  or C  has exactly two vertices
of attachment.
A cycle satisfying the properties described in the Bridge Lemma is called a
Tutte cycle. The Bridge Lemma implies not only Tutte’s theorem but also several other interesting results on cycles in planar graphs, including the truth of
Fleischner’s Conjecture (18.18) for planar graphs. Reﬁnements and variants of
the Bridge Lemma were employed by Thomassen (1983b) to show that every
4-connected planar graph is Hamilton-connected (see also Sanders (1997)), by
Thomas and Yu (1994) to extend Tutte’s theorem to graphs embeddable on the
projective plane, and by Chen and Yu (2002) to prove that every 3-connected planar graph on n vertices has a cycle of length at least cnγ for some positive constant
c, where γ = log 2/ log 3. (This bound is best possible in view of the constructive
upper bound obtained by Moon and Moser (1963), see Exercise 18.2.3).

502

18 Hamilton Cycles

The Hopping Lemma
As Pósa’s Lemma (Theorem 18.19) illustrates, the approach of iterating path exchanges can be highly eﬀective. This technique was ﬁrst employed, in the framework of cycles, by Woodall (1973), who proved the following theorem.
The Hopping Lemma
Let G be a graph and C a longest cycle of G such that H := G − V (C) has as few
components as possible. Suppose that some component of H is an isolated vertex
x. Set X0 := {x} and Y0 := N (x), and deﬁne recursively sets Xi , Yi , i ≥ 1, by
−
+
∩ Yi−1
)
Xi := Xi−1 ∪ (Yi−1

and

Yi := N (Xi )

Then X := ∪∞
i=0 Xi is a stable set and N (X) ⊆ V (C).
As with the Bridge Lemma, there exist a number of variants and extensions of
the Hopping Lemma. It was developed by Woodall (1973) in order to prove that a
simple 2-connected graph G of minimum degree at least (n + 2)/3 is hamiltonian
if d(X) ≥ (n + |X| − 1)/3 for all subsets X of V with 2 ≤ |X| ≤ (n + 1)/2. Jackson
(1980) applied it to show that every 2-connected d-regular graph G with d ≥ n/3
is hamiltonian; see also Broersma et al. (1996). A variant of the Hopping Lemma
was devised by Häggkvist and Thomassen (1982) in order to establish a theorem
on cycles containing speciﬁed edges in k-connected graphs; see also Kawarabayashi
(2002).

Long Paths and Cycles
As we have seen throughout this chapter, investigations into Hamilton cycles inevitably lead to the study of long paths and cycles. For further information on
this topic, we refer the reader to the surveys by Bondy (1995a), Broersma (2002),
Ellingham (1996), and Gould (2003).

19
Coverings and Packings in Directed Graphs

Contents
19.1 Coverings and Packings in Hypergraphs . . . . . . . . . . . . 503
Coverings and Decompositions . . . . . . . . . . . . . . . . . . . . . . . 504
Packings and Transversals . . . . . . . . . . . . . . . . . . . . . . . . . . 504
Min–Max Theorems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 504
The Erdős–Pósa Property . . . . . . . . . . . . . . . . . . . . . . . . . . . 505
19.2 Coverings by Directed Paths . . . . . . . . . . . . . . . . . . . . . . 507
The Gallai–Milgram Theorem . . . . . . . . . . . . . . . . . . . . . . . 507
Berge’s Path Partition Conjecture . . . . . . . . . . . . . . . . . . 510
The Path Partition Conjecture . . . . . . . . . . . . . . . . . . . . . . 510
19.3 Coverings by Directed Cycles . . . . . . . . . . . . . . . . . . . . . . 512
Coherent Cyclic Orders . . . . . . . . . . . . . . . . . . . . . . . . . . . . 512
The Bessy–Thomassé Theorem . . . . . . . . . . . . . . . . . . . . . . . 514
Cycle Coverings and Ear Decompositions . . . . . . . . . . . . 516
19.4 Packings of Branchings . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
Edmonds’ Branching Theorem . . . . . . . . . . . . . . . . . . . . . . . 518
19.5 Packings of Directed Cycles and Directed Bonds . . . . 520
Directed Bonds and Cuts . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521
The Lucchesi–Younger Theorem . . . . . . . . . . . . . . . . . . . . . 521
Woodall’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524
19.6 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526
Packing T-Cuts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526

19.1 Coverings and Packings in Hypergraphs
In Chapter 3, we introduced the notion of a covering of the edge set of a graph
by subgraphs. One may of course consider other notions of covering, for instance
covering the vertex set by subgraphs (see, for example, the extension of Theorem 18.10 noted at the end of Section 18.3). And, naturally, the same ideas apply
equally well to directed graphs. The language of hypergraphs provides a convenient
general setting in which to discuss these and related notions.

504

19 Coverings and Packings in Directed Graphs

Coverings and Decompositions
Let H := (V, F ) be a hypergraph, with vertex set V and edge set F . A covering
of H is a family of edges of H whose union is V . Let us look at some examples of
coverings in this language. If E is the edge set of a graph G and C is the family
of edge sets of its cycles, a covering of the hypergraph (E, C) is a simply a cycle
covering of G. Likewise, if V is the vertex set of a digraph D and P is the family of
vertex sets of its directed paths, a covering of the hypergraph (V, P) is a covering
of the vertices of G by directed paths.
Usually, the existence of a covering is evident, and the goal is to ﬁnd a minimum
covering, that is, one using as few edges as possible. For example, any 2-edgeconnected graph G clearly has a covering of its edge set by cycles. The question
of interest is how few cycles are needed to achieve such a covering? In terms of n,
this number is  34 (n − 1), as was shown by Fan (2002).
Exact coverings are called decompositions. More precisely, a decomposition of
a hypergraph is a covering by pairwise disjoint edges. In contrast to coverings,
the existence of a decomposition often requires much stronger assumptions. For
instance, although every graph without cut edges has a cycle covering, only even
graphs admit cycle decompositions. Such questions can be very challenging. For
instance, the problem of deciding whether a 3-uniform hypergraph admits a decomposition is N P-hard (see Garey and Johnson (1979)).
Packings and Transversals
Let us now turn to the related notion of packing. A packing of a hypergraph
H := (V, F ) is a set of pairwise disjoint edges of H. (Note that decompositions
are both packings and coverings.) Whereas every hypergraph clearly has a packing
(by the empty set), the objects of interest here are maximum packings, that is,
packings with as many edges as possible. The Maximum Matching Problem (16.1)
is perhaps the most basic nontrivial instance of such a problem, the hypergraph
H being just the graph G.
Hand in hand with the concept of a packing goes that of a transversal. A
transversal of a hypergraph H := (V, F ) is a subset X of V which intersects each
edge of H. For example, if the vertex set of H is the edge set of a graph G and
its edges are the edge sets of the cycles of G, a transversal of H is a subset S of
E such that G \ S is acyclic; in a digraph, such a subset is called a feedback arc
set. (Transversals are sometimes referred to as vertex coverings — indeed, this is
standard practice in matching theory — but we prefer to use the term ‘transversal’
here in order to avoid confusion with the notion of hypergraph covering.) Every
hypergraph H := (V, F) clearly has a transversal, namely V ; it is the minimum
transversals that are of primary interest.
Min–Max Theorems
We denote by ν(H) the number of edges in a maximum packing of H, and by
τ (H) the number of vertices in a minimum transversal. These two parameters are

19.1 Coverings and Packings in Hypergraphs

505

related by a simple inequality (Exercise 19.1.1):
ν(H) ≤ τ (H)
A family H of hypergraphs is said to satisfy the Min–Max Property if equality
holds in the above inequality for each member H of H, and the assertion of such
an equality is called a min–max theorem. Menger’s Theorems (7.16, 9.1, 9.7, and
9.8) are important examples of min–max theorems. Such theorems are particularly interesting from an algorithmic standpoint, because they provide succinct
certiﬁcates of the optimality of the relevant packings and transversals.
The Erdős–Pósa Property
Most families of hypergraphs do not satisfy the Min–Max Property. Nevertheless,
it is still of interest in such cases to ﬁnd an upper bound on τ in terms of ν, if
there is one. A prototypical example is provided by the following theorem of Erdős
and Pósa (1965).
Theorem 19.1 The Erdős–Pósa Theorem
For any positive integer k, a graph either contains k disjoint cycles or else has a
set of at most 4k log k vertices whose deletion destroys all cycles.

Here, the vertex set of the hypergraph H is the vertex set of the graph and its
edges are the vertex sets of the cycles of the graph. (The case k = 2 is the topic
of Exercise 9.4.10). In terms of the parameters ν and τ , the Erdős–Pósa Theorem
states that
τ (H) ≤ f (ν(H))
(19.1)
where f (k) := 4k log k.
It was shown by Robertson and Seymour (1986) that, for ﬁxed k, this theorem
yields a linear-time algorithm for deciding whether an input graph G has a family
of k disjoint cycles. For if G does not contain k disjoint cycles, there is a set
of at most 4k log k vertices whose deletion results in a forest. Now forests have
tree-width at most two (according to the deﬁnition given in Section 9.8), and it
follows easily that G has tree-width at most 4k log k + 2, a constant. As noted in
Section 9.8, many N P-hard problems become easy when restricted to graphs of
bounded tree-width, and this is the case with the search for k disjoint cycles.
In general, a family H of hypergraphs is said to satisfy the Erdős–Pósa Property
if there is a function f satisfying (19.1) for all H ∈ H. Erdős and Pósa showed
that the hypergraphs whose edges are the edge sets of cycles of graphs have this
property also. An example of a simple family of hypergraphs which fails to satisfy
the Erdős–Pósa Property is given in Exercise 19.1.3.
Recall that a clutter is a hypergraph no edge of which is contained in another.
Let H = (V, F) be a clutter, and let T denote the set of all minimal transversals of
H. The hypergraph (V, T ) is denoted by H ⊥ and called the blocker of H. (Blockers

506

19 Coverings and Packings in Directed Graphs

are also known as transversal hypergraphs or Menger duals.) It may be shown that
(H ⊥ )⊥ = H for every clutter H (Exercise 19.1.4).
The blocker of a hypergraph H satisﬁes the Min–Max Property if the size of
a maximum packing of transversals of H is equal to the size of a smallest edge of
H. If a hypergraph satisﬁes the Min–Max Property, it is not necessarily true that
its blocker also satisﬁes this property (Exercise 19.1.5). However, there are many
interesting hypergraphs associated with graphs for which this is so. Consider, for
example, the hypergraph whose edges are the arc sets of the directed (x, y)-paths
in a digraph D(x, y). Not only does this hypergraph satisfy the Min–Max Property,
as is shown by Menger’s Theorem, but its blocker does too (Exercise 19.1.6). A
number of other such examples are described by Woodall (1978).
In this chapter, we discuss four theorems on coverings and packings in digraphs,
three of which are min–max theorems. These theorems concern directed paths,
directed cycles, branchings, and directed bonds.

Exercises
19.1.1 Show that ν(H) ≤ τ (H) for any hypergraph H.
19.1.2 Show that the family of all graphs has the Erdős-Pósa Property.
19.1.3 Let G be a graph which can be embedded on the projective plane so that
each face is bounded by an even cycle. (One such graph is obtained from a planar
grid by identifying antipodal points on its boundary.)
a) Show that any two odd cycles of G intersect.
b) Construct a family of hypergraphs (based on graphs of the type deﬁned above)
which does not have the Erdős-Pósa Property.
19.1.4 Let H = (V, F ) be a clutter. Show that (H ⊥ )⊥ = H.
19.1.5 Consider the graph G shown in Figure 19.1. Let H be the hypergraph whose
vertex set is E(G) and whose edges are the edge sets of the x1 y1 - and x2 y2 -paths in
G. Show that H has the Min–Max Property, but not its blocker. (More generally,
it was shown by Rothschild and Whinston (1966) that if G is any eulerian graph
with four distinguished vertices x1 , y1 , x2 , and y2 , then the hypergraph H deﬁned
above has the Min–Max Property.)
19.1.6 Let D := D(x, y) be a digraph. Show that the length of a shortest directed
(x, y)-path in D is equal to the size of a maximum packing of outcuts separating
y from x.
19.1.7 Let G be a bipartite graph, and let H be the hypergraph whose vertex set
is the edge set of G and whose edges are the trivial edge cuts of G. By quoting
appropriate results from Chapter 16, show that both H and H ⊥ have the Min–Max
Property.
————— —————

19.2 Coverings by Directed Paths
x1

507

x2
u

v
y2

y1

Fig. 19.1. The x1 y1 - and x2 y2 -paths deﬁne a hypergraph with the Min–Max Property
(Exercise 19.1.5)

19.2 Coverings by Directed Paths
The Gallai–Milgram Theorem
Rédei’s Theorem (2.3) tells us that every tournament has a directed Hamilton
path. In other words, the vertex set of a tournament can be covered by a single
directed path. In general, one may ask how few disjoint directed paths are needed
to cover the vertex set of a digraph. Gallai and Milgram (1960) showed that this
number is always bounded above by the stability number of the digraph, that is,
the number of vertices in a largest stable set. The stability number of a digraph
D is denoted by α(D).
We refer to a covering of the vertex set of a graph or digraph by disjoint paths
or directed paths as a path partition, and one with the fewest paths as an optimal
path partition. The number of paths in an optimal path partition of a digraph D
is denoted by π(D).
Theorem 19.2 The Gallai–Milgram Theorem
For any digraph D, π ≤ α.
Gallai and Milgram (1960) actually proved a somewhat stronger theorem. A
directed path P and a stable set S are said to be orthogonal if they have exactly one
common vertex. By extension, a path partition P and stable set S are orthogonal
if each path in P is orthogonal to S.
Theorem 19.3 Let P be an optimal path partition of a digraph D. Then there is
a stable set S in D which is orthogonal to P.
Note that the Gallai–Milgram Theorem is an immediate consequence of Theorem 19.3 because π = |P| ≤ |S| ≤ α. Theorem 19.3 is established by means of
an inductive argument involving the sets of initial and terminal vertices of the
constituent paths of a path partition. For a path partition P, we denote these sets
by i(P) and t(P), respectively.
Lemma 19.4 Let P be a path partition of a digraph D. Suppose that no stable
set of D is orthogonal to P. Then there is a path partition Q of D such that
|Q| = |P| − 1, i(Q) ⊂ i(P), and t(Q) ⊂ t(P).

508

19 Coverings and Packings in Directed Graphs

Proof The case n = 1 holds vacuously, so we assume that n ≥ 2 and proceed
by induction on n. By hypothesis, t(P) is not a stable set, so there exist vertices
y, z ∈ t(P) such that (y, z) ∈ A. If the vertex z constitutes, by itself, a (trivial)
path of P, then we deﬁne Q to be the path partition of D obtained from P by
deleting this path and extending the path of P that terminates in y by the arc
(y, z) (Figure 19.2).
y

z

z

y

Q

P

Fig. 19.2. Proof of Lemma 19.4: extending a path

Thus we may assume that z is the terminal vertex of a nontrivial path P ∈ P.
Let x be its predecessor on P , and set D := D − z, P  := P − z, and P  :=
(P \ {P }) ∪ P  , the restriction of P to D (Figure 19.3). Then there is no stable
set in D orthogonal to P  , because such a stable set would also be a stable set in
D orthogonal to P, contrary to the hypothesis. Note also that
t(P  ) = (t(P) \ {z}) ∪ {x} and

y

P

i(P  ) = i(P)

z

y

x

x

P

P

P

Fig. 19.3. Proof of Lemma 19.4: deleting a vertex

19.2 Coverings by Directed Paths

509

By the induction hypothesis, there is a path partition Q of D such that
|Q | = |P  | − 1, i(Q ) ⊂ i(P  ) and t(Q ) ⊂ t(P  ). If x ∈ t(Q ), we deﬁne Q to
be the path partition of D obtained from Q by extending the path of Q that
terminates in x by the arc (x, z) (Figure 19.4). If x ∈ t(Q ), then y ∈ t(Q ), and we
deﬁne Q to be the path partition of D obtained from Q by extending the path of
Q that terminates in y by the arc (y, z). In both cases, |Q| = |P| − 1, i(Q) ⊂ i(P),
and t(Q) ⊂ t(P).

x

z

x

P

P

Fig. 19.4. Proof of Lemma 19.4: reinserting the deleted vertex

The inductive proof of Lemma 19.4 gives rise to a polynomial-time recursive
algorithm for ﬁnding a path partition P of a digraph D, and a stable set S in D
orthogonal to P, of the same cardinality (Exercise 19.2.1).
The Gallai–Milgram Theorem ( 19.2) can be viewed as a formula for the stability number of an undirected graph in terms of path partitions of its orientations
(Exercise 19.2.2). Moreover, it implies the following celebrated theorem of Dilworth
(1950) on partially ordered sets.
Theorem 19.5 Dilworth’s Theorem
The minimum number of chains into which the elements of a partially ordered set
P can be partitioned is equal to the maximum number of elements in an antichain
of P .
Proof Let P := (X, ≺), and denote by D := D(P ) the digraph whose vertex set
is X and whose arcs are the ordered pairs (u, v) such that u ≺ v in P . Chains and
antichains in P correspond in D to directed paths and stable sets, respectively.
Because no two elements in an antichain of P can belong to a common chain, the
minimum number of chains in a chain partition is at least as large as the maximum
number of elements in an antichain; that is, π ≥ α. On the other hand, by the
Gallai–Milgram Theorem, π ≤ α. Therefore π = α.


510

19 Coverings and Packings in Directed Graphs

Berge’s Path Partition Conjecture
The Gallai-Roy and Gallai–Milgram Theorems (14.5 and 19.2) bear a striking
formal resemblance. By interchanging the roles of stable sets and directed paths,
one theorem is transformed into the other: directed paths become stable sets, and
vertex colourings (which are partitions into stable sets) become path partitions.
This correspondence does not, however, extend to the stronger versions of these
theorems in terms of orthogonality. Although the proof of the Gallai-Roy Theorem
shows that there exists in any digraph some colouring C and some directed path
P which are orthogonal (meaning that P is orthogonal to every colour class of
C), it is not true that every minimum colouring is orthogonal to some directed
path (Exercise 19.2.3). Nonetheless, a possible common generalization of the two
theorems was proposed by Linial (1981) (see Exercise 19.2.4) and conjectured in
a stronger form by Berge (1982).
Let k 
be a positive integer. A path partition P is k-optimal if it minimizes the
function {min{v(P ), k} : P ∈ P}, and a partial k-colouring of a graph or digraph
is a family of k disjoint stable sets. In particular, a 1-optimal path partition is one
that is optimal, and a partial 1-colouring is simply a stable set.
The concept of orthogonality of paths and stable sets is extended as follows.
A path partition P and partial k-colouring C are orthogonal if every directed path
P ∈ P meets min{v(P ), k} diﬀerent colour classes of C. We can now state the
conjecture proposed by Berge.

The Path Partition Conjecture
Conjecture 19.6 Let D be a digraph, k a positive integer, and P a k-optimal
path partition of D. Then there is a partial k-colouring of D which is orthogonal to P.

The Path Partition Conjecture has been proved for k = 1 by Linial (1978)
and for k = 2 by Berger and Hartman (2007). It has also been established for
acyclic digraphs, by Aharoni et al. (1985) and Cameron (1986), and for digraphs
containing no directed path with more than k vertices, by Berge (1982) We refer
the reader to the survey by Hartman (2006) for a full discussion of this conjecture
and of related questions.

Exercises
19.2.1 Describe a polynomial-time recursive algorithm for ﬁnding in a digraph D
a path partition P and a stable set S, orthogonal to P, such that |P| = |S|.

19.2 Coverings by Directed Paths

511

19.2.2 Let G be an undirected graph. Show that
α(G) = max {π(D) : D an orientation of G}
(Compare with Exercise 14.1.17.)
19.2.3
a) A directed path P and colouring C of a digraph are orthogonal if P is orthogonal
to every colour class of C. Show that, in any digraph, there exists a directed
path P and a colouring C which are orthogonal.
b) By considering an appropriate orientation of a 5-cycle, show that there does
not necessarily exist a directed path P which is orthogonal to every minimum
colouring.
(K. Cameron)
19.2.4 Linial’s Conjecture
A
partial k-colouring C of a digraph D is optimal if the number of coloured vertices,
C∈C |C|, is as large as possible. Let P be a k-optimal path partition and C an
optimal k-colouring of a digraph D. Deﬁne


min{v(P ), k} and αk (D) :=
|C|
πk (D) :=
P ∈P

C∈C

(In particular, π1 = π, the number of paths in an optimal path partition of D,
and α1 = α.) Linial’s Conjecture asserts that πk ≤ αk for all digraphs D and
all positive integers k. Deduce Linial’s Conjecture from Berge’s Path Partition
Conjecture (19.6).
————— —————
19.2.5 Consider the Ramsey graph G := R(5, 3) (the complement of the graph
shown in Figure 12.8c).
a) Show that G has r(5, 2) = 5 pairwise disjoint stable sets of cardinality two.
b) Deduce that G has a proper 8-colouring c : V → {1, 2, 3, 4, 5, 6, 7, 8}.
c) Consider the digraph D formed by orienting edge uv of G from u to v whenever
c(u) < c(v). Show that:
i) D has a partition into two directed paths,
ii) α(D − P ) = α(D), for every directed path P of D.
(G. Hahn and B. Jackson)
19.2.6 Show that every oriented graph D contains a family of disjoint directed
paths, each of length at least one, which together include all vertices of D of
maximum degree ∆.
(V.G. Vizing)

512

19 Coverings and Packings in Directed Graphs

19.3 Coverings by Directed Cycles
Just as the Gallai–Milgram Theorem extends Rédei’s Theorem to all digraphs,
there is a natural extension of Camion’s Theorem to all strong digraphs. Let us
ﬁrst recall the statement of this theorem (see the inset on Induction in Section 2.2,
and Exercise 3.4.12a).
Theorem 19.7 Camion’s Theorem
Every nontrivial strong tournament has a directed Hamilton cycle.
A moment’s reﬂection shows that one cannot hope to partition the vertices of
every strong digraph into directed cycles. On the other hand, because each vertex
of a strong digraph lies in some directed cycle, the entire vertex set can certainly be
covered by directed cycles. Gallai (1964b) made a conjecture regarding the number
of cycles needed for such a covering.
Conjecture 19.8 Gallai’s Conjecture
The vertex set of any nontrivial strong digraph D can be covered by α directed
cycles.
Gallai’s Conjecture remained unresolved for several decades, but was eventually
conﬁrmed by Bessy and Thomassé (2004). A key idea in their proof is the concept
of a coherent cyclic order of the vertices of a digraph.
Coherent Cyclic Orders
Let D = (V, A) be a digraph. By a cyclic order of D we mean a cyclic order
O := (v1 , v2 , . . . , vn , v1 ) of its vertex set V . Given such an order O, each directed
cycle of D can be thought of as winding around O a certain number of times. In
order to make this notion precise, we deﬁne the length of an arc (vi , vj ) of D (with
respect to O) to be j − i if i < j and n + j − i if i > j. Informally, the length
of an arc is just the length of the segment of O ‘jumped’ by the arc. If C is a
directed cycle of D, the sum of the lengths of its arcs is a certain multiple of n.
This multiple is called the index of C (with respect to O), and denoted i(C). By
extension, the index of a family C of directed cycles, denoted i(C), is the sum of
the indices of its constituent cycles. Consider, for example, the orientation of the
Petersen graph shown in Figure 19.5a. With respect to the cyclic order shown in
Figure 19.5b, the directed cycle (1, 2, 3, 4, 5, 6, 7, 8, 9, 1) is of index two.
A directed cycle of index one is called a simple cycle. If every arc lies in such
a cycle, the cyclic order is coherent. The cyclic order shown in Figure 19.5b is not
coherent because the arc (4, 10) lies in no simple cycle; on the other hand, the
cyclic order of Figure 19.6a is coherent.
Bessy and Thomassé (2004) showed that every strong digraph admits a coherent cyclic order. It follows that a digraph admits a coherent cyclic order if and
only if each of its arcs lies in a directed cycle or, equivalently, if and only if each
of its connected components is strong. We deduce this fact from a result of Knuth
(1974), established in Chapter 5 — the two theorems are, in fact, equivalent. They
have several signiﬁcant implications.

19.3 Coverings by Directed Cycles
1

1
2

9

4

9
3

8

513

5

10

8

10
4

7
6

6

3
2

7

5
(a)

(b)

Fig. 19.5. (a) An orientation of the Petersen graph, and (b) a cyclic order of this digraph
1

5

1
6

9

8
3
10

4
(a)

1

0

2
7

0

0

0
0

0
0

0
(b)

Fig. 19.6. (a) A coherent cyclic order, and (b) an index-bounded weighting

Theorem 19.9 Every strong digraph admits a coherent cyclic order.
Proof Let D be a strong digraph. By Theorem 5.14, D has a coherent feedback
arc set S. Since D \ S is acyclic, the vertices of D may be ordered as v1 , v2 , . . . , vn ,
so that every arc not in S joins some vertex vi to a vertex vj with j > i (Exercise 2.1.11). Every fundamental cycle of D with respect to S contains exactly
one arc (vi , vj ) with i > j, namely its unique arc of S. With respect to the cyclic
order (v1 , v2 , . . . , vn , v1 ), these fundamental cycles are therefore simple. Because S

is coherent, we deduce that the cyclic order (v1 , v2 , . . . , vn , v1 ) is coherent.
Observe that in a coherent cyclic order of a strong tournament, each vertex
is adjacent to its successor, and thus dominates it. The cyclic order therefore
determines a directed Hamilton cycle, and we obtain Camion’s Theorem as an
immediate corollary of Theorem 19.9.

514

19 Coverings and Packings in Directed Graphs

The Bessy–Thomassé Theorem
Bessy and Thomassé (2004) established Gallai’s Conjecture by proving a stronger
result, namely a min–max theorem relating a cyclic analogue of the stability number to the minimum index of a cycle covering. They did so by using Theorem 19.9
in conjunction with Dilworth’s Theorem (19.5). Here, we present a closely related
min–max theorem, establishing it by applying the linear programming proof technique described in Section 8.6.
A weighting of the vertices of a digraph D is a function w : V → N. We refer to
w(v) as the weight of vertex v. By extension, the weight w(H) of a subgraph H of
D is the sum of the weights of its vertices. If D is equipped with a cyclic order O,
and if w(C) ≤ i(C) for every directed cycle C of D, we say that the weighting w
is index-bounded (with respect to O). It can be checked that the (0, 1)-weighting
indicated in Figure 19.6b is index-bounded. Observe that for any cycle covering C
of D and any index-bounded weighting w,

w(C) ≥ w(D)
(19.2)
i(C) ≥
C∈C

Bondy and Charbit (2004) (see, also, Charbit (2005)) showed that equality holds
in (19.2) for some cycle covering C and some index-bounded weighting w.
Theorem 19.10 Let D be a digraph each of whose vertices lies in a directed cycle,
and let O be a cyclic order of D. Then:
min i(C) = max w(D)

(19.3)

where the minimum is taken over all cycle coverings C of D and the maximum
over all index-bounded weightings w of D.
In order to deduce Gallai’s Conjecture from Theorem 19.10, it suﬃces to apply
it to a coherent cyclic order O of D and observe that:
 for every family C of directed cycles of D, we have |C| ≤ i(C),
 because each vertex lies in a directed cycle and O is coherent, each vertex lies in
a simple cycle, so an index-bounded weighting of D is necessarily (0, 1)-valued,
 because each arc lies in a simple cycle, in an index-bounded weighting w no
arc can join two vertices of weight one, so the support of w is a stable set, and
w(D) ≤ α(D).
These observations yield the theorem of Bessy and Thomassé (2004).
Theorem 19.11 The vertex set of any nontrivial strong digraph D can be covered
by α directed cycles.
Proof of Theorem 19.10 Let D be a strict digraph, with vertex set V =
{v1 , . . . , vn } and arc set A = {a1 , . . . , am }. It suﬃces to show that equality holds
in (19.2) for some cycle covering C and some index-bounded weighting w.

19.3 Coverings by Directed Cycles

515

An arc (vi , vj ) is called a forward arc of D if i < j, and a reverse arc if j < i.
Consider the matrix
M
Q :=
N
where M = (mij ) is the incidence matrix of D and N = (nij ) is the n × m matrix
deﬁned by:

1 if vi is the tail of aj
nij =
0 otherwise
We know that M is totally unimodular (Exercise 1.5.7). Let us show that Q is
 obtained from Q by subtracting
totally unimodular also. Consider the matrix Q
 contains one
each row of N from the corresponding row of M. Each column of Q
1 and one −1, the remaining entries being 0. It follows easily by induction on k
 has determinant 1, −1 or 0 (Exercise 19.3.2).
that every k × k submatrix of Q
 is totally unimodular. Because Q
 was derived from Q by elementary row
Thus Q
operations, the matrix Q is totally unimodular too.
We now deﬁne vectors b = (b1 , . . . , b2n ) and c = (c1 , . . . , cm ) as follows.

0 if 1 ≤ i ≤ n
bi :=
1 otherwise

1 if aj is a reverse arc
cj :=
0 otherwise
Before proceeding with the proof, let us make two observations:
 If x := fC is the circulation associated with a directed cycle C, then cx = i(C),
the index of C.

 If Nx ≥ 1, where x := {γC fC : C ∈ C} is a linear combination of circulations
associated with a family C of directed cycles of D, then C is a covering of D.
Consider the LP:
minimize cx
subject to Qx ≥ b
x≥0

(19.4)

The system of constraints Qx ≥ b is equivalent to the two systems Mx ≥ 0 and
Nx ≥ 1, where 0 and 1 are vectors of 0s and 1s, respectively. Because the rows of M
sum to 0, the rows of Mx sum to 0, which implies that Mx = 0. Thus every feasible
solution to (19.4) is a nonnegative
 circulation in D, hence, by Proposition 7.14, a
nonnegative linear combination
γC fC of circulations associated with directed
cycles of D. Moreover, because Nx ≥ 1, the cycles of positive weight in this
sum form a covering of D. Conversely, every cycle covering of D yields a feasible
solution to (19.4). The LP (19.4) is feasible because, by assumption, D has at
least one cycle covering, and it is bounded because c is nonnegative. Thus (19.4)
has an optimal solution. Indeed, by Theorem 8.28, (19.4) has an integral optimal
solution, because Q is totally unimodular and the constraints are integral. This

516

19 Coverings and Packings in Directed Graphs

solution corresponds to a cycle covering C of minimum index, the optimal value
being its index i(C).
We now study the dual of (19.4):
maximize yb
subject to yQ ≤ c
y≥0

(19.5)

Let 
us write y := (z1 , . . . , zn , w1 , . . . , wn ). Then (19.5) is the problem of maxin
mizing i=1 wi subject to the constraints:

1 if aj := (vi , vk ) is a reverse arc
zi − zk + wi ≤
0 if aj is a forward arc
Consider an integral optimal solution to (19.5). If we sum the above constraints
over the arc set of a directed cycle C of D, we obtain the inequality

wi ≤ i(C)
vi ∈V (C)

In other words, the function w deﬁned by w(vi ) := wi , 1 ≤ i ≤ n, is an indexbounded weighting, and the optimal value is the weight w(D) of D. By linear
programming duality (Theorem 8.27), we have i(C) = w(D).

An alternative proof of Theorem 19.11 based on network ﬂows, as well as a
variety of extensions and generalizations, are described in Sebö (2007). A fast
algorithm for ﬁnding coherent cyclic orders can be found in Iwata and Matsuda
(2007).
Cycle Coverings and Ear Decompositions
The Bessy–Thomassé Theorem shows that any nontrivial strong digraph D has a
spanning subdigraph which is the union of α directed cycles. However, the structure
of this subdigraph might be rather complicated. This leads one to ask whether
there always exists a spanning subdigraph whose structure is relatively simple,
one which is easily seen to be the union of α directed cycles. A natural candidate
would be a spanning subdigraph built from a directed cycle by adding α − 1
directed ears. Such a digraph is readily seen to be the union of α directed cycles
(Exercise 19.3.3). Unfortunately, not every strong digraph has such a spanning
subdigraph, as is illustrated by the example shown in Figure 19.7. This digraph
has stability number two but has no strong ear decomposition with fewer than
two directed ears. It can be extended in a straightforward manner to an example
with stability number α requiring at least 2α − 2 directed ears, for any α ≥ 2
(Exercise 19.3.4).
A possible way around this problem is to allow spanning subdigraphs which
are disconnected but whose components are strong. Each component then has a

19.3 Coverings by Directed Cycles

517

Fig. 19.7. A digraph with stability number two, but which has no strong ear decomposition with just one ear

strong ear decomposition, and the number of directed cycles needed to cover the
subdigraph is simply the sum of the numbers required for its components. We call
such a spanning subdigraph cyclic, because each arc lies on a directed cycle. The
following conjecture was formulated by Bondy (1995b), based on a remark of Chen
and Manalastas (1983).
Conjecture 19.12 Let D be a digraph all of whose strong components are nontrivial. Then D contains a cyclic spanning subdigraph with cyclomatic number at
most α.
Conjecture 19.12 holds for α = 1 by Camion’s Theorem (19.7) and also for
α = 2 and α = 3 by theorems of Chen and Manalastas (1983) and S. Thomassé
(unpublished), respectively. In addition, it implies not only the Bessy–Thomassé
Theorem, but also a result of Thomassé (2001), that the vertex set of any strong
digraph D with α ≥ 2 can be partitioned into α − 1 directed paths, as well as
another theorem of Bessy and Thomassé (2003), that every strong digraph D has
a strong spanning subdigraph with at most n + 2α − 2 arcs (Exercise 19.3.5).

Exercises
19.3.1 Describe a polynomial-time algorithm for ﬁnding a coherent cyclic order of
a strong digraph.
19.3.2 Prove that the matrix Q deﬁned in the proof of Theorem 19.10 is totally
unimodular.
19.3.3 Let D be a digraph obtained from a directed cycle by adding k − 1 directed
ears. Show that D is a union of k directed cycles.
————— —————
19.3.4 Consider the digraph of Figure 19.7.
a) Show that this digraph has no strong spanning subdigraph of cyclomatic number less than three.

518

19 Coverings and Packings in Directed Graphs

b) For all α ≥ 2, extend this example to a strong digraph D having no strong
spanning subdigraph of cyclomatic number less than 2α − 1. (O. Favaron)
19.3.5 Let D be a strong digraph which has a cyclic spanning subdigraph of
cyclomatic number α. Show that:
a) if α ≥ 2, the vertex set of D can be partitioned into α − 1 directed paths,
b) D has a strong spanning subdigraph with at most n + 2α − 2 arcs.
(S. Bessy and S. Thomassé)

19.4 Packings of Branchings
Edmonds’ Branching Theorem
Recall that an x-branching is an oriented tree in which each vertex has indegree one,
apart from the root x, which is a source. We consider here the problem of packing
x-branchings in a digraph D := D(x). A necessary condition for the existence of k
arc-disjoint spanning x-branchings in D is that d+ (X) ≥ k for every proper subset
X of V that includes x, because each of the k branchings must include a separate
arc of ∂ + (X). This condition is suﬃcient when k = 1 (Exercise 4.2.9). Indeed, as
Edmonds (1973) showed, it is suﬃcient for all k. The proof of Edmonds’ theorem
given below is due to Lovász (1976). It leads to a polynomial-time algorithm for
ﬁnding such a family of branchings.
Theorem 19.13 Edmonds’ Branching Theorem
A digraph D := D(x) has k arc-disjoint spanning x-branchings if and only if
d+ (X) ≥ k,

for all X ⊂ V with x ∈ X

(19.6)

Proof As remarked above, the necessity of condition (19.6) is clear. We establish
its suﬃciency by induction on k. Having already noted its validity for k = 1, we
may suppose that k ≥ 2. Let us call an x-branching with arc set S removable if
d+
D\S (X) ≥ k − 1,

for all X ⊂ V with x ∈ X

(19.7)

Our aim is to show that D has a removable spanning x-branching. The theorem will then follow by induction. We construct such a branching by means of
a tree-search algorithm, ensuring that at each stage the current x-branching is
removable. Observe that the trivial x-branching, consisting only of the root x, is
clearly removable.
Assume that we have already constructed a removable x-branching B, with
vertex set Z and arc set S. If B is spanning, there is nothing more to prove. If
not, consider an arc a := (u, v) in the outcut ∂ + (Z). Suppose that the branching
obtained by adjoining the vertex v and arc a to B is not removable, in other
words that d+
D\(S∪{a}) (X) < k − 1 for some proper subset X of V that contains

19.4 Packings of Branchings

X

X ∩Z
u
x

X

X ∩Z
u
v

x

Z

519

v
Z
w
z
Y ∩Z

(a)

Y

(b)
Fig. 19.8.

+
x. Because B is removable, d+
D\S (X) ≥ k − 1. We deduce that a ∈ ∂ (X) and
d+
D\S (X) = k − 1 (see Figure 19.8a).
Noting that v ∈
/ X ∪ Z, we see that the set X has the following properties.

x ∈ X,

X ∪ Z ⊂ V,

d+
D\S (X) = k − 1

Let us call such a set X a critical set, and its outcut ∂ + (X) a critical cut. In order
to grow B, it suﬃces to ﬁnd an arc in ∂ + (Z) which lies in no critical cut.
Consider a maximal critical set X. Because X is critical, d+
D\S (X) = k − 1. On
+
the other hand, by (19.6), d (X ∪ Z) ≥ k. Because no arc of B lies in the outcut
+
∂ + (X ∪ Z), we have d+
D\S (X ∪ Z) ≥ k, so the outcut ∂ (Z \ X) contains an arc
b := (z, w) (see Figure 19.8b). We claim that this arc b belongs to no critical cut.
Suppose, to the contrary, that b lies in a critical cut ∂ + (Y ). By Exercise 2.5.4c,
+
(k − 1) + (k − 1) = d+
D\S (X) + dD\S (Y )
+
≥ d+
D\S (X ∪ Y ) + dD\S (X ∩ Y ) ≥ (k − 1) + (k − 1)

implying, in particular, that d+
/ X ∪Y ∪Z,
D\S (X ∪Y ) = k −1. Noting now that w ∈
we see that the set X ∪ Y is critical. But this contradicts the maximality of the
critical set X. We conclude that the removable x-branching B can be grown by
adjoining the vertex w and the arc b, as claimed.

An arc by which a removable x-branching B can be grown may be found in
polynomial time by means of the Max-Flow Min-Cut Algorithm. This observation
leads to a polynomial-time algorithm for ﬁnding a maximum family of arc-disjoint
x-branchings in a digraph D(x) (Exercise 19.4.2). An undirected analogue of Theorem 19.13 is discussed in Section 21.4.

520

19 Coverings and Packings in Directed Graphs

Exercises
19.4.1
a) Let D := D(x, y) be a digraph. Construct a new digraph D from D by adding
t arcs from y to each v ∈ V \ {x, y}. Show that D has k arc-disjoint spanning
x-branchings if and only if D has k arc-disjoint directed (x, y)-paths, provided
that t is suﬃciently large.
b) Deduce the arc version of Menger’s Theorem (Theorem 7.16) from Edmonds’
Branching Theorem.
19.4.2 Describe a polynomial-time algorithm for ﬁnding a maximum collection of
arc-disjoint spanning x-branchings in a digraph D(x).
19.4.3 Suppose that we have k roots, x1 , x2 , . . . , xk , and we wish to ﬁnd k pairwise
arc-disjoint spanning branchings B1 , B2 , . . . , Bk , such that Bi is rooted at xi , 1 ≤
i ≤ k. Solve this problem by reducing it to the arc-disjoint spanning branching
problem (with a single root).
————— —————
19.4.4 A branching forest in a digraph D is a subdigraph of D each component
of which is a branching. Show that the arc set of a digraph D can be decomposed
into k branching forests if and only if:
i) d− (v) ≤ k for all v ∈ V ,
ii) a(X) ≤ k(|X| − 1) for all nonempty subsets X of V .

(A. Frank)

19.5 Packings of Directed Cycles and Directed Bonds
We noted in Section 19.1 that whereas packings of cycles in undirected graphs
do not satisfy the Min–Max Property, they do satisfy the weaker Erdős–Pósa
Property (both for vertex packings and for edge packings). A similar situation
pertains to digraphs. It was conjectured by Gallai (1968c) and Younger (1973), and
proved by Reed et al. (1996), that directed cycles in digraphs enjoy the Erdős–Pósa
Property (again with regard to both vertices and arcs). But again, as noted below,
they do not satisfy the Min–Max Property. Even when one restricts attention to
planar digraphs, the Min–Max Property fails to hold for vertex packings of cycles
(Exercise 19.5.9a). On the other hand, as we now prove, there does exist a min–max
theorem for arc packings of directed cycles in planar digraphs.
Theorem 19.14 In any planar digraph, the maximum number of arc-disjoint directed cycles is equal to the minimum number of arcs which meet all directed cycles.
Planarity is crucial here: Theorem 19.14 does not extend to all digraphs. Consider, for example, the orientation of K3,3 shown in Figure 19.9. In this digraph,
any two directed cycles have an arc in common, but no single arc lies in every
directed cycle.

19.5 Packings of Directed Cycles and Directed Bonds

521

Fig. 19.9. A digraph with ν = 1 and τ = 2

Directed Bonds and Cuts
Recall that a directed bond is a bond ∂(X) such that ∂ − (X) = ∅ (so that ∂(X) is
an outcut ∂ + (X)) and that a connected digraph has no directed bond if and only
if it is strong (Exercise 2.5.7b). The more general notion of a directed cut is deﬁned
similarly. Note that every directed cut can be decomposed into directed bonds.
Corresponding to any statement concerning directed cycles in a plane digraph
there is one concerning directed bonds in its dual (see Section 10.2). Thus Theorem 19.14 can be restated as follows.
Theorem 19.15 In any planar directed graph, the maximum number of arcdisjoint directed bonds is equal to the minimum number of arcs which meet all
directed bonds.
We have seen that the hypothesis of planarity in Theorem 19.14 cannot be
dropped. Remarkably, its dual, Theorem 19.15, does extend to all directed graphs,
as was conjectured by N. Robertson (unpublished) and Younger (1965), and proved
by Lucchesi and Younger (1978). The proof that we give here is due to Lovász
(1976).
The Lucchesi–Younger Theorem
The notion of a 2-packing of directed bonds plays a key role in Lovász’s proof.
A family C of directed bonds in a digraph D is a 2-packing if no arc appears in
more than two of its members. One way of obtaining a 2-packing is simply to take
two copies of each member of a packing. This observation shows that the size of
a maximum 2-packing of directed bonds is at least twice the size of a maximum
packing. Rather surprisingly, one cannot do better.
Proposition 19.16 In any digraph, the size of a maximum 2-packing of directed
bonds is equal to twice the size of a maximum packing of directed bonds.
Proof To establish the required equality, it is enough to show that any 2-packing
B of directed bonds contains a packing consisting of at least half its members.
Recall that subsets X and Y of V cross if X ∩ Y , X \ Y , Y \ X, and V \ (X ∪ Y )
are all nonempty. As with edge cuts (see Section 9.3), we say that two directed

522

19 Coverings and Packings in Directed Graphs

cuts ∂ + (X) and ∂ + (Y ) cross if the sets X and Y cross. The ﬁrst step is to show
that the members of B may be assumed to be pairwise noncrossing.
Suppose that B contains two directed bonds, ∂ + (X) and ∂ + (Y ), which cross.
Then (see Figure 19.10):
 both ∂ + (X ∩ Y ) and ∂ + (X ∪ Y ) are directed cuts,
 every arc of the digraph is covered exactly the same number of times (once,
twice, or not at all) by these two directed cuts as it is by the two directed
bonds ∂ + (X) and ∂ + (Y ).
The family obtained from B by replacing the two directed bonds ∂ + (X) and ∂ + (Y )
by two new directed bonds, one contained in ∂ + (X ∩ Y ) and one contained in
∂ + (X ∪ Y ), is therefore also a 2-packing, and moreover one of the same size as
B. By repeatedly uncrossing in this fashion, one obtains a pairwise noncrossing
2-packing of the same size as B (see Exercise 19.5.5). We may thus assume that
the 2-packing B already has this property.
Y

Y

X

Y

X

∂ + (X)

X

∂ + (Y )

Y
X

∂ + (X ∪ Y )

∂ + (X ∩ Y )

Fig. 19.10. Uncrossing two crossing directed cuts

Some directed bonds might occur twice in the family B. Deﬁne a graph G in
which each vertex represents a directed bond that appears just once in B, joining
two such bonds ∂ + (X) and ∂ + (Y ) by an edge if they have an arc in common.
Because ∂ + (X) and ∂ + (Y ) do not cross, they can be adjacent in G only if either
X ⊂ Y or Y ⊂ X. It follows that the graph G is bipartite (Exercise 19.5.6). The
subfamily of B consisting of the larger of the two parts of G, together with one
copy of each directed bond that appears twice in B, is a packing of directed bonds
whose size is at least half that of B.

For convenience, we denote by ν(D) the size of a maximum packing of directed
bonds in a digraph D and by τ (D) the size of a minimum transversal of the
directed bonds of D. In this notation, the Lucchesi–Younger Theorem states that
ν(D) = τ (D) for every digraph D. Before proceeding with its proof, let us note
two simple facts about directed bonds (Exercise 19.5.4).
Proposition 19.17 Let D be a digraph. Then:
 obtained by subdividing each arc of D satisﬁes the identity
i) the digraph D
 = 2ν(D),
ν(D)

19.5 Packings of Directed Cycles and Directed Bonds

523

ii) the digraph D obtained by subdividing a single arc of D satisﬁes the inequalities
ν(D) ≤ ν(D ) ≤ ν(D) + 1,
iii) for any arc a, the directed bonds of D / a are precisely the directed bonds of D
which do not include the arc a.

Theorem 19.18 The Lucchesi–Younger Theorem
In any digraph, the maximum number of arc-disjoint directed bonds is equal to the
minimum number of arcs which meet all directed bonds.
Proof When ν(D) = 0, the digraph D has no directed bonds, and equality clearly
holds. Suppose that the theorem is false. Then there is a smallest positive integer
k, and a digraph D, such that:
ν(D) = k

and τ (D) > k

(19.8)

Denote by D the set of all digraphs D for which (19.8) holds, and let D0 be
any member of D. We subdivide the arcs of D0 one by one, thereby obtaining
a sequence of digraphs D0 , D1 , D2 , . . . , Dm . By Proposition 19.17(i), ν(Dm ) =
2ν(D0 ) > ν(D0 ). Hence, by Proposition 19.17(ii), there is an index i such that
ν(Di ) = ν(D0 ) = k and ν(Di+1 ) = k + 1. Because D0 ∈ D and ν(Di ) = ν(D0 ), we
have Di ∈ D (Exercise 19.5.7). Now set D := Di , and let a be the arc of Di that
was subdivided to obtain Di+1 .
Because ν(Di+1 ) = k + 1 and ν(D) = k, in any packing of Di+1 by k + 1
directed bonds, the two arcs resulting from the subdivision of a both belong to
members of the packing. These k + 1 directed bonds therefore correspond to a
family B  of k + 1 directed bonds of D which together cover a twice and each other
arc of D at most once.
Let us show, now, that D has a packing B  of k directed bonds, none of
which includes the arc a. By Proposition 19.17(iii), this amounts to showing that
ν(D / a) = k. Suppose, to the contrary, that ν(D / a) = k−1. Then τ (D / a) = k−1
also, by the minimality of k. Let T be a minimum transversal of the directed bonds
of D / a. Then T ∪ {a} is a transversal of the directed bonds of D, implying that
τ (D) = k = ν(D) and contradicting (19.8). Therefore ν(D / a) = k, and D indeed
has such a packing B .
The family B := B  ∪B  is thus a 2-packing of D by 2k +1 = 2ν(D)+1 directed
bonds. But this contradicts Proposition 19.16. We conclude that D = ∅.

Lucchesi (1976) gave a polynomial-time algorithm for ﬁnding a maximum packing of directed cuts in a digraph. We refer the reader to Schrijver (2003) for a comprehensive survey of results related to the Lucchesi–Younger Theorem, including
its algorithmic aspects.
The Lucchesi–Younger Theorem shows that the hypergraph deﬁned by the arc
sets of directed bonds of any digraph satisﬁes the Min–Max Property. Woodall
(1978) conjectured that the blocker of this hypergraph also satisﬁes the Min–Max
Property.

524

19 Coverings and Packings in Directed Graphs

Woodall’s Conjecture
Conjecture 19.19 In any digraph, the maximum number of arc-disjoint
transversals of directed bonds is equal to the minimum number of arcs in a
directed bond.

It can be shown that any digraph which does not contain a directed bond of
size one has two disjoint transversals of directed bonds (Exercise 19.5.3). Schrijver
(1982) and Feoﬁloﬀ and Younger (1987) veriﬁed Woodall’s Conjecture for all digraphs in which each source is connected to each sink by a directed path. Little
else is known about this conjecture. For planar digraphs, by duality, Woodall’s
Conjecture has the following equivalent formulation.
Conjecture 19.20 In any planar digraph, the maximum number of arc-disjoint
transversals of directed cycles is equal to the length of a shortest directed cycle.
Even in this special case, it is not even known if there is some constant k such
that every planar digraph of directed girth k or more has three disjoint transversals
of directed cycles.

Exercises
19.5.1 Show that any two directed cycles in the digraph of Figure 19.11 have a
vertex in common, but that at least three vertices must be deleted in order to
destroy all directed cycles.

Fig. 19.11. A digraph with ν = 1 and τ = 3

19.5.2 By splitting vertices of the digraph in Figure 19.11, construct a digraph
in which any two directed cycles have an arc in common, but from which at least
three arcs must be deleted in order to destroy all directed cycles.

19.5 Packings of Directed Cycles and Directed Bonds

525

19.5.3 Let D be a 2-edge-connected digraph. Show that D has two disjoint
transversals of directed bonds.
19.5.4 Prove Proposition 19.17.
19.5.5
+
a) Let D be a digraph, and
 let B = {∂ (X) : X ∈ F} be a 2-packing of directed
bonds of D for which {|X \ Y ||Y \ X| : X, Y ∈ F} is minimized. Show that
B is a pairwise noncrossing family of directed bonds.
b) Deduce that, given any 2-packing of directed bonds, one can obtain a pairwise noncrossing 2-packing by repeatedly uncrossing pairs of crossing directed
bonds, as described in the proof of Proposition 19.16.

19.5.6 Show that the graph G deﬁned in the proof of Proposition 19.16 is bipartite.
19.5.7 Consider the family D of digraphs D satisfying (19.8).
a) Let D ∈ D, and let D be any digraph obtained from D by subdividing one
arc of D. Show that if ν(D ) = ν(D), then D ∈ D.
b) Deduce that Di ∈ D, where Di is the digraph deﬁned in the proof of Theorem 19.18.
————— —————
19.5.8 Let D be a strong plane digraph. Show that:
a) D has a facial directed cycle,
b) if D has two vertex-disjoint directed cycles, then it has two such cycles which
are facial.
19.5.9 Consider vertex-disjoint packings of directed cycles in digraphs.
a) Find a 2-regular orientation of the octahedron for which ν = 1 and τ = 2.
b) Let D be a planar digraph with ν = 1. Show that:
i) τ ≤ 2,
ii) if τ = 2 and D is simple, with δ − ≥ 2 and δ + ≥ 2, then the underlying
graph of D is either the octahedron or a graph obtained from a wheel Wn ,
n ≥ 2, by replacing each of its spokes by two parallel edges.
(A. Metzlar and U.S.R. Murty)
19.5.10 Let D be a plane digraph. Two directed cycles C1 and C2 of D cross if
they have a common vertex v and their arcs that are incident with v alternate
around v. A family C of directed cycles in D is laminar if no two members of C
cross. Show that, given any family C of arc-disjoint directed cycles in D, there
exists a laminar family C  of arc-disjoint directed cycles in D with |C  | = |C|.
19.5.11 Let D be a 2-diregular planar digraph in which a maximum packing of
vertex-disjoint directed cycles has size k. Show that D contains a set of at most
4k vertices whose deletion destroys all directed cycles.
(A. Metzlar and U.S.R. Murty)

526

19 Coverings and Packings in Directed Graphs

19.6 Related Reading
Packing T-Cuts
The analogue for undirected graphs of the Lucchesi–Younger Theorem (19.18) fails
already for a triangle. However, it does hold when restricted to T -cuts in bipartite
graphs.
Let G be a graph and let T be an even subset of V . Recall that an edge cut
of the form ∂(X), where |X ∩ T | is odd, is called a T -cut of G. (In the special
case where T is the set of vertices of odd degree in G, the T -cuts are the odd cuts
of G.) Recall also that a subset F of E is called a T -join if the vertices of odd
degree in the subgraph G[F ] are precisely the vertices in T . It can be seen that the
minimal T -joins (with respect to inclusion) are precisely the minimal transversals
of T -cuts. Seymour (1981c) showed that for any bipartite graph G and any even
subset T of V , the minimum number of edges in a T -join is equal to the maximum
number of T -cuts in a packing. He used his theorem to solve an interesting special
case of the multicommodity ﬂow problem for planar graphs. (This problem was
discussed in Section 7.4.)
One may obtain a bipartite graph from an arbitrary graph by the simple device
of subdividing each edge exactly once. This transformation, together with the
above theorem of Seymour, yields a result on 2-packings due to Lovász (1975a):
for any graph G and any even subset T of V , the minimum number of edges in a
T -join is equal to one-half the maximum number of T -cuts in a 2-packing.

20
Electrical Networks

Contents
20.1 Circulations and Tensions . . . . . . . . . . . . . . . . . . . . . . . . . 527
The Circulation and Tension Spaces . . . . . . . . . . . . . . . . . 527
Circulations and Tensions in Plane Digraphs . . . . . . . . 529
20.2 Basis Matrices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 531
20.3 Feasible Circulations and Tensions . . . . . . . . . . . . . . . . . 534
Proof Technique: Farkas’ Lemma . . . . . . . . . . . . . . . . . . . . 535
Finding a Feasible Circulation . . . . . . . . . . . . . . . . . . . . . . 536
20.4 The Matrix–Tree Theorem . . . . . . . . . . . . . . . . . . . . . . . . 539
20.5 Resistive Electrical Networks . . . . . . . . . . . . . . . . . . . . . . 542
Kirchhoff’s Laws . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542
Effective Resistance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 545
20.6 Perfect Squares . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 547
20.7 Random Walks on Graphs . . . . . . . . . . . . . . . . . . . . . . . . 551
Hitting, Commute, and Cover Times . . . . . . . . . . . . . . . . . 551
20.8 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 556
Random Walks on Infinite Graphs . . . . . . . . . . . . . . . . . . . 556

20.1 Circulations and Tensions
We saw in Section 2.6 that the even subgraphs and edge cuts of a graph form
vector spaces over GF (2), namely the cycle and bond spaces of the graph. Here,
we consider analogous vector spaces over the reals, and more generally over any
ﬁeld. Throughout this section, D denotes a connected (though not necessarily
strongly connected) digraph and T a spanning tree of D.
The Circulation and Tension Spaces
In Section 7.3, we deﬁned a circulation in a digraph D as a function f : A → R
which satisﬁes the conservation condition at every vertex:

528

20 Electrical Networks

f + (v) = f − (v), for all v ∈ V

(20.1)

If one thinks of D as an electrical network, such a function deﬁnes a circulation
of currents in D. We noted in Section 7.3 that (20.1) may be expressed in matrix
notation as:
Mf = 0
(20.2)
where M is the n × m incidence matrix of D and 0 the n × 1 zero-vector. The set
of all circulations in D is thus a vector space. We denote this space by C := C(D),
and refer to it as the circulation space of D. As a consequence of (20.2), we have:
Proposition 20.1 The circulation space C of a digraph D is the orthogonal complement of the row space of its incidence matrix M.

We now turn our attention to the row space of M. Let g be an element of the
row space, so that g = pM for some vector p ∈ RV . Consider an arc a := (x, y).
In the column a of M, there are just two nonzero entries: +1 in row x and −1 in
row y. Thus
g(a) = p(x) − p(y)
(20.3)
If D is thought of as an electrical network, with potential p(v) at vertex v,
then by (20.3) g represents the potential diﬀerence, or tension, in the wires of
the network. For this reason, the row space of M is called the tension space of
D, denoted B(D) and its elements are referred to as tensions. Figure 20.1a shows
a digraph with an assignment of potentials to its vertices and the corresponding
tension.
2

2
0
2
2
4

0

1

−3

0

2
2
−1
(a)

1
0

−1

0
3

1

0
1

1
−1

0
1
0

(b)

Fig. 20.1. (a) A tension in a digraph, (b) the tension associated with a bond

Recall from Section 7.3 that with each cycle C one may associate a circulation
fC . Analogously, with each bond B := ∂(X), one may associate the tension gB
deﬁned by:
⎧
⎨ 1 if a ∈ ∂ + (X)
gB (a) := −1 if a ∈ ∂ − (X)
⎩
0 if a ∈ B

20.1 Circulations and Tensions

529

It can be veriﬁed that gB = pM, where

1 if v ∈ X
p(v) :=
0 if v ∈ V \ X
so gB is indeed a tension. This deﬁnition extends naturally to edge cuts. In the
case of a trivial edge cut B := ∂(v), the vector gB is simply the row m(v) of the
incidence matrix M of D. Figure 20.1b depicts the tension associated with a bond.
In the remainder of this chapter, we ﬁnd it convenient to identify a set of arcs in
a digraph with the subdigraph induced by that set.
Recall that the support of a nonzero circulation contains a cycle (Lemma 7.12).
Analogously, we have:
Lemma 20.2 Let g be a nonzero tension in a digraph D. Then the support of g
contains a bond. Moreover, if g is nonnegative, then the support of g contains a
directed bond.
Proof Let g := pM be a nonzero tension in a digraph D, with support S, and
let (x, y) ∈ S. Set X := {v ∈ V : p(v) = p(x)}. Then (x, y) ∈ ∂(X) and ∂(X) ⊆ S.
Thus S contains the edge cut ∂(X) which, being nonempty, contains a bond. If g
is nonnegative, this bond is a directed bond.

The following two propositions are the direct analogues for tensions of Propositions 7.13 and 7.14. We leave their proofs as an exercise (20.1.3).
Proposition 20.3 Every tension in a digraph is a linear combination of the tensions associated with its bonds.

Proposition 20.4 Every nonnegative tension in a digraph is a nonnegative linear
combination of the tensions associated with its directed bonds. Moreover, if the
tension is integer-valued, the coeﬃcients of the linear combination may be chosen
to be nonnegative integers.

Circulations and Tensions in Plane Digraphs
In Section 10.2, we studied the relationship between cycles and bonds in plane
graphs and digraphs. Theorem 10.18 may be extended to the spaces of circulations
and tensions as follows. For a function f on the arc set A(D) of a plane digraph D,
let f ∗ denote the function on A(D∗ ) deﬁned by f ∗ (a∗ ) := f (a), for all a ∈ A(D).
Applying Theorem 10.18, one may deduce the following theorem.
Theorem 20.5 Let D be a plane digraph. A function f on A(D) is a circulation
in D if and only if the function f ∗ is a tension in D∗ . Thus the circulation space

of D is isomorphic to the tension space of D∗ .
We leave the proof of Theorem 20.5 to the reader (Exercise 20.1.6). The relationship discussed here between circulations and tensions in plane digraphs is the
foundation for the theory of integer-valued ﬂows in graphs. We explore this topic
in Chapter 21.

530

20 Electrical Networks
−3

4
2

1

4
8

1

6
−5

1
−2

4

(a)

(b)

Fig. 20.2. Circulations and tensions are determined by their values on trees and cotrees
(Exercise 20.1.4)

Exercises
20.1.1 Let D = (V, A) be a digraph and g a real-valued function on A. Show that
g is a tension in D if and only if g + (C) = g − (C) for each cycle C of D and each
sense of traversal of C.
20.1.2
a) Let f be a circulation in a digraph D. Show that the function obtained by
negating the value of f on an arc a of D is a circulation in the digraph derived
from D by reversing the orientation of a.
b) State and prove an analogous result for tensions.
20.1.3 Prove Propositions 20.3 and 20.4.
20.1.4
a) Figure 20.2a displays a function deﬁned on a spanning tree of a digraph, and
Figure 20.2b a function deﬁned on its cotree. Extend the function shown in
Figure 20.2a to a tension and the function shown in Figure 20.2b to a circulation.
b) Let f be a circulation and g a tension in a digraph D, and let T be a spanning
tree of D. Show that f is uniquely determined by f |T , and that g is uniquely
determined by g|T.
20.1.5 Let D be a digraph, and let b be a real-valued function deﬁned on A.
Show that:
a) if f is a nonnegative circulation such that bf > 0, then there is a directed cycle
C in D such that bf C > 0,
b) if g is a nonnegative tension such that gb > 0, then there is a directed bond
B in D such that gB b > 0.
20.1.6 Deduce Theorem 20.5 from Theorem 10.18.
————— —————

20.2 Basis Matrices

531

20.2 Basis Matrices
A matrix B is called a basis matrix of the tension space B of a digraph D if the
rows of B form a basis for B; basis matrices of the circulation space C are deﬁned
analogously. In this section, all basis matrices are understood to be with respect
to a ﬁxed digraph D. We ﬁnd the following notation convenient. If R is a matrix
whose columns are labelled with the elements of A, and S is a subset of A, we
denote by R|S the submatrix of R consisting of the columns of R that are labelled
by the elements of S. If R has a single row, our notation is the same as the usual
notation for the restriction of a function to a subset of its domain.
Theorem 20.6 Let B and C be basis matrices of B and C, respectively, and let
S ⊆ A. Then:
i) the columns of B|S are linearly independent if and only if S contains no cycle,
ii) the columns of C|S are linearly independent if and only if S contains no bond.
Proof Denote the column of B corresponding to arc a by b(a). The columns
of B|
S are linearly dependent if and only if there exists a function f on A such
that a∈A f (a)b(a) = 0, with f (a) = 0 for some a ∈ S and f (a) = 0 for all
a∈
/ S, that is, if and only if there exists a nonzero circulation f whose support is
contained in S. Now if there is such an f , then S contains a cycle, by Lemma 7.12.
Conversely, if S contains a cycle C, then fC is a nonzero circulation whose support
C is contained in S. It follows that the columns of B|S are linearly independent if
and only if S is acyclic. A similar argument, using Lemma 20.2, yields a proof of
(ii).

Theorem 20.7 The dimensions of the tension and circulation spaces of a connected digraph D are given by the formulae:
dim B = n − 1

(20.4)

dim C = m − n + 1

(20.5)

Proof Consider a basis matrix B of B. By Theorem 20.6,
rank B = max{|S| : S ⊆ A, S acyclic}
The above maximum is attained when S is a spanning tree of D, and is therefore
equal to n−1. Because dim B = rank B, this establishes (20.4). Now (20.5) follows
directly, because C is the orthogonal complement of B.

Note that the formulae (20.4) and (20.5) for the dimensions of the tension and
circulation spaces of a digraph D depend only on the underlying graph G of D.
This is a common feature of most properties of circulations and tensions that are
of interest to us, the reason being that, for any circulation f or tension g, the
function obtained by negating the value of f or g on an arc of D is a circulation

532

20 Electrical Networks

or tension in the digraph obtained from D by reversing the orientation of that arc
(Exercise 20.1.2).
Let T be a spanning tree of a digraph D. We may associate with T a special
basis matrix of B. Consider an arc a of the tree T , and the corresponding fundamental bond Ba . We have seen that to each bond there is an associated tension.
We denote this tension by ga , deﬁned so that ga (a) = 1. The (n − 1) × m matrix
B whose rows are the vectors ga , a ∈ T , is then a basis matrix of B. This follows
from the fact that each row is a tension and that rank B = n − 1 (because B|T
is an identity matrix). We refer to B as the basis matrix of B corresponding to
T . Figure 20.3b shows the basis matrix of B corresponding to the spanning tree
{1, 2, 4, 5} indicated in Figure 20.3a.
1
5

6

8

7

4

2

3
(a)

g1
g2
g4
g5

1
1
0
0
0

2 3
0 −1
1 −1
0 −1
0 0

4
0
0
1
0
(b)

5 6 7
0 1 1
0 0 1
0 0 0
1 −1 −1

8
0
0
1
1

1 2
f3
1 1
f6 −1 0
f7 −1 −1
0 0
f8

3 4 5
1 1 0
0 0 1
0 0 1
0 −1 −1

6
0
1
0
0

7
0
0
1
0

8
0
0
0
1

(c)

Fig. 20.3. Basis matrices of B and C corresponding to a spanning tree

Analogously, if a is an arc of T , the fundamental cycle Ca corresponding to a
has an associated circulation fa , deﬁned so that fa (a) = 1. The (m − n + 1) × m
matrix C whose rows are the vectors fa , a ∈ T , is a basis matrix of C, the basis
matrix of C corresponding to T . Figure 20.3c gives an example of such a matrix.
In light of the above observations, we now have the following fundamental
theorem.
Theorem 20.8 Let D be a connected digraph and T a spanning tree of D. Then:
i) the set {ga : a ∈ T } of tensions associated with the fundamental bonds of D
with respect to T is a basis for B,
ii) the set {fa : a ∈ T } of circulations associated with the fundamental cycles of
D with respect to T is a basis for C.

The deﬁning conditions for circulations and tensions involve only addition and
subtraction, so these notions may be deﬁned over any (additive) abelian group Γ .

20.2 Basis Matrices

533

We denote by BΓ the set of all tensions, and by CΓ the set of all circulations, over
Γ . When Γ is the additive group of a ﬁeld F , these sets are vector spaces over F ,
and Theorems 20.6 and 20.7 remain valid (Exercise 20.2.3a).
In the case of ﬁelds of characteristic two, and more generally groups in which
each element is its own additive inverse, circulations and tensions in a digraph
D depend only on the underlying graph G; orientations of arcs play no role. For
example, over 
GF (2), a function f on A satisﬁes the conservation condition (20.1)
if and only if {f (a) : a ∈ ∂(v)} = 0, for all v ∈ V . This simply means that f
is a circulation over GF (2) if and only if its support is an even subgraph of G.
Similarly, a function g on A over GF (2) is a tension if and only if its support is an
edge cut of G. Thus, when F is the ﬁeld GF (2), the space CF is simply the cycle
space of G and BF its bond space, as deﬁned in Section 2.6.

Exercises
20.2.1
a) Let B and C be basis matrices of B and C and let T be a spanning tree of D.
Show that B is uniquely determined by B|T and that C is uniquely determined
by C|T .
b) Let T and T1 be two spanning trees of a connected digraph D. Denote by B
and B1 the basis matrices of B, and by C and C1 the basis matrices of C,
corresponding to the trees T and T1 , respectively. Show that B = (B|T1 )B1
and that C = (C|T 1 )C1 .
20.2.2 Kirchhoff Matrix
A Kirchhoﬀ matrix of a loopless connected digraph D is a matrix K := Mx
obtained from the incidence matrix M of D by deleting the row m(x). Show that
K is a basis matrix of B.
20.2.3 Let F be a ﬁeld and let CF and BF denote the circulation and tension
spaces of D over F . Show that Theorems 20.6 and 20.7 remain valid if B and C
are replaced by BF and CF , respectively.
20.2.4 Show that a function f : A → Γ is a circulation in a digraph D over an
additive abelian group Γ if and only if
f + (X) − f − (X) = 0
for every subset X of V .
20.2.5 Show that a function g : A → Γ is a tension in a digraph D over an additive
abelian group Γ if and only if
g + (C) − g − (C) = 0
for every cycle C of D with a given sense of traversal.
————— —————

534

20 Electrical Networks

20.3 Feasible Circulations and Tensions
Frequently, in both theoretical and practical situations, one seeks circulations or
tensions whose values on arcs satisfy prescribed bounds. In this section, we describe necessary and suﬃcient conditions for the existence of such circulations and
tensions.
Let D := (V, A) be a directed graph. Suppose that, with each arc a of D, are
associated two real numbers, b(a) and c(a), such that b(a) ≤ c(a). A circulation f
in D is feasible (with respect to the functions b and c) if b(a) ≤ f (a) ≤ c(a) for all
a ∈ A. The functions b and c are called lower and upper bounds, respectively. A
feasible tension is deﬁned similarly.
Let f be a feasible circulation in D, and let X be a subset of V . Because f is a
circulation, we have f + (X) = f − (X) (Exercise 7.3.1). On the other hand, because
f is feasible, c+ (X) ≥ f + (X) and f − (X) ≥ b− (X). It follows that
c+ (X) ≥ b− (X),

for all subsets X of V

(20.6)

Hoﬀman (1960) showed that this necessary condition for the existence of a feasible
circulation is suﬃcient.
Theorem 20.9 Hoffman’s Circulation Theorem
A digraph D has a feasible circulation with respect to bounds b and c if and only
if these bounds satisfy inequality (20.6). Furthermore, if both b and c are integervalued and satisfy this inequality, then D has an integer-valued feasible circulation.
Now let g be a feasible tension in D with respect to b and c. Consider any cycle
C of D, and a sense of traversal of C. Because g is a tension, g(C + ) = g(C − )
(Exercise 20.1.1). Moreover, because g is feasible, c(C + ) ≥ g(C + ) and g(C − ) ≥
b(C − ). Therefore,
c(C + ) ≥ b(C − ),

for each cycle C of D and each sense of traversal of C (20.7)

Ghouila-Houri (1960) showed that this necessary condition for the existence of a
feasible tension is suﬃcient.
Theorem 20.10 Ghouila-Houri’s Theorem
A digraph D has a feasible tension with respect to bounds b and c if and only if
these bounds satisfy inequality (20.7). Furthermore, if both b and c are integervalued and satisfy this inequality, then D has an integer-valued feasible tension.
Hoﬀman’s Circulation Theorem and Ghouila-Houri’s Theorem may both be
proved with the aid of a fundamental tool in linear algebra known as Farkas’
Lemma (see inset).

20.3 Feasible Circulations and Tensions

535

Proof Technique: Farkas’ Lemma
A system Ax = 0 of linear equations always has at least one solution. However, in many practical applications, one would like to ﬁnd a solution which
satisﬁes certain additional constraints, such as one of the form x ≥ b, where
b is a given vector of lower bounds. This may or may not be possible.
Let us suppose that there is, indeed, a vector x such that
Ax = 0, x ≥ b

(20.8)

Consider any vector y such that yA ≥ 0. Because b ≤ x and yA ≥ 0, we
have yAb ≤ yAx = y0 = 0. Thus, if (20.8) has a solution, the linear system
yA ≥ 0, yAb > 0

(20.9)

can have no solution. Farkas (1902) showed that this necessary condition for
the feasibility of the system (20.8) is also suﬃcient.
Lemma 20.11 Farkas’ Lemma
For any real matrix A and any real vector b, precisely one of the two linear
systems (20.8) and (20.9) has a solution.

Farkas’ Lemma can be deduced from the Duality Theorem of Linear Programming, discussed in Chapter 8 (see Exercise 8.6.9). A number of feasibility
theorems in graph theory may be derived from it very easily. In most of these
applications, the matrix A is the incidence matrix M of the digraph D under
consideration, and thus is totally unimodular (Exercise 1.5.7). Consequently,
if b is integer-valued, there is either an integer-valued solution x to (20.8) or
else an integer-valued solution y to (20.9).
As an illustration, we describe how Hoﬀman’s Circulation Theorem (20.9) may
be derived from Farkas’ Lemma. We ﬁrst obtain a condition for the existence
of a circulation subject only to lower bounds.
Proposition 20.12 Let D be a digraph, and let b be a real-valued function
deﬁned on A. Then either there is a circulation f in D such that f ≥ b, or
there is a nonnegative tension g in D such that gb > 0.
Proof Consider the incidence matrix M of D, and the two linear systems:
Mf = 0,

f ≥b

(20.10)

pM ≥ 0,

pMb > 0

(20.11)

By Farkas’ Lemma, exactly one of these two systems has a solution. The
proposition follows on observing that a solution f to the system Mf = 0 is a
circulation in D, and a vector of the form pM is a tension g in D.


536

20 Electrical Networks

Farkas’ Lemma (continued)
Applying Exercise 20.1.5b, we now have the following corollary.
Corollary 20.13 Let D be a digraph, and let b be a real-valued function deﬁned on A. Then either there is a circulation f in D such that f ≥ b, or there
is a directed bond B in D such that gB b > 0.

Hoﬀman’s Circulation Theorem (with both lower and upper bounds) can be
deduced from Corollary 20.13 by means of a simple transformation (see Exercise 20.3.5). Ghouila-Houri’s Theorem (20.10) can be derived in an analogous
fashion from a variant of Farkas’ Lemma asserting that exactly one of the
two linear systems yA ≥ b, and Ax = 0, x ≥ 0, bx > 0, has a solution
(Exercises 8.6.10 and 20.3.6). A constructive proof of Hoﬀman’s Circulation
Theorem is given below.

Finding a Feasible Circulation
An algebraic proof of Hoﬀman’s Circulation Theorem (20.9) is given in the inset.
Here, we describe a constructive proof of this theorem based on network ﬂows.
Proof We show how to ﬁnd a feasible circulation in any network satisfying the
necessary condition (20.6). For clarity of presentation, we assume that both b and
c are integer-valued functions on A. Our proof may be adapted to the general case
in a straightforward manner (Exercise 20.3.1).
Let f be a real-valued function on A satisfying the lower and upper bounds
b(a) ≤ f (a) ≤ c(a) for all a ∈ A. We deﬁne a vertex v to be positive, balanced,
or negative according
net ﬂow f + (v) − f − (v) out of v is positive, zero, or
 as the
+
negative. Because v∈V (f (v) − f − (v)) = 0 (Exercise 7.1.1a), either all vertices
are balanced, in which case f is a feasible circulation, or there are both positive
and negative vertices.

Let us call the quantity v∈V |f + (v)−f − (v)| the excess of f . If not all vertices
are balanced, the excess is positive. In this case, we show how f can be modiﬁed to
a ﬂow f  which also satisﬁes the lower and upper bounds, but which has a smaller
excess. Repeating this procedure results in a feasible circulation.
Consider a negative vertex x. By analogy with the notion of an f -augmenting
path in the Max-Flow Min-Cut Algorithm (7.9), call an x-path P in D an f improving path if f (a) < c(a) for each forward arc a of P , and f (a) > b(a) for
each reverse arc a of P . Let X be the set of all vertices reachable from x by f improving paths. Then f (a) = c(a) for each arc a ∈ ∂ + (X) and f (a) = b(a) for
each arc a ∈ ∂ − (X). Therefore, applying Exercise 7.1.2,

(f + (v) − f − (v)) = f + (X) − f − (X) = c+ (X) − b− (X) ≥ 0
v∈X

20.3 Feasible Circulations and Tensions

537

Because X includes a negative vertex, namely x, we deduce that X also includes a
positive vertex y, so there exists an f -improving path xP y. Let f  be the function
on A deﬁned by:
⎧
⎨ f (a) + 1 if a is a forward arc of P
f  (a) = f (a) − 1 if a is a reverse arc of P
⎩
f (a)
otherwise
It is straightforward to verify that b(a) ≤ f  (a) ≤ c(a) for all a ∈ A, and that the

excess of f  is two less than the excess of f .
We remark that the above constructive proof can be adapted easily to an
algorithm which accepts as input a network N with lower and upper bounds b
and c, and returns either a feasible circulation in N or a set X violating condition
(20.6).

Exercises
20.3.1 Give a constructive proof of Theorem 20.9, without the assumption that
b and c are integer-valued.
20.3.2 Give an algorithm, based on the constructive proof of Theorem 20.9, for
ﬁnding either a feasible circulation in a digraph D or a subset X of V which
violates (20.6).
20.3.3 Given a digraph D := D(x, y) and two real-valued functions b and c on
the arc set A of D, a function f on A is a feasible ﬂow in D (relative to b and
c) if (i) b(a) ≤ f (a) ≤ c(a), for all a ∈ A, and (ii) f + (v) − f − (v) = 0, for all
v ∈ V \ {x, y}. (This is just a slight generalization of our earlier deﬁnition of
feasibility; when b = 0, condition (i) reduces to (7.2).) Show how the Max-Flow
Min-Cut Algorithm (7.9) can be modiﬁed to ﬁnd a feasible ﬂow of maximum value
starting from an initial feasible ﬂow.
20.3.4 Deduce the Max-Flow Min-Cut Theorem (7.7) from Hoﬀman’s Circulation
Theorem.
————— —————
20.3.5
a) Let D be a digraph with lower and upper bound functions b and c deﬁned on
its arc set A. Deﬁne a digraph D with vertex set V (D) ∪ {v(a) : a ∈ A} and
arc set
A := {(t(a), v(a)) : a ∈ A} ∪ {(h(a), v(a)) : a ∈ A}
where t(a) and h(a) are the tail and head of a, respectively. (Equivalently,
subdivide each arc a of D by a single vertex v(a), thereby transforming it into

538

20 Electrical Networks

a directed path of length two, and then reverse the second arc of each such
path.) Deﬁne a lower bound function b on the arc set A of D by:
b (t(a), v(a)) := b(a),

b (h(a), v(a)) := −c(a),

a∈A

Show that:
i) if f is a circulation in D, then the function f  deﬁned on A by:
f  (t(a), v(a)) := f (a),

f  (h(a), v(a)) := −f (a),

a∈A

is a circulation in D ,
ii) b ≤ f ≤ c if and only if f  ≥ b .
b) Deduce Hoﬀman’s Circulation Theorem (20.9) from Corollary 20.13.
20.3.6 A variant of Farkas’ Lemma says that exactly one of the two linear systems
yA ≥ b, and Ax = 0, x ≥ 0, bx > 0, has a solution (see Exercise 8.6.10). Let D
be a digraph, and let b ∈ RA .
a) Using this variant of Farkas’ Lemma, show that either there is a tension g in D
such that g ≥ b, or there is a nonnegative circulation f in D such that bf > 0.
b) Deduce that either there is a tension g in D such that g ≥ b, or there is a
directed cycle C in D such that bf C > 0.
c) Deduce Ghouila-Houri’s Theorem from (b).
20.3.7 Give a constructive proof of the statement in Exercise 20.3.6b based on the
Bellman–Ford Algorithm (described in Exercise 6.3.11).
20.3.8 Min-Cost Circulation
Let D = (V, A) be a weighted directedgraph, with weight (or cost) function w. The
cost of a circulation f is the quantity a∈A w(a)f (a). Suppose that with each arc a
of D are associated lower and upper bounds b(a) and c(a), where b(a) ≤ c(a). The
Min-Cost Circulation Problem consists of ﬁnding a feasible circulation of minimum
cost.
a) Deﬁne a cycle C to be cost-reducing with respect to a feasible circulation f if:
 f (a) < c(a), for each a ∈ C + ,
 f(a) > b(a), for
each a ∈ C − ,

a∈C + w(a) −
a∈C − w(a) is negative.
∗
be
a
min-cost
circulation. Show that there can exist no cost-reducing
i) Let f
cycle with respect to f ∗ .
ii) Let f be a feasible circulation that is not one of minimum cost. By considering the circulation f ∗ − f , and using the transformation described in
Exercise 20.1.2 and Proposition 7.14, show that there exists a cost-reducing
cycle with respect to f .
b) Starting with any feasible circulation, describe how the Bellman–Ford Algorithm (Exercise 6.3.11) may be applied to ﬁnd a min-cost circulation, assuming
that the functions b, c and w are rational-valued.
(There exist polynomial-time algorithms for solving the Min-Cost Circulation
Problem; see Schrijver (2003).)

20.4 The Matrix–Tree Theorem

539

20.4 The Matrix–Tree Theorem
In Section 4.2, we gave a proof of Cayley’s Formula for the number of spanning
trees in a complete graph. Here, we derive several expressions for the number of
spanning trees in any connected graph G. Recall that this parameter is denoted
t(G).
A matrix is said to be unimodular if the determinants of all its full square
submatrices have values 0, +1 or −1; in particular, any totally unimodular matrix
is unimodular. Kirchhoﬀ matrices are examples of unimodular matrices (Exercise 20.4.1a). Other examples are provided by basis matrices corresponding to
spanning trees (Exercise 20.4.3).
The proof of the following theorem is due to Tutte (1965a).
Theorem 20.14 Let D be a connected digraph and B a unimodular basis matrix
of its tension space B. Then
t(G) = det BBt
Proof Using the Cauchy–Binet Formula1 for the determinant of the product of
two rectangular matrices, we obtain

{(det(B|S))2 : S ⊆ A, |S| = n − 1}
det BBt =
By Theorem 20.6(i), the number of nonzero terms in this sum is equal to t(G).
Moreover, because B is unimodular, each such term has value 1.

This observation, together with the fact, noted above, that Kirchhoﬀ matrices
are unimodular, yields the following formula for the number of spanning trees in
a graph, implicit in the work of Kirchhoﬀ (1847).
Theorem 20.15 The Matrix–Tree Theorem
Let G be a loopless connected graph, D an orientation of G, and K a Kirchhoﬀ
matrix of D. Then
t(G) = det KKt



The conductance matrix or Laplacian of a loopless graph G with adjacency
matrix A = (aij ) is the n × n matrix C = (cij ), where
⎧
⎨
aki , if i = j
cij :=
k
⎩
−aij , if i = j
Figure 20.4 shows a graph together with its conductance matrix.
We leave the proof of the following corollary as Exercise 20.4.2.
1

Let A and B be two k × m matrices (k ≤ m), whose columns are indexed by the
elements of a set E. The Cauchy–Binet Formula states that
det ABt =



S⊆E, |S|=k

det(A|S) det(B|S)

540

20 Electrical Networks
u

x

y

w

u
v
w
x
y

u v w x y
4 −1 −1 −1 −1
−1 3 −1 0 −1
−1 −1 3 −1 0
−1 0 −1 2 0
−1 −1 0 0 2

v
G

C

Fig. 20.4. The conductance matrix of a graph

Corollary 20.16 Let G be a loopless connected graph, C its conductance matrix,
and D an orientation of G. Then:
i) C = MMt , where M is the incidence matrix of D,
ii) every cofactor of C has value t(G).



The proof of the following theorem is analogous to that of Theorem 20.14.
Theorem 20.17 Let D be a connected digraph and C a unimodular basis matrix
of its circulation space C. Then
t(G) = det CCt
Corollary 20.18 Let D be a connected digraph and B and C unimodular basis
matrices of B and C, respectively. Then
t(G) = ± det

B
C

Proof By Theorems 20.14 and 20.17,
(t(G))2 = det BBt det CCt = det

BBt 0
0 CCt

Because B and C are orthogonal, BCt = CBt = 0. Thus


B
BBt BCt
t
t
(t(G))2 = det
=
det
[B
|C
]
C
CBt CCt

2
B
B
t
t
= det
det [B |C ] = det
C
C
The corollary follows on taking square roots.



20.4 The Matrix–Tree Theorem

541

Exercises
20.4.1 Let K be a Kirchhoﬀ matrix of a loopless connected digraph D, and let
G be the underlying graph of D. Show that:
a) K is unimodular,
K
b) t(G) = ± det
, where C is a basis matrix of C associated with a spanning
C
tree of G.
20.4.2 Prove Corollary 20.16.
20.4.3 Let D be a connected digraph and B and C basis matrices of B and C,
respectively, corresponding to a spanning tree T . Show that B and C are totally
unimodular.
20.4.4 Use the Matrix–Tree Theorem (20.15) to compute the number of spanning
trees in the graph shown in Figure 20.5.

Fig. 20.5. How many spanning trees are there in this graph? (Exercise 20.4.4)

————— —————
20.4.5 Let F be a ﬁnite ﬁeld of characteristic p, let B and C be basis matrices of
BF and CF , respectively, corresponding to a spanning tree of a digraph D, and let
G be the underlying graph of D. Show that:
a)
det

B
≡ ±t(G)(mod p)
C

b) dim(BF ∩ CF ) > 0 if and only if p|t(G).

(H. Shank)

542

20 Electrical Networks

20.4.6 The Laplacian of a loopless digraph D with vertex set {v1 , v2 , . . . , vn } and
adjacency matrix A = (aij ) is the n × n matrix C = (cij ), where:
⎧
⎨
aki , if i = j
cij :=
k
⎩
−aij , if i = j
Let Cii denote the matrix obtained from C by deleting its ith row and ith column.
Show that the determinant of Cii is equal to the number of spanning branchings
(W.T. Tutte)
of D rooted at vi .

20.5 Resistive Electrical Networks
We have already remarked that a circulation in a digraph may be viewed as a
ﬂow of currents in an electrical network, and that tensions represent voltage drops
along wires. In this section, we make precise these relationships, and show how to
compute the currents in a network using the matrix equations developed in the
previous section.
A resistive electrical network is one in which each wire has a speciﬁc resistance.
By Ohm’s Law, the voltage drop v between the ends of the wire is given by the
equation v = ir, where i is the current in the wire and r its resistance.
A graph G can be regarded as a resistive electrical network in which each edge
is a wire of unit resistance. In this case, the voltage drop between the ends of an
edge is equal to the current along the edge. We take one edge of G, say e := xy,
to be a current generator (for instance, a battery). This current generator creates
a voltage drop between x and y, and thereby induces in G \ e a ﬂow of current
from x, the negative pole of the network, to y, its positive pole. This ﬂow, in turn,
determines an orientation D := D(x, y) of G \ e (except for edges which carry no
current, which may be oriented arbitrarily).
Kirchhoff’s Laws
Kirchhoﬀ (1847) formulated two basic laws of resistive electrical networks. When
each wire is of unit resistance, they can be stated in terms of the above notation
as follows.
 Kirchhoﬀ ’s Current Law: the currents in G \ e constitute an (x, y)-ﬂow in D.
 Kirchhoﬀ ’s Voltage Law: the currents in G \ e constitute a tension in D.
A function on the arc set A of a digraph D := D(x, y) which is both an
(x, y)-ﬂow and a tension is called a current ﬂow in D from x to y. (Thus what
distinguishes a current ﬂow from an arbitrary (x, y)-ﬂow is that it is also a tension.)
The value of a current ﬂow is its value as an (x, y)-ﬂow.
Theorem 20.19 Let D := D(x, y) be a connected directed graph. For any real
number i, there exists a unique current ﬂow in D of value i from x to y.

20.5 Resistive Electrical Networks

543

Proof Let K = My be a Kirchhoﬀ matrix of D. We assume that the ﬁrst row of
K is indexed by x. By deﬁnition, a function f : A → R is a current ﬂow of value i
from x to y if it satisﬁes the two systems of equations:
i
0

Kf =

and Cf = 0

where C is any basis matrix of C. Because K has n − 1 rows, the ﬁrst system
consists of n − 1 equations. Similarly, because C has m − n + 1 rows, the second
system consists of m − n + 1 equations. Combining these two systems, we obtain
the following system of m equations in m variables.
K
i
f=
C
0

(20.12)

Because the rows of K are a basis for B and the rows of C are a basis for its
K
orthogonal complement C, the matrix
is nonsingular. Therefore the system
C
(20.12) has a unique solution, yielding a unique current ﬂow f of value i from x to
y.

For an arbitrary positive integer i, the values of the currents obtained by solving
(20.12) might well not be integral. However, by Exercise 20.4.1b,
det

K
= ±t(D)
C

so, by Cramér’s Rule, we can guarantee a solution in integers by taking i = t(D).
Thus, in computing currents, it is convenient to take the total current leaving x
to be equal to the number of spanning trees of D.
Example 20.20 Consider the planar graph G in Figure 20.6a. On deleting the
edge xy and orienting each remaining edge, as shown, we obtain the digraph D of
Figure 20.6b. It can be checked that t(D) = 66 (Exercise 20.4.4). By considering
the tree T := {a1 , a2 , a3 , a4 , a5 } we obtain the following nine equations, as in
(20.12), (with f (ai ) written simply as fi ).
f1 +f2
−f8 −f9
f1
f2 −f3 −f4
−f5 −f6
+f9
f3
+f6 −f7
f4
+f6
f3 −f4
+f7
−f3 +f4 −f5
−f5
+f8
f1 −f2 −f3
+f9
f1 −f2 −f3

= 66
=0
=0
=0
=0
=0
=0
=0
=0

The solution to this system of equations is given by
(f1 , f2 , f3 , f4 , f5 , f6 , f7 , f8 , f9 ) = (36, 30, 14, 16, 20, 2, 18, 28, 8)

(20.13)

544

20 Electrical Networks
x

x

a1

a2

a3

a9

a4
a6

a5

a8

a7
y

y

(a)

(b)

Fig. 20.6. (a) A planar graph G, (b) an orientation D of G \ xy

We now derive a second expression for the current ﬂow, due to Thomassen
(1990).
Given an xy-path P in a digraph D := D(x, y), the signed incidence vector of
P is the function fP : A → R deﬁned by
⎧
⎨ 1 if a ∈ P +
fP (a) := −1 if a ∈ P −
⎩
0 if a ∈ P
For each spanning tree T of D, set fT := fP , where P := xT y. Observe that
fT is an (x, y)-ﬂow in D of value one. Consequently, the function f deﬁned by

fT
(20.14)
f :=
T

where the sum is taken over all spanning trees T of D, is an (x, y)-ﬂow in D of
value t(D).
Now consider the digraph D obtained from D by adding a new arc a from y
to x. For each spanning tree T  of D containing a , denote by Tx the component of
T  \ a containing x, and by gT  the tension in D associated with the bond ∂(Tx ).
Then the function g deﬁned by

gT 
(20.15)
g :=
T

where the sum is taken over all spanning trees T  of D containing a , is a tension
in D.
Thomassen (1990) showed that f = g, and hence (by virtue of Theorem 20.19)
that this function is the unique current ﬂow in D of value t(D).

20.5 Resistive Electrical Networks

545

Theorem 20.21 In any directed graph D := D(x, y), the functions f and g deﬁned
by (20.14) and (20.15) are equal. This function is therefore the unique current ﬂow
in D of value t(D).
Proof Let T be a spanning tree of D, and a an arc of the path P := xT y.
Consider the spanning tree T  := (T \ a) + a of D . Then the arc a is a forward
arc of P if it belongs to ∂ + (Tx ), and a reverse arc of P if it belongs to ∂ − (Tx ).
Conversely, let T  be a spanning tree of D containing the arc a , and let a be
an arc of D such that T := (T  \ a ) + a is a spanning tree of D. Then the arc a
belongs to ∂ + (Tx ) if it is a forward arc of the path P := xT y, and to ∂ − (Tx ) if it
is a reverse arc of P . It follows that f = g.


Effective Resistance
Given a current ﬂow from x to y in a digraph D := D(x, y), Kirchhoﬀ’s Voltage Law
implies that the voltage drop along each xy-path (that is, the sum of the tensions
on its edges) is the same. When the current ﬂow is of value one, this common
voltage drop is called the eﬀective resistance between x and y, and is denoted rxy .
(It is easily seen, by reversing the ﬂow, that rxy = ryx , so the terminology and
notation adopted here are unambiguous.)
As an example, consider the current ﬂow of value one in the digraph D(x, y) of
Figure 20.7. This ﬂow shows that the eﬀective resistance between x and y is 8/7.
u
4
7

x

4
7

y

1
7

1
7
3
7

3
7

w

2
7

v

Fig. 20.7. A current ﬂow of value one in a digraph D(x, y)

Denote by K the Kirchhoﬀ matrix Mx and by L the matrix Mxy , where M
is the incidence matrix of D. Thomassen (1990) gave a simple formula for the
eﬀective resistance.
Theorem 20.22 The eﬀective resistance between x and y in an electrical network
D(x, y) is given by the formula
rxy =

det LLt
det KKt

546

20 Electrical Networks



Proof Add a new
 arc a := (y, x) to D, so as to obtain a digraph D . By Theorem 20.21, g := T  gT  is the unique current ﬂow of value t(D). For any xy-path
in D, each tension gT  contributes a voltage drop of one along the path. Thus the
total voltage drop along any path is the number of spanning trees of D that contain a . By Exercise 4.2.1a, this number is t(D / a ) = t(D / {x, y}) (the digraph
obtained from D by identifying x and y). Therefore,

rxy (D) =

t(D / {x, y})
t(D)

By the Matrix–Tree Theorem (20.15), t(D) = det KKt , so it remains to show that
t(D / {x, y}) = det LLt .
The incidence matrix of D / {x, y} is obtained from the incidence matrix M of
D by ‘merging’ the rows m(x) and m(y), the new row corresponding to the vertex
resulting from the identiﬁcation of x and y. The principal submatrix of MMt
obtained by deleting this row and the corresponding column is precisely LLt , so

t(D / {x, y}) = det LLt , by the Matrix–Tree Theorem (20.15).
As an illustration, consider the digraph of Figure 20.7. This digraph has 21
spanning trees (see Exercise 4.2.5), whereas the digraph obtained from it by identifying x and y has 24 spanning trees. Theorem 20.22 asserts that
rxy =

8
det LLt
24
=
=
t
det KK
21
7

conﬁrming our earlier computation.
If xy is an edge of a connected graph G, we denote by txy (G) the number
of spanning trees of G containing xy. Note that txy (G) = t(G / xy), by Exercise 4.2.1a. The following expression for the eﬀective resistance between adjacent
vertices is due to Thomassen (1990).
Corollary 20.23 If x and y are adjacent vertices of a digraph D,
rxy =

txy (D)
t(D)

.
Proof As in the proof of Theorem 20.22, one has txy (D) = det LLt . Also, t(D) =

det KKt .
In the remaining sections of this chapter, we present two surprising, quite
diﬀerent applications of the results established above.

Exercises
20.5.1 Thomson’s Principle
Let D := D(x, y) be a connected digraph.

20.6 Perfect Squares

547

a) For any real number i, show that:
i) there is an (x, y)-ﬂow in D of value i,
ii) the set of all such ﬂows is a closed subset of RA . 
b) The power of an (x, y)-ﬂow f in D is the quantity {(f (a))2 : a ∈ A(D)}.
Show that:
i) there is an (x, y)-ﬂow which minimizes the power,
ii) this ﬂow is a current ﬂow in D,
iii) there is only one such ﬂow.
(The fact that the unique ﬂow of minimum power is a current ﬂow is known as
Thomson’s Principle.)
20.5.2 Let G be an edge-transitive graph, and let xy ∈ E. Express rxy in terms of
the numbers of vertices and edges of G.
20.5.3 Compute the eﬀective resistances between all pairs of vertices in the digraph
of Figure 20.7 in two ways:
a) by determining current ﬂows of value one,
b) by applying Theorem 20.22 or Corollary 20.23.
————— —————

20.6 Perfect Squares
A squared rectangle is a rectangle dissected into a ﬁnite number (at least two) of
squares. If no two of the squares in the dissection have the same size, the squared
rectangle is said to be perfect. The order of a squared rectangle is the number of
squares into which it is dissected. Figure 20.8 shows a perfect rectangle of order
nine, found by Moron (1925). Note that this squared rectangle does not properly
contain another one. Such squared rectangles are called simple. Clearly, every
squared rectangle is composed of ones that are simple.
For a long time, no simple perfect squared squares were known. It was even
conjectured that such squares do not exist. The ﬁrst person to describe one was
Sprague (1939); it was of order 55. At about the same time, Brooks et al. (1940)
developed systematic methods for constructing simple perfect squared squares by
using the theory of electrical networks. In this section, we outline their approach.
We ﬁrst show how a current ﬂow in a digraph can be associated with a given
squared rectangle R. The union of the horizontal sides of the constituent squares
of R consists of horizontal line segments; each such segment is called a horizontal
dissector of R. In Figure 20.9a the horizontal dissectors are indicated by solid lines.
To each horizontal dissector Hi of R there corresponds a vertex vi of the digraph
D associated with R. Two vertices vi and vj of D are joined by an arc (vi , vj ) if
and only if the horizontal dissectors Hi and Hj ﬂank some square of the dissection
and Hi lies above Hj in R. Figure 20.9b shows the digraph associated with the

548

20 Electrical Networks

15

18

7

4

8

14
10

9

Fig. 20.8. A simple perfect squared rectangle

squared rectangle in Figure 20.9a. The vertices corresponding to the upper and
lower sides of R are called the poles of D and are denoted by x and y, respectively.
We assign to each vertex v of D a potential p(v), equal to the height (above
the lower side of R) of the corresponding horizontal dissector (see Figures 20.9a
and 20.9b). If we regard D as an electrical network in which each wire has unit
resistance, the tension f determined by this potential can be seen to satisfy both of
Kirchhoﬀ’s Laws, and hence is a current ﬂow from x to y in D (see Figure 20.9c).
x

32

x

15

18

18

15

17
7

4
14

8

14
9

10

8
1

14

10

9

9
y

(a)

7

4

10

0
(b)

y
(c)

Fig. 20.9. (a) A perfect squared rectangle, (b) its associated electrical network, (c) the
resulting current ﬂow

Let D be the digraph corresponding to a squared rectangle R, with poles x
and y, and let G be the underlying graph of D. Then the graph G := G + xy
is called the horizontal graph of R. This graph is easily seen to be connected and

20.6 Perfect Squares

549

planar. Brooks et al. (1940) showed that when the squared rectangle R is simple,
its horizontal graph is 3-connected. Conversely, they showed that if G is a simple
3-connected planar graph and xy is any edge of G, then a current ﬂow from x to
y in G \ xy determines a simple squared rectangle. Thus one way of searching for
squared rectangles of order k is as follows.
i) List all simple 3-connected planar graphs with k + 1 edges.
ii) For each such graph G and each edge xy of G, determine a current ﬂow from
x to y in G \ xy by solving the system of equations (20.12).
For example, if we consider the graph G shown in Figure 20.6a, the current ﬂow
from x to y in the digraph D of Figure 20.6b is given by (20.13). The squared rectangle based on this current ﬂow is just the one displayed in Figure 20.9a, but with
all dimensions doubled. Brooks et al. (1940) examined by hand many 3-connected
planar graphs, and eventually succeeded in ﬁnding a simple perfect squared square.
Much later, Duijvestijn (1978) applied this same strategy systematically using a
computer, and found several other examples, including the one of order 21 shown
in Figure 20.10; this is the unique simple perfect squared square of least order (up
to reﬂections and rotations).
Tutte (1948b) generalized the above theory to dissections of equilateral triangles into equilateral triangles. Further results on perfect squares can be found in
the survey article by Tutte (1965b).

27

35
50
8
15

17

11
6

9 7
29

33

24

18

25

19

16

37

42

Fig. 20.10. The unique perfect squared square of smallest order

550

20 Electrical Networks

Exercises
20.6.1
a) Determine the unique current ﬂow of value 69 from x to y in the graph of
Figure 20.11a, and the unique current ﬂow of value 65 from x to y in the
graph of Figure 20.11b.
b) Based on these ﬂows, construct simple squared rectangles of orders nine and
ten.
x

x

y

y

(a)

(b)

Fig. 20.11. Construct squared rectangles of orders nine and ten from these graphs
(Exercise 20.6.1)

20.6.2 The vertical graph of a squared rectangle R is the horizontal graph of the
squared rectangle obtained by rotating R through 90 degrees. If no point of R is
the corner of four constituent squares, show that the horizontal and vertical graphs
of R are planar duals.
(R.L. Brooks, C.A.B. Smith, A.H. Stone, and W.T. Tutte)
————— —————
20.6.3 Show that the constituent squares in a squared rectangle have commensurable sides.
20.6.4 A perfect cube is a cube dissected into a ﬁnite number of smaller cubes, no
two of the same size. Show that there exists no perfect cube.
20.6.5
a) The Fibonacci numbers Fi , i ≥ 1, are the integers satisfying the initial condition
F1 = F2 = 1 and the recurrence relation Fi = Fi−1 + Fi−2 , i ≥ 3. A dissection
of the plane into squares which uses exactly one square of side Fi for each i ≥ 1
is called a Fibonacci tiling. Find such a tiling.
b) Using (a), ﬁnd a dissection of the plane into squares, no two of the same size.
(Henle and Henle (2006) have described a dissection of the plane into squares
using exactly one square of each integral dimension.)

20.7 Random Walks on Graphs

551

20.7 Random Walks on Graphs
A random walk on a simple undirected graph G is a walk on G whereby, when
it reaches a vertex v, the edge along which to travel next is chosen at random,
the d(v) edges incident with v being equiprobable. If its initial vertex is x, the
walk is called a random x-walk. A classical example of such a walk, on the ndimensional integer lattice Zn (the cartesian product of n two-way inﬁnite paths),
is the Drunkard’s Walk.
Example 20.24 The Drunkard’s Walk
The two-dimensional integer lattice Z2 (depicted in Figure 1.27) represents an
inﬁnite system of streets. A drunkard sets out from home, one of the vertices.
What is the probability that he eventually returns home, assuming that he takes a
random walk? Pólya (1921) proved that this probability is one, in other words, that
the drunkard is sure to get back home eventually (despite his inebriated state).
On the other hand, in a random walk on the three-dimensional lattice Z3 , this
probability is strictly less than one; with positive probability, the drunkard will
stray farther and farther from home.
Hitting, Commute, and Cover Times
Doyle and Snell (1984) discovered that certain basic properties of random walks
on graphs depend principally on the eﬀective resistances of the graphs, regarded as
electrical networks. This phenomenon, which at ﬁrst sight seems quite surprising,
can perhaps be understood by imagining the trajectory of an electron in a network
as a random walk. It is illustrated by the following theorem. A random x-walk is
said to hit a vertex y when it reaches y, and to return to x when it reaches x after
hitting at least one other vertex.
Theorem 20.25 Let x and y be distinct vertices of a simple connected graph G.
The probability Px that a random x-walk on G hits y before returning to x is given
by
1
Px =
d(x) rxy
Proof For v ∈ V \ {x}, denote by Pv the probability that a random v-walk on G
hits y before hitting x. Then Py = 1, and
Pv =

1 
Pw ,
d(v) w

that is,
d(v)Pv −



Pw = 0,

v ∈ V \ {y}

v ∈ V \ {y}

w

where the summations are over all vertices w in N (v) \ {x}.

552

20 Electrical Networks

Let N be the matrix derived from the conductance matrix C := MMt by setting to zero all nondiagonal entries in the column corresponding to x and replacing
the row corresponding to y by the unit vector consisting of a one on the diagonal
and zeros elsewhere. Let P be the vector (Pv : v ∈ V ). We assume that the ﬁrst
and last vertices in the indexing of MMt , N and P are x and y, respectively. Then
⎡ ⎤
⎤
⎡
0
d(x) ∗ · · · ∗ ∗
⎢0⎥
⎢ 0
∗⎥
⎢ ⎥
⎥
⎢
⎢.⎥
⎢ .
.⎥
⎢ ⎥
⎥
⎢
⎥
⎢
.⎥
LLt
NP = ⎢
⎢ . ⎥ where N = ⎢ .
⎥
⎢.⎥
⎢ .
.⎥
⎢ ⎥
⎥
⎢
⎣0⎦
⎣ 0
∗⎦
0 0 · · · 0 1
1
where L = Mxy (the asterisks denoting unspeciﬁed values). By Cramér’s Rule,
Px =

−det Nxy
det N

where Nxy is the matrix obtained from N by deleting the ﬁrst column (corresponding to x) and the last row (corresponding to y). But this is identical to the
submatrix of MMt obtained by deleting its ﬁrst column and last row. Therefore
−det Nxy is a cofactor of MMt and hence is equal to t(G) = det KKt by Corollary 20.16. Because det N = d(x) det LLt , we have
Px =

det KKt
1
=
d(x) det LLt
d(x) rxy



We illustrate the proof of Theorem 20.25 with the graph of Figure 20.4. This
graph and its associated matrix N are shown in Figure 20.12.
u

x

y

w

x
u
v
w
y

x u v w y
2 −1 0 −1 0
0 4 −1 −1 −1
0 −1 3 −1 −1
0 −1 −1 3 0
0 0 0 0 1

v
G

N

Fig. 20.12. A graph G and its associated matrix N

20.7 Random Walks on Graphs

553

The corresponding system of equations is:
−
2Px − Pu
4Pu − Pv −
− Pu + 3Pv −
− Pu − Pv +

Pw
=
P w − Py =
P w − Py =
3Pw
=
Py =

0
0
0
0
1

with solution Px = 7/16, Pu = 1/2, Pv = 5/8, Pw = 3/8, Py = 1. From a
previous computation, rxy = 8/7. Because d(x) = 2, this conﬁrms the formula
Px = 1/(d(x) rxy ) of Theorem 20.25.
Another connection between random walks and electrical networks was discovered by Nash-Williams (1959). The hitting time Hxy is the expected number of
steps taken by a random x-walk before hitting vertex y. The commute time Cxy
between x and y is deﬁned by
Cxy := Hxy + Hyx

(20.16)

(Note that, in general, Hxy = Hyx ; see Exercise 20.7.3.)
Theorem 20.26 Let x and y be distinct vertices of a simple connected graph G.
The commute time between x and y is given by
Cxy = 2mrxy
Proof The hitting time satisﬁes the linear system


Hvy =

w∈N (v)

1
(1 + Hwy ), v ∈ V \ {y}
d(v)

(20.17)

For z ∈ {x, y} and v ∈ V \ {z}, denote by fvz the current ﬂow in G from v to z of
value d(v), and set

fvz
fz :=
v∈V \{z}

The net ﬂow out of v in fvy is d(v), whereas the net ﬂow out of v in fuy , where
u = v, is zero. Therefore,
the net ﬂow out of v in fy is d(v), v ∈ V \ {y}, and the

net ﬂow into y is v∈V \{y} d(v) = 2m−d(y). Denote by Vvy the voltage drop from
v to y in fy . The current in fy between adjacent vertices v and w is equal to the
voltage drop between v and w, that is Vvy − Vwy , and the sum of these quantities
over all neighbours w of v is the net ﬂow out of v, namely d(v). Thus the voltage
drops Vvy , v ∈ V \ {y}, satisfy the linear system

(Vvy − Vwy ) = d(v), v ∈ V \ {y}
(20.18)
w∈N (v)

554

20 Electrical Networks

System (20.17) can be rewritten as

d(v)Hvy −
Hwy = d(v), v ∈ V \ {y}
w

and system (20.18) can be rewritten as

Vwy = d(v), v ∈ V \ {y}
d(v)Vvy −
w

where the summations are over all vertices w in N (v) \ {y}. Thus the Hvy and
the Vvy satisfy the same system of equations. Moreover, this system has a unique
solution, because its matrix My Mty is nonsingular (My is a Kirchhoﬀ matrix, so
has rank n − 1). It follows that Hvy = Vvy for all v ∈ V \ {y}.
Consider, now, the current ﬂow fy − fx . Here, the net ﬂow out of each vertex
v ∈ V \ {x, y} is d(v) − d(v) = 0, the net ﬂow out of x is 2m, and the net ﬂow
into y is 2m. Note that the voltage drop between x and y in −fx is the same as
the voltage drop between y and x in fx , namely Vyx , so the voltage drop between
x and y in the current ﬂow fy − fx is Vxy + Vyx . By the deﬁnition of eﬀective
resistance,
Vxy + Vyx
rxy =
2m
and so
Cxy = Hxy + Hyx = Vxy + Vyx = 2mrxy



These computations are illustrated in Figure 20.13, where the functions fy and
fx , and the current ﬂow fy − fx , are displayed for the graph of Figure 20.12.
(Observe that the symmetry between x and y in this example is reﬂected in the
functions fx and fy .) We have:
Huy =

19
17
23
, Hvy =
, Hwy =
, Hxy = 8
3
3
3

19
23
17
, Hvx =
, Hwx =
, Hyx = 8
3
3
3
The commute time between x and y is therefore given by Cxy = Hxy + Hyx =
8 + 8 = 16. Because m = 7 and the eﬀective resistance between x and y, as
calculated previously, is rxy = 8/7, the above computation agrees with the formula
Cxy = 2mrxy of Theorem 20.26.
The cover time of G is deﬁned by C := max {Cv : v ∈ V }, where Cv is the
expected number of steps taken by a random v-walk on G to hit every vertex of
G. A bound on the cover time was obtained by Aleliunas et al. (1979). We derive
it here from our earlier results.
Hux =

Corollary 20.27 The cover time C of a graph G is at most 2m(n − 1).

20.7 Random Walks on Graphs
u

u
19
3

5
3

x

x

17
3

1
3

w

5
3
2
3

8
y

4
3

17
3

v

2

u

19
3

y

2
3

4
3

x

1
3

w

2

8
2

y

2

6

v

6

w

4

v

fy − fx

fx

fy

555

Fig. 20.13. Computing hitting times: the functions fy and fx , and the current ﬂow
fy − fx

Proof Let T be any spanning tree of G, and let (v = v0 , v1 , . . . , v2n−2 = v) be the
sequence of vertices encountered in a walk around T (not a random walk) which
starts at an arbitrary vertex v and traverses each edge of T once in each direction.
Consider now a random v-walk on G. By Theorem 20.26 and Corollary 20.23, the
expected time taken to visit the vertices v1 , . . . , v2n−2 in this order is
2n−2


Hvi−1 vi =

i=1



(Hxy + Hyx )

xy∈E(T )

=



Cxy = 2m

xy∈E(T )



rxy =

xy∈E(T )

2m
t(G)



txy (G)

xy∈E(T )

This is clearly an upper bound for Cv , and is independent of v. It follows that
C≤

2m
t(G)



txy (G) ≤ 2m(v−1)



xy∈E(T )

Exercises
20.7.1 Compute the hitting times and commute times between all remaining pairs
of vertices in the example of Figure 20.12.
————— —————
20.7.2 Determine an upper bound on the cover time of an edge-transitive graph
G in terms of n.
20.7.3 Let G = P ∪ Q, where P is an xy-path of length k and Q is a complete
graph on 2k vertices such that P ∩ Q = {y}. Determine Hxy , Hyx and rxy .

556

20 Electrical Networks

20.7.4
a) Prove Theorem 20.25 by the proof technique of Theorem 20.26 (that is, by
constructing appropriate ﬂows).
b) Prove Theorem 20.26 by the proof technique of Theorem 20.25 (that is, by
solving the system (20.17) for Hxy ).

20.8 Related Reading
Random Walks on Infinite Graphs
The notion of a random walk introduced in Section 20.7 applies equally well to all
connected locally ﬁnite graphs. Let G be such a graph. A basic result in the theory
of Markov chains implies that either a random x-walk in G returns to its origin
x with probability one, regardless of the choice of x, in which case G is called
recurrent, or the probability of return is strictly less than one, in which case G is
called transient (see Feller (1968)). Pólya (1921) showed that the integer lattice Zn
is recurrent for n = 1, 2, and transient for n ≥ 3. (The case n = 2 is the Drunkard’s
Walk mentioned in Section 20.7.) Nash-Williams (1959) established a far-reaching
generalization of Pólya’s result by providing a characterization of recurrent locally
ﬁnite graphs. In intuitive terms, his theorem says that a connected locally ﬁnite
graph which ‘widens out’ rapidly from a vertex is transient, and one which does
not is recurrent.

21
Integer Flows and Coverings

Contents
21.1 Circulations and Colourings . . . . . . . . . . . . . . . . . . . . . . . 557
Nowhere-Zero Circulations and Tensions . . . . . . . . . . . . 558
21.2 Integer Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560
k-Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560
Flow Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 561
The Flow Polynomial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 563
Integer Flows and Covers by Even Subgraphs . . . . . . . 563
21.3 Tutte’s Flow Conjectures . . . . . . . . . . . . . . . . . . . . . . . . . . 567
The Five-Flow Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . 567
The Four-Flow Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . 567
The Three-Flow Conjecture . . . . . . . . . . . . . . . . . . . . . . . . 568
21.4 Edge-Disjoint Spanning Trees . . . . . . . . . . . . . . . . . . . . . 569
The Nash-Williams–Tutte Theorem . . . . . . . . . . . . . . . . . . 570
21.5 The Four-Flow and Eight-Flow Theorems . . . . . . . . . . 573
Uniform Covers by Even Subgraphs . . . . . . . . . . . . . . . . . . 574
21.6 The Six-Flow Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . 575
Sextuple Covers by Even Subgraphs . . . . . . . . . . . . . . . . . 576
Jaeger’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 577
21.7 The Tutte Polynomial . . . . . . . . . . . . . . . . . . . . . . . . . . . . 578
21.8 Related Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 582
Packing Bases in Matroids . . . . . . . . . . . . . . . . . . . . . . . . . . . 582
The Tutte Polynomial for Matroids . . . . . . . . . . . . . . . . 582

21.1 Circulations and Colourings
In Chapter 20, we studied circulations and tensions over ﬁelds. In this concluding
chapter, we return to the same notions, but regarded here as functions deﬁned
over arbitrary abelian groups. Studying them in this more general setting leads
to interesting applications on colourings and coverings, and to some of the most
intriguing unsolved problems of the subject.

558

21 Integer Flows and Coverings

Nowhere-Zero Circulations and Tensions
A function f on the arc set A of a digraph D is nowhere-zero if f (a) = 0 for each
arc a ∈ A (that is, the support of f is the entire arc set A). Here our interest
is in nowhere-zero circulations and tensions. As circulations take value zero on
cut edges and tensions take value zero on loops, we assume that all graphs and
digraphs considered in this chapter are 2-edge-connected and loopless. We start
by observing a simple correspondence between nowhere-zero tensions and vertex
colourings.
Proposition 21.1 A digraph D is k-vertex-colourable if and only if it admits a
nowhere-zero tension over Zk .
Proof Firstly, suppose that D has a proper k-vertex-colouring c : V → Zk .
Consider the tension g : A → Zk deﬁned by g(a) := c(u) − c(v) for each arc a :=
(u, v). This tension is nowhere-zero because c is a proper colouring. Conversely,
let g be a nowhere-zero tension in D over Zk . Obtain a colouring c : V → Zk
recursively, as follows.
 Select an arbitrary vertex x and assign it the colour c(x) := 0.
 Subsequently, if an arc a links a coloured vertex u and an uncoloured vertex v,
assign to v the colour

c(u) − g(a) if a = (u, v)
c(v) :=
c(u) + g(a) if a = (v, u)
Using the fact that g is a tension, it can be shown that the resulting colouring c
is well-deﬁned (Exercise 21.1.1). Furthermore, this colouring is proper because g
is nowhere-zero.

In the case of plane digraphs, as Tutte (1954a) observed, one has the following
dual version of Proposition 21.1.
Theorem 21.2 A plane digraph D is k-face-colourable if and only if it admits a
nowhere-zero circulation over Zk .
Proof By the analogue of Theorem 20.5 for circulations and tensions over Zk , a
function f : A(D) → Zk is a circulation in D over Zk if and only if the corresponding function f ∗ : A(D∗ ) → Zk is a tension in D∗ . Face colourings of D correspond

to vertex colourings of D∗ (and conversely), thus the assertion follows.
Figure 21.1a shows a face colouring c of an oriented 3-prism by the elements
of Z4 , and Figure 21.1b the resulting nowhere-zero circulation f over Z4 , where
f (a) := c(la ) − c(ra ) for each arc a (la and ra being the faces to the left and right
of a, respectively).
Observe that whether a digraph has a nowhere-zero circulation over a given
additive abelian group Γ depends only on its underlying graph (Exercise 21.1.4).

21.1 Circulations and Colourings

559

2
0

0

1

3

1

3
1

3

0
3

2

3

2
2

0
(a)

(b)

Fig. 21.1. (a) a 4-face-colouring of the 3-prism, and (b) the resulting nowhere-zero
circulation over Z4

Thus we may simply speak of nowhere-zero circulations in undirected graphs, without reference to a speciﬁc orientation. In the same vein, we often ﬁnd it convenient
to refer to arcs as ‘edges’. For example, by virtue of Theorem 21.2, the Four-Colour
Theorem may be restated as: every planar graph admits a nowhere-zero circulation
over Z4 .
What can one say about circulations in graphs that are not planar? Not every
graph has a nowhere-zero circulation over Z4 . For example, as we show in Theorem 21.11, the Petersen graph has no such circulation. It does, however, have
nowhere-zero circulations over Z5 , for example, the ones shown in Figure 21.2.
This leads one to ask whether every graph has a nowhere-zero circulation over
Zk for some k. We show that this is indeed so. In fact, all graphs have nowherezero circulations over Z6 . We prove this theorem by exploiting a close connection
between circulations and coverings of graphs, as explained in the next section.
1
2

3

1
2

x
2

4

2
1
3

3
1
(a)

y

4

1
1

1

1

3

2

2

3

4

1
1

1

1

3

3

2

1
(b)

Fig. 21.2. Two nowhere-zero circulations over Z5 in the Petersen graph

560

21 Integer Flows and Coverings

Exercises
21.1.1 Using Exercise 20.2.5, show that the colouring c deﬁned in the proof of
Proposition 21.1 is well-deﬁned.
21.1.2 For any digraph D, show that the number of proper k-colourings of D is k
times the number of nowhere-zero tensions over Zk .
21.1.3 For each of the ﬁve platonic graphs, ﬁnd a nowhere-zero circulation over
Zk with k as small as possible.
21.1.4
a) Let D be a digraph, and let D be the digraph obtained by reversing an arc a.
Show that there is a bijection between the nowhere-zero circulations in D and
D over any additive abelian group Γ .
b) Deduce, more generally, that if D and D are any two orientations of a graph
G, there is a bijection between the nowhere-zero circulations in D and D over
any additive abelian group Γ .
————— —————
21.1.5 Minty’s Flow-Ratio Theorem
Using Ghouila-Houri’s Theorem (20.10), show that a graph G is k-colourable if
and only if it has an orientation D such that |C − | ≤ (k − 1)|C + | for each cycle C
and both senses of traversal of C.
(G.H. Minty)

21.2 Integer Flows
k-Flows
Observe that the circulation over Z5 shown in Figure 21.2b can also be regarded
as a circulation over Z; that is, the inﬂow at any vertex is equal to the outﬂow at
the vertex, not just equal to it modulo 5. Furthermore, the values taken by the
circulation all lie between one and four. Such a circulation is called a 5-ﬂow. More
generally, a nowhere-zero circulation f over Z in a digraph D is a k-ﬂow if
−(k − 1) ≤ f (a) ≤ k − 1, for all a ∈ A
(In this context, the term ‘ﬂow’ is commonly used, rather than ‘circulation’; we
adopt this terminology.)
If a graph has a k-ﬂow, it clearly also has a nowhere-zero circulation over
Zk ; one may simply regard the ﬂow values as elements of Zk . Surprisingly, the
converse also holds, as was shown by Tutte (1954a). The proof that we give here
closely resembles the constructive proof of Hoﬀman’s Circulation Theorem (20.9)
in Section 20.3.

21.2 Integer Flows

561

Theorem 21.3 A graph admits a nowhere-zero circulation over Zk if and only if
it admits a k-ﬂow.
Proof As observed above, if a graph has a k-ﬂow, then it has a nowhere-zero
circulation over Zk . It remains to prove the converse statement.
Let G be a graph which has a nowhere-zero circulation over Zk . Consider an
orientation D of G, and let f be a nowhere-zero circulation in D over Zk . If we
regard the elements of Zk as elements of Z, the function f , although not necessarily
a ﬂow, has the following properties.
i) For all a ∈ A, f (a) ∈ {1, 2, . . . , k − 1}.
ii) For all v ∈ V , f + (v) − f − (v) ≡ 0 (mod k),
where f + (v) − f − (v) is the net ﬂow out of v. Deﬁne a vertex v to be positive, balanced, or negative according as this net ﬂow is positive, zero, or negative. Because

+
−
v∈V (f (v) − f (v)) = 0 (Exercise 7.1.1a), either all vertices are balanced, in
which case f is a k-ﬂow, or
there are both positive and negative vertices.
Let us call the quantity v∈V |f + (v)−f − (v)| the excess of f . If not all vertices
are balanced, the excess is positive. In this case, we show how f can be modiﬁed to
a nowhere-zero circulation f  over Zk which has a smaller excess. Repeating this
procedure results in a k-ﬂow.
Consider a positive vertex x, and let X denote the set of all vertices of D
reachable from x by directed paths. Then ∂ + (X) = ∅, and so

(f + (v) − f − (v)) = f + (X) − f − (X) ≤ 0
v∈X

implying that there exists a negative vertex y in X. By the deﬁnition of X, there
is a directed path xP y in D. Let D be the digraph obtained from D by reversing
−
the direction of all arcs of P , replacing each arc a of P by ←
a , and let f  be the
 ←
−
function derived from f by setting f ( a ) := k−f (a) if a ∈ A(P ), and f  (a) := f (a)
otherwise. Then f  also satisﬁes the properties (i) and (ii), but the excess of f  is
2k less than the excess of f . Iterating this procedure results in a k-ﬂow in G. 
The technique of modifying a circulation f whose excess is positive to a circulation f  with smaller excess is illustrated in Figure 21.2. With respect to the
nowhere-zero circulation over Z5 shown in Figure 21.2a, there is just one positive
vertex, namely x, and just one negative vertex, namely y, the remaining vertices
being balanced. The excess of this circulation is ten. Taking P to be the directed
(x, y)-path of length two, we obtain the digraph D and 5-ﬂow f  shown in Figure 21.2b.
Flow Number
By deﬁnition, a k-ﬂow in a graph is also a k  -ﬂow for all k  ≥ k. Tutte (1954a)
conjectured that there is a positive integer k such that every graph has a k-ﬂow.
This is true for planar graphs because, by virtue of Theorem 21.3, Theorem 21.2

562

21 Integer Flows and Coverings

asserts that a 2-edge-connected plane graph G has a k-ﬂow if and only if its dual
G∗ is k-colourable, and every planar graph is 4-colourable by the Four-Colour
Theorem. Jaeger (1976) and Kilpatrick (1975) independently conﬁrmed Tutte’s
conjecture by showing that every graph has an 8-ﬂow. Shortly thereafter, Seymour
(1981b) improved upon their bound by showing that every graph has a 6-ﬂow. We
give proofs of these two theorems in Sections 21.4 and 21.6, respectively.
The ﬂow number of a graph is deﬁned to be the smallest positive integer k for
which it has a k-ﬂow. The ﬂow number of a (2-edge-connected) planar graph lies
between two and four. The Petersen graph has the 5-ﬂow shown in Figure 21.2b,
but (as already mentioned) no 4-ﬂow, so its ﬂow number is equal to ﬁve.
A k-ﬂow f in a digraph D is positive if f (a) > 0, for all a ∈ A. If a graph has
a k-ﬂow, then it has a positive k-ﬂow (Exercise 21.2.1). In particular, if G is an
even graph and D is an even orientation of G, then the ﬂow f in D with f (a) = 1
for all a ∈ A is a positive 2-ﬂow in D. Conversely, any graph which has a 2-ﬂow is
necessarily even (Exercise 21.2.2). We thus have:
Theorem 21.4 A graph admits a 2-ﬂow if and only if it is even.



For any k, the problem of deciding whether a graph G has a k-ﬂow is clearly in
N P. For k = 3, this problem is in fact N P-complete, even when G is planar. This
follows from Theorem 21.3 and the fact, noted in Chapter 14, that the problem
of deciding whether a given planar graph is 3-vertex-colourable is N P-complete.
The following theorem characterizes those cubic graphs which have 3-ﬂows.
Theorem 21.5 A 2-edge-connected cubic graph admits a 3-ﬂow if and only if it
is bipartite.
Proof Let G := G[X, Y ] be a bipartite cubic graph. By Theorem 17.2, G is 3edge-colourable, so there exist three disjoint perfect matchings M1 , M2 , and M3
in G such that E = M1 ∪ M2 ∪ M3 . Orient the edges of M1 from X to Y and the
edges of M2 ∪ M3 from Y to X. The function f : A → {1, 2} deﬁned by

2 if a ∈ M1
f (a) :=
1 if a ∈ M2 ∪ M3
is a 3-ﬂow in G.
Conversely, let G be a cubic graph with a 3-ﬂow f . Reversing orientations of
arcs if necessary, we may assume that f is a positive 3-ﬂow. The conservation
condition now implies that, at any vertex v, either (i) there are two incoming arcs
carrying a ﬂow of one unit, and one outgoing arc carrying two units, or (ii) there is
one incoming arc carrying a ﬂow of two units, and two outgoing arcs each carrying
one unit. Denote by X the set of vertices at which the ﬂow pattern is as in (i),
and by Y its complement. Then (X, Y ) is a bipartition of G.


21.2 Integer Flows

563

The Flow Polynomial
We now turn brieﬂy to another striking analogy between colourings and nowherezero circulations in graphs. Consider any graph G, and any ﬁnite additive abelian
group Γ . Let F (G, Γ ) denote the number of nowhere-zero circulations in G over Γ
(that is, the number of nowhere-zero circulations over Γ in some ﬁxed orientation
of G; by Exercise 21.1.4, this number is independent of the orientation).
For any link e of G, each circulation f  in G / e is the restriction to E \ e of
a unique circulation f in G. Therefore, F (G / e, Γ ) is the number of circulations
f in G which have nonzero values on all edges, except possibly on e. On the
other hand, each circulation f  in G \ e is the restriction to E \ e of a unique
circulation f in G with f (e) = 0, so F (G \ e, Γ ) is the number of circulations f in
G which take nonzero values on all edges in E \{e}, and value zero on e. Therefore,
as Tutte (1954a) observed, the function F (G, Γ ) satisﬁes the following recursion
formula, reminiscent of the recursion formulae for the number of spanning trees
(Proposition 4.9) and the chromatic polynomial (14.6).
Theorem 21.6 For any graph G, any link e of G, and any ﬁnite additive abelian
group Γ ,
F (G, Γ ) = F (G / e, Γ ) − F (G \ e, Γ )



By a simple inductive argument similar to the one used to demonstrate that
the number of k-colourings is a polynomial in k, one can derive the following
implication of Theorem 21.6 (Exercise 21.2.4). What is striking here is that F (G, Γ )
depends not on the structure of the group Γ , but only on its order.
Theorem 21.7 For any graph G without cut edges, there exists a polynomial
Q(G, x) such that F (G, Γ ) = Q(G, k) for every additive abelian group Γ of order k. Moreover, if G is simple and e is any edge of G, then Q(G, x) satisﬁes the
recursion formula:
Q(G, x) = Q(G / e, x) − Q(G \ e, x)



The polynomial Q(G, x) is known as the ﬂow polynomial of G. An explicit
expression for the ﬂow polynomial, analogous to Whitney’s expansion formula for
the chromatic polynomial (see Exercise 14.7.12) is given in Exercise 21.2.13.
Integer Flows and Covers by Even Subgraphs
A particularly interesting instance of Theorem 21.7 arises when the order of the
group Γ is a nontrivial product k1 k2 . In this case, the group Γ may be chosen to
be either Zk1 k2 or Zk1 × Zk2 , resulting in the following corollary.
Corollary 21.8 Let G be a graph, and let k1 and k2 be integers, where ki ≥ 2,
i = 1, 2. Then the number of nowhere-zero circulations in G over Zk1 k2 is equal to

the number of nowhere-zero circulations in G over Zk1 × Zk2 .

564

21 Integer Flows and Coverings

When combined with Theorem 21.3, Corollary 21.8 provides an important link
between ﬂows and structural properties of graphs.
Theorem 21.9 Let G be a graph and let k1 and k2 be integers, where ki ≥ 2,
i = 1, 2. Then G admits a k1 k2 -ﬂow if and only if G = G1 ∪ G2 , where Gi admits
a ki -ﬂow, i = 1, 2.
Proof If G has a k1 k2 -ﬂow, then it has a nowhere-zero circulation over Zk1 k2 ,
by virtue of Theorem 21.3. By Corollary 21.8, this implies that G has a nowherezero circulation f := (f1 , f2 ) over Zk1 × Zk2 . Let Gi := G[Ei ], where Ei is the
support of fi , i = 1, 2. Then G = G1 ∪ G2 , because f is nowhere zero. Moreover,
fi is a nowhere-zero circulation in Gi over Zki , i = 1, 2. Appealing once more to
Theorem 21.3, we conclude that G = G1 ∪ G2 , where Gi has a ki -ﬂow, i = 1, 2.
The converse is proved by reversing the above argument.

The following consequence of Theorem 21.9 is implicit in the work of Jaeger
(1976) and Kilpatrick (1975).
Corollary 21.10 A graph admits a 2k -ﬂow if and only if it admits a covering by
k even subgraphs.
Proof Apply Theorem 21.9 recursively, with ki = 2, 1 ≤ i ≤ k, and invoke
Theorem 21.4.

Matthews (1978) gave a proof of Corollary 21.10 by describing a bijection
between 2k -ﬂows and coverings by k-tuples of even subgraphs.
Corollary 21.10 implies, in particular, that a graph has a 4-ﬂow if and only if it
has a covering by two even subgraphs. In the case of cubic graphs, this condition
may be expressed in terms of edge colourings because a cubic graph has a covering
by two even subgraphs if and only if it is 3-edge-colourable (Exercise 17.3.4a).
Thus, as a consequence of the case k = 2 of Corollary 21.10, we have:
Theorem 21.11 A cubic graph admits a 4-ﬂow if and only if it is 3-edgecolourable.

The Petersen graph, being cubic but not 3-edge-colourable, therefore has no
4-ﬂow. As noted earlier, this implies that its ﬂow number is equal to ﬁve.
The foregoing discussion reveals a close connection between cycle covers and
integer ﬂows in graphs. Jaeger (1985) found a still stronger link, between orientable
cycle double covers and integer ﬂows. Recall that a cycle double cover of a graph is
orientable if its members can be oriented as directed cycles so that, taken together,
they traverse each edge once in each direction. For instance, the cycle double cover
of the cube given in Figure 3.8 is orientable, as shown in Figure 21.3. A double
cover by even subgraphs is likewise said to be orientable if its members can be
decomposed to form an orientable cycle double cover. Jaeger (1985) proved the
following theorem.

21.2 Integer Flows

565

Fig. 21.3. An oriented cycle double cover of the cube

Theorem 21.12 Every graph which admits an orientable double cover by k even
subgraphs admits a k-ﬂow.
Proof Let {Ci : 1 ≤ i ≤ k} be an orientable double cover of G by k even
subgraphs and let fi be the positive 2-ﬂow on an even orientation Di of Ci . Now
consider a ﬁxed orientation D of G and, for 1 ≤ i ≤ k, let gi denote the function
on A(D) such that
⎧
⎨ fi (a), if a ∈ A(Di )
−
a ∈ A(Di )
gi (a) := −fi (a), if ←
⎩
0, otherwise
←
−
where
a denotes the arc obtained by reversing the orientation of a. Then g :=
k
ig

i=1 i is a k-ﬂow on G.

Exercises
21.2.1 Show that:
a) if a graph G has a k-ﬂow, then some orientation of G has a positive k-ﬂow,
b) a connected digraph has a positive k-ﬂow for some k ≥ 1 if and only if it is
strongly connected.
21.2.2 Show that any graph which admits a 2-ﬂow is even.
21.2.3 Let G be a 2-edge-connected graph, and let e be an edge of G. If G \ e has
a k-ﬂow, show that G has a (k + 1)-ﬂow.
(C.Q.Zhang)
21.2.4 Deduce from Theorem 21.6 that, for any graph G, the function F (G, Γ )
is a polynomial in the order of Γ .
21.2.5 Show that every hamiltonian graph has a 4-ﬂow.

566

21 Integer Flows and Coverings

21.2.6 Determine the ﬂow polynomials of:
a) the wheel Wn , n ≥ 3,
b) the complete graph K5 .
21.2.7 Let G be a graph and let k1 and k2 be integers, where ki ≥ 2, i = 1, 2.
Prove that G has a k1 k2 -ﬂow if and only if there is a subgraph F of G such that
F has a k1 -ﬂow and G / F has a k2 -ﬂow.
————— —————
21.2.8 Using Hoﬀman’s Circulation Theorem (20.9), show that a graph G admits
a k-ﬂow if and only if it has an orientation D such that d− (X) ≤ (k − 1)d+ (X)
for all subsets X of V .
21.2.9 A (k + l)-regular graph is (k, l)-orientable if it has an orientation in which
each indegree (and each outdegree) is either k or l.
a) Suppose that k ≥ l. Show that a loopless (k + l)-regular graph G is (k, l)orientable if and only if there is a partition (X, Y ) of V such that, for every
subset S of V ,
d(S) ≥ (k − l)(|S ∩ X| − |S ∩ Y |)
b) Deduce that every (k, l)-orientable graph, where k > l, is also (k − 1, l + 1)orientable.
21.2.10 Let f be a positive k-ﬂow on a digraph D. Set S := {a ∈ A : f (a) = k−1}.
i) Show that there is a (k−1)-ﬂow f  on D\S such that f  (a) ≡ f (a) (mod k−
1) for all a ∈ A \ S.
ii) Deduce that there is a positive 2-ﬂow on D whose support contains S.
b) Deduce from (a) that f can be expressed as a sum of k − 1 positive 2-ﬂows on
D.
(C.H.C. Little, W.T. Tutte, and D.H. Younger)
a)

21.2.11 a) Show that if G and H are disjoint, then Q(G∪H, x) = Q(G, x)Q(H, x).
b) Deduce that the ﬂow polynomial of a graph is equal to the product of the ﬂow
polynomials of its components.
21.2.12
a) Let D be a digraph, T a maximal forest of D, and Γ a ﬁnite additive abelian
group. Show that any mapping from A(D) \ A(T ) to Γ extends to a unique
circulation in D over Γ .
b) Deduce that the number of circulations in D over Γ is km−n+c , where k is the
order of Γ .
21.2.13
a) Let a be an arc of a digraph D. Show that:
i) a function on A \ a is a circulation in D/a if and only if it is the restriction
to A \ a of a circulation in D,

21.3 Tutte’s Flow Conjectures

567

ii) if a is a link of D and f  is a circulation in D/a, then there is a unique
circulation f in D such that f  is the restriction of f to A \ a.
b) Let G be a graph and let Γ be an additive abelian group of order k. For a
subset S of E, let c(S) denote the number of components of the spanning
subgraph of G with edge set S.
i) Show
 that the number of nowhere-zero circulations in G over Γ is equal
to S⊆A (−1)m−|S| k |S|−n+c(S) .

ii) Conclude that Q(G, x) = S⊆E (−1)m−|S| x|S|−n+c(S) .
(W.T. Tutte)

21.3 Tutte’s Flow Conjectures
Tutte (1954a, 1966b, 1972) proposed three celebrated conjectures on integer ﬂows.
They are arguably the most signiﬁcant problems in the whole of graph theory.

The Five-Flow Conjecture
Conjecture 21.13 Every 2-edge-connected graph admits a 5-ﬂow.

If true, then by Theorems 21.2 and 21.3 this conjecture would be a generalization of the Five-Colour Theorem (11.6). There has been essentially no progress
on this problem. Theorem 21.12 suggests the following conjecture, formulated independently by Archdeacon (1984) and Jaeger (1988), which is a common generalization of the Five-Flow Conjecture and the Cycle Double Cover Conjecture
(3.9).
Conjecture 21.14 Every 2-edge-connected graph admits an orientable double
cover by ﬁve even subgraphs.
The second of Tutte’s three conjectures seeks to generalize the Four-Colour
Conjecture.

The Four-Flow Conjecture
Conjecture 21.15 Every 2-edge-connected graph with no Petersen graph minor admits a 4-ﬂow.

568

21 Integer Flows and Coverings

For cubic graphs, this conjecture has been proved by N. Robertson, D. Sanders,
P. D. Seymour and R. Thomas1 , using a similar approach to the one employed to
establish the Four-Colour Theorem (described in Section 15.2). By Theorem 21.11,
this special case is equivalent to yet another conjecture of Tutte (1966b), namely
that every 2-edge-connected cubic graph with no Petersen graph minor is 3-edgecolourable.
Tutte’s third conjecture, if true, would generalize Grötzsch’s Theorem (15.10).

The Three-Flow Conjecture
Conjecture 21.16 Every 2-edge-connected graph without 3-edge cuts admits
a 3-ﬂow.

Although Tutte’s ﬂow conjectures are about 2-edge-connected graphs, all three
may be restricted to 3-edge-connected graphs (Exercise 21.3.5). Moreover, because
the Three-Flow Conjecture only concerns graphs without 3-edge cuts, it can be
reformulated as: every 4-edge-connected graph admits a 3-ﬂow. It is not even known
whether there exists any integer k such that every k-edge-connected graph admits
a 3-ﬂow. This weaker version of the Three-Flow Conjecture was proposed by Jaeger
(1979). However, as we prove in Section 21.5, every 4-edge-connected graph has a
4-ﬂow.

Exercises
21.3.1 Let G be a graph and let G be a graph obtained from G by splitting oﬀ
two edges. Show that if G admits a k-ﬂow then so does G.
————— —————
21.3.2
a) Let G be a 2-edge-connected graph with no 3-edge cut, and let v be a vertex
of G whose degree is not equal to ﬁve. Show that some pair of edges incident
with v may be split oﬀ so that the resulting graph is 2-edge-connected and has
no 3-edge cut.
b) Deduce that the Three-Flow Conjecture (21.16) is equivalent to the statement
that every 4-edge-connected 5-regular graph has a 3-ﬂow.
21.3.3 Show that every 2-edge-connected graph with no K3,3 -minor admits a 4ﬂow.
1

The proof consists of ﬁve papers by various subsets of these authors, of which only
one, Robertson et al. (1997b), has so far appeared in print.

21.4 Edge-Disjoint Spanning Trees

569

21.3.4 Let G be a 2-edge-connected graph and let (X, Y ) be a nontrivial partition
of V . Show that:
Q(G / X, x) · Q(G / Y, x)
if d(X) = 2
x−1
Q(G / X, x) · Q(G / Y, x)
Q(G, x) =
if d(X) = 3
(x − 1)(x − 2)
Q(G, x) =

(K. Sekine and C.-Q. Zhang)
21.3.5 Show that:
a) it suﬃces to prove the Three-Flow, Four-Flow, and Five-Flow Conjectures for
3-edge-connected graphs,
b) for k ≥ 6, every 2-edge-connected graph admits a k-ﬂow if and only if every
3-edge-connected graph admits a k-ﬂow.
21.3.6 Let k be a positive integer. A digraph D is said to be (mod k)-balanced if
d− (v) ≡ d+ (v) (mod k). Show that:
a) the Three-Flow Conjecture is true if and only if every 4-edge-connected graph
admits a (mod 3)-balanced orientation,
b) the Five-Flow Conjecture is true if and only if every 8-edge-connected graph
admits a (mod 5)-balanced orientation.
(F. Jaeger)

21.4 Edge-Disjoint Spanning Trees
In the previous section, we saw that a graph has a 2k -ﬂow if and only if it has a
covering by k even subgraphs (Corollary 21.10). This prompts one to ask which
graphs have coverings by few even subgraphs. For instance, a graph which contains a Hamilton cycle or two edge-disjoint spanning trees has such a covering
(Exercises 4.3.9 and 4.3.10).
Motivated by the latter observation, we consider here the problem of determining the maximum possible number of edge-disjoint spanning trees in a graph.
According to Theorem 4.6, a graph has a spanning tree if and only if it is connected, that is, if and only if ∂(X) = ∅ for every nonempty proper subset X of V .
Thus a graph has a spanning tree if and only if, for every partition of its vertex
set into two nonempty parts, there is an edge with one end in each part. Generalizing this result, we present a necessary and suﬃcient condition for a graph
to contain k edge-disjoint spanning trees, where k is an arbitrary positive integer. This fundamental structural theorem, found independently by Nash-Williams
(1961) and Tutte (1961a), has a number of important applications, in particular
to ﬂows. These are described in the next section.

570

21 Integer Flows and Coverings

The Nash-Williams–Tutte Theorem
Recall that the graph obtained from a graph G by shrinking a subset X of the
vertex set V of G is denoted G / X. We may extend this shrinking operation
to partitions of V , as follows. Given a partition P = {V1 , V2 , . . . , Vp } of V into
nonempty parts, we shrink P by shrinking each set Vi , 1 ≤ i ≤ p, and we denote
the resulting p-vertex graph by G / P. Note that G / P might have multiple edges,
even if G is simple, but not loops.
Suppose now that G is connected, and consider a spanning tree T of G and a
partition P of V . Because T is connected, so is T / P. Therefore, e(T / P) ≥ |P|−1,
where |P| denotes the number of parts of P. Moreover, if G has k edge-disjoint
spanning trees, then this inequality is valid for each of them, and so e(G / P) ≥
k(|P| − 1). Consequently, a necessary condition for a graph G to have k edgedisjoint spanning trees is that this inequality hold for all partitions P of V . What
Nash-Williams and Tutte proved is that this condition is also suﬃcient. The proof
we give here is due to Frank (1978).
Theorem 21.17 The Nash-Williams–Tutte Theorem
A graph G has k edge-disjoint spanning trees if and only if, for every partition P
of V into nonempty parts,
e(G / P) ≥ k(|P| − 1)

(21.1)

Proof We have already shown that (21.1) is a necessary condition for G to have
k edge-disjoint spanning trees. It remains to establish its suﬃciency. We do so
by proving that if condition (21.1) holds, then some orientation of G has k edgedisjoint spanning branchings rooted at some vertex x. By virtue of Theorem 19.13,
it suﬃces to show that G has an orientation D satisfying condition (19.6). On
taking complements, we may state this condition in the equivalent form:
d− (X) ≥ k, for every nonempty subset X of V \ {x}

(21.2)

Because no family of k edge-disjoint spanning trees can use more than k parallel
edges, we may assume that each edge of G has multiplicity at most k.
Let G be a graph which satisﬁes (21.1) but does not satisfy (21.2) for any x ∈ V .
Subject to these conditions, let its maximum degree ∆ be as large as possible, and
consider a vertex x of degree ∆ in G. Note that x is joined to some vertex y by
fewer than k edges, for if x were joined to every other vertex by k edges, the desired
orientation would clearly exist. We add a new edge e to G joining x and y, and
set G := G + e.
Observe that G satisﬁes (21.1). Therefore, by the choice of G, the graph G has
an orientation D such that d−
D  (X) ≥ k for every nonempty subset X of V \ {x}.
We may assume that x is a source of D , because no arc entering x can lie in
an x-branching. We denote by a the arc of D obtained by orienting e, and by Y
the set of all vertices reachable from y by means of directed paths in D . Setting
Y := V \ Y , we have x ∈ Y , because x is a source of D , and y ∈ Y .

21.4 Edge-Disjoint Spanning Trees

571

Call a nonempty subset X of V \ {x} critical if d−
D  (X) = k. We claim that any
critical set X that meets Y is a subset of Y . Suppose, to the contrary, that both
X ∩ Y and X ∩ Y are nonempty (see Figure 21.4).
Y

Y

Y

X

X

X

X

(a)

Y

Y

Y

X

y

x

(b)

X

y

x

(c)

Fig. 21.4. (a) k arcs entering X ∩ Y , (b) the case y ∈ X ∩ Y , (c) the case y ∈ X ∩ Y

By the deﬁnition of Y , every arc that enters X ∩ Y must enter from X ∩ Y (see
Figure 21.4a). There are at least k such arcs because d−
D  (X ∩Y ) ≥ k. If y ∈ X ∩Y ,
−
(X)
also
(Figure
21.4b).
And if y ∈ X ∩ Y , at
then the arc a = (x, y) is in ∂D

least one arc enters the nonempty set X ∩ Y from X ∩ Y , by the deﬁnition of Y
(Figure 21.4(c)). In either case, d−
D  (X) > k, contradicting the assumption that X
is critical. We conclude that X ⊆ Y .
To complete the proof, we consider two cases.
Case 1: There exists a vertex z in Y which belongs to no critical set. (This means
that d−
D  (X)) > k for every subset X of V \ {x} which contains z.) Because y ∈ Y ,
there exists a directed (y, z)-path P in D . The digraph D obtained from D by
reversing the arcs of P and deleting the arc a is an orientation of G satisfying
condition (21.2) (Exercise 21.4.2).
Case 2: Every vertex of Y is contained in a critical set. As in the proof of Edmonds’
Branching Theorem (19.13), one may show that the union of intersecting critical
sets is critical (Exercise 21.4.1). Because every vertex of Y is contained in a critical
set, and every critical set which meets Y is a subset of Y , the maximal critical sets
contained in Y form a partition {Y1 , Y2 , . . . , Yp−1 } of Y . Without loss of generality,
we may assume that y ∈ Y1 .
Now set Yp := Y , and consider the partition P = {Y1 , Y2 , . . . , Yp } of V . Because
−
Y1 , Y2 , . . . , Yp−1 are critical sets, d−
D  (Yi ) = k for 1 ≤ i ≤ p−1. Thus dD (Y1 ) = k−1,
−
−
and dD (Yi ) = k for 2 ≤ i ≤ p − 1. Finally, by the deﬁnition of Y , dD (Yp ) = 0. We
now have:
p

d−
e(G / P) =
D (Yi ) = k(p − 1) − 1 < k(|P| − 1)
i=1

contradicting (21.1).
The following corollary is due to Polesskiı̆ (1971).



572

21 Integer Flows and Coverings

Corollary 21.18 Every 2k-edge-connected graph contains k edge-disjoint spanning trees.
Proof Let G be a 2k-edge-connected graph and let P := {V1 , V2 , . . . , Vp } be a
partition of V . The number edges from Vi to the other parts of P is d(Vi ) and,
since G is 2k-edge-connected, d(Vi ) ≥ 2k, 1 ≤ i ≤ p. Thus
1
d(Vi ) ≥ kp > k(|P| − 1)
2 i=1
p

e(G / P) =

By Theorem 21.17, G has k edge-disjoint spanning trees.



Exercises
21.4.1 Show that the union of two intersecting critical sets is critical.
21.4.2 In Case 1 of the proof of Theorem 21.17, verify that the orientation D of
G satisﬁes condition (21.2).
21.4.3
a) According to Theorem 21.17, a graph G has a spanning tree if and only if
e(G / P) ≥ |P| − 1 for every partition P of V into nonempty parts. Show that
this condition holds if and only if it holds for all partitions P of V into two
nonempty parts.
b) For some integer k ≥ 2, give an example of a graph G which satisﬁes condition
(21.1) for all partitions P of V into two nonempty parts, but which does not
have k edge-disjoint spanning trees.
21.4.4 Describe a polynomial-time algorithm which accepts any graph G as input
and returns either a family of k edge-disjoint spanning trees of G or a partition P
of G which fails condition (21.1). Determine the complexity of your algorithm.
————— —————
21.4.5 Show that a graph G has an orientation D with d+ (v) ≤ k for all v ∈ V if
and only if e(X) ≤ k|X| for all X ⊆ V .
(A. Frank and A. Gyárfás)
21.4.6 Arboricity
The arboricity of a graph is the least number of forests into which it can be
decomposed.
a) By appealing to Exercises 19.4.4 and 21.4.5, show that a graph G has arboricity
at most k if and only if e(X) ≤ k(|X| − 1) for all nonempty subsets X of V .
(C.St.J.A. Nash-Williams)
b) Deduce that every simple planar graph can be decomposed into three forests.

21.5 The Four-Flow and Eight-Flow Theorems

573

21.4.7 Let G be a 4-edge-connected graph.
a) Show that G has an eulerian spanning subgraph.
(C. Thomassen)
b) Deduce from (a) and Exercise 3.3.6 that the line graph of G is hamiltonian.
c) Let m1 , m2 , . . . , mk be positive integers whose sum is m. Deduce from (b) that
G admits a decomposition into k connected subgraphs, of sizes m1 , m2 , . . . , mk .

21.5 The Four-Flow and Eight-Flow Theorems
By exploiting the relationship between spanning trees and even subgraphs described in Corollary 4.12, and applying the results of the preceding section, Jaeger
(1976) and Kilpatrick (1975) derived two fundamental theorems on integer ﬂows,
the Four-Flow Theorem and the Eight-Flow Theorem. For notational clarity, we
identify trees with their edge sets.
Theorem 21.19 Every 4-edge-connected graph admits a covering by two even subgraphs.
Proof Let G be a 4-edge-connected graph. By Corollary 21.18, G has two edgedisjoint spanning trees, hence (Exercise 4.3.10) a covering by two even subgraphs.

Corollary 21.10 and Theorem 21.19 now yield:
Theorem 21.20 The Four-Flow Theorem
Every 4-edge-connected graph admits a 4-ﬂow.



The proof of the Eight-Flow Theorem proceeds along similar lines, but requires
a more subtle argument.
Theorem 21.21 Every 2-edge-connected graph admits a covering by three even
subgraphs.
Proof It suﬃces to prove the assertion for 3-edge-connected graphs (Exercise 21.5.1). Thus let G be a 3-edge-connected graph. Denote by H the graph
obtained by duplicating each edge of G. Being 6-edge-connected, H has three
edge-disjoint spanning trees, by Corollary 21.18. These trees correspond to three
spanning trees of G, T1 , T2 , and T3 , such that T1 ∩ T2 ∩ T3 = ∅. By Corollary 4.12,
there exist even subgraphs C1 , C2 , and C3 such that Ci ⊇ E \ Ti , i = 1, 2, 3. Thus
C1 ∪ C2 ∪ C3 ⊇ (E \ T1 ) ∪ (E \ T2 ) ∪ (E \ T3 ) = E \ (T1 ∩ T2 ∩ T3 ) = E
in other words, {C1 , C2 , C3 } is a covering of G.



Theorem 21.21 combined with Corollary 21.10 yields:
Theorem 21.22 The Eight-Flow Theorem
Every 2-edge-connected graph admits an 8-ﬂow.



574

21 Integer Flows and Coverings

Uniform Covers by Even Subgraphs
Theorems 21.19 and 21.21 also yield conditions for the existence of uniform covers
by even subgraphs. The link between coverings and uniform covers is provided by
the following proposition.
Proposition 21.23 If a graph admits a covering by k even subgraphs, then it
admits a 2k−1 -cover by 2k − 1 even subgraphs.
Proof Let {C1 , C2 . . . , Ck } be a covering of a graph G by k even subgraphs, and
let e be an edge of G that belongs to j of these subgraphs, without loss of generality
C1 , C2 , . . . , Cj . Then e belongs to all the even subgraphs {Ci : i ∈ S}, such that
S ⊆ {1, 2, . . . , k} and |S ∩ {1, 2, . . . , j}| is odd. There are 2k−1 such subgraphs.
Therefore
{{Ci : i ∈ S} : S ⊆ {1, 2, . . . , k}, S = ∅}
is a 2k−1 -cover of G by 2k − 1 even subgraphs.



The case k = 2 of Proposition 21.23 (or Exercise 3.5.4a), combined with Theorem 21.19, implies the truth of the Cycle Double Cover Conjecture for 4-edgeconnected graphs.
Theorem 21.24 Every 4-edge-connected graph admits a double cover by three even
subgraphs.

The same approach, using Theorem 21.21, yields the following result of Bermond
et al. (1983) (see, also, Exercise 3.5.4b).
Theorem 21.25 Every 2-edge-connected graph admits a quadruple cover by seven
even subgraphs.


Exercises
21.5.1 Suppose that every 3-edge-connected graph has a covering by three even
subgraphs. Show that every 2-edge-connected graph also has such a covering.
21.5.2 Let G be a 2-edge-connected graph which has no k-ﬂow. Show that there
exists an essentially 4-edge-connected cubic graph H with v(H) + e(H) ≤ v(G) +
e(G) which has no k-ﬂow.
21.5.3
a) Let G be an essentially 4-edge-connected cubic graph and let C be a 2-factor
of G which is not a Hamilton cycle. Show that the graph obtained from G by
contracting the edges of C is 4-edge-connected.
b) Using (a) and Exercise 21.5.2, derive the Eight-Flow Theorem (21.22) from
the Four-Flow Theorem (21.20).
————— —————

21.6 The Six-Flow Theorem

575

21.6 The Six-Flow Theorem
We present here a proof of Seymour’s Six-Flow Theorem (Seymour (1981b)), and
also an elegant application of this theorem to uniform covers by even subgraphs,
due to Fan (1992). For notational clarity, we identify even subgraphs with their
edge sets.
The Six-Flow Theorem is proved by showing that every 3-edge-connected graph
G contains an even subgraph C such that the graph G / C has a nowhere-zero circulation over Z3 ; equivalently, G has a circulation over Z3 whose support includes
E \ C (see Exercise 21.2.7). The notion of the 2-closure of a subgraph plays a key
role in establishing this property.
Let S be a set of edges of a graph G. The 2-closure of S is the (unique) maximal
subset of E obtained from S by recursively adding edges, one or two at a time,
subject to the condition that the edge or edges added at each stage form a cycle
with some of the edges of the subset constructed up to that stage. For example,
in the Petersen graph, the 2-closure of a 5-cycle is just the edge set of the cycle
itself, whereas the 2-closure of a 9-cycle is the entire edge set.
Lemma 21.26 Let S be a set of edges of a graph G whose 2-closure is the entire
set E. Then there exists a circulation in G over Z3 whose support includes E \ S.
Proof The proof is by induction on |E \ S|, the result being trivial when S = E.
Assume that S is a proper subset of E. By hypothesis, there is a cycle C in G such
that 1 ≤ |C \ S| ≤ 2. Set S  := S ∪ C. Then |E \ S  | < |E \ S| and the 2-closure
of S  is E. Let D = (V, A) be an orientation of G in which C is a directed cycle.
By the induction hypothesis, there is a circulation f in D over Z3 whose support
includes A \ S  . Let fC be a circulation in D over Z3 such that fC (e) := 1 if e ∈ C,
and fC (e) := 0 otherwise. Then one of f , f + fC , f − fC is a circulation in G over

Z3 whose support includes E \ S (Exercise 21.6.3).
Lemma 21.27 Every 3-edge-connected graph G contains an even subgraph C
whose 2-closure is E.
Proof Let C be an even subgraph of G such that:
i) the subgraph H of G induced by the 2-closure of C is connected,
ii) subject to (i), C is as large as possible.
We may assume that H is not a spanning subgraph of G. Otherwise, by the
deﬁnition of 2-closure, H = G and the assertion holds. Let K be a component of
G − V (H). Note that no vertex of K is adjacent to two vertices of H (again by
the deﬁnition of 2-closure). Because δ(G) ≥ 3, we therefore have δ(K) ≥ 2, so the
endblocks of K are 2-connected.
Consider a maximal 2-edge-connected subgraph F of K containing one of these
endblocks. Because G is 3-edge-connected, F is linked to H by two (or more) edges
The ends of these edges in F are distinct because no vertex of K is adjacent to
two vertices of H, and these ends are connected by two edge-disjoint paths in F

576

21 Integer Flows and Coverings

by the edge version of Menger’s Theorem (7.17). Let S be the union of the edge
sets of these paths. Then C ∪ S contradicts the choice of C.

The above proof of Seymour’s Lemma 21.27 is due to Younger (1983).
Theorem 21.28 The Six-Flow Theorem
Every 2-edge-connected graph admits a 6-ﬂow.
Proof By Exercise 21.3.5b, it suﬃces to prove the theorem for 3-edge-connected
graphs. Let G be such a graph. By Lemma 21.27, G contains an even subgraph
C whose 2-closure is E. Let D be an orientation of G, f1 a circulation in D over
Z2 whose support is C, and f2 a circulation in D over Z3 whose support includes
E \C; such a circulation f2 exists by Lemma 21.26. Then (f1 , f2 ) is a nowhere-zero
circulation in D over Z2 × Z3 . By Corollary 21.8 with k1 = 2 and k2 = 3, G has a
nowhere-zero circulation over Z6 . Theorem 21.3 now implies that G has a 6-ﬂow.


Sextuple Covers by Even Subgraphs
We now give the application by Fan (1992) of the Six-Flow Theorem to uniform
covers by even subgraphs.
Theorem 21.29 Every 2-edge-connected graph admits a sextuple cover by ten even
subgraphs.
Proof It suﬃces to prove the theorem for 3-edge-connected graphs (Exercise
21.6.4). Let G be such a graph. By Lemma 21.27, G contains an even subgraph C
whose edge set has 2-closure E. Consider an orientation D of G whose restriction
to C is even, and let f  be the circulation in D over Z3 deﬁned by f  (e) := 1 for
e ∈ C, and f  (e) := 0 for e ∈ E \ C. By Lemma 21.26, D has a circulation f over
Z3 whose support contains E \ C. Set
Si := {e ∈ C : f (e) ≡ i (mod 3)}
so that (S0 , S1 , S2 ) is a partition of C. Then f −if  is a nowhere-zero circulation in
Gi := G\Si over Z3 , so there is a 3-ﬂow fi in Gi , i = 0, 1, 2, by Theorem 21.3. Note
that each edge of C lies in two of the three subgraphs Gi and each edge of E \ C
lies in all three of them. We may regard fi as a 4-ﬂow in Gi . Theorem 21.21 then
implies that Gi has a double cover by three even subgraphs Ci := {Ci1 , Ci2 , Ci3 }.
Thus C := C1 ∪ C2 ∪ C3 is a collection of nine even subgraphs of G which together
cover each edge of C four times and each edge of E \ C six times. It follows that
D := {C  C  : C  ∈ C} is a collection of nine even subgraphs of G which together
cover each edge of C ﬁve times and each edge of E \ C six times. Now C ∪ D is a
sextuple cover of G by ten even subgraphs.

The complement of a perfect matching in a cubic graph is an even subgraph.
Using this relationship between perfect matchings and even subgraphs, Fulkerson’s

21.6 The Six-Flow Theorem

577

Conjecture (17.6) may be restated as: every 2-edge-connected cubic graph has a
quadruple cover by six even subgraphs. Jaeger (1988) observed that the following
more general statement is equivalent to Fulkerson’s Conjecture (Exercise 21.6.5).

Jaeger’s Conjecture
Conjecture 21.30 Every 2-edge-connected graph admits a quadruple cover
by six even subgraphs.

By Theorem 21.25, this assertion is true if six is replaced by seven. On the
other hand, it is not even known whether there is any integer k such that every
2-edge-connected graph has a 2k-cover by 3k even subgraphs. Such an integer must
be even, because the Petersen graph has no 2k-cover by 3k even subgraphs when
k is odd (Exercise 21.6.6). In particular, the Petersen graph has no sextuple cover
by nine even subgraphs. In this sense, Theorem 21.29 is sharp.

Exercises
21.6.1 Show that the 2-closure is well-deﬁned.
21.6.2 Find an example of a 2-edge-connected graph G which contains no even
subgraph with 2-closure E.
21.6.3 . In the proof of Lemma 21.26, show that one of the functions f , f + fC ,
f − fC is a circulation in G over Z3 whose support includes E \ S
21.6.4 Let k and l be positive integers. Suppose that every 3-edge-connected
graph has an l-cover by k even subgraphs. Show that every 2-edge-connected graph
has such a cover.
————— —————
21.6.5 Show that Fulkerson’s Conjecture (17.6) and Jaeger’s Conjecture (21.30)
are equivalent.
21.6.6 Show that the Petersen graph has no 2k-cover by 3k even subgraphs if k
is odd.

578

21 Integer Flows and Coverings

21.7 The Tutte Polynomial
A function on the class of all graphs is called a graphical invariant if it takes the
same value on isomorphic graphs. The connectivity and stability number are examples of graphical invariants, as are the chromatic polynomial and ﬂow polynomial.
Tutte (1947c) showed that several important graphical invariants satisfy two
simple and natural recursion rules. Consider, for example, the number of maximal
spanning forests of a graph G. Let us denote this number by f (G). Now a subgraph of a graph G is a maximal spanning forest if and only if it is a union of
spanning trees of the components of G. A consequence of the recursion formula for
the number of spanning trees of a graph (Proposition 4.9) is that f satisﬁes the
following identities.
f (G) = f (G \ e) + f (G / e)
f (G ∪ H) = f (G)f (H)

if e is a link of G

if G and H are disjoint

(21.3)
(21.4)

The chromatic and ﬂow polynomials also satisfy (21.4) (Exercises 14.7.7 and
21.2.11). Moreover, even though they do not quite satisfy (21.3), they can be made
to do so by a minor adjustment of signs. Indeed, the polynomials (−1)n P (G, x)
and (−1)m−n Q(G, x) satisfy both (21.3) and (21.4) (Exercise 21.7.1).
Tutte (1947c) showed that there is a two-variable polynomial with the remarkable property that every invariant which satisﬁes (21.3) and (21.4), and appropriate
initial conditions, is an evaluation of that polynomial. This fundamental result has
far-reaching ramiﬁcations, with applications to diverse areas of mathematics.
We denote by Lm the graph consisting of one vertex and m incident loops;
thus L0 = K1 and L1 is the loop graph. Tutte (1947c) proved that any graphical
invariant which satisﬁes (21.3) and (21.4), and takes its values in a commutative
ring, is determined by the values it takes on the graphs Lm , m ≥ 0. As an example of such an invariant, he introduced a two-variable polynomial obtained by
combining the expression for the chromatic polynomial due to Whitney (1932b)
with its analogue for nowhere-zero ﬂows (see Exercises 14.7.12 and 21.2.13). This
polynomial diﬀers by a multiplicative factor of (−1)c(G) from a polynomial now
commonly known as the Whitney (rank) polynomial. We give here a deﬁnition of
this latter polynomial as it lends itself more easily to generalizations in other areas
of mathematics such as matroid theory.
For a given graph G, the Whitney polynomial of G, denoted by W (G; x, y), is
deﬁned by the expression

xc(S)−c(G) y |S|−v(G)+c(S)
W (G; x, y) :=
S⊆E

where c(S) is the number of components of the spanning subgraph of G with edge
set S.
As an example, consider the m-bond Bm , the graph consisting of two vertices
joined by m links, m ≥ 1; for instance, B1 = K2 and B2 is the 2-cycle. The

21.7 The Tutte Polynomial

579

term of W (Bm ; x, y) corresponding to S = ∅ is x2−1 y 0−2+2 = x. If S is any
subset of E(Bm ) of cardinality i, 1 ≤ i ≤ m, the spanning subgraph of Bm with
edge set S is connected, and so the term of W (Bm ; x, y) corresponding to S is
x1−1 y i−2+1 = y i−1 . Thus the Whitney polynomial of Bm is given by
m  

m i−1
y
W (Bm ; x, y) = x +
i
i=1

Tutte (1954a) introduced a polynomial which is obtained by a simple modiﬁcation of the Whitney polynomial. He called it the dichromate. This polynomial, now known as the Tutte polynomial and denoted T (G; x, y), is deﬁned by
T (G; x, y) := W (G; x − 1, y − 1). Thus
T (G; x, y) =



(x − 1)c(S)−c(G) (y − 1)|S|−v(G)+c(S)

S⊆E

Although the two polynomials W (G; x, y) and T (G; x, y) encode the same information about the graph G, the Tutte polynomial tends to have smaller coeﬃcients.
For example, it may be veriﬁed (Exercise 21.7.2a) that
T (Bm ; x, y) = y m−1 + y m−2 + · · · + y 2 + x + y
The following theorem lists various basic properties of the Tutte polynomial.
Theorem 21.31 The Tutte polynomial T (G; x, y) has the following properties.


T (L0 ; x, y) = 1,



If e is a loop of G,

T (B1 ; x, y) = x,

T (L1 ; x, y) = y.

T (G; x, y) = y · T (G \ e; x, y)


If e is a cut edge of G,
T (G; x, y) = x · T (G / e; x, y)



If e is neither a loop nor a cut edge of G,
T (G; x, y) = T (G \ e; x, y) + T (G / e; x, y)



If G1 , G2 , . . . , Gk are the blocks of G,
T (G; x, y) =

k


T (Gi ; x, y)



i=1

What makes the Tutte polynomial so special is that it is a universal invariant
in the sense of the following theorem, due to Tutte (1948a) and rediscovered by
Brylawski (1972).

580

21 Integer Flows and Coverings

Theorem 21.32 Let f be a graphical invariant which takes values in a commutative ring R, is multiplicative on the blocks of the graph, and satisﬁes f (L0 ) = 1,
the unit element of R. Suppose, furthermore, that f (B1 ) = x and f (L1 ) = y, and
that:
 f (G) = y · f (G \ e) if e is a loop of G,
 f (G) = x · f (G / e) if e is a cut edge of G,
 f (G \ e) + f (G / e) otherwise.


Then f (G) = T (G; x, y).

We leave the proofs of Theorems 21.31 and 21.32 as an exercise (21.7.6).
Evaluations of the Tutte polynomial at certain special values of x and y are
given in the table of Figure 21.5. For convenience, the graph G is assumed to be
connected; there are analogous results for disconnected graphs. The formula for
the number of acyclic orientations is due to Winder (1966) and, independently,
Stanley (1973), and the formula for the dimension of the intersection of the cycle
and bond spaces is due to Rosenstiehl and Read (1978). We leave the veriﬁcation
of these evaluations to the reader (Exercise 21.7.5).

T (G; 1, 1)

number of spanning trees

T (G; 1, 2)

number of connected spanning subgraphs

T (G; 2, 1)

number of spanning forests

T (G; 2, 0)

number of acyclic orientations

T (G; −1, −1)

(−1)n−1 (−2)dim(B∩C)

T (G; 1 − x, 0)

(−1)n−1 P (G, x)

T (G; 0, 1 − x)

(−1)m−n+1 Q(G, x)

Fig. 21.5. Special evaluations of the Tutte polynomial of a connected graph G

As mentioned earlier, the importance of the Tutte polynomial extends to many
other areas of mathematics. For example, a well-known polynomial in knot theory, the Jones polynomial, is closely related to the Tutte polynomial. The article

21.7 The Tutte Polynomial

581

by Brylawski and Oxley (1992) provides an excellent survey of applications of
the Tutte polynomial. For an account of the computational aspects of the Tutte
polynomial, we refer the reader to Welsh (1993).

Exercises
21.7.1 Verify that (−1)n P (G, x) and (−1)m−n Q(G, x) satisfy (21.3) and (21.4).
21.7.2 Verify the following results.
a) For the m-bond Bm , T (Bm ; x, y) = y m−1 + y m−2 + . . . + y 2 + x + y.
b) For the n-cycle Cn , T (Cn ; x, y) = xn−1 + xn−2 + . . . + x2 + x + y.
c) For any tree G on n vertices, T (G; x, y) = xn−1 .
21.7.3 For the two nonisomorphic graphs G and H in Figure 21.6, show that
T (G; x, y) = T (H; x, y).

G

H

Fig. 21.6. Nonisomorphic graphs with the same Tutte polynomial

21.7.4 Let G be a plane graph, and let G∗ be its dual. Show that T (G; x, y) =
T (G∗ ; y, x).
21.7.5 Verify the entries in the table of Figure 21.5.
————— —————
21.7.6 Supply proofs of Theorems 21.31 and 21.32.
21.7.7 Show that the Tutte polynomial is reconstructible.
21.7.8 Let f be a graphical invariant which takes values in a commutative ring
R, is multiplicative on the blocks of the graph, and satisﬁes f (K1 ) = 1, the unit
element of R. Suppose that f (B1 ) = x and f (L1 ) = y, and that there exist nonzero
elements r and s of R such that:


f (G) = y · f (G \ e) if e is a loop of G,

582

21 Integer Flows and Coverings

 f (G) = x · f (G / e) if e is a cut edge of G,
 f (G) = r · f (G \ e) + s · f (G / e) otherwise.
Show that f (G) = rm−n+1 sn−1 T (G; x/s, y/r). (J. Oxley and D.J.A. Welsh)
21.7.9 The Reliability Polynomial
Let G be a connected graph and let Gp be a random spanning subgraph of
G obtained by retaining each edge independently with probability p ∈ [0, 1) (or
deleting it with probability q := 1 − p). Denote by R(G, p) the probability that Gp
is connected. Show that R(G, p) = pn−1 q m−n+1 T (G; 1, 1/q).
(If G represents a communication network and q denotes the probability of failure
of a link, then R(G, p) is the probability of communications remaining possible
between all centres. For this reason, R(G, p) is known as the reliability polynomial
of G.)

21.8 Related Reading
Several of the concepts and theorems covered in this chapter have natural generalizations to matroids.
Packing Bases in Matroids
Edmonds (1965a) showed that a matroid M deﬁned on a set E has k disjoint bases
if and only if
k r(S) + |E \ S| ≥ k r(E) for all S ⊆ E
When this theorem is applied to the cycle matroid of a graph, one obtains the NashWilliams–Tutte Theorem (21.17). It can be derived from Rado’s generalization of
Hall’s Theorem mentioned in Section 16.6, but Edmonds’ proof has the advantage
that it gives rise to a polynomial-time algorithm.
The Tutte Polynomial for Matroids
Crapo (1969) observed that with any matroid one may associate a two-variable
polynomial analogous to the Tutte polynomial for graphs. As with graphs, it is
convenient to deﬁne ﬁrst the Whitney polynomial of a matroid M on a set E:

∗
∗
xr(E)−r(S) y r (E)−r (E\S)
W (M ; x, y) :=
S⊆E

The Tutte polynomial of M can then be obtained from the Whitney polynomial
by a change of variables, as in the case of graphs. The Tutte polynomial of the
cycle matroid of a graph is simply the Tutte polynomial of the graph. For a survey
of applications of Tutte polynomials of matroids, see Brylawski and Oxley (1992).

Appendix A
Unsolved Problems

Our ﬁrst book Graph Theory with Applications included a list of ﬁfty unsolved
problems.1 Many have since been settled, notably the Four-Colour and Perfect
Graph Conjectures. But several other basic problems, such as the Reconstruction
and Five-Flow Conjectures, remain unresolved.
We present here an updated selection of interesting unsolved problems and
conjectures; statements of conjectures are set in italics. A number of them have
been discussed in detail in the text. In such cases, a reference to the problem or
conjecture is included. In other instances, where appropriate, pertinent exercises or
theorems from the book are indicated. A more detailed discussion of the problems
and conjectures listed here may be found on the book’s web page.
Proving and conjecturing, as Paul Erdős was fond of saying, is an integral part
mathematical activity. He did plenty of both in his life! The article by Chung
(1997) contains many of Erdős’s favourite problems. Another excellent source of
unsolved problems is Jensen and Toft (1995).

Reconstruction
1. (Conjecture 2.19) Every simple graph on at least three vertices is reconstructible.
Kelly (1942)
2. (Conjecture 2.23) Every simple graph on at least four edges is edge-reconstructible.
Harary (1964)
3. If two inﬁnite graphs are hypomorphic, then each is isomorphic to an induced
subgraph of the other. [Exercise 4.2.10]
Halin (1970)
4. Every simple graph on ﬁve or more vertices is reconstructible from its vertexswitchings. [Exercise 2.7.19]
Stanley (1985)
1

S. C. Locke of Florida Atlantic University maintains a web site which contains information on the status of these ﬁfty problems.

584

Appendix A Unsolved Problems

Subgraphs
 
5. Every simple graph G with at least p n2 edges has at least cnv(F ) pe(F ) labelled
copies of every ﬁxed bipartite graph F , where c ∼ 1 (that is, at least as many
copies as the random graph with the same number of vertices and edges as G.)
[Exercise 13.2.6]
Sidorenko (1991)
6. Is there an integer d such that the vertices of any strict digraph with minimum
outdegree d can be partitioned into two classes so that the minimum outdegree of
the subgraph induced by each class is at least two?
Alon (1996)

Coverings, Decompositions, and Packings
7. Every simple connected graph on n vertices can be decomposed into at most
1
T. Gallai, see Lovász (1968b)
2 (n + 1) paths. [Exercise 2.4.5b]
8. Every simple even graph on n vertices can be decomposed into at most 12 (n − 1)
cycles. [Exercise 2.4.5a]
G. Hajós, see Lovász (1968b)
9. Every regular tournament can be decomposed into directed Hamilton cycles.
P.J. Kelly, see Moon (1968)
10. (Conjecture 3.9) Every graph without cut edges has a cycle double cover.
Folklore (Robertson (2007)); Szekeres (1973); Seymour (1979b)
11. (Conjecture 3.11) Every simple graph on n vertices without cut edges has a
double cover by at most n − 1 cycles.
Bondy (1990)
12. Every 2-edge-connected graph has a double cover by at most ﬁve even subgraphs
[Exercise 3.5.3].
Preissmann (1981)
13. Let G be a loopless even graph of minimum degree four, and let W be an Euler
tour of G. Then G admits a decomposition into cycles none of which contains two
consecutive edges of W . [Exercise 3.3.7]
G. Sabidussi 1975, see Fleischner (1990)
14. Every simple k-regular graph has linear arboricity (k +1)/2 . [Theorem 13.19]
Akiyama et al. (1981), Hilton (1982)
15. Let G and H be simple graphs on n vertices such that (∆(G) + 1)(∆(H) + 1) ≤
n + 1. Then Kn contains edge-disjoint copies of G and H.
Catlin (1974); Bollobás and Eldridge (1978)
16. Does every 3-connected cubic graph on 3k vertices admit a partition into k
paths of length two?
Kelmans (2005)

Appendix A Unsolved Problems

585

Complexity
17. (Conjecture 8.2)

P = N P
J. Edmonds 1966, Cook (1971), Levin (1973)

18. (Conjecture 8.3)

P = N P ∩ co − N P

Edmonds (1965c)

19. Is the following problem in P?
Given: a cubic graph G and a Hamilton cycle in G,
Find: a second Hamilton cycle in G.
[Exercise 18.4.1]
Chrobak and Poljak (1988)
20. Is the following problem in co-N P?
Given: a graph G and two k-subsets X and Y of V ,
Decide: do there exist k internally disjoint (X, Y )-paths of odd length in G?
Thomassen (1980)

Connectivity
21. There is an integer-valued function f (k) such that if G is any f (k)-connected
graph and x and y are any two vertices of G, then there exists an induced xy-path
P such that G − V (P ) is k-connected.
L. Lovász, see Kawarabayashi et al. (2007)
22. Let G be a graph and T a set of vertices in G any two of which are connected
by 2k edge-disjoint paths. Then there are k edge-disjoint trees in G all of which
contain T . [Corollary 21.18]
Kriesell (2003)
23. Every 2k-connected digraph contains a spanning k-connected oriented subdigraph.
Thomassen (1989)

Embeddings
24. (Conjecture 21.14) Every 2-edge-connected graph has an orientable double
cover by ﬁve even subgraphs.
Archdeacon (1984), Jaeger (1988)
25. Every simple planar graph G has an induced forest on at least n/2 vertices.
Albertson and Berman (1979)
26. Every planar oriented graph can be partitioned into two induced acyclic subgraphs.
ˇ
Neumann-Lara (1985), R. Skrekovski
2001, see Bokal et al. (2004)

586

Appendix A Unsolved Problems

27. Every 5-connected nonplanar graph contains a K5 -subdivision. [Exercise 10.5.14]
P.D. Seymour 1974, see Seymour (2007); A.K. Kelmans 1979, see
Kelmans (1993)
28. Every 6-connected graph with no K6 -minor has a vertex whose deletion results
in a planar graph.
Jørgensen (1994)
29. No graph with more edges than vertices has a thrackle embedding. [Exercise
10.1.11]
J.H. Conway c.1968, see Woodall (1971)
30. Every simple planar graph admits a straight-line embedding with integer edge
lengths.
Kemnitz and Harborth (2001)

Extremal Problems
31. If G is simple and m > n(k − 1)/2, then G contains every tree with k edges.
[Exercise 4.1.9]
P. Erdős and V.T. Sós 1963, see Erdős (1964)
32. There exists a positive constant c such that ex(n, C2k ) ≥ cn1+1/k . [Exercise
12.2.14]
Erdős (1971)
33. If G has at most k edge-disjoint triangles, then there is a set of 2k edges whose
deletion destroys every triangle.
Zs. Tuza 1981, see Tuza (1990)
34. If G is a simple triangle-free graph, then there is a set of at most n2 /25 edges
whose deletion destroys every odd cycle.
Erdős et al. (1988)

Ramsey Numbers
35. Give a constructive proof that r(k, k) ≥ ck for some c > 1 and all k ≥ 1.
[Theorem 12.8]
Erdős (1969)
36. Does the limit limk→∞ (r(k, k))1/k exist? If so, determine its value.
P. Erdős 1947, see Erdős (1961b)
37. For every tree T on n vertices, r(T, T ) ≤ 2n − 2. Burr and Erdős (1976)
38. For every simple graph F , there is a positive constant  := (F ) such that
every simple graph G which contains no induced copy of F has either a stable set
Erdős and Hajnal (1989)
or a clique of cardinality n .

Appendix A Unsolved Problems

587

Vertex Colourings
39. (Conjecture 15.11) Every k-chromatic graph has a Kk -minor.
Hadwiger (1943)
40. Does a k-chromatic graph necessarily contain a Kk -subdivision when k = 5
and k = 6? [Exercise 15.4.3]
Catlin (1979)
41. Every 2k-chromatic digraph contains a copy of every oriented tree on k + 1
vertices. [Theorem 4.5]
Burr (1980)
42. Every graph which can be decomposed into k complete graphs on k vertices is
k-colourable. P. Erdős, V. Faber, and L. Lovász 1972, see Erdős (1976)
43. Every graph which can be decomposed into k − 1 complete bipartite graphs is
k-colourable. [Theorem 2.8]
N. Alon, M. Saks, and P.D. Seymour, see Kahn (1994)
44. The chromatic number of the weak product of two graphs is equal to the lesser
of their chromatic numbers: χ(G × H) = min {χ(G), χ(H)}. [Exercise 14.1.18]
A. Kotzig, and Hedetniemi (1966)
45. Let G be a k-chromatic graph which contains no k-clique, and let k1 + k2 be a
partition of k + 1 with k1 , k2 ≥ 2. Then there are disjoint subgraphs G1 and G2
of G such that Gi is ki -chromatic, i = 1, 2. [Exercise 16.3.13]
L. Lovász 1968, see Erdős (1968)
46. The union of a 1-degenerate graph (a forest) and a 2-degenerate graph is 5colourable.
M. Tarsi, see Klein (1994)
47. For any graph G, χ ≤ (ω + ∆ + 1)/2 .
Exercise 14.1.14]

[Equation (14.2), Theorem 14.4,
Reed (1998)

48. Every triangle-free graph of inﬁnite chromatic number contains every ﬁnite
tree as an induced subgraph.
Gyárfás (1975)
49. Every nonempty graph which contains no induced odd cycle of length ﬁve or
more admits a 2-vertex-colouring with no monochromatic maximum clique.
Hoàng and McDiarmid (2002)
50. If χ ≥ (n − 1)/2, then χL = χ.

Ohba (2002)

51. There is a constant c such that the list chromatic number of any bipartite graph
G is at most c log ∆. [Exercise 14.5.6]
Alon (2000)
52. The absolute values of the coeﬃcients of a chromatic polynomial form a unimodal sequence.
Read (1968)

588

Appendix A Unsolved Problems

Colourings of Embedded Graphs
53. Every planar graph without 4-cycles or 5-cycles is 3-colourable. [Discharging,
Section 15.2]
R. Steinberg 1977, see Steinberg (1993)
54. Every toroidal graph has three vertices whose deletion results in a 4-colourable
graph. [Section 15.5]
Albertson (1981)
55. Determine the chromatic number of the unit distance graph. [Exercise 14.1.20]
E. Nelson 1950, see Jensen and Toft (1995), p.150

Matchings
56. There is a constant c > 1 such that every 2-edge-connected cubic graph G has
at least cn perfect matchings. [Exercise 16.2.26]
Lovász and Plummer (1986), p.314
57. (Conjecture 17.6) Every 2-edge-connected cubic graph admits a double covering
by six perfect matchings.
Fulkerson (1971)

Edge Colourings
58. If G is a loopless graph and χ > ∆ + 1, then



2e(H)
: H ⊆ G, v(H) odd, v(H) ≥ 3
χ = max
v(H) − 1
[Exercise 17.2.2]

Goldberg (1974), Seymour (1979a)

59. Every d-regular simple graph on n vertices, with n even and d ≥ n/2, is dedge-colourable.
Hilton (1989)
60. (Conjecture 17.8) Every k-edge-colourable simple graph is k-list-edge-colourable.
[Theorem 17.10] Various authors, see Häggkvist and Chetwynd (1992)
61. Every simple graph G has a total colouring in ∆ + 2 colours.
Vizing (1964), Behzad (1965)
62. Given any proper edge colouring of a graph G, one can obtain a proper edge
colouring of G in χ colours by means of a sequence of alternating path and cycle
exchanges.
Vizing (1965)
63. Every simple graph G admits a proper (∆ + 2)-edge-colouring such that the
union of any two colour classes is acyclic.
Fiamčı́k (1978)

Appendix A Unsolved Problems

589

Paths and Cycles in Graphs
64. For k ≥ 3, there exists no graph in which each pair of vertices is connected by
a unique path of length k. [Theorem 3.1]
Kotzig (1979)
65. Every longest cycle in a 3-connected graph has a chord.
C. Thomassen 1976, see Thomassen (1997a)
66. In a k-connected graph, where k ≥ 2, any two longest cycles have at least k
vertices in common. [Exercise 5.1.5]
S. Smith, see Grötschel (1984)
67. Every 3-connected cyclically 4-edge-connected cubic graph on n vertices contains a cycle of length at least cn, where c is a positive constant.
J.A. Bondy, see Fleischner and Jackson (1989)
68. Every graph in which any two cycles of length k or more intersect has a set of
k vertices which meet all such cycles.
Birmelé (2003)
69. Do any three longest paths in a connected graph have a vertex in common?
[Exercise 2.2.13a]
Gallai (1968b)

Paths and Cycles in Digraphs
The digraphs here are assumed to be strict, that is, without loops or multiple
arcs.
70. Every oriented graph in which each vertex has outdegree at least k contains a
directed path of length 2k.
S. Thomassé 2005, see Sullivan (2006)
71. Every strong oriented graph in which each vertex has indegree and outdegree
at least k contains a directed cycle of length at least 2k + 1.
Jackson (1981)
72. Every positively weighted strong digraph (D, w) such that w− (v) ≥ 1 and
w+ (v) ≥ 1 for all v ∈ V contains a directed cycle of weight at least one.
[Exercise 2.5.9]
Bollobás and Scott (1996)
73. Every digraph of girth g in which each vertex has outdegree at least k has at
least k(g − 1) + 1 vertices. [Exercise 2.2.20] Caccetta and Häggkvist (1978)
74. Every digraph in which each vertex has outdegree at least k contains k directed
cycles C1 , . . . , Ck such that Cj meets ∪j−1
i=1 Ci in at most one vertex, 2 ≤ j ≤ k.
Hoàng and Reed (1987)
75. Every digraph in which each vertex has outdegree at least 2k − 1 contains k
disjoint directed cycles.
Bermond and Thomassen (1981)
76. Every digraph with at least one directed cycle has an arc whose reversal reduces
´ ám (1964)
the number of directed cycles.
Ad

590

Appendix A Unsolved Problems

77. Every digraph has a stable set meeting all longest directed paths.
[Theorem 14.5, Exercise 19.2.5]
Laborde et al. (1983)
78. Every oriented graph has a vertex with at least as many second outneighbours
as (ﬁrst) outneighbours. [Exercise 4.1.18]
P.D. Seymour 1995, see Bondy (1997)

Hamilton Paths and Cycles in Graphs
79. Every 3-connected cubic bipartite planar graph is hamiltonian. [Theorem 18.2,
Exercise 18.2.5] Barnette (1969), A. Kelmans and M. Lomonosov 1975
80. Every 4-connected claw-free graph is hamiltonian. [Exercise 18.3.16]
Matthews and Sumner (1984)
81. Every 4-regular 4-polytope is hamiltonian.
D.W. Barnette, see Grünbaum (1970), p.1145
82. Every prism over a 3-connected planar graph is hamiltonian.
Kaiser et al. (2007)
83. (Conjecture 18.14) Every simple 4-regular graph with a Hamilton cycle has a
second Hamilton cycle.
Sheehan (1975)
84. (Conjecture 18.18) Every 4-connected graph with a Hamilton cycle has a second Hamilton cycle.
Fleischner (2007)
85. Every prism over a 3-connected cubic planar graph admits a Hamilton decomposition.
Alspach and Rosenfeld (1986)
86. Every cubic planar graph with exactly three Hamilton cycles contains a triangle.
Cantoni (1950), see also Ninčák (1974), Tutte (1976)
87. Does every connected vertex-transitive graph have a Hamilton path?
Lovász (1970)
88. Every Cayley graph is hamiltonian.
T.D. Parsons, see Witte and Gallian (1984)
89. All but a ﬁnite number of vertex-transitive connected graphs are hamiltonian.
[Exercise 18.1.12]
C. Thomassen 1976, see Bermond (1978)
90. There exists a positive integer k such that every k-tough graph is hamiltonian.
[Exercise 18.1.22]
Chvátal (1973)
91. Is there a hypohamiltonian graph of minimum degree at least four? [Exercise
18.1.16]
Thomassen (1978)

Appendix A Unsolved Problems

591

92. There is no bipartite hypotraceable graph. [Exercise 18.1.17].
Grötschel (1978)

Coverings and Packings in Directed Graphs
93. (Conjecture 19.6) Let D be a digraph and P a k-optimal path partition of D.
Then there is a partial k-colouring of D orthogonal to P.
Berge (1982)
94. (Conjecture 19.19) In every digraph, the maximum number of disjoint transversals of directed cuts is equal to the size of a smallest directed cut.
Woodall (1978)

Integer Flows
95. (Conjecture 21.13) Every 2-edge-connected graph has a 5-ﬂow.
Tutte (1954a)
96. (Conjecture 21.15) Every 2-edge-connected graph with no Petersen minor has
a 4-ﬂow.
Tutte (1966b)
97. (Conjecture 21.16) Every 2-edge-connected graph without 3-edge cuts has a 3ﬂow.
W.T. Tutte 1972, see Bondy and Murty (1976), p.252
98. Every 4k-edge-connected graph admits a balanced orientation mod (2k + 1).
[Exercise 21.3.6]
Jaeger (1984)

Hypergraphs
99. Every simple 3-uniform hypergraph on 3n vertices which contains no complete
3-uniform hypergraph on four vertices has at most 12 n2 (5n − 3) edges. [Exercise
12.2.6]
Turán (1941)
100. Every simple 3-uniform hypergraph on 2n vertices which contains no complete
3-uniform hypergraph on ﬁve vertices has at most n2 (n − 1) edges. [Exercise 12.2.6]
Turán (1941)

References

Abbott H.L. and Moser L. (1966). Sum-free sets of integers. Acta Arith. 11,
393–396.
Abbott H.L. and Zhou B. (1991). On small faces in 4-critical planar graphs.
Ars Combin. 32, 203–207.
´ ám A. (1964). Problem 2. In Theory of Graphs and its Applications (M. Fiedler,
Ad
ed.), 234. Publishing House of the Czechoslovak Academy of Sciences, Prague.
Agrawal M., Kayal N. and Saxena N. (2004). PRIMES is in P. Ann. of Math.
(2) 160, 781–793.
Aharoni R., Hartman I.B.A. and Hoffman A.J. (1985). Path partitions and
packs of acyclic digraphs. Paciﬁc J. Math. 118, 249–259.
Aho A.V., Hopcroft J.E. and Ullman J.D. (1975). The Design and Analysis of Computer Algorithms. Addison-Wesley Series in Computer Science and
Information Processing, Addison-Wesley, Reading, MA. Second printing.
Aho A.V., Hopcroft J.E. and Ullman J.D. (1983). Data Structures and Algorithms. Addison-Wesley Series in Computer Science and Information Processing,
Addison-Wesley, Reading, MA.
Aigner M. (1995). Turán’s graph theorem. Amer. Math. Monthly 102, 808–816.
Aigner M. and Ziegler G.M. (2004). Proofs from The Book. Third edition.
Springer, Berlin. Including illustrations by Karl H. Hofmann.
Ajtai M., Chvátal V., Newborn M.M. and Szemerédi E. (1982). Crossingfree subgraphs. In Theory and Practice of Combinatorics, 9–12. North-Holland
Math. Stud., Vol. 60, North-Holland, Amsterdam.
Ajtai M., Komlós J. and Szemerédi E. (1980). A note on Ramsey numbers.
J. Combin. Theory Ser. A 29, 354–360.
Akiyama J., Exoo G. and Harary F. (1981). Covering and packing in graphs.
IV. Linear arboricity. Networks 11, 69–72.
Albertson M.O. (1981). Open Problem 2. In The Theory and Applications of
Graphs, Proceedings of the Fourth International Conference, Kalamazoo, Mich.,
1980, 609. Wiley, New York.

594

References

Albertson M.O. and Berman D.M. (1979). A conjecture on planar graphs. In
Graph Theory and Related Topics (J.A. Bondy and U.S.R. Murty, eds.), 357.
Academic Press, New York.
Albertson M.O. and Hutchinson J.P. (1978). On the independence ratio of
a graph. J. Graph Theory 2, 1–8.
Aleliunas R., Karp R.M., Lipton R.J., Lovász L. and Rackoff C. (1979).
Random walks, universal traversal sequences, and the complexity of maze problems. In 20th Annual Symposium on Foundations of Computer Science (San
Juan, Puerto Rico, 1979), 218–223. IEEE, New York.
Alon N. (1988). The linear arboricity of graphs. Israel J. Math. 62, 311–325.
Alon N. (1996). Disjoint directed cycles. J. Combin. Theory Ser. B 68, 167–178.
Alon N. (1999). Combinatorial Nullstellensatz. Combin. Probab. Comput. 8,
7–29. Recent Trends in Combinatorics (Mátraháza, 1995).
Alon N. (2000). Degrees and choice numbers. Random Structures Algorithms
16, 364–368.
Alon N. and Linial N. (1989). Cycles of length 0 modulo k in directed graphs.
J. Combin. Theory Ser. B 47, 114–119.
Alon N. and Spencer J.H. (2000). The Probabilistic Method. Second edition. Wiley-Interscience Series in Discrete Mathematics and Optimization, Wiley, New York. With an appendix on the life and work of Paul Erdős.
Alon N., Tuza Z. and Voigt M. (1997). Choosability and fractional chromatic numbers. Discrete Math. 165/166, 31–38. Graphs and Combinatorics
(Marseille, 1995).
Alspach B. and Rosenfeld M. (1986). On Hamilton decompositions of prisms
over simple 3-polytopes. Graphs Combin. 2, 1–8.
Alspach B., Goddyn L. and Zhang C.Q. (1994). Graphs with the circuit cover
property. Trans. Amer. Math. Soc. 344, 131–154.
Amini O., Mazoit F., Nisse N. and Thomassé S. (2007). Submodular partition
functions. Technical report, INRIA, Sophia Antipolis, Nice.
Appel K. and Haken W. (1977a). Every planar map is four colorable. I. Discharging. Illinois J. Math. 21, 429–490.
Appel K. and Haken W. (1977b). The solution of the four-color-map problem.
Sci. Amer. 237, 108–121, 152.
Appel K., Haken W. and Koch J. (1977). Every planar map is four colorable.
II. Reducibility. Illinois J. Math. 21, 491–567.
Applegate D., Bixby R., Chvátal V. and Cook W. (2007). The Traveling Salesman Problem: A Computational Study. Princeton Series in Applied
Mathematics, Princeton University Press, Princeton, NJ.
Archdeacon D. (1984). Face colorings of embedded graphs. J. Graph Theory 8,
387–398.
Arnborg S. and Proskurowski A. (1989). Linear time algorithms for NP-hard
problems restricted to partial k-trees. Discrete Appl. Math. 23, 11–24.
Arnborg S., Corneil D.G. and Proskurowski A. (1987). Complexity of
ﬁnding embeddings in a k-tree. SIAM J. Algebraic Discrete Methods 8, 277–
284.

References

595

Artzy R. (1956). Self-dual conﬁgurations and their Levi graphs. Proc. Amer.
Math. Soc. 7, 299–303.
Babai L. (1995). Automorphism groups, isomorphism, reconstruction. In Handbook of Combinatorics, Vol. 2, 1447–1540. Elsevier, Amsterdam.
Baer R. (1946). Polarities in ﬁnite projective planes. Bull. Amer. Math. Soc. 52,
77–93.
Bang-Jensen J. and Gutin G. (2001). Digraphs. Springer Monographs in Mathematics, Springer, London.
Bárány I. (1978). A short proof of Kneser’s conjecture. J. Combin. Theory Ser.
A 25, 325–326.
Barnette D. (1969). Conjecture 5. In Recent Progress in Combinatorics (W.T.
Tutte, ed.), 343. Academic Press, New York.
Battle J., Harary F. and Kodama Y. (1962). Every planar graph with nine
points has a nonplanar complement. Bull. Amer. Math. Soc. 68, 569–571.
Bauer D., Hakimi S.L. and Schmeichel E. (1990). Recognizing tough graphs
is NP-hard. Discrete Appl. Math. 28, 191–195.
Behzad M. (1965). Graphs and their Chromatic Numbers. Ph.D. thesis, Michigan
State University.
Behzad M., Chartrand G. and Wall C.E. (1970). On minimal regular digraphs with given girth. Fund. Math. 69, 227–231.
Beineke L.W. and Harary F. (1965). The thickness of the complete graph.
Canad. J. Math. 17, 850–859.
Beineke L.W., Harary F. and Moon J.W. (1964). On the thickness of the
complete bipartite graph. Proc. Cambridge Philos. Soc. 60, 1–5.
Benson C.T. (1966). Minimal regular graphs of girths eight and twelve. Canad.
J. Math. 18, 1091–1094.
Berge C. (1957). Two theorems in graph theory. Proc. Nat. Acad. Sci. U.S.A.
43, 842–844.
Berge C. (1958). Sur le couplage maximum d’un graphe. C. R. Acad. Sci. Paris
247, 258–259.
Berge C. (1963). Some classes of perfect graphs. In Six Papers in Graph Theory,
1–21. Indian Statistical Institute, Calcutta.
Berge C. (1973). Graphs and Hypergraphs. North-Holland Mathematical Library,
Vol. 6, North-Holland, Amsterdam. Translated by Edward Minieka.
Berge C. (1977). L’art subtil du hex. Unpublished manuscript.
Berge C. (1982). k-optimal partitions of a directed graph. European J. Combin.
3, 97–101.
Berge C. (1985). Graphs. North-Holland Mathematical Library, Vol. 6, NorthHolland, Amsterdam. Second revised edition of part 1 of the 1973 English
version.
Berge C. (1995). Who Killed the Duke of Densmore? Bibliothèque Oulipienne,
Vol. 67, OuLiPo, Paris.
Berge C. (1996). The history of the perfect graphs. Southeast Asian Bull. Math.
20, 5–10.

596

References

Berge C. (1997). Motivations and history of some of my conjectures. Discrete
Math. 165/166, 61–70. Graphs and Combinatorics (Marseille, 1995).
Berger E. and Hartman I. (2007). Proof of Berge’s strong path partition
conjecture for k = 2. European J. Combin. In press.
Bermond J. (1978). Hamiltonian graphs. In Selected Topics in Graph Theory
(L.W. Beineke and R.J. Wilson, eds.), xii+451. Academic Press, London.
Bermond J.C. and Thomassen C. (1981). Cycles in digraphs—a survey. J.
Graph Theory 5, 1–43.
Bermond J.C., Jackson B. and Jaeger F. (1983). Shortest coverings of graphs
with cycles. J. Combin. Theory Ser. B 35, 297–308.
Bernhart A. (1947). Six-rings in minimal ﬁve-color maps. Amer. J. Math. 69,
391–412.
Bessy S. and Thomassé S. (2003). Every strong digraph has a spanning strong
subgraph with at most n + 2α − 2 arcs. J. Combin. Theory Ser. B 87, 289–299.
Bessy S. and Thomassé S. (2004). Three min-max theorems concerning cyclic
orders of strong digraphs. In Integer Programming and Combinatorial Optimization, 132–138. Lecture Notes in Comput. Sci., Vol. 3064, Springer, Berlin.
Bienstock D. and Dean N. (1993). Bounds for rectilinear crossing numbers. J.
Graph Theory 17, 333–348.
Bienstock D. and Langston M.A. (1995). Algorithmic implications of the
graph minor theorem. In Network Models, 481–502. Handbooks Oper. Res.
Management Sci., Vol. 7, North-Holland, Amsterdam.
Biggs N. (1993). Algebraic graph theory. Second edition. Cambridge Mathematical Library, Cambridge University Press, Cambridge.
Biggs N.L., Lloyd E.K. and Wilson R.J. (1986). Graph Theory. 1736–1936.
Second edition. Clarendon Press, New York.
Birkhoff G.D. (1912/13). A determinant formula for the number of ways of
coloring a map. Ann. of Math. (2) 14, 42–46.
Birkhoff G.D. (1913). The reducibility of maps. Amer. J. Math. 35, 115–128.
Birmelé E. (2003). Largeur d’arborescence, q-cliques-mineurs et propriété
d’Erdős-Pósa. Ph.D. thesis, Université Claude Bernard Lyon 1.
Blanuša D. (1946). Le problème des quatre couleurs. Hrvatsko Prirodoslovno
Društvo. Glasnik Mat.-Fiz. Astr. Ser. II. 1, 31–42.
Blum A. and Karger D. (1997). An O(n3/14 )-coloring algorithm for 3-colorable
graphs. Inform. Process. Lett. 61, 49–53.
Bodlaender H.L. (2006). Treewidth: characterizations, applications, and computations. In Graph-Theoretic Concepts in Computer Science, 1–14. Lecture
Notes in Comput. Sci., Vol. 4271, Springer, Berlin.
Bokal D., Fijavž G., Juvan M., Kayll P.M. and Mohar B. (2004). The
circular chromatic number of a digraph. J. Graph Theory 46, 227–240.
Bollobás B. (1978). Extremal Graph Theory. London Mathematical Society
Monographs, Vol. 11, Academic Press, London.
Bollobás B. (1980). A probabilistic proof of an asymptotic formula for the
number of labelled regular graphs. European J. Combin. 1, 311–316.

References

597

Bollobás B. (2001). Random Graphs. Second edition. Cambridge Studies in
Advanced Mathematics, Vol. 73, Cambridge University Press, Cambridge.
Bollobás B. and Eldridge S.E. (1978). Packings of graphs and applications
to computational complexity. J. Combin. Theory Ser. B 25, 105–124.
Bollobás B. and Erdős P. (1976). Cliques in random graphs. Math. Proc.
Cambridge Philos. Soc. 80, 419–427.
Bollobás B. and Harris A.J. (1985). List-colourings of graphs. Graphs Combin.
1, 115–127.
Bollobás B. and Scott A.D. (1996). A proof of a conjecture of Bondy concerning paths in weighted digraphs. J. Combin. Theory Ser. B 66, 283–292.
Bollobás B., Catlin P.A. and Erdős P. (1980). Hadwiger’s conjecture is true
for almost every graph. European J. Combin. 1, 195–199.
Bondy J.A. (1978). Hamilton cycles in graphs and digraphs. In Proceedings
of the Ninth Southeastern Conference on Combinatorics, Graph Theory, and
Computing, volume 21, 3–28. Utilitas Math., Winnipeg.
Bondy J.A. (1990). Small cycle double covers of graphs. In Cycles and Rays
(Montreal, PQ, 1987), 21–40. NATO Adv. Sci. Inst. Ser. C Math. Phys. Sci.,
Vol. 301, Kluwer, Dordrecht.
Bondy J.A. (1991). A graph reconstructor’s manual. In Surveys in Combinatorics, 1991 (Guildford, 1991), 221–252. London Math. Soc. Lecture Note Ser.,
Vol. 166, Cambridge Univ. Press, Cambridge.
Bondy J.A. (1995a). Basic graph theory: paths and circuits. In Handbook of
Combinatorics, Vol. 1, 3–110. Elsevier, Amsterdam.
Bondy J.A. (1995b). A short proof of the Chen-Manalastas theorem. Discrete
Math. 146, 289–292.
Bondy J.A. (1997). Counting subgraphs: a new approach to the Caccetta–
Häggkvist conjecture. Discrete Math. 165/166, 71–80. Graphs and Combinatorics (Marseille, 1995).
Bondy J.A. and Charbit P. (2004). Cyclic orders, circuit coverings and circular
chromatic number. Technical report, Université Claude-Bernard, Lyon 1.
Bondy J.A. and Chvátal V. (1976). A method in graph theory. Discrete Math.
15, 111–135.
Bondy J.A. and Hell P. (1990). A note on the star chromatic number. J. Graph
Theory 14, 479–482.
Bondy J.A. and Murty U.S.R. (1976). Graph Theory with Applications. American Elsevier, New York.
Bonnington C.P. and Little C.H.C. (1995). The Foundations of Topological
Graph Theory. Springer, New York.
Borůvka O. (1926a). O jistém problému minimálnı́m. Práce Moravské
Přı́rodovědecké Společnosti Brno 3, 37–58. Czech, with German summary; On
a minimal problem.
Borůvka O. (1926b). Přı́spěvek k řešenı́ otázky economické stavby elektrovodných sı́tı́. Elektrotechnický Obzor 15:10, 153–154.

598

References

Borodin O.V., Glebov A.N., Raspaud A. and Salavatipour M.R. (2005).
Planar graphs without cycles of length from 4 to 7 are 3-colorable. J. Combin.
Theory Ser. B 93, 303–311.
Broersma H.J. (2002). On some intriguing problems in Hamiltonian graph
theory—a survey. Discrete Math. 251, 47–69. Cycles and Colourings (Stará
Lesná, 1999).
Broersma H.J., van den Heuvel J., Jackson B. and Veldman H.J. (1996).
Hamiltonicity of regular 2-connected graphs. J. Graph Theory 22, 105–124.
Brooks R.L. (1941). On colouring the nodes of a network. Proc. Cambridge
Philos. Soc. 37, 194–197.
Brooks R.L., Smith C.A.B., Stone A.H. and Tutte W.T. (1940). The dissection of rectangles into squares. Duke Math. J. 7, 312–340.
Browne C. (2000). Hex Strategy: Making the Right Connections. A. K. Peters,
Natick, MA.
Brylawski T. and Oxley J. (1992). The Tutte polynomial and its applications. In Matroid Applications, 123–225. Encyclopedia Math. Appl., Vol. 40,
Cambridge Univ. Press, Cambridge.
Brylawski T.H. (1972). A decomposition for combinatorial geometries. Trans.
Amer. Math. Soc. 171, 235–282.
Buczak J. (1980). Finite Group Theory. Ph.D. thesis, Oxford University.
Burr S.A. (1980). Subtrees of directed graphs and hypergraphs. In Proceedings
of the Eleventh Southeastern Conference on Combinatorics, Graph Theory and
Computing, volume 28, 227–239.
Burr S.A. and Erdős P. (1976). Extremal Ramsey theory for graphs. Utilitas
Math. 9, 247–258.
Caccetta L. and Häggkvist R. (1978). On minimal digraphs with given girth.
In Proceedings of the Ninth Southeastern Conference on Combinatorics, Graph
Theory, and Computing, volume 21, 181–187. Utilitas Math., Winnipeg.
Cameron K. (1986). On k-optimum dipath partitions and partial k-colourings of
acyclic digraphs. European J. Combin. 7, 115–118.
Cameron P.J. (1980). 6-transitive graphs. J. Combin. Theory Ser. B 28, 168–
179.
Cameron P.J. (1983). Automorphism groups of graphs. In Selected Topics in
Graph Theory, 2 (L.W. Beineke and R.J. Wilson, eds.), 89–127. Academic Press,
London.
Cameron P.J. (1997). The random graph. In The Mathematics of Paul Erdős,
II, 333–351. Algorithms Combin., Vol. 14, Springer, Berlin.
Cameron P.J. (2001). The random graph revisited. In European Congress
of Mathematics, Vol. I (Barcelona, 2000), 267–274. Progr. Math., Vol. 201,
Birkhäuser, Basel.
Camion P. (1959). Chemins et circuits hamiltoniens des graphes complets. C. R.
Acad. Sci. Paris 249, 2151–2152.
Cantoni R. (1950). Conseguenze dell’ipotesi del circuito totale pari per le reti
con vertici tripli. Ist. Lombardo Sci. Lett. Rend. Cl. Sci. Mat. Nat. (3) 14(83),
371–387.

References

599

Carvalho M., Lucchesi C. and Murty U.S.R. (2002). Optimal ear decompositions of matching covered graphs and bases for the matching lattice. J.
Combin. Theory Ser. B 85, 59–93.
Catlin P.A. (1974). Subgraphs of graphs. I. Discrete Math. 10, 225–233.
Catlin P.A. (1979). Hajós’ graph-coloring conjecture: variations and counterexamples. J. Combin. Theory Ser. B 26, 268–274.
Cayley A. (1889). A theorem on trees. Quart. J. Math. 23, 376–378.
Charbit P. (2005). Plongements de graphes et étude des circuits. Ph.D. thesis,
Université Claude Bernard Lyon 1.
Chartrand G. and Kronk H.V. (1968). Randomly traceable graphs. SIAM J.
Appl. Math. 16, 696–700.
Chen C.C. and Manalastas Jr. P. (1983). Every ﬁnite strongly connected
digraph of stability 2 has a Hamiltonian path. Discrete Math. 44, 243–250.
Chen G. and Yu X. (2002). Long cycles in 3-connected graphs. J. Combin.
Theory Ser. B 86, 80–99.
Christofides N. (1976). Worst-case analysis of a new heuristic for the travelling
salesman problem. Management Sciences Research Report 388, Graduate School
of Industrial Administration, Carnegie-Mellon University, Pittsburgh, PA.
Chrobak M. and Poljak S. (1988). On common edges in optimal solutions to
traveling salesman and other optimization problems. Discrete Appl. Math. 20,
101–111.
Chudnovsky M. and Seymour P. (2005). The structure of claw-free graphs. In
Surveys in Combinatorics 2005. London Math. Soc. Lecture Note Series, Vol.
327.
Chudnovsky M., Cornuéjols G., Liu X., Seymour P. and Vušković K.
(2005). Recognizing Berge graphs. Combinatorica 25, 143–186.
Chudnovsky M., Robertson N., Seymour P. and Thomas R. (2003).
Progress on perfect graphs. Math. Program. 97, 405–422. ISMP, 2003 (Copenhagen).
Chudnovsky M., Robertson N., Seymour P. and Thomas R. (2006). The
strong perfect graph theorem. Ann. of Math. (2) 164, 51–229.
Chung F.R.K. (1997). Open problems of Paul Erdős in graph theory. J. Graph
Theory 25, 3–36.
Chvátal V. (1972). On Hamilton’s ideals. J. Combin. Theory Ser. B 12, 163–
168.
Chvátal V. (1973). Tough graphs and Hamiltonian circuits. Discrete Math. 5,
215–228.
Chvátal V. (1983). Linear Programming. A Series of Books in the Mathematical
Sciences, Freeman, New York.
Chvátal V. and Erdős P. (1972). A note on Hamiltonian circuits. Discrete
Math. 2, 111–113.
Chvátal V. and Lovász L. (1974). Every directed graph has a semi-kernel. In
Hypergraph Seminar (Proc. First Working Sem., Columbus, Ohio, 1972; dedicated to Arnold Ross), 175. Lecture Notes in Math., Vol. 411, Springer, Berlin.

600

References

Chvátal V., Rödl V., Szemerédi E. and Trotter Jr. W.T. (1983). The
Ramsey number of a graph with bounded maximum degree. J. Combin. Theory
Ser. B 34, 239–243.
Cook S.A. (1971). The complexity of theorem-proving procedures. In Proceedings
of the Third Annual ACM Symposium on Theory of Computing, 151–158. ACM
Press, New York.
Cormen T.H., Leiserson C.E., Rivest R.L. and Stein C. (2001). Introduction
to Algorithms. Second edition. MIT Press, Cambridge, MA.
Corneil D.G. (2004). Lexicographic breadth ﬁrst search—a survey. In GraphTheoretic Concepts in Computer Science, 1–19. Lecture Notes in Comput. Sci.,
Vol. 3353, Springer, Berlin.
Coxeter H.S.M. (1950). Self-dual conﬁgurations and regular graphs. Bull. Amer.
Math. Soc. 56, 413–455.
Coxeter H.S.M. (1983). My graph. Proc. London Math. Soc. (3) 46, 117–136.
Crapo H.H. (1969). The Tutte polynomial. Aequationes Math. 3, 211–229.
Crossley M.D. (2005). Essential Topology. Springer Undergraduate Mathematics Series, Springer-Verlag London Ltd., London.
Cunningham W.H. and Edmonds J. (1980). A combinatorial decomposition
theory. Canad. J. Math. 32, 734–765.
Descartes B. (1948). Network-colourings. Mat. Gaz. 32, 67–69.
Devillers A. (2002). Classiﬁcation of some Homogeneous and Ultrahomogeneous
Structures. Ph.D. thesis, Université Libre de Bruxelles.
Diestel R. (2005). Graph Theory. Third edition. Graduate Texts in Mathematics,
Vol. 173, Springer, Berlin.
Dijkstra E.W. (1959). A note on two problems in connexion with graphs. Numer.
Math. 1, 269–271.
Dilworth R.P. (1950). A decomposition theorem for partially ordered sets. Ann.
of Math. (2) 51, 161–166.
Dinic E.A. (1970). An algorithm for the solution of the problem of maximal ﬂow
in a network with power estimation. Dokl. Akad. Nauk SSSR 194, 754–757.
Dirac G.A. (1951). Note on the colouring of graphs. Math. Z. 54, 347–353.
Dirac G.A. (1952a). A property of 4-chromatic graphs and some remarks on
critical graphs. J. London Math. Soc. 27, 85–92.
Dirac G.A. (1952b). Some theorems on abstract graphs. Proc. London Math.
Soc. (3) 2, 69–81.
Dirac G.A. (1953). The structure of k-chromatic graphs. Fund. Math. 40, 42–55.
Dirac G.A. (1957). A theorem of R. L. Brooks and a conjecture of H. Hadwiger.
Proc. London Math. Soc. (3) 7, 161–195.
Dirac G.A. (1961). On rigid circuit graphs. Abh. Math. Sem. Univ. Hamburg
25, 71–76.
Donald A. (1980). An upper bound for the path number of a graph. J. Graph
Theory 4, 189–201.
Dousse O., Franceschetti M. and Thiran P. (2006). On the throughput
scaling of wireless relay networks. IEEE Trans. Inform. Theory 52, 2756–2761.

References

601

Doyle P.G. and Snell J.L. (1984). Random Walks and Electric Networks.
Carus Mathematical Monographs, Vol. 22, Mathematical Association of America, Washington, DC.
Duijvestijn A.J.W. (1978). Simple perfect squared square of lowest order. J.
Combin. Theory Ser. B 25, 240–243.
Edmonds J. (1965a). Lehman’s switching game and a theorem of Tutte and
Nash-Williams. J. Res. Nat. Bur. Standards Sect. B 69B, 73–77.
Edmonds J. (1965b). Maximum matching and a polyhedron with 0, 1-vertices. J.
Res. Nat. Bur. Standards Sect. B 69B, 125–130.
Edmonds J. (1965c). Minimum partition of a matroid into independent subsets.
J. Res. Nat. Bur. Standards Sect. B 69B, 67–72.
Edmonds J. (1965d). Paths, trees, and ﬂowers. Canad. J. Math. 17, 449–467.
Edmonds J. (1973). Edge-disjoint branchings. In Combinatorial Algorithms, 91–
96. Algorithmics Press, New York.
Edmonds J. and Fulkerson D.R. (1965). Transversals and matroid partition.
J. Res. Nat. Bur. Standards Sect. B 69B, 147–153.
Edmonds J. and Karp R.M. (1970). Theoretical improvements in algorithmic
eﬃciency for network ﬂow problems. In Combinatorial Structures and their
Applications, 93–96. Gordon and Breach, New York.
Egerváry E. (1931). On combinatorial properties of matrices. Mat. Lapok. 38,
16–28. Hungarian with German summary.
Elias P., Feinstein A. and Shannon C.E. (1956). A note on the maximum
ﬂow through a network. IRE. Trans. Inf. Theory IT-2, 117–119.
Ellingham M.N. (1988). Recent progress in edge reconstruction. Congr. Numer.
62, 3–20. Seventeenth Manitoba Conference on Numerical Mathematics and
Computing.
Ellingham M.N. (1996). Spanning paths, cycles, trees and walks for graphs on
surfaces. Congr. Numer. 115, 55–90. Surveys in Graph Theory.
Erdős P. (1947). Some remarks on the theory of graphs. Bull. Amer. Math. Soc.
53, 292–294.
Erdős P. (1955). Problem 250. Elemente der Math. 10, 114.
Erdős P. (1956). Solution to Problem 250 (H. Debrunner). Elemente der Math.
11, 137.
Erdős P. (1961a). Graph theory and probability. II. Canad. J. Math. 13, 346–352.
Erdős P. (1961b). Some unsolved problems. Magyar Tud. Akad. Mat. Kutató
Int. Közl. 6, 221–254.
Erdős P. (1964). Extremal problems in graph theory. In Theory of Graphs and its
Applications (Proc. Sympos. Smolenice, 1963), 29–36. Publ. House Czechoslovak
Acad. Sci., Prague.
Erdős P. (1964/1965). On an extremal problem in graph theory. Colloq. Math.
13, 251–254.
Erdős P. (1965). On some extremal problems in graph theory. Israel J. Math.
3, 113–116.
Erdős P. (1968). Problem 2. In Theory of Graphs (Proc. Colloq., Tihany, 1966),
361. Academic Press, New York.

602

References

Erdős P. (1969). Problems and results in chromatic graph theory. In Proof
Techniques in Graph Theory, 27–35. Academic Press, New York.
Erdős P. (1971). Some unsolved problems in graph theory and combinatorial
analysis. In Combinatorial Mathematics and its Applications, 97–109. Academic
Press, London.
Erdős P. (1976). Problems and results in graph theory and combinatorial analysis. In Proceedings of the Fifth British Combinatorial Conference, volume 15,
169–192. Utilitas Math., Winnipeg.
Erdős P. and Fajtlowicz S. (1981). On the conjecture of Hajós. Combinatorica
1, 141–143.
Erdős P. and Gallai T. (1960). Graphs with prescribed degrees of vertices.
Mat. Lapok 11, 264–274. Hungarian.
Erdős P. and Hajnal A. (1989). Ramsey-type theorems. Discrete Appl. Math.
25, 37–52. Combinatorics and Complexity (Chicago, IL, 1987).
Erdős P. and Kelly P. (1967). The minimal regular graph containing a given
graph. In A Seminar on Graph Theory, 65–69. Holt, Rinehart and Winston,
New York.
Erdős P. and Lovász L. (1975). Problems and results on 3-chromatic hypergraphs and some related questions. In Inﬁnite and Finite Sets, Vol. II, 609–627.
Colloq. Math. Soc. János Bolyai, Vol. 10, North-Holland, Amsterdam.
Erdős P. and Pósa L. (1965). On independent circuits contained in a graph.
Canad. J. Math. 17, 347–352.
Erdős P. and Purdy G. (1995). Extremal problems in combinatorial geometry.
In Handbook of Combinatorics, Vol. 1, 809–874. Elsevier, Amsterdam.
Erdős P. and Rényi A. (1959). On random graphs. I. Publ. Math. Debrecen 6,
290–297.
Erdős P. and Rényi A. (1960). On the evolution of random graphs. Magyar
Tud. Akad. Mat. Kutató Int. Közl. 5, 17–61.
Erdős P. and Rényi A. (1962). On a problem in the theory of graphs. Magyar
Tud. Akad. Mat. Kutató Int. Közl. 7, 623–641 (1963).
Erdős P. and Rényi A. (1963). Asymmetric graphs. Acta Math. Acad. Sci.
Hungar 14, 295–315.
Erdős P. and Simonovits M. (1966). A limit theorem in graph theory. Studia
Sci. Math. Hungar 1, 51–57.
Erdős P. and Stone A.H. (1946). On the structure of linear graphs. Bull. Amer.
Math. Soc. 52, 1087–1091.
Erdős P. and Szekeres G. (1935). A combinatorial problem in geometry. Compositio Math. 2, 463–470.
Erdős P., Faudree R., Pach J. and Spencer J. (1988). How to make a graph
bipartite. J. Combin. Theory Ser. B 45, 86–98.
Erdős P., Ko C. and Rado R. (1961). Intersection theorems for systems of
ﬁnite sets. Quart. J. Math. Oxford Ser. (2) 12, 313–320.
Erdős P., Meir A., Sós V.T. and Turán P. (1971). On some applications of
graph theory. II. In Studies in Pure Mathematics (Presented to Richard Rado),
89–99. Academic Press, London.

References

603

Erdős P., Meir A., Sós V.T. and Turán P. (1972a). On some applications of
graph theory. I. Discrete Math. 2, 207–228.
Erdős P., Meir A., Sós V.T. and Turán P. (1972b). On some applications of
graph theory. III. Canad. Math. Bull. 15, 27–32.
Erdős P., Rényi A. and Sós V.T. (1966). On a problem of graph theory. Studia
Sci. Math. Hungar. 1, 215–235.
Euler L. (1736). Solutio problematis ad geometriam situs pertinentis. Comment.
Academiae Sci. I. Petropolitanae 8, 128–140.
Euler L. (1752). Elementa doctrinae solidorum.— Demonstratio nonnullarum
insignium proprietatum, quibus solida hedris planis inclusa sunt praedita. Novi
Comment. Acad. Sc. Imp. Petropol. 4, 109–140–160.
Fan G. (1992). Integer ﬂows and cycle covers. J. Combin. Theory Ser. B 54,
113–122.
Fan G. (2002). Subgraph coverings and edge switchings. J. Combin. Theory Ser.
B 84, 54–83.
Farkas J. (1902). Über die Theorie der einfachen Ungleichungen. J. Reine Angewandte Math. 124, 1–27.
Feller W. (1968). An Introduction to Probability Theory and its Applications.
Vol. I. Third edition. Wiley, New York.
Feofiloff P. and Younger D.H. (1987). Directed cut transversal packing for
source-sink connected graphs. Combinatorica 7, 255–263.
Fiamčı́k I. (1978). The acyclic chromatic class of a graph. Math. Slovaca 28,
139–145.
Fisk S. (1978). The nonexistence of colorings. J. Combin. Theory Ser. B 24,
247–248.
Fleischner H. (1974). The square of every two-connected graph is Hamiltonian.
J. Combin. Theory Ser. B 16, 29–34.
Fleischner H. (1990). Eulerian Graphs and Related Topics. Part 1. Vol. 1.
Annals of Discrete Mathematics, Vol. 45, North-Holland, Amsterdam.
Fleischner H. (1991). Eulerian Graphs and Related Topics. Part 1. Vol. 2.
Annals of Discrete Mathematics, Vol. 50, North-Holland, Amsterdam.
Fleischner H. (1992). Spanning Eulerian subgraphs, the splitting lemma, and
Petersen’s theorem. Discrete Math. 101, 33–37. Special volume to mark the
centennial of Julius Petersen’s “Die Theorie der regulären Graphs”, Part II.
Fleischner H. (1994). Uniqueness of maximal dominating cycles in 3-regular
graphs and of Hamiltonian cycles in 4-regular graphs. J. Graph Theory 18,
449–459.
Fleischner H. (2007). Uniquely Hamiltonian graphs of minimum degree four.
J. Graph Theory. To appear.
Fleischner H. and Jackson B. (1989). A note concerning some conjectures on
cyclically 4-edge connected 3-regular graphs. In Graph Theory in Memory of
G. A. Dirac (Sandbjerg, 1985), 171–177. Ann. Discrete Math., Vol. 41, NorthHolland, Amsterdam.

604

References

Fleischner H. and Stiebitz M. (1992). A solution to a colouring problem of
P. Erdős. Discrete Math. 101, 39–48. Special volume to mark the centennial of
Julius Petersen’s “Die Theorie der regulären Graphs”, Part II.
Fleury (1883). Deux problèmes de géométrie de situation. Journal de Mathématiques Elémentaires, 257–261.
Folkman J. (1970). Graphs with monochromatic complete subgraphs in every
edge coloring. SIAM J. Appl. Math. 18, 19–24.
Ford Jr. L.R. and Fulkerson D.R. (1956). Maximal ﬂow through a network.
Canad. J. Math. 8, 399–404.
Ford Jr. L.R. and Fulkerson D.R. (1962). Flows in Networks. Princeton
University Press, Princeton, NJ.
Fortune S., Hopcroft J. and Wyllie J. (1980). The directed subgraph homeomorphism problem. Theoret. Comput. Sci. 10, 111–121.
Frank A. (1978). On disjoint trees and arborescences. In Algebraic Methods
in Graph Theory, Colloquia Mathematica Soc. J. Bolyai, volume 25, 159–169.
North-Holland.
Frank A. (1992). On a theorem of Mader. Discrete Math. 101, 49–57. Special
volume to mark the centennial of Julius Petersen’s “Die Theorie der regulären
Graphs”, Part II.
Frank A. (1995). Connectivity and network ﬂows. In Handbook of Combinatorics,
Vol. 1, 111–177. Elsevier, Amsterdam.
Frankl P. and Wilson R.M. (1981). Intersection theorems with geometric
consequences. Combinatorica 1, 357–368.
Franklin P. (1934). A six-color problem. J. Math. Phys. 13, 363–369.
Fréchet M. and Fan K. (2003). Invitation to Combinatorial Topology. Dover,
Mineola. Translated from the French, with notes, by Howard W. Eves, Reprint
of the 1967 English translation.
Frucht R. (1938). Herstellung von Graphen mit vorgegebener abstrakter Gruppe.
Compositio Math. 6, 239–250.
Fujishige S. (2005). Submodular Functions and Optimization. Second edition.
Annals of Discrete Mathematics, Vol. 58, Elsevier, Amsterdam.
Fulkerson D.R. (1971). Blocking and anti-blocking pairs of polyhedra. Math.
Programming 1, 168–194.
Füredi Z. (1991). Turán type problems. In Surveys in Combinatorics, 1991
(Guildford, 1991), 253–300. London Math. Soc. Lecture Note Ser., Vol. 166,
Cambridge Univ. Press, Cambridge.
Füredi Z. (1996). On the number of edges of quadrilateral-free graphs. J. Combin.
Theory Ser. B 68, 1–6.
Füredi Z. and Simonovits M. (2005). Triple systems not containing a Fano
conﬁguration. Combin. Probab. Comput. 14, 467–484.
Gallai T. (1959). Über extreme Punkt- und Kantenmengen. Ann. Univ. Sci.
Budapest. Eötvös Sect. Math. 2, 133–138.
Gallai T. (1964a). Maximale Systeme unabhängiger Kanten. Magyar Tud. Akad.
Mat. Kutató Int. Közl. 9, 401–413 (1965).

References

605

Gallai T. (1964b). Problem 15. In Theory of Graphs and its Applications
(M. Fiedler, ed.), 161. Czech. Acad. Sci. Publ.
Gallai T. (1968a). On directed paths and circuits. In Theory of Graphs (Proc.
Colloq., Tihany, 1966), 115–118. Academic Press, New York.
Gallai T. (1968b). Problem 4. In Theory of Graphs (Proc. Colloq., Tihany,
1966), 362. Academic Press, New York.
Gallai T. (1968c). Problem 6. In Theory of Graphs (Proc. Colloq., Tihany,
1966), 362. Academic Press, New York.
Gallai T. and Milgram A.N. (1960). Verallgemeinerung eines graphentheoretischen Satzes von Rédei. Acta Sci. Math. (Szeged) 21, 181–186.
Galvin F. (1995). The list chromatic index of a bipartite multigraph. J. Combin.
Theory Ser. B 63, 153–158.
Gardiner A. (1976). Homogeneous graphs. J. Combin. Theory Ser. B 20, 94–
102.
Garey M.R. and Johnson D.S. (1979). Computers and Intractability: a Guide
to the Theory of NP-completeness. Freeman, San Francisco.
Gasparian G.S. (1996). Minimal imperfect graphs: a simple approach. Combinatorica 16, 209–212.
Georges J.P. (1989). Non-Hamiltonian bicubic graphs. J. Combin. Theory Ser.
B 46, 121–124.
Ghouila-Houri A. (1960). Sur l’existence d’un ﬂot ou d’une tension prenant ses
valeurs dans un groupe abélien. C. R. Acad. Sci. Paris 250, 3931–3933.
Godsil C. and Royle G. (2001). Algebraic Graph Theory. Graduate Texts in
Mathematics, Vol. 207, Springer, New York.
Goldberg M.K. (1974). A remark on the chromatic class of a multigraph. In
Numerical Mathematics and Computer Technology, No. V (Russian), 128–130,
168. Akad. Nauk Ukrain. SSR Fiz.-Tehn. Inst. Nizkih Temperatur, Kharkov.
Golumbic M.C. (2004). Algorithmic Graph Theory and Perfect Graphs. Second
edition. Annals of Discrete Mathematics, Vol. 57, Elsevier, Amsterdam. With a
foreword by Claude Berge.
Gomory R.E. and Hu T.C. (1961). Multi-terminal network ﬂows. J. Soc. Indust.
Appl. Math. 9, 551–570.
Göring F. (2000). Short proof of Menger’s theorem. Discrete Math. 219, 295–296.
Gould R.J. (2003). Advances on the Hamiltonian problem—a survey. Graphs
Combin. 19, 7–52.
Gowers W.T. (2006). Quasirandomness, counting and regularity for 3-uniform
hypergraphs. Combin. Probab. Comput. 15, 143–184.
Graham R.L. and Pollak H.O. (1971). On the addressing problem for loop
switching. Bell System Tech. J. 50, 2495–2519.
Graham R.L., Rothschild B.L. and Spencer J.H. (1990). Ramsey Theory.
Second edition. Wiley-Interscience Series in Discrete Mathematics and Optimization, Wiley, New York.
Graham R.L., Grötschel M. and Lovász L., eds. (1995). Handbook of Combinatorics. Vol. 1, 2. Elsevier, Amsterdam.

606

References

Greene J.E. (2002). A new short proof of Kneser’s conjecture. Amer. Math.
Monthly 109, 918–920.
Greenwood R.E. and Gleason A.M. (1955). Combinatorial relations and chromatic graphs. Canad. J. Math. 7, 1–7.
`
Grinberg E.J.
(1968). Plane homogeneous graphs of degree three without Hamiltonian circuits. In Latvian Math. Yearbook, 4 (Russian), 51–58. Izdat. “Zinatne”,
Riga.
Gross J.L. and Tucker T.W. (1987). Topological Graph Theory. Wiley-Interscience Series in Discrete Mathematics and Optimization, Wiley, New York.
Grötschel M. (1978). Hypo-Hamiltonian facets of the symmetric travelling
salesman polytype. Z. Angew. Math. Mech. 58, T469–T471.
Grötschel M. (1984). On intersections of longest cycles. In Graph Theory and
Combinatorics (Cambridge, 1983), 171–189. Academic Press, London.
Grötschel M., Lovász L. and Schrijver A. (1988). Geometric Algorithms
and Combinatorial Optimization. Algorithms and Combinatorics: Study and
Research Texts, Vol. 2, Springer, Berlin.
Grötzsch H. (1958/1959). Zur Theorie der diskreten Gebilde. VII. Ein Dreifarbensatz für dreikreisfreie Netze auf der Kugel. Wiss. Z. Martin-Luther-Univ.
Halle-Wittenberg. Math.-Nat. Reihe 8, 109–120.
Grünbaum B. (1970). Polytopes, graphs, and complexes. Bull. Amer. Math. Soc.
76, 1131–1201.
Gupta R.P. (1966). The chromatic index and the degree of a graph. Notices
Amer. Math. Soc. 13. Abstract 66T-429.
Gyárfás A. (1975). On Ramsey covering-numbers. In Inﬁnite and Finite Sets,
Vol. II, 801–816. Colloq. Math. Soc. Janós Bolyai, Vol. 10, North-Holland, Amsterdam.
Gyárfás A., Jensen T. and Stiebitz M. (2004). On graphs with strongly
independent color-classes. J. Graph Theory 46, 1–14.
Hadwiger H. (1943). Über eine Klassiﬁkation der Streckenkomplexe. Vierteljschr. Naturforsch. Ges. Zürich 88, 133–142.
Häggkvist R. and Chetwynd A. (1992). Some upper bounds on the total and
list chromatic numbers of multigraphs. J. Graph Theory 16, 503–516.
Häggkvist R. and Thomassen C. (1982). Circuits through speciﬁed edges.
Discrete Math. 41, 29–34.
Hajnal A. and Szemerédi E. (1970). Proof of a conjecture of P. Erdős. In Combinatorial Theory and its Applications, II (Proc. Colloq., Balatonfüred, 1969),
601–623. North-Holland, Amsterdam.
Halin R. (1969). A theorem on n-connected graphs. J. Combin. Theory 7,
150–154.
Halin R. (1970). Unpublished.
Hall P. (1935). On representatives of subsets. J. London Math. Soc. 10, 26–30.
Hamilton W.R. (1931). Letter to John Graves on the Icosian, 17 oct., 1856. In
The Mathematical Papers of Sir William Rowan Hamilton, volume 3 (H. Halberstam and R. Ingram, eds.), 612–625. Cambridge University Press, Cambridge.

References

607

Harary F. (1964). On the reconstruction of a graph from a collection of subgraphs. In Theory of Graphs and its Applications (Proc. Sympos. Smolenice,
1963), 47–52. Publ. House Czechoslovak Acad. Sci., Prague.
Harary F., Plantholt M. and Statman R. (1982). The graph isomorphism
problem is polynomially equivalent to the legitimate deck problem for regular
graphs. Caribbean J. Math. 1, 15–23.
Hartman I.B.A. (2006). Berge’s conjecture on path partitions — a survey. In
Creation and Recreation — A Volume in Memory of Claude Berge, Discrete
Math., volume 306 (J.A. Bondy and V. Chvátal, eds.), 2498–2514. Elsevier,
Amsterdam.
Hartsfield N. and Ringel G. (1994). Pearls in Graph Theory: A Comprehensive
Introduction. Academic Press, Boston. Revised reprint of the 1990 original.
Havet F. and Thomassé S. (2000). Median orders of tournaments: a tool for
the second neighborhood problem and Sumner’s conjecture. J. Graph Theory
35, 244–256.
Haxell P., Seamone B. and Verstraete J. (2007). Independent dominating
sets and Hamiltonian cycles. J. Graph Theory 54, 233–244.
Heawood P.J. (1890). Map-colour theorem. Quart. J. Pure Appl. Math. 24,
332–338.
Hedetniemi S. (1966). Homomorphisms of graphs and automata. Technical
Report 03105-44-T, University of Michigan.
Heesch H. (1969). Untersuchungen zum Vierfarbenproblem. B.I.-Hochschulskripten 810/810a/810b, Bibliographisches Institut, Mannheim.
Hell P. and Nešetřil J. (2004). Graphs and Homomorphisms. Oxford Lecture
Series in Mathematics and its Applications, Vol. 28, Oxford University Press,
Oxford.
Henle F. and Henle J. (2006). Squaring the plane. Unpublished manuscript.
Herstein I.N. (1996). Abstract Algebra. Third edition. Prentice Hall, Upper
Saddle River, NJ. With a preface by Barbara Cortzen and David J. Winter.
Hilton A.J.W. (1982). Canonical edge-colourings of locally ﬁnite graphs. Combinatorica 2, 37–51.
Hilton A.J.W. (1989). Two conjectures on edge-colouring. Discrete Math. 74,
61–64.
Hoàng C.T. and McDiarmid C. (2002). On the divisibility of graphs. Discrete
Math. 242, 145–156.
Hoàng C.T. and Reed B. (1987). A note on short cycles in digraphs. Discrete
Math. 66, 103–107.
Hoffman A.J. (1960). Some recent applications of the theory of linear inequalities
to extremal combinatorial analysis. In Proc. Sympos. Appl. Math., Vol. 10, 113–
127. American Mathematical Society, Providence, R.I.
Hoffman A.J. and Singleton R.R. (1960). On Moore graphs with diameters
2 and 3. IBM J. Res. Develop. 4, 497–504.
Holyer I. (1981). The NP-completeness of edge-coloring. SIAM J. Comput. 10,
718–720.

608

References

Hopcroft J. and Tarjan R. (1974). Eﬃcient planarity testing. J. Assoc. Comput. Mach. 21, 549–568.
Hopcroft J.E. and Wong J.K. (1974). Linear time algorithm for isomorphism
of planar graphs: preliminary report. In Sixth Annual ACM Symposium on
Theory of Computing (Seattle, Wash., 1974), 172–184. Assoc. Comput. Mach.,
New York.
Isaacs R. (1975). Inﬁnite families of nontrivial trivalent graphs which are not
Tait colorable. Amer. Math. Monthly 82, 221–239.
Iwata S. and Matsuda T. (2007). Finding coherent cyclic orders in strong
digraphs. Technical report, Graduate School of Information Sciences and Technology, University of Tokyo.
Jackson B. (1980). Hamilton cycles in regular 2-connected graphs. J. Combin.
Theory Ser. B 29, 27–46.
Jackson B. (1981). Long paths and cycles in oriented graphs. J. Graph Theory
5, 145–157.
Jackson B. (1986). Longest cycles in 3-connected cubic graphs. J. Combin.
Theory Ser. B 41, 17–26.
Jackson B. (1993a). On circuit covers, circuit decompositions and Euler tours
of graphs. In Surveys in Combinatorics, 1993 (Keele), 191–210. London Math.
Soc. Lecture Note Ser., Vol. 187, Cambridge Univ. Press, Cambridge.
Jackson B. (1993b). A zero-free interval for chromatic polynomials of graphs.
Combin. Probab. Comput. 2, 325–336.
Jackson B. and Parsons T.D. (1982). A shortness exponent for r-regular rconnected graphs. J. Graph Theory 6, 169–176.
Jackson B. and Wormald N.C. (1990). k-walks of graphs. Australas. J. Combin. 2, 135–146. Combinatorial Mathematics and Combinatorial Computing,
Vol. 2 (Brisbane, 1989).
Jaeger F. (1976). On nowhere-zero ﬂows in multigraphs. In Proceedings of the
Fifth British Combinatorial Conference, volume 15, 373–378. Utilitas Math.,
Winnipeg.
Jaeger F. (1979). Flows and generalized coloring theorems in graphs. J. Combin.
Theory Ser. B 26, 205–216.
Jaeger F. (1984). On circular ﬂows in graphs. In Finite and Inﬁnite Sets, Vol.
I, II (Eger, 1981), 391–402. Colloq. Math. Soc. János Bolyai, Vol. 37, NorthHolland, Amsterdam.
Jaeger F. (1985). A survey of the cycle double cover conjecture. In Cycles
in Graphs (Burnaby, B.C., 1982), 1–12. North-Holland Math. Stud., Vol. 115,
North-Holland, Amsterdam.
Jaeger F. (1988). Nowhere-zero ﬂow problems. In Selected Topics in Graph
Theory, 3 (L.W. Beineke and R.J. Wilson, eds.), 71–95. Academic Press, San
Diego.
Janson S., L
 uczak T. and Rucinski A. (2000). Random Graphs. WileyInterscience Series in Discrete Mathematics and Optimization, Wiley, New York.
Jarnı́k V. (1930).
O jistém problému minimálnı́m.
Práce Moravské
Přı́rodovědecké Společnosti Brno 6, 57–63.

References

609

Jensen T.R. and Toft B. (1995). Graph Coloring Problems. Wiley-Interscience
Series in Discrete Mathematics and Optimization, Wiley, New York.
Jørgensen L.K. (1994). Contractions to K8 . J. Graph Theory 18, 431–448.
Jünger M., Reinelt G. and Rinaldi G. (1995). The traveling salesman problem. In Network Models, 225–330. Handbooks Oper. Res. Management Sci., Vol.
7, North-Holland, Amsterdam.
Kahn J. (1994). Recent results on some not-so-recent hypergraph matching and
covering problems. In Extremal Problems for Finite Sets (Visegrád, 1991), 305–
353. Bolyai Soc. Math. Stud., Vol. 3, János Bolyai Math. Soc., Budapest.
Kaiser T., Král D., Rosenfeld M., Ryjaček Z. and Voss H.J. (2007).
Hamilton cycles in prisms over graphs. J. Graph Theory .
Karp R.M. (1972). Reducibility among combinatorial problems. In Complexity of
Computer Computations (Proc. Sympos., IBM Thomas J. Watson Res. Center,
Yorktown Heights, N.Y., 1972), 85–103. Plenum, New York.
Kauffman L.H. (1990). Map coloring and the vector cross product. J. Combin.
Theory Ser. B 48, 145–154.
Kawarabayashi K. (2002). One or two disjoint circuits cover independent edges.
Lovász-Woodall conjecture. J. Combin. Theory Ser. B 84, 1–44.
Kawarabayashi K., Lee O., Reed B. and Wollan P. (2007). Progress on
Lovász’ path removal conjecture. Technical report, McGill University.
Keevash P. and Sudakov B. (2005). The Turán number of the Fano plane.
Combinatorica 25, 561–574.
Kelly P.J. (1942). On Isometric Transformations. Ph.D. thesis, University of
Wisconsin.
Kelly P.J. (1957). A congruence theorem for trees. Paciﬁc J. Math. 7, 961–968.
Kelmans A.K. (1986). Constructions of cubic bipartite and 3-connected graphs
without hamiltonian cycles. In Analiz Zadach Formirovaniya i Vybora Alternativ, Vol. 10, 64–72. VNIISI, Moscow.
Kelmans A.K. (1993). Graph planarity and related topics. In Graph Structure
Theory (Seattle, WA, 1991), 635–667. Contemp. Math., Vol. 147, Amer. Math.
Soc., Providence, RI.
Kelmans A.K. (1994). Constructions of cubic bipartite 3-connected graphs without Hamiltonian cycles. In Selected Topics in Discrete Mathematics (Moscow,
1972–1990), 127–140. Amer. Math. Soc. Transl. Ser. 2, Vol. 158, Amer. Math.
Soc., Providence, RI.
Kelmans A.K. (2005). On λ-packings in 3-connected graphs. RUTCOR Research
Report 23–2005, Rutgers University.
Kelmans A.K. and Lomonosov M. (1975). Moscow Discrete Mathematics Seminar. Personal communication, A.K. Kelmans, 1980.
Kemnitz A. and Harborth H. (2001). Plane integral drawings of planar graphs.
Discrete Math. 236, 191–195. Graph theory (Kazimierz Dolny, 1997).
Kempe A.B. (1879). On the geographical problem of the four colours. Amer. J.
Math. 2, 193–200.

610

References

Kierstead H.A. and Kostochka A.V. (2006). A short proof of the HajnalSzemerédi theorem on equitable coloring. Technical report, Arizona State University.
Kilpatrick P.A. (1975). Tutte’s First Colour-Cycle Conjecture. Ph.D. thesis,
University of Cape Town.
Kim J.H. (1995). The Ramsey number R(3, t) has order of magnitude t2 / log t.
Random Structures Algorithms 7, 173–207.
Kirchhoff G. (1847). Über die Auﬂösung der Gleichungen, auf welche man
bei der Untersuchung der linearen Verteilung galvanischer Ströme geführt wird.
Ann. Phys. Chem. 72, 497–508.
Kirkman T.P. (1881). Question 6610, solution by the proposer. Math. Quest.
Solut. Educ. Times 35, 112–116.
Klein R. (1994). On the colorability of m-composed graphs. Discrete Math. 133,
181–190.
Kneser M. (1955). Aufgabe 300. Jber. Deutsch. Math.-Verein. 58, 27.
Knuth D.E. (1969). The Art of Computer Programming. Vol. 1: Fundamental
Algorithms. Addison-Wesley, Reading, MA. Second printing.
Knuth D.E. (1974). Wheels within wheels. J. Combin. Theory Ser. B 16, 42–46.
Kocay W.L. (1987). A family of nonreconstructible hypergraphs. J. Combin.
Theory Ser. B 42, 46–63.
Kochol M. (1996). Snarks without small cycles. J. Combin. Theory Ser. B 67,
34–47.
Kohayakawa Y. and Rödl V. (2003). Szemerédi’s regularity lemma and quasirandomness. In Recent Advances in Algorithms and Combinatorics, 289–351.
CMS Books Math./Ouvrages Math. SMC, Vol. 11, Springer, New York.
Komlós J. and Simonovits M. (1996). Szemerédi’s regularity lemma and its
applications in graph theory. In Combinatorics, Paul Erdős is Eighty, Vol. 2
(Keszthely, 1993), 295–352. Bolyai Soc. Math. Stud., Vol. 2, János Bolyai Math.
Soc., Budapest.
Komlós J., Shokoufandeh A., Simonovits M. and Szemerédi E. (2002). The
regularity lemma and its applications in graph theory. In Theoretical Aspects of
Computer Science (Tehran, 2000), 84–112. Lecture Notes in Comput. Sci., Vol.
2292, Springer, Berlin.
König D. (1931). Graphs and matrices. Mat. Fiz. Lapok 38, 116–119. Hungarian.
König D. (1936). Theorie der Endlichen und Unendlichen Graphen. Akademische
Verlagsgesellschaft, Leipzig.
Korte B. and Nešetřil J. (2001). Vojtěch Jarnik’s work in combinatorial optimization. Discrete Math. 235, 1–17. Combinatorics (Prague, 1998).
Kostochka A.V. (1982). A class of constructions for Turán’s (3, 4)-problem.
Combinatorica 2, 187–192.
Kotzig A. (1979). Selected open problems in graph theory. In Graph Theory
and Related Topics (J.A. Bondy and U.S.R. Murty, eds.), xxxii+371. Academic
Press, New York.
Kouider M. (1994). Cycles in graphs with prescribed stability number and connectivity. J. Combin. Theory Ser. B 60, 315–318.

References

611

Kriesell M. (2003). Edge-disjoint trees containing some given vertices in a graph.
J. Combin. Theory Ser. B 88, 53–65.
Křı́ž I. (1991). Permutation groups in Euclidean Ramsey theory. Proc. Amer.
Math. Soc. 112, 899–907.
Kruskal J.B. (1997). A reminiscence about shortest spanning subtrees. Arch.
Math. (Brno) 33, 13–14.
Kruskal Jr. J.B. (1956). On the shortest spanning subtree of a graph and the
traveling salesman problem. Proc. Amer. Math. Soc. 7, 48–50.
Kumar R., Raghavan P., Rajagopalan S., Sivakumar D., Tomkins A.
and Upfal E. (2000). Stochastic models for the web graph. In 41st Annual
Symposium on Foundations of Computer Science (Redondo Beach, CA, 2000),
57–65. IEEE Comput. Soc. Press, Los Alamitos, CA.
Kündgen A. and Ramamurthi R. (2002). Coloring face-hypergraphs of graphs
on surfaces. J. Combin. Theory Ser. B 85, 307–337.
Kuratowski C. (1930). Sur le problème des courbes gauches en topologie. Fund.
Math. 15, 271–283.
Laborde J.M., Payan C. and Xuong N.H. (1983). Independent sets and longest
directed paths in digraphs. In Graphs and other Combinatorial Topics (Prague,
1982), 173–177. Teubner-Texte Math., Vol. 59, Teubner, Leipzig.
Lauri J. and Scapellato R. (2003). Topics in Graph Automorphisms and Reconstruction. London Mathematical Society Student Texts, Vol. 54, Cambridge
University Press, Cambridge.
Leighton F.T. (1983). Complexity Issues in VLSI: Optimal Layouts for the
Shuﬄe-Exchange Graph and Other Networks. MIT Press, Cambridge, MA.
Leonardi S. (2004). Algorithms and Models for the Web-Graph. Springer, New
York.
Leven D. and Galil Z. (1983). NP completeness of ﬁnding the chromatic index
of regular graphs. J. Algorithms 4, 35–44.
Levin L.A. (1973). Universal search problems. Problemy Peredači Informacii 9,
265–266.
Linial N. (1978). Covering digraphs by paths. Discrete Math. 23, 257–272.
Linial N. (1981). Extending the Greene–Kleitman theorem to directed graphs.
J. Combin. Theory Ser. A 30, 331–334.
Locke S. (1995). Problem 10447. Amer. Math. Monthly 102, 360.
Lovász L. (1968a). On chromatic number of ﬁnite set-systems. Acta Math. Acad.
Sci. Hungar. 19, 59–67.
Lovász L. (1968b). On covering of graphs. In Theory of Graphs (Proc. Colloq.,
Tihany, 1966), 231–236. Academic Press, New York.
Lovász L. (1970). Problem 11. In Combinatorial Structures and their Applications, 497. Gordon and Breach, New York.
Lovász L. (1972a). A characterization of perfect graphs. J. Combin. Theory Ser.
B 13, 95–98.
Lovász L. (1972b). Normal hypergraphs and the perfect graph conjecture. Discrete Math. 2, 253–267.

612

References

Lovász L. (1972c). A note on the line reconstruction problem. J. Combin. Theory
Ser. B 13, 309–310.
Lovász L. (1975a). 2-matchings and 2-covers of hypergraphs. Acta Math. Acad.
Sci. Hungar. 26, 433–444.
Lovász L. (1975b). Three short proofs in graph theory. J. Combin. Theory Ser.
B 19, 269–271.
Lovász L. (1976). On two minimax theorems in graph. J. Combin. Theory Ser.
B 21, 96–103.
Lovász L. (1978). Kneser’s conjecture, chromatic number, and homotopy. J.
Combin. Theory Ser. A 25, 319–324.
Lovász L. (1979). On the Shannon capacity of a graph. IEEE Trans. Inform.
Theory 25, 1–7.
Lovász L. (1993). Combinatorial Problems and Exercises. Second edition. NorthHolland, Amsterdam.
Lovász L. and Plummer M.D. (1986). Matching Theory. Annals of Discrete
Mathematics, Vol. 29, North-Holland, Amsterdam.
Lucas E. (1894). Récréations Mathématiques, Vol. IV. Gauthier-Villars et ﬁls,
Paris. Reprinted by Blanchard, Paris, 1960.
Lucchesi C. (1976). A Minimax Equality for Directed Graphs. Ph.D. thesis,
University of Waterloo.
Lucchesi C.L. and Younger D.H. (1978). A minimax theorem for directed
graphs. J. London Math. Soc. (2) 17, 369–374.
Luks E.M. (1982). Isomorphism of graphs of bounded valence can be tested in
polynomial time. J. Comput. System Sci. 25, 42–65.
MacLane S. (1937). A combinatorial condition for planar graphs. Fund. Math.
28, 22–32.
Mader W. (1967). Homomorphieeigenschaften und mittlere Kantendichte von
Graphen. Math. Ann. 174, 265–268.
Mader W. (1971a). Minimale n-fach kantenzusammenhängende Graphen. Math.
Ann. 191, 21–28.
Mader W. (1971b). Minimale n-fach zusammenhängende Graphen mit maximaler Kantenzahl. J. Reine Angew. Math. 249, 201–207.
Mader W. (1978). A reduction method for edge-connectivity in graphs. In
Advances in Graph Theory, volume 3, 145–164. North-Holland, Amsterdam.
Mansfield A. (1982). The relationship between the computational complexities
of the legitimate deck and isomorphism problems. Quart. J. Math. Oxford Ser.
(2) 33, 345–347.
Matthews K.R. (1978). On the Eulericity of a graph. J. Graph Theory 2,
143–148.
Matthews M.M. and Sumner D.P. (1984). Hamiltonian results in K1,3 -free
graphs. J. Graph Theory 8, 139–146.
Matula D. (1976). The largest clique size in a random graph. Technical report,
Dept. Comp. Sci., Southern Methodist University, Dallas, Texas.

References

613

McCuaig W. (1993). Intercyclic digraphs. In Graph Structure Theory (Seattle,
WA, 1991), 203–245. Contemp. Math., Vol. 147, Amer. Math. Soc., Providence,
RI.
McCuaig W. (2000). Even dicycles. J. Graph Theory 35, 46–68.
McKay B.D. (1977). Computer reconstruction of small graphs. J. Graph Theory
1, 281–283.
Menger K. (1927). Zur allgemeinen Kurventheorie. Fund. Math. 10, 96–115.
Minty G.J. (1980). On maximal independent sets of vertices in claw-free graphs.
J. Combin. Theory Ser. B 28, 284–304.
Mohar B. and Thomassen C. (2001). Graphs on Surfaces. Johns Hopkins Studies in the Mathematical Sciences, Johns Hopkins University Press, Baltimore.
Molloy M. and Reed B. (1998). A bound on the total chromatic number.
Combinatorica 18, 241–280.
Molloy M. and Reed B. (2002). Graph Colouring and the Probabilistic Method.
Algorithms and Combinatorics, Vol. 23, Springer, Berlin.
Moon J.W. (1967). Various proofs of Cayley’s formula for counting trees. In A
Seminar on Graph Theory, 70–78. Holt, Rinehart and Winston, New York.
Moon J.W. (1968). Topics on Tournaments. Holt, Rinehart and Winston, New
York.
Moon J.W. and Moser L. (1963). Simple paths on polyhedra. Paciﬁc J. Math.
13, 629–631.
Moron Z. (1925). O rozkladach prostokatów na kwadraty. Przeglad Matematyczno-Fizyczny 3, 152–153.
Müller V. (1977). The edge reconstruction hypothesis is true for graphs with
more than n · log2 n edges. J. Combin. Theory Ser. B 22, 281–283.
Mycielski J. (1955). Sur le coloriage des graphs. Colloq. Math. 3, 161–162.
Nagamochi H. and Ibaraki T. (1992). Computing edge-connectivity in multigraphs and capacitated graphs. SIAM J. Discrete Math. 5, 54–66.
Nash-Williams C. (1978). The reconstruction problem. In Selected Topics in
Graph Theory (L.W. Beineke and R.J. Wilson, eds.), 205–236. Academic Press,
London.
Nash-Williams C.S.J.A. (1959). Random walk and electric currents in networks.
Proc. Cambridge Philos. Soc. 55, 181–194.
Nash-Williams C.S.J.A. (1960). On orientations, connectivity and odd-vertexpairings in ﬁnite graphs. Canad. J. Math. 12, 555–567.
Nash-Williams C.S.J.A. (1961). Edge-disjoint spanning trees of ﬁnite graphs.
J. London Math. Soc. 36, 445–450.
Nešetřil J. and Rödl V. (1975). Partitions of subgraphs. In Recent Advances
in Graph Theory, 413–423. Academia, Prague.
Nešetřil J. and Rödl V. (1979). A short proof of the existence of highly chromatic hypergraphs without short cycles. J. Combin. Theory Ser. B 27, 225–227.
Nešetřil J., Milková E. and Nešetřilová H. (2001). Otakar Borůvka on
minimum spanning tree problem: translation of both the 1926 papers, comments,
history. Discrete Math. 233, 3–36. Graph Theory (Prague, 1998).

614

References

Neumann-Lara V. (1985). Vertex colourings in digraphs. some problems. Technical report, University of Waterloo.
Ninčák J. (1974). Hamiltonian circuits in cubic graphs. Comment. Math. Univ.
Carolinae 15, 627–630.
Ohba K. (2002). On chromatic-choosable graphs. J. Graph Theory 40, 130–135.
Oxley J.G. (1992). Matroid Theory. Oxford Science Publications, Clarendon
Press, New York.
Padberg M.W. and Rao M.R. (1982). Odd minimum cut-sets and b-matchings.
Math. Oper. Res. 7, 67–80.
Palmer E.M. (1985). Graphical Evolution: An Introduction to the Theory of Random Graphs. Wiley-Interscience Series in Discrete Mathematics, Wiley, Chichester.
Papadimitriou C.H. (1994). Computational Complexity. Addison-Wesley, Reading, MA.
Petersen J. (1891). Die Theorie der regulären Graphs. Acta Math. 15, 193–220.
English translation in: N.L. Biggs, E.K. Lloyd and R.J. Wilson, Graph Theory
1736–1936. Clarendon Press, Oxford, 1986, p. 190.
Pitman J. (1999). Coalescent random forests. J. Combin. Theory Ser. A 85,
165–193.
Polesskiı̆ V.P. (1971). A certain lower bound for the reliability of information
networks. Problemy Peredači Informacii 7, 88–96.
Pólya G. (1921). Über eine Aufgabe der Wahrscheinlichkeitsrechnung betreﬀend
die Irrfahrt im Strassennetz. Math. Ann. 84, 149–160.
Pólya G. (2004). How to Solve It: A New Aspect of Mathematical Method. Princeton Science Library, Princeton University Press, Princeton, NJ. Expanded version of the 1988 edition, with a new foreword by John H. Conway.
Pósa L. (1976). Hamiltonian circuits in random graphs. Discrete Math. 14,
359–364.
Preissmann M. (1981). Sur les colorations des arêtes des graphes cubiques. Ph.D.
thesis, Université de Grenoble.
Prim R.C. (1957). Shortest connection networks and some generalizations. Bell
Sys. Tech. J. 36, 1389–1401.
Rado R. (1942). A theorem on independence relations. Quart. J. Math., Oxford
Ser. 13, 83–89.
Rado R. (1957). Note on independence functions. Proc. London Math. Soc. (3)
7, 300–320.
Ramsey F.P. (1930). On a problem of formal logic. Proc. London Math. Soc. 30,
264–286.
Randı́c M. (1981). Personal communication. (Letter, January 18, 1981).
Razborov A. (2006). On the minimal density of triangles in graphs. Technical
report, Mathematical Institute, Russian Academy of Sciences.
Read R.C. (1968). An introduction to chromatic polynomials. J. Combin. Theory
4, 52–71.

References

615

Read R.C. and Tutte W.T. (1988). Chromatic polynomials. In Selected Topics
in Graph Theory, 3 (L.W. Beineke and R.J. Wilson, eds.), 15–42. Academic
Press, San Diego.
Rédei L. (1934). Ein kombinatorischer Satz. Acta. Litt. Sci. Szeged 7, 39–43.
Reed B. (1998). ω, ∆, and χ. J. Graph Theory 27, 177–212.
Reed B. and Seymour P. (1998). Fractional colouring and Hadwiger’s conjecture. J. Combin. Theory Ser. B 74, 147–152.
Reed B., Robertson N., Seymour P. and Thomas R. (1996). Packing directed
circuits. Combinatorica 16, 535–554.
Reed B.A. (2003). Algorithmic aspects of tree width. In Recent Advances in Algorithms and Combinatorics, 85–107. CMS Books Math./Ouvrages Math. SMC,
Vol. 11, Springer, New York.
Reiman I. (1958). Über ein Problem von K. Zarankiewicz. Acta. Math. Acad.
Sci. Hungar. 9, 269–273.
Richardson M. (1953). Solutions of irreﬂexive relations. Ann. of Math. (2) 58,
573–590; errata 60 (1954), 595.
ˇ ı́ha S. (1991). A new proof of the theorem by Fleischner. J. Combin. Theory
R
Ser. B 52, 117–123.
Ringel G. (1974). Map Color Theorem. Springer, New York. Foundations of
Mathematical Sciences, Vol. 209.
Ringel G. and Youngs J.W.T. (1968). Solution of the Heawood map-coloring
problem. Proc. Nat. Acad. Sci. U.S.A. 60, 438–445.
Rizzi R. (1999). Indecomposable r-graphs and some other counterexamples. J.
Graph Theory 32, 1–15.
Rizzi R. (2001). On 4-connected graphs without even cycle decompositions. Discrete Math. 234, 181–186.
Robbins H.E. (1939). A theorem on graphs, with an application to a problem of
traﬃc control. Amer. Math. Monthly 46, 281–283. Questions, Discussions, and
Notes.
Robertson N. (2007). Personal communication.
Robertson N. and Seymour P.D. (1986). Graph minors. II. Algorithmic aspects
of tree-width. J. Algorithms 7, 309–322.
Robertson N. and Seymour P.D. (1995). Graph minors. XIII. The disjoint
paths problem. J. Combin. Theory Ser. B 63, 65–110.
Robertson N. and Seymour P.D. (2004). Graph minors. XX. Wagner’s conjecture. J. Combin. Theory Ser. B 92, 325–357.
Robertson N., Sanders D., Seymour P. and Thomas R. (1997a). The fourcolour theorem. J. Combin. Theory Ser. B 70, 2–44.
Robertson N., Seymour P. and Thomas R. (1993). Hadwiger’s conjecture for
K6 -free graphs. Combinatorica 13, 279–361.
Robertson N., Seymour P. and Thomas R. (1997b). Tutte’s edge-colouring
conjecture. J. Combin. Theory Ser. B 70, 166–183.
Robertson N., Seymour P.D. and Thomas R. (1999). Permanents, Pfaﬃan
orientations, and even directed circuits. Ann. of Math. (2) 150, 929–975.

616

References

Rödl V., Nagle B., Skokan J., Schacht M. and Kohayakawa Y. (2005).
The hypergraph regularity method and its applications. Proc. Natl. Acad. Sci.
USA 102, 8109–8113 (electronic).
Rose D.J., Tarjan R.E. and Lueker G.S. (1976). Algorithmic aspects of vertex
elimination on graphs. SIAM J. Comput. 5, 266–283.
Rosenfeld M. (1967). On a problem of C. E. Shannon in graph theory. Proc.
Amer. Math. Soc. 18, 315–319.
Rosenkrantz D.J., Stearns R.E. and Lewis P.M. (1974). Approximate algorithms for the traveling salesperson problem. In 15th Annual Symposium
on Switching and Automata Theory (1974), 33–42. IEEE Comput. Soc., Long
Beach, CA.
Rosenstiehl P. and Read R.C. (1978). On the principal edge tripartition of
a graph. In Advances in Graph Theory, volume 3, 195–226. North-Holland,
Amsterdam.
Rota G.C. (1964). On the foundations of combinatorial theory. I. Theory of
Möbius functions. Z. Wahrscheinlichkeitstheorie und Verw. Gebiete 2, 340–368
(1964).
Rothschild B. and Whinston A. (1966). Feasiblity of two commodity network
ﬂows. Operations Res. 14, 1121–1129.
Roy B. (1967). Nombre chromatique et plus longs chemins d’un graphe. Rev.
Française Informat. Recherche Opérationnelle 1, 129–132.
Saaty T.L. (1972). Thirteen colorful variations on Guthrie’s four-color conjecture.
Amer. Math. Monthly 79, 2–43.
Sabidussi G. (1992). Correspondence between Sylvester, Petersen, Hilbert and
Klein on invariants and the factorisation of graphs 1889–1891. Discrete Math.
100, 99–155. Special volume to mark the centennial of Julius Petersen’s “Die
Theorie der regulären Graphs”, Part I.
Sachs H. (1993). Elementary proof of the cycle-plus-triangles theorem. In Combinatorics, Paul Erdős is Eighty, Vol. 1, 347–359. Bolyai Soc. Math. Stud., János
Bolyai Math. Soc., Budapest.
Salavatipour M. (2003). Graph Colouring via the Discharging Method. Ph.D.
thesis, University of Toronto.
Sanders D.P. (1997). On paths in planar graphs. J. Graph Theory 24, 341–345.
Sbihi N. (1980). Algorithme de recherche d’un stable de cardinalité maximum
dans un graphe sans étoile. Discrete Math. 29, 53–76.
Scheinerman E.R. and Ullman D.H. (1997). Fractional Graph Theory: a Rational Approach to the Theory of Graphs. Wiley-Interscience Series in Discrete
Mathematics and Optimization, Wiley, New York. With a foreword by Claude
Berge.
Schläfli L. (1858). An attempt to determine the twenty-seven lines upon a
surface of the third order and to divide such surfaces into species in reference
to the reality of the lines upon the surface. Quart. J. Math. 2, 55–65, 110–121.
Schrijver A. (1978). Vertex-critical subgraphs of Kneser graphs. Nieuw Arch.
Wisk. (3) 26, 454–461.

References

617

Schrijver A. (1982). Min-max relations for directed graphs. In Bonn Workshop
on Combinatorial Optimization (Bonn, 1980), 261–280. Ann. Discrete Math.,
Vol. 16, North-Holland, Amsterdam.
Schrijver A. (2003). Combinatorial Optimization: Polyhedra and Eﬃciency.
Algorithms and Combinatorics, Vol. 24, Springer, Berlin.
Schur I. (1916). Über die Kongruenz xm + y m = z m (mod p). Jber. Deutsch.
Math.-Verein. 25, 114–117.
Sebö A. (2007). Minmax relations for cyclically ordered digraphs. J. Combin.
Theory Ser. B 97, 518–552.
Seymour P.D. (1979a). On multicolourings of cubic graphs, and conjectures of
Fulkerson and Tutte. Proc. London Math. Soc. (3) 38, 423–460.
Seymour P.D. (1979b). Sums of circuits. In Graph Theory and Related Topics
(J.A. Bondy and U.S.R. Murty, eds.), 341–355. Academic Press, New York.
Seymour P.D. (1980). Disjoint paths in graphs. Discrete Math. 29, 293–309.
Seymour P.D. (1981a). Even circuits in planar graphs. J. Combin. Theory Ser.
B 31, 327–338.
Seymour P.D. (1981b). Nowhere-zero 6-ﬂows. J. Combin. Theory Ser. B 30,
130–135.
Seymour P.D. (1981c). On odd cuts and plane multicommodity ﬂows. Proc.
London Math. Soc. (3) 42, 178–192.
Seymour P.D. (2007). Personal communication.
Seymour P.D. and Thomas R. (1993). Graph searching and a min-max theorem
for tree-width. J. Combin. Theory Ser. B 58, 22–33.
Shannon C.E. (1956). The zero error capacity of a noisy channel. IRE Trans.Inf.
Theory IT-2, 8–19.
Sheehan J. (1975). The multiplicity of Hamiltonian circuits in a graph. In Recent
Advances in Graph Theory, 477–480. Academia, Prague.
Shiloach Y. (1980). A polynomial solution to the undirected two paths problem.
J. Assoc. Comput. Mach. 27, 445–456.
Sidorenko A. (1995). What we know and what we do not know about Turán
numbers. Graphs Combin. 11, 179–199.
Sidorenko A.F. (1991). Inequalities for functionals generated by bipartite
graphs. Diskret. Mat. 3, 50–65.
Singleton R. (1966). On minimal graphs of maximum even girth. J. Combin.
Theory 1, 306–332.
Sipser M. (2005). Introduction to the Theory of Computation. Second edition.
Course Technology, Boston, MA.
Smith C.A.B. and Tutte W.T. (1950). A class of self-dual maps. Canadian J.
Math. 2, 179–196.
Sós V.T. (1976). Remarks on the connection of graph theory, ﬁnite geometry and
block designs. In Colloquio Internazionale sulle Teorie Combinatorie (Roma,
1973), Tomo II, 223–233. Atti dei Convegni Lincei, No. 17. Accad. Naz. Lincei,
Rome.

618

References

Spencer J. (1987). Ten Lectures on the Probabilistic Method. CBMS-NSF Regional Conference Series in Applied Mathematics, Vol. 52, Society for Industrial
and Applied Mathematics (SIAM), Philadelphia.
Spencer J., Szemerédi E. and Trotter Jr. W. (1984). Unit distances in
the Euclidean plane. In Graph Theory and Combinatorics (Cambridge, 1983),
293–303. Academic Press, London.
Sprague R. (1939). Beispiel einer Zerlegung des Quadrats in lauter verschiedene
Quadrate. Math. Z. 45, 607–608.
Stanley R.P. (1973). Acyclic orientations of graphs. Discrete Math. 5, 171–178.
Stanley R.P. (1985). Reconstruction from vertex-switching. J. Combin. Theory
Ser. B 38, 132–138.
Steinberg R. (1993). The state of the three color problem. In Quo Vadis, Graph
Theory?, 211–248. Ann. Discrete Math., Vol. 55, North-Holland, Amsterdam.
Steinitz E. (1922). Polyeder und Raumeinteilungen. In Enzyklopädie der mathematischen Wissenschaften, volume 3, 1–139. .
Stockmeyer P.K. (1981). A census of nonreconstructible digraphs. I. Six related
families. J. Combin. Theory Ser. B 31, 232–239.
Sullivan B. (2006). A summary of results and problems related to the CaccettaHäggkvist conjecture. Technical report, Princeton University.
Székely L.A. (1997). Crossing numbers and hard Erdős problems in discrete
geometry. Combin. Probab. Comput. 6, 353–358.
Szekeres G. (1973). Polyhedral decompositions of cubic graphs. Bull. Austral.
Math. Soc. 8, 367–387.
Szemerédi E. (1978). Regular partitions of graphs. In Problèmes Combinatoires
et Théorie des Graphes (Colloq. Internat. CNRS, Univ. Orsay, Orsay, 1976),
399–401. Colloq. Internat. CNRS, Vol. 260, CNRS, Paris.
Szemerédi E. and Trotter Jr. W.T. (1983). Extremal problems in discrete
geometry. Combinatorica 3, 381–392.
Tait P.G. (1880). Remarks on colouring of maps. Proc. Royal Soc. Edinburgh
Ser. A 10, 729.
Tao T. (2006). Szemerédi’s regularity lemma revisited. Contrib. Discrete Math.
1, 8–28 (electronic).
Tao T. and Vu V. (2006). Additive Combinatorics. Cambridge Studies in Advanced Mathematics, Vol. 105, Cambridge University Press, Cambridge.
Tarjan R. (1972). Depth-ﬁrst search and linear graph algorithms. SIAM J.
Comput. 1, 146–160.
Tarjan R.E. (1983). Data Structures and Network Algorithms. CBMS-NSF Regional Conference Series in Applied Mathematics, Vol. 44, Society for Industrial
and Applied Mathematics (SIAM), Philadelphia.
Tashkinov V.A. (1984). 3-regular subgraphs of 4-regular graphs. Mat. Zametki
36, 239–259.
Thomas R. (1998). An update on the four-color theorem. Notices Amer. Math.
Soc. 45, 848–859.
Thomas R. and Yu X. (1994). 4-connected projective-planar graphs are hamiltonian. J. Combin. Theory Ser. B 62, 114–132.

References

619

Thomason A.G. (1978). Hamiltonian cycles and uniquely edge colourable graphs.
In Advances in Graph Theory, volume 3, Exp. No. 13, 3. North-Holland, Amsterdam.
Thomassé S. (2001). Covering a strong digraph by α − 1 disjoint paths: a proof
of Las Vergnas’ conjecture. J. Combin. Theory Ser. B 83, 331–333.
Thomassen C. (1978). Hypohamiltonian graphs and digraphs. In Theory and
Applications of Graphs, 557–571. Lecture Notes in Math., Vol. 642, Springer,
Berlin.
Thomassen C. (1980). 2-linked graphs. European J. Combin. 1, 371–378.
Thomassen C. (1981). Kuratowski’s theorem. J. Graph Theory 5, 225–241.
Thomassen C. (1983a). Inﬁnite graphs. In Selected Topics in Graph Theory, 2
(L.W. Beineke and R.J. Wilson, eds.), 129–160. Academic Press, London.
Thomassen C. (1983b). A theorem on paths in planar graphs. J. Graph Theory
7, 169–176.
Thomassen C. (1989). Conﬁgurations in graphs of large minimum degree, connectivity, or chromatic number. In Combinatorial Mathematics: Proceedings of
the Third International Conference (New York, 1985), 402–412. Ann. New York
Acad. Sci., Vol. 555, New York Acad. Sci., New York.
Thomassen C. (1990). Resistances and currents in inﬁnite electrical networks.
J. Combin. Theory Ser. B 49, 87–102.
Thomassen C. (1994). Every planar graph is 5-choosable. J. Combin. Theory
Ser. B 62, 180–181.
Thomassen C. (1997a). Chords of longest cycles in cubic graphs. J. Combin.
Theory Ser. B 71, 211–214.
Thomassen C. (1997b). Color-critical graphs on a ﬁxed surface. J. Combin.
Theory Ser. B 70, 67–100.
Thomassen C. (1997c). The zero-free intervals for chromatic polynomials of
graphs. Combin. Probab. Comput. 6, 497–506.
Thomassen C. (1998). Independent dominating sets and a second Hamiltonian
cycle in regular graphs. J. Combin. Theory Ser. B 72, 104–109.
Thomassen C. (2000). Chromatic roots and Hamiltonian paths. J. Combin.
Theory Ser. B 80, 218–224.
Thomassen C. (2005). Some remarks on Hajós’ conjecture. J. Combin. Theory
Ser. B 93, 95–105.
Turán P. (1941). Eine Extremalaufgabe aus der Graphentheorie. Mat. Fiz. Lapok
48, 436–452.
Tutte W.T. (1946). On Hamiltonian circuits. J. London Math. Soc. 21, 98–101.
Tutte W.T. (1947a). The factorization of linear graphs. J. London Math. Soc.
22, 107–111.
Tutte W.T. (1947b). A family of cubical graphs. Proc. Cambridge Philos. Soc.
43, 459–474.
Tutte W.T. (1947c). A ring in graph theory. Proc. Cambridge Philos. Soc. 43,
26–40.
Tutte W.T. (1948a). An Algebraic Theory of Graphs. Ph.D. thesis, Cambridge
University.

620

References

Tutte W.T. (1948b). The dissection of equilateral triangles into equilateral
triangles. Proc. Cambridge Philos. Soc. 44, 463–482.
Tutte W.T. (1954a). A contribution to the theory of chromatic polynomials.
Canadian J. Math. 6, 80–91.
Tutte W.T. (1954b). A short proof of the factor theorem for ﬁnite graphs.
Canadian J. Math. 6, 347–352.
Tutte W.T. (1956). A theorem on planar graphs. Trans. Amer. Math. Soc. 82,
99–116.
Tutte W.T. (1961a). On the problem of decomposing a graph into n connected
factors. J. London Math. Soc. 36, 221–230.
Tutte W.T. (1961b). A theory of 3-connected graphs. Nederl. Akad. Wetensch.
Proc. Ser. A 64 = Indag. Math. 23, 441–455.
Tutte W.T. (1963). How to draw a graph. Proc. London Math. Soc. (3) 13,
743–767.
Tutte W.T. (1965a). Lectures on matroids. J. Res. Nat. Bur. Standards Sect.
B 69B, 1–47.
Tutte W.T. (1965b). The quest of the perfect square. Amer. Math. Monthly 72,
29–35.
Tutte W.T. (1966a). Connectivity in Graphs. Mathematical Expositions, Vol.
15, University of Toronto Press, Toronto.
Tutte W.T. (1966b). On the algebraic theory of graph colorings. J. Combin.
Theory 1, 15–50.
Tutte W.T. (1970). On chromatic polynomials and the golden ratio. J. Combin.
Theory 9, 289–296.
Tutte W.T. (1972). Unsolved Problem 48, in Bondy and Murty (1976).
Tutte W.T. (1976). Hamiltonian circuits. In Colloquio Internazionale sulle
Teorie Combinatorie (Rome, 1973), Tomo I, 193–199. Atti dei Convegni Lincei,
No. 17. Accad. Naz. Lincei, Rome.
Tutte W.T. (1998). Graph Theory as I have Known It. Oxford Lecture Series in
Mathematics and its Applications, Vol. 11, Clarendon Press, New York. With
a foreword by U. S. R. Murty.
Tuza Z. (1990). A conjecture on triangles of graphs. Graphs Combin. 6, 373–380.
Tverberg H. (1982). On the decomposition of Kn into complete bipartite graphs.
J. Graph Theory 6, 493–494.
Ulam S.M. (1960). A Collection of Mathematical Problems. Interscience Tracts
in Pure and Applied Mathematics, Vol. 8, Interscience, New York–London.
Ungar P. and Descartes B. (1954). Advanced Problems and Solutions: Solutions: 4526. Amer. Math. Monthly 61, 352–353.
Van der Waerden B. (1927). Beweis einer Baudetschen Vermutung. Nieuw
Arch. Wisk. 15, 212–216.
Vazirani V.V. (2001). Approximation Algorithms. Springer, Berlin.
Veblen O. (1912/13). An application of modular equations in analysis situs.
Ann. of Math. (2) 14, 86–94.
Vince A. (1988). Star chromatic number. J. Graph Theory 12, 551–559.

References

621

Vizing V.G. (1964). On an estimate of the chromatic class of a p-graph. Diskret.
Analiz No. 3, 25–30.
Vizing V.G. (1965). The chromatic class of a multigraph. Kibernetika (Kiev)
1965, 29–39.
Voigt M. (1993). List colourings of planar graphs. Discrete Math. 120, 215–219.
Voigt M. (1995). A not 3-choosable planar graph without 3-cycles. Discrete
Math. 146, 325–328.
von Neumann J. (1928). Zur Theorie der Gesellschaftsspiele. Math. Ann. 100,
295–320.
Wagner K. (1936). Bemerkungen zum Vierfarbenproblem. Jber. Deutsch. Math.Verein. 46, 26–32.
Wagner K. (1937). Über eine Eigenschaft der ebenen Komplexe. Math. Ann.
114, 570–590.
Wagner K. (1964). Beweis einer Abschwächung der Hadwiger-Vermutung. Math.
Ann. 153, 139–141.
Watkins M.E. (1970). Connectivity of transitive graphs. J. Combin. Theory 8,
23–29.
Welsh D.J.A. (1976). Matroid Theory. London Mathematical Society Monographs, Vol. 8, Academic Press, London.
Welsh D.J.A. (1993). Complexity: Knots, Colourings and Counting. London Mathematical Society Lecture Note Series, Vol. 186, Cambridge University
Press, Cambridge.
Whitney H. (1932a). Congruent graphs and the connectivity of graphs. Amer.
J. Math. 54, 150–168.
Whitney H. (1932b). A logical expansion in mathematics. Bull. Amer. Math.
Soc. 38, 572–579.
Whitney H. (1932c). Non-separable and planar graphs. Trans. Amer. Math. Soc.
34, 339–362.
Whitney H. (1933). 2-isomorphic graphs. Amer. J. Math. 55, 245–254.
Whitney H. (1935). On the abstract properties of linear dependence. Amer. J.
Math. 57, 509–533.
Whitney H. (1992). Collected Papers. Vol. I. Contemporary Mathematicians,
Birkhäuser, Boston. Edited and with a preface by James Eells and Domingo
Toledo.
Williams J.W.J. (1964). Algorithm 232: Heapsort. Commun. ACM 7, 347–348.
Wilson R. (2002). Four Colors Suﬃce: How the Map Problem was Solved. Princeton University Press, Princeton, NJ.
Winder R.O. (1966). Partitions of N -space by hyperplanes. SIAM J. Appl.
Math. 14, 811–818.
Witte D. and Gallian J.A. (1984). A survey: Hamiltonian cycles in Cayley
graphs. Discrete Math. 51, 293–304.
Wong P.K. (1982). Cages—a survey. J. Graph Theory 6, 1–22.
Woodall D.R. (1971). Thrackles and deadlock. In Combinatorial Mathematics
and its Applications, 335–347. Academic Press, London.

622

References

Woodall D.R. (1973). The binding number of a graph and its Anderson number.
J. Combin. Theory Ser. B 15, 225–255.
Woodall D.R. (1978). Minimax theorems in graph theory. In Selected Topics in
Graph Theory (L.W. Beineke and R.J. Wilson, eds.), 237–269. Academic Press,
London.
Woodall D.R. (2001). List colourings of graphs. In Surveys in Combinatorics,
2001 (Sussex), 269–301. London Math. Soc. Lecture Note Ser., Vol. 288, Cambridge Univ. Press, Cambridge.
Woodall D.R. and Wilson R.J. (1978). The Appel-Haken proof of the FourColor Theorem. In Selected Topics in Graph Theory (L.W. Beineke and R.J.
Wilson, eds.), 237–269. Academic Press, London.
Wormald N.C. (1979). Classifying k-connected cubic graphs. In Combinatorial
Mathematics, VI, 199–206. Lecture Notes in Math., Vol. 748, Springer, Berlin.
Younger D.H. (1965). A conjectured minimax theorem for directed graphs.
Technical Report 42, Digital Systems Laboratory, Department of Electrical Engineering, Princeton University.
Younger D.H. (1973). Graphs with interlinked directed circuits. In Proceedings
of the Sixteenth Midwest Symposium on Circuit Theory, volume II, XVI 2.1–XVI
2.7. IEEE, New York.
Younger D.H. (1983). Integer ﬂows. J. Graph Theory 7, 349–357.
Zhang C.Q. (1997). Integer Flows and Cycle Covers of Graphs. Monographs and
Textbooks in Pure and Applied Mathematics, Vol. 205, Marcel Dekker, New
York.
Zhao Y. (2000). 3-coloring graphs embedded in surfaces. J. Graph Theory 33,
140–143.
Zhu X. (2001). Circular chromatic number: a survey. Discrete Math. 229, 371–
410. Combinatorics, Graph Theory, Algorithms and Applications.
Zykov A.A. (1949). On some properties of linear complexes. Mat. Sbornik N.S.
24(66), 163–188.

General Mathematical Notation

(Ω, P ) probability space
C(X, Y ) covariance of random variables
dihedral group on n elements
Dn
E(X) expectation of random variable
sphere with k cross-caps
Nk
P (A)
probability of event
P G2,q projective plane of order q
sphere with k handles
Sk
symmetric group on n elements
Sn
V (X) variance of random variable
indicator random variable of event
XA
Ω
sample space
log n
natural logarithm
¬f
negation of boolean formula
x
negation of boolean variable
F
ﬁeld
N
set of nonnegative integers
R
ﬁeld of real numbers
Q
ﬁeld of rational numbers
R|S
restriction of matrix to column set S
Z
ring of integers
ring of integers modulo n
Zn
f ≡g
equivalent boolean formulae
f
g asymptotically faster-growing function
f  g asymptotically slower-growing function
f ∼g
asymptotically equivalent functions
f ∨g
disjunction of boolean formulae
f ∧g
conjunction of boolean formulae
x◦y
tensor product
x≺y
partial order

330
343
16
333
277
330
27
277
16
341
332
330
336
181
181
27
47
23
37
530
75
28
181
335
335
335
181
181
300
42

624

General Mathematical Notation

1
I
J
fX
tr(A)

vector with all entries 1
identity matrix
matrix with all entries 1
incidence vector of set X
trace of matrix

11
11
11
65
83

Graph Parameters

Most notation common to graphs and digraphs is listed only for graphs

A(G, x)
C(G, k)
F (G, Γ )
P (G, x)
Q(G, x)
T (G; x, y)
W (G; x, y)
∆(G)
∆+ (D)
∆− (D)
Θ(G)
α (G)
α(D)
α(G)
α∗ (G)
α∗∗ (G)
β  (G)
β(G)
χ (G)
χ (G)
χ∗ (G)
χL (G)
χ(D)
χ(G)
χ(H)
χ∗ (G)
χL (G)
χc (G)

adjacency polynomial
380
number of k-colourings
386
number of nowhere-zero circulations over group 562
chromatic polynomial
387
ﬂow polynomial
563
Tutte polynomial
579
Whitney polynomial
578
maximum degree
7
maximum outdegree
32
maximum indegree
32
Shannon capacity
297
matching number
201
stability number of digraph
506
stability number
189
fractional stability number
200
optimal value of clique constraint LP
202
edge covering number
198
covering number
296
total chromatic number
470
edge chromatic number
451
fractional edge chromatic number
470
list edge chromatic number
466
chromatic number of digraph
361
chromatic number
358
weak chromatic number of hypergraph
364
fractional chromatic number
389
list chromatic number
378
circular chromatic number
390

626

Graph Parameters

δ(G)
δ + (D)
δ − (D)
γ(G)
κ (G)
κ(G)
o(G)
µ(G)
ν(H)
ω(G)
π(D)
π(G)
cr(G)
τ (H)
θ(G)
a(D)
c(G)
d(G)
e(G)
f (G)
m
n
r(G, G)
t(G)
t(G)
txy (G)
v(G)
w(F )
w(d)
 
G
F

aut(G)
cr(G)
la (G)
pm(G)
|G → H|

minimum degree
minimum outdegree
minimum indegree
orientable genus
edge connectivity
connectivity
number of odd components
multiplicity
packing number of hypergraph
clique number
path partition number of digraph
path partition number
rectilinear crossing number
transversal number of hypergraph
thickness
size of digraph
number of components
average degree
size
number of faces of embedded graph
size (of graph G or digraph D)
order (of graph G or digraph D)
Ramsey number
number of spanning trees
number of triangles
number of spanning trees containing edge xy
order
weight of subgraph
weight of outdegree sequence
number of copies of graph F
number of automorphisms
crossing number
linear arboricity
number of perfect matchings
number of embeddings in graph H

7
32
32
281
216
206
426
457
504
188
507
475
273
504
261
31
29
7
2
249
3
3
320
107
306
546
2
50
382
67
16
248
354
416
69

Operations and Relations

D∗
directed dual of planar digraph
F G
minor
F ⊂G
proper subgraph
F ⊆G
subgraph
F1  F2 symmetric diﬀerence of spanning subgraphs
G∩H
intersection
isomorphism
G∼
=H
G∪H
union
GH
strong product
G/X
shrinking of set of vertices
G / {x, y} identiﬁcation of two vertices
G/e
contraction of edge
G/P
shrinking of partition of vertex set
G\S
deletion of set of edges
G×H
weak product
G∨H
join
G  H cartesian product
G+H
disjoint union
G+S
addition of set of edges
G−X
deletion of set of vertices
G−v
deletion of vertex
G[H]
composition
G\e
deletion of edge
dual of planar graph
G∗
kth power
Gk
H ⊃ G proper supergraph
H ⊇ G supergraph
dual of hypergraph
H∗
blocker of hypergraph
H⊥
M /e
contraction of element of matroid

256
268
40
40
47
29
12
29
297
208
54
54
569
46
364
46
29
29
46
49
39
316
39
252
82
40
40
24
505
284

628

Operations and Relations

M \e
M∗
P Q
W+
W−
(v)
D
G
T
←
−
D
f (v)
f + (X)
f − (X)
l(v)
p(v)
t(v)
v+
v−

deletion of element of matroid
dual of matroid
polynomially reducible problem
set of forward arcs of walk
set of reverse arcs of walk
level of vertex in rooted tree
complement of strict digraph
complement of simple graph
cotree of spanning tree
converse of digraph
time of incorporation of vertex into DFS-tree
sum of f -values on outcut
sum of f -values on incut
time of last visit to vertex in DFS
predecessor of vertex in rooted tree
time of incorporation of vertex into BFS-tree
successor of vertex on path or cycle
predecessor of vertex on path or cycle

284
115
178
82
82
137
53
10
110
33
140
158
158
140
136
137
483
483

Families of Graphs

BLn
boolean lattice on n elements
m-bond
Bm
cycle of order n
Cn
fan of order n
Fn
polarity graph
Gπ
KGm,n Kneser graph of m-subsets of n-set
complete graph of order n
Kn
(k)
complete k-uniform hypergraph of order n
Kn
complete bipartite graph on m and n vertices
Km,n
graph on one vertex with m loops
Lm
path of order n, length n − 1
Pn
generalized Petersen graph
Pk,n
n-cube
Qn
regular tree of countably inﬁnite degree
T∞
Turán graph of order n with k parts
Tk,n
wheel with n spokes
Wn
set of graphs in Gn with a k-clique
Gnk
de Bruijn-Good digraph
BGn
CD(Γ, S) Cayley digraph of group
CG(Γ, S) Cayley graph of group
Ex (n, F ) extremal F -free graphs
Paley graph of order q
PGq
Paley tournament oforder
q
PTq

shift graph of order n2
SGn
SGm,n
Schrijver graph of m-subsets of n-set
Stockmeyer tournament of order 2n
STn
TGk,l,m theta graph with paths of lengths k, l, m

9
578
14
108
307
25
14
306
14
578
14
20
9
108
9
46
312
92
33
27
301
28
35
372
369
35
379

Structures

(E, B)
(G, w)
(P, L)
(T, T )
(T, T )
(V, A)
(V, E)
(V, F)
(X, ≺)
B(G)
C(D)
D
D(G)
D(P )
D(x, y)
G
G(D)
G(x)
G(x, y)

matroid with ground set E and basis set B
weighted graph
geometric conﬁguration, point set P , line set L
tree decomposition
tree representation of chordal graph
digraph with vertex set V and arc set A
graph with vertex set V and edge set E
hypergraph with vertex set V and edge set F
partially ordered set (poset)
block tree
condensation of digraph
digraph
associated digraph
digraph of poset
digraph with two distinguished vertices
graph
underlying graph of digraph
rooted graph
graph with two distinguished vertices

G[X, Y ] bipartite graph with bipartition (X, Y )
L(G) line graph
M (G) cycle matroid
M (G) medial graph of plane graph
M P (G) matching polytope
M ∗ (G) bond matroid
N (x, y) network with source x and sink y
T (x)
rooted tree
→
−
G
orientation

G
planar embedding of planar graph

114
50
21
239
237
31
2
21
42
121
91
31
31
42
159
2
31
137
124,
170
4
22
115
258
466
115
157
100
31
243

632

Structures

B(D)
B(G)
BF
C(D)
C(G)
CF
E(G)
Gn
Gn,m
Gn,p
Aut(G)
PM(G)

tension space of digraph
bond space
tension space of digraph over ﬁeld
circulation space of digraph
cycle space
circulation space of digraph over ﬁeld
edge space
labelled simple graphs on n vertices
random graph of order n and size m
random graph of order n, edge-probability p
automorphism group
perfect matching polytope

528
65
533
528
65
533
65
16
355
330
16
465

Other Notation

(X, Y )
A
A(D)
A(X)
A(X, Y )
B(T )
Be
Be
Ce
Cxy
E
E(G)
E(X)
E[X, Y ]
F (G)
G[X]
Hxy
+
ND
(v)
−
ND
(v)
NG (v)
R(T )
U
V
V (D)
V (G)
Vvy
χ(Σ)
∂(F )
∂(X)
∂(f )

bipartition
arc set (of digraph D)
arc set of digraph
set of arcs induced by set of vertices
set of arcs from one subset to another
blue vertices of tree
edge cut associated with edge of tree
fundamental bond with respect to edge of tree
fundamental cycle with respect to edge of cotree
commute time of random walk
edge set (of graph G)
edge set
set of edges induced by set of vertices
set of edges linking two sets of vertices
set of faces of embedded graph
induced subgraph
hitting time of random walk
set of outneighbours of vertex in digraph
set of in-neighbours of vertex in digraph
set of neighbours of vertex
red vertices of tree
set of uncovered vertices
vertex set (of graph G or digraph D)
vertex set of digraph
vertex set
voltage drop between vertices
chromatic number of surface
coboundary of subgraph
coboundary of set of vertices
boundary of face in embedded graph

4
31
31
62
62
437
231
111
110
553
3
2
59
59
249
49
553
31
31
3
437
426
3
31
2
553
392
135
59
250

634

Other Notation

∂ + (X)
∂ − (X)
ρ(X, Y )
ρ(P)
a(X)
a(X, Y )
c (x, y)
c(Σ)
c(a)
c(x, y)
c(F, G)
d(X)
d(X, Y )
d(f )
d+ (X)
d+
D (v)
d− (X)
d−
D (v)
dG (v)
dG (x, y)
e(X)
e(X, Y )
f (S)
fC
fP
gB
i(C)
la
p (x, y)
p(x, y)
r(k, )
ra
uW v
xT y
AD
AG
BG
C(D)
C(G)
K
MD
MG
T
fC
N PC

outcut associated with set of vertices
incut associated with set of vertices
index of regularity of pair of sets of vertices
index of regularity of partition of vertex set
number of arcs induced by set of vertices
number of arcs from one subset to another
size of minimum separating edge cut
Euler characteristic of surface Σ
capacity or cost of arc in network
least size of cut separating two given vertices
number of covers by family of graphs
degree of set of vertices
density of bipartite subgraph
degree of face in embedded graph
outdegree of set of vertices
outdegree of vertex in digraph
indegree of set of vertices
indegree of vertex in digraph
degree of vertex
distance between two vertices
number of edges induced by set of vertices
number of edges linking two sets of vertices
sum of f -values of elements of set
circulation associated with cycle in digraph
signed incidence vector of path in digraph
tension associated with bond in digraph
index of cycle
face to left of arc in plane digraph
local edge connectivity between x and y
local connectivity between two vertices
Ramsey number
face to right of arc in plane digraph
walk with speciﬁed ends, segment of walk
path in tree with speciﬁed ends
adjacency matrix of digraph
adjacency matrix
bipartite adjacency matrix of bipartite graph
laplacian of digraph
laplacian, or conductance matrix
Kirchhoﬀ matrix
incidence matrix of digraph
incidence matrix
Tutte matrix
incidence vector of cycle
class of N P-complete problems

62
62
323
323
62
62
216
279
157
207
73
59
317
250
62
32
62
32
7
80
59
59
158
169
544
528
512
256
216
206
308
256
79
99
35
6
6
541
539
533
34
6
449
97
180

Other Notation

NP
nondeterministic polynomial-time problems
P
class of problems solvable in polynomial time
U
set of unavoidable conﬁgurations
Ext(C) closure of exterior of simple closed plane curve
Int(C) closure of interior of simple closed plane curve
cap K
capacity of cut in network
ext(C) exterior of simple closed plane curve
ex (n, F ) number of edges in extremal F -free graph
int(C) interior of simple closed plane curve
val (f ) value of ﬂow in network
i
current in wire of electrical network
r
resistance in wire of electrical network
eﬀective resistance in electrical network
rxy
v
voltage drop in wire of electrical network

175
174
401
245
245
159
245
301
245
158
542
542
545
542

635

Index

acyclic
digraph, 42
graph, 42, 99
addition
of cross-cap, 277
of edge, 46
of handle, 277
of set of vertices, 47
ADDP, see Problem, Arc-Disjoint Directed
Paths
adjacency list, 6
adjacency matrix
bipartite, 7
of digraph, 36
of graph, 6
adjacent
edges, 3
faces, 250
vertices, 3
Algorithm
Augmenting Path Search, 438
Bellman, 154
Bellman–Ford, 154
Borůvka–Kruskal, 194
Branching-Search, 149
Breadth-First Search, 137
Depth-First Search, 140
Dijkstra, 151
Edmonds, 446
Egerváry, 440
Fleury, 87
Gomory–Hu, 232
Hungarian, see Algorithm, Egerváry

Incrementing Path Search, 164
Jarnı́k–Prim, 146
Lexicographic Breadth-First Search, 238
Max-Flow Min-Cut, 164, 208, 217
Nagamochi-Ibaraki, 234
Perfect Graph Recognition, 376
Planarity Recognition, 272
Tree-Search, 136
algorithm, 135, 174
approximation, 191
discharging, 402
greedy, 193, 305
linear-time, 174
polynomial-time, 174
quadratic-time, 174
almost surely, 335
ancestor
of vertex in tree, 136
proper, 136
antichain of poset, 42
APS, see Algorithm, Augmenting Path
Search
arboricity, 572
linear, 354
arc, 31
f -positive, 160
f -saturated, 160
f -unsaturated, 160
f -zero, 160
back, 152
cross, 152
forward, 82, 152, 169
reverse, 82, 169, 515

638

Index

arc-disjoint directed paths, 167
arc-transitive, 35
t-arc-transitive, 84
associated digraph of graph, 32
asymmetric graph, 15
atom of graph, 227
automorphism
group, 16
of graph, 15
balanced
digraph, 35
graph, 347
barrier, 426
Gallai, 428
basis
2-basis, 274
of bond space, 112
of cycle space, 112
of independence system, 195
of matroid, 114
basis matrix, 531
corresponding to tree, 532
Beraha number, 388
BFS, see Algorithm, Breadth-First Search
bicritical graph, 434
big bang, 349
bipartite graph, 4
complete, 4
bipartition, 4
Birkhoﬀ diamond, 399
block, 120
end, 121
block tree of graph, 121
blocker of clutter, 505
blossom, 442
bond, 62
m-bond, 578
directed, 63, 521
fundamental, 112
Hamilton, 258
bond space, 65
book, 248
boolean formula, 181
in conjunctive normal form, 183
negation of, 181
satisﬁable, 182
truth assignment to, 181
boolean formulae

conjunction of, 181
disjunction of, 181
equivalent, 182
boolean variable, 181
boundary of face, 250
bounds, lower and upper, 534
bramble, 283
bramble number, 283
branching, 100
2-branching, 423
x-branching, 100, 518
spanning, 108
breadth-ﬁrst search, see Algorithm
bridge
k-bridge, 263
inner, 265
of cycle, 263
of subgraph, 263
outer, 265
trivial, 263
bridge-overlap graph, 265
bridges
avoiding, 264
overlapping, 264
skew, 264
cage, 84
directed, 98
capacity
constraint, 158
function, 157
of arc, 157
of cut, 159
Cayley graph, 28
centre of graph, 103
centroid of tree, 109
chain of poset, 42
child of vertex in tree, 136
chord of cycle, 144
chordal graph, 235
tree representation of, 237
chromatic
k-chromatic, 358
root, 388
chromatic number, 358
circular, 390
fractional, 389
list, 378
list, of surface, 407

Index
of digraph, 361
of hypergraph, 364
of surface, 392
weak, of hypergraph, 364
circuit of matroid, 115
circulant, 28
directed, 33
circulation, 168, 527
feasible, 534
nowhere-zero, 558
circulation space, 528
circumference, 42
clause
conjunctive, 183
disjunctive, 183
clique, 296
clique number, 188, 296
closure, 486
2-closure, 575
Ryjáček, 492
clutter, 341, 505
co-N P, 175
coboundary, 59
coloop of matroid, 284
colour, 357, 451, 470
available at vertex, 453
available for edge, 453
represented at vertex, 453
colour class, 358
colour-critical, see critical
colourable
(k, l)-list-colourable, 390
2-colourable hypergraph, 339
k-colourable, 288, 358
k-face-colourable, 288
k-list-colourable, 378
list-colourable, 377
uniquely colourable, 368
colouring, 288, 357
k-colouring, 288, 357
circular colouring, 390
fractional, 389
list, 377
of digraph, 361
optimal partial k-colouring, 511
partial k-colouring, 510
proper, 288, 357
random k-colouring, 332
comparable elements of poset, 42

639

compatible cycle decomposition, 89
complement
of simple graph, 10
of strict digraph, 53
complementary slackness conditions, 202
complete graph, 4
complexity, see computational complexity
component, 29
3-connected, 221
S-component, 220, 367
marked S-component, 220
composition, 316, 363
computational complexity, 174
condensation of digraph, 92
conductance matrix, 539
conﬁguration, 399
Heesch representation of, 401
reducible, 399
Conjecture
Barnette, 481
Cook–Edmonds–Levin, 176
Cycle Double Cover, 94, 122, 221, 462,
567
Edge Reconstruction, 68
Edmonds, 177
Five-Flow, 567
Fleischner, 496
Four-Colour, 287
Four-Colour (edge version), 290
Four-Colour (face version), 288
Four-Colour (vertex version), 288
Four-Flow, 567
Fulkerson, 464, 577
Gallai, 512
Graph Embedding, 95
Hadwiger, 407
Hajós, 409
Linial, 511
List Edge Colouring, 467
Orientable Embedding, 280
Path Partition, 510
Reconstruction, 67
Sheehan, 494
Strong Perfect Graph, 376
Three-Flow, 568
Total Colouring, 470
Wagner, 282
Woodall, 523
connected

640

Index

k-connected, 206
k-edge-connected, 216
arcwise-connected set, 244
digraph, 32
essentially k-edge-connected, 217
graph, 5
minimally k-connected, 211
minimally k-edge-connected, 219
strongly, 90
vertices, 79
connectivity, 206
local, 206
conservation condition, 158
contain subgraph, 40
contraction
of edge, 55
of matroid element, 284
converse of digraph, 33
copy of graph, 40
cost function, 538
cost of circulation, 538
cotree, 110
covariance, 343
cover, see covering
covering, 58, 201, 296, 420
by sequence of graphs, 73
by cliques, 202
by even subgraphs, 563
cycle, 58
double, 58
minimal, 421
minimum, 420
of hypergraph, 504
path, 58
uniform, 58
covering number, 296, 421
critical
k-critical, 366
graph, 366
hypergraph, 369
crossing, 248
directed cuts, 522
directed cycles, 525
edge cuts, 227
edges, 248
sets of vertices, 227, 521
crossing number, 248, 334
rectilinear, 273
crossing-minimal, 249

cube, 30
n-cube, 9
of graph, 82
cubic graph, 7
current ﬂow, 542
current generator, 542
curve, 244
closed, 244
simple, 244
cut
(x, y)-cut, 159
T -cut, 526
clique, 235
directed, 521
in network, 159
minimum, 160
separating, 159
cut condition, 172
cycle, 4, 64, 110
M -alternating, 415
k-cycle, 4
antidirected, 370
cost-reducing, 538
directed, 33
even, 4
facial, 93
fundamental, 110
Hamilton, 47, 290, 471
negative directed, 154
nonseparating, 266
odd, 4
of hypergraph, 435
simple, 512
Tutte, 501
cycle double cover, 93
orientable, 564
cycle exchange, 485
cycle space, 65
of digraph, 132
cyclomatic number, 112
cylinder, 276
de Bruijn–Good sequence, 92
decision problem, 175
deck, 66
legitimate, 76
decomposition, 56, 93
cycle, 56
into k-factors, 435

Index
marked S-decomposition, 220
odd-ear, 425
of hypergraph, 504
path, 56
simplicial, 236
tree-decomposition, 239
degenerate
k-degenerate, 362
degree
average, 7
maximum, 7
minimum, 7
of face, 250
of set of vertices, 59
of vertex in digraph, 32
of vertex in graph, 7
of vertex in hypergraph, 24
degree sequence, 10
graphic, 11
of hypergraph, 24
realizable, 166
degree-majorized, 306, 490
deletion
of edge, 40
of matroid element, 284
of vertex, 40
density of bipartite subgraph, 317, 340
dependency
digraph, 353
graph, 353
depth-ﬁrst search, see Algorithm
derangement, 333
descendant
of vertex in tree, 136
proper, 136
DFS, see Algorithm, Depth-First Search
diameter
of digraph, 156
of graph, 82
of set of points, 303
dichromate, see polynomial, Tutte
digraph, see directed graph
Cayley, 33
de Bruijn–Good, 92
Koh–Tindell, 33
directed graph, 31
diregular digraph, 33
disconnected graph, 5
discrepancy

of colouring, 346
of tournament ranking, 347
disjoint
cycles, 64
graphs, 29
vines, 213
distance
between points in plane, 303
between vertices in graph, 80
in weighted graph, 150
dominating set, 339
double jump, 349
doubly stochastic matrix, 424
dual
algebraic, 114, 274
directed plane, 256
Menger, 506
of hypergraph, 24
of matroid, 115
of plane graph, 252
plane, 252
ear, 125
directed, 129
ear decomposition, 125
directed, 130
edge
back, 142
contractible, 127, 211
cut, 85
deletable, 127, 211
marker, 220
of digraph, 31
of graph, 2
of hypergraph, 21
edge chromatic number, 452
k-edge-chromatic, 452
class 1, 459
class 2, 459
fractional, 470
list, 466
edge colourable
k-edge-colourable, 289, 452
list, 466
uniquely, 460
edge colouring
k-edge-colouring, 289, 451
list, 466
of hypergraph, 455

641

642

Index

proper, 289, 451
edge connectivity, 216
local, 216
edge covering, 198, 296, 423
edge cut, 59
k-edge cut, 216
xy-cut, 170
associated with subgraph, 135
separating two vertices, 170
trivial, 59, 217
edge space, 65
edge-disjoint
graphs, 29
paths, 171
edge-extension, 225
edge-reconstructible
class, 68
graph, 68
parameter, 68
edge-transitive graph, 19
EDP, see Problem, Edge-Disjoint Paths
eﬀective resistance, 545
eigenvalue of graph, 11
element of matroid, 114
embedding, 6
cellular, 278
circular, 280
convex, 270
in graph, 40
planar, 5, 244
straight-line, 273
thrackle, 249
unique, 266
empty graph, 4
end
of arc, 31
of edge, 2
of walk, 79
endomorphism of graph, 109
equivalent
bridges, 263
planar embeddings, 266
euclidean Ramsey theory, 327
Euler characteristic, 279
Euler tour, 86
directed, 91
Euler trail, 86
directed, 91
eulerian

digraph, 91
graph, 86
even
digraph, 58
graph, 56
subgraph, 64
event, 330
events
dependent, 331
independent, 331, 351
mutually independent, 331
exceptional set of vertices, 317
expansion at vertex, 224
expectation of random variable, 333
exterior of closed curve, 245
extremal graph, 301
face
of embedded graph, 278
of plane graph, 93, 249
outer, 249
face colouring
k-face-colouring, 288
proper, 288
face-regular plane graph, 261
factor
f -factor, 431
k-factor, 47, 431
factor-critical, see matchable, hypomatchable
fan, 108
k-fan, 214
Fano plane, see projective plane, Fano
feedback arc set, 64, 504
Fibonacci tiling, 550
ﬁnite graph, 3
ﬂow, 158
(x, y)-ﬂow, 158
k-ﬂow, 560
feasible, 158, 537
incremented, 162
integer, 560
maximum, 159
multicommodity, 172
net, 159
zero, 158
ﬂow number, 562
ﬂower, 446

Index
Ford–Fulkerson Algorithm, see Algorithm,
Max-Flow Min-Cut
forest, 99
branching, 106, 520
DFS-branching, 151
linear, 354
Formula
Cauchy–Binet, 539
Cayley, 107
Euler, 259
König–Ore, 422
Tutte–Berge, 428
genus
of closed surface, 277
orientable, of graph, 281
geometric conﬁguration, 21
Desargues, 22
Fano, 22
geometric graph, 46
girth, 42
directed, 98
graph, 2
Blanuša snark, 462
Catlin, 363
Chvátal, 362
Clebsch, 77, 315
Coxeter, 473
Folkman, 20
Franklin, 393
Grötzsch, 366
Grinberg, 480
Hajós, 358
Heawood, 22
Herschel, 472
Hoﬀman–Singleton, 83
Kelmans–Georges, 483
Meredith, 463
Petersen, 15
Rado, 341
Schläﬂi, 77
Shrikhande, 27
Tietze, 394
Tutte, 478
Tutte–Coxeter, 84
Wagner, 275
graph (family)

643

also, see cage, Cayley graph, circulant,
cube, digraph, Halin graph, lattice,
prism, tournament, wheel
ﬂower snark, 462
friendship, 81
generalized Petersen, 20
grid, 30
Kneser, 25
Moore, 83
Paley, 28
platonic, 21
Ramsey, 311
Schrijver, 369
shift, 372
theta, 379
Turán, 10, 301
graph polynomial, see polynomial,
adjacency
graph process, 356
Grinberg’s Identity, 480
Halin graph, 258
Hamilton-connected graph, 474
hamiltonian
1-hamiltonian, 474
hypohamiltonian, 473
uniquely hamiltonian, 494
hamiltonian graph, 290, 472
head
of arc, 31
of queue, 137
heap, 156
heuristic, 193
greedy, 51, 193, 195
greedy colouring, 359
hexagon, 4
homomorphism, 390
horizontal dissector, 547
horizontal graph of squared rectangle, 548
hyperedge, see edge, of hypergraph
hypergraph, 21
balanced, 435
complete, 306
Desargues, 22
Fano, 22, 327
Turán, 306
uniform, 21
hypomorphic graphs, 66

644

Index

IDDP, see Problem, Internally Disjoint
Directed Paths
identical graphs, 12
identiﬁcation of vertices, 55
ILP, see linear program, integer
in-neighbour, 31
incidence function
of digraph, 31
of graph, 2
incidence graph, 22
incidence matrix
of digraph, 34
of graph, 6
of set system, 22
incidence vector, 65
signed, 544
incident
edge, face, 250
vertex, edge, 3
vertex, face, 250
incomparable elements of poset, 42
incut, 62
indegree, 32, 63
independence system, 195
independent set
of independence system, 195
independent set
of graph, see stable set
of matroid, 115
index
of directed cycle, 512
of family of directed cycles, 512
of regularity, 323
inductive
basis, 48
hypothesis, 48
step, 48
Inequality
Cauchy–Schwarz, 45, 324
Chebyshev, 342
Chernoﬀ, 317, 346
Heawood, 392
LYM, 341
Markov, 336
inequality
submodular, 63
triangle, 82, 191
inﬁnite graph, 36
countable, 36

locally-ﬁnite, 37
initial vertex of walk, 79
input of algorithm, 174
instance of problem, 173
interior of closed curve, 245
intermediate vertex of network, 157
internal vertex
of block, 121
of bridge, 263
of walk, 80
internally disjoint
directed paths, 179
paths, 117, 206
intersection graph, 22
intersection of graphs, 29
interval graph, 23
invariant of graphs, 578
IPS, see Algorithm, Incrementing Path
Search
irregular pair of sets, 317
isomorphic
digraphs, 34
graphs, 12
rooted trees, 104
isomorphism
of digraphs, 34
of graphs, 12
join
T -join, 433, 526
Hajós, 369
of graphs, 46
two vertices of digraph, 31
two vertices of graph, 2
Kempe
chain, 397
interchange, 397
kernel, 298
semi-kernel, 299
king in tournament, 104
Kirchhoﬀ matrix, 533
Kirchhoﬀ’s Laws, 542
laminar family of directed cycles, 525
Laplacian, see conductance matrix, 542
large subset, 317
Latin square, 469
lattice

Index
boolean, 9
hexagonal, 36
integer, 551
square, 36
triangular, 36
leaf of tree, 99
Lemma
Bridge, 501
Crossing, 334
Fan, 214
Farkas, 203, 535
Hopping, 502
König, 105
Local, 351, 495
Local (symmetric version), 353
Lollipop, 492
Pósa, 499
Regularity, 318
Sperner, 26
Splitting, 122
Vizing Adjacency, 461
length
of arc, 512
of cycle, 4
of path, 4
of path in weighted graph, 150
level of vertex in tree, 136
Levi graph, 22
reduced, see polarity graph
Lex BFS, see Algorithm, Lexicographic
Breadth-First Search
line
of geometric conﬁguration, 22
of plane graph, 244
line graph, 23
linear program, 197
bounded, 197
constraint of, 197
dual, 197
feasible solution to, 197
integer, 198
integrality constraint of, 198
objective function of, 197
optimal solution to, 197
optimal value of, 197
primal, 197
relaxation of, 200
linearity of expectation, 333
linearly independent subgraphs, 128

link, 3
linkage, 282
list of colours, 377
literal of boolean formula, 183
local cut function of graph, 207
lollipop, 484
loop, 3
of matroid, 284
LP, see linear program
Möbius band, 276
Marriage Theorem, see Theorem, Hall
matchable, 414
hypomatchable, 427
matchable set of vertices, 449
matched vertices, 413
matching, 200, 413
matching-covered, 425
maximal, 414
maximum, 414
perfect, 414
perfect, in hypergraph, 435
matching number, 201, 414
matching space, 425
matroid, 114
bond, 115
cycle, 115
linear, 115
nonseparable, 133
transversal, 449
medial graph, 259
MFMC, see Algorithm, Max-Flow
Min-Cut
min–max theorem, 198
min-max theorem, 505
minimally imperfect graph, 373
minor, 268, 407
F -minor, 269
excluded K5 -minor, 275
excluded K3,3 -minor, 275
Kuratowski, 269
minor-closed, 282
minor-minimal, 282
of matroid, 285
monotone property, 347
multiple edges, see parallel edges
multiplicity of graph, 457
neighbour of vertex, 3

645

646

Index

nested sequence
of digraphs, 130
of forests, 193
of graphs, 125
of trees, 193
network
resistive electrical, 542
transportation, 157
nondeterministic polynomial-time, 175
nonhamiltonian graph, 472
maximally, 476
nonseparable graph, 94, 119
nontrivial graph, 3
null graph, 3
N P, see nondeterministic polynomial-time
N P-complete, 180
N P-hard, 188
odd graph, 63
Ohm’s Law, 542
orbit of graph, 18
order
coherent, 512
cut-greedy, 234
cyclic, 512
median, 101
of graph, 2
of Latin square, 469
of projective plane, 27
of squared rectangle, 547
partial, 42
random, 333
simplicial, 236
orientation
well-balanced, 234
orientation of graph, 32
oriented graph, 32
orthogonal
directed path, colouring, 511
directed path, stable set, 507
path partition, partial k-colouring, 510
path partition, stable set, 507
orthonormal representation, 300
outcut, 62
outdegree, 32, 63
outneighbour, 31
second, 104
output of algorithm, 174
overfull graph, 459

packing
2-packing, 521
of hypergraph, 504
pancyclic graph, 476
uniquely, 477
parallel edges, 3
parallel extension, 275
parent of vertex in tree, 136
part
in k-partite graph, 10
in bipartite graph, 4
partially ordered set, 42
k-partite graph, 10
complete, 10
partition
equipartition, 317
regular, 317
path, 4
(X, Y )-path, 80
M -alternating, 415
M -augmenting, 415
f -improving, 536
f -incrementing, 162
f -saturated, 162
f -unsaturated, 162
ij-path, 453
k-path, 4
x-path, 80
xy-path, 79
absorbable, 491
directed, 33
even, 4
Hamilton, 47, 471
maximal, 41
odd, 4
one-way inﬁnite, 36
shortest, 150
two-way inﬁnite, 36
path exchange, 484
path partition
k-optimal, 510
of digraph, 507
of graph, 475
optimal, 507
path partition number, 475
pentagon, 4
perfect graph, 373
permutation matrix, 424
Pfaﬃan of matrix, 450

Index
pinching together edges, 230
planar graph, 5, 243
maximal, see plane triangulation
maximal outerplanar, 293
outerplanar, 258
plane graph, 244
outerplane, 258
plane triangulation, 254
near-triangulation, 405
point
absolute, of polarity, 308
of geometric conﬁguration, 22
of plane graph, 244
polarity graph, 307
polarity of geometric conﬁguration, 307
pole
of horizontal graph, 548
of electrical network, 542
polyhedral graph, 21
polynomial
adjacency, 380
characteristic, 11
chromatic, 387
ﬂow, 563
reliability, 582
Tutte, 579
Tutte, of matroid, 582
Whitney, 578
polynomial reduction, 178
polynomially equivalent problems, 190
polynomially reducible, 178
polytope
3-polytope, 268
matching, 466
perfect matching, 466
poset, see partially ordered set
power
of ﬂow, 547
of graph, 82
Prüfer code of labelled tree, 109
predecessor in tree, 136
prism
n-prism, 30
pentagonal, 30
triangular, 30
probability
function, 330
of event, 330
space, ﬁnite, 330

647

Problem
k-Commodity Flow, 172
Arc-Disjoint Directed Paths, 167
Assignment, 414
Boolean 3-Satisﬁability, 183
Boolean k-Satisﬁability, 191
Boolean Satisﬁability, 182
Directed Hamilton Cycle, 177
Disjoint Paths, 180
Edge-Disjoint Paths, 171
Eight Queens, 299
Euclidean TSP, 192
Exact Cover, 185
Four-Colour, 287
Graph Isomorphism, 184
Hamilton Cycle, 176
Internally Disjoint Directed Paths, 179
Isomorphism-Complete, 204
Kirkman Schoolgirl, 455
Legitimate Deck, 76, 204
Linkage, 282
Maximum Clique, 188
Maximum Cut, 191
Maximum Flow, 159
Maximum Matching, 414
Maximum Path, 190
Maximum Stable Set, 189
Maximum-Weight Spanning Tree, 178
Metric TSP, 191
Min-Cost Circulation, 538
Minimum Arc Cut, 168
Minimum-Weight Eulerian Spanning
Subgraph, 436
Minimum-Weight Matching, 433
Minimum-Weight Spanning Tree, 146
Postman, 436
Shortest Even/Odd Path, 436
Shortest Path, 150
Timetabling, 452
Travelling Salesman, 51, 188
Weighted T -Join, 433
product
cartesian, 30
lexicographic, see composition
strong, 297
tensor, 300
weak, 364
projective plane, 278
Fano, 22

648

Index

ﬁnite, 26
Proof Technique
Combinatorial Nullstellensatz, 382
Contradiction, 49
Counting in Two Ways, 8
Directional Duality, 33
Discharging, 402
Eigenvalues, 81
Farkas’ Lemma, 535
Inclusion-Exclusion, 68
Induction, 48
Linear Independence, 57
Möbius Inversion, 68
Ordering Vertices, 101
Pigeonhole Principle, 43
Polynomial Reduction, 185
Probabilistic Method, 329
Splitting Oﬀ Edges, 122
Total Unimodularity, 199
Property
Basis Exchange, 114
Erdős–Pósa, 505
Helly, 25, 105, 283
Min–Max, 505
Tree Exchange, 113
quadrilateral, 4
queue, 137
priority, 147, 156
Ramsey number, 309, 321, 339
diagonal, 309
generalized, 316
linear, 321
random graph, 330
countable, see graph, Rado
random permutation, see order, random
random variable, 332
indicator, 332
random variables
dependent, 332
independent, 332
random walk, 551
x-walk, 551
commute time of, 553
cover time of, 554
Drunkard’s Walk, 551
hitting time of, 553
recurrent, 556

transient, 556
recognizable class, 72
reconstructible
class, 67
graph, 66
parameter, 67
reconstruction of graph, 66
regular graph, 7
3-regular, see cubic graph
k-regular, 7
regular pair of sets, 317
related vertices in tree, 136
root
of block, 143
of blossom, 443
of branching, 149
of graph, 137
of tree, 100
rooting of plane graph, 268
sample space, 330
SDR, see system of distinct representatives
f -SDR, 422
segment
of bridge of cycle, 264
of walk, 80
self-complementary graph, 19
self-converse digraph, 34
self-dual
hypergraph, 25
plane graph, 262
separable graph, 119
separating
edge, 250
set of edges, 216
set of vertices, 207
series extension, 275
series-parallel graph, 275
set system, 21
Shannon capacity, 298
shrink
blossom, 443
set of vertices, 208
vertex partition, 570
similar vertices, 15
pseudosimilar, 72
simple graph, 3
labelled, 16
sink

Index
of digraph, 33
of network, 157
size of graph, 2
small subset, 317
snark, 462
Blanuša snark, 462
ﬂower snark, 462
source
of network, 157
of digraph, 33
sphere with k handles, 277
split oﬀ edges, 122
split vertex, 55
spoke of wheel, 46
square of graph, 82
squared rectangle, 547
perfect, 547
simple, 547
squared square, see squared rectangle
stability number, 189, 296
fractional, 200
of digraph, 507
stable set, 189, 295
maximal, 295
maximum, 189, 295
of digraph, 298
stack, 139
star, 4
stereographic projection, 247
strict digraph, 32
strong, see strongly connected
strong component, 91
minimal, 92
strongly connected digraph, 63
strongly regular graph, 12
subdivision
G-subdivision, 246
Kuratowski, 268
of edge, 55
of face, 250
of graph, 246
simplicial, of triangle, 26
subgraph, 40
F -subgraph, 40
bichromatic, 45
cyclic, 517
dominating, 89
edge-deleted, 40
edge-induced, 50

induced, 49
maximal, 41
minimal, 41
monochromatic, 45
proper, 41
spanning, 46
vertex-deleted, 40
submodular function, 226
subtree, 105
successor in tree, 136
succinct certiﬁcate, 175
sum
k-sum of graphs, 275
of sets, 385
supergraph, 40
proper, 41
spanning, 46
supermodular function, 230
support of function, 169
surface
closed, 277
nonorientable, 276
orientable, 276
switch vertex, 75
switching-reconstructible, 75
symmetric diﬀerence of graphs, 47
system of distinct representatives, 420
tail
of arc, 31
of queue, 137
tension, 528
feasible, 534
nowhere-zero, 558
tension space, 528
terminal vertex of walk, 80
Theorem
Art Gallery, 293
Berge, 415
Bessy–Thomassé, 514
Birkhoﬀ–von Neumann, 424
Brooks, 360
Camion, 512
Cauchy–Davenport, 385
Chvátal–Erdős, 488
Combinatorial Nullstellensatz, 383
Cook–Levin, 183
de Bruijn–Erdős, 27
Dilworth, 509

649

650

Index

Dirac, 485
Dual Dilworth, 46
Duality, 198
Edmonds Branching, 518
Eight-Flow, 573
Erdős–Ko–Rado, 341
Erdős–Pósa, 505
Erdős–Stone, 318
Erdős–Stone–Simonovits, 320
Erdős–Szekeres, 364
Five-Colour, 291
Fleischner–Stiebitz, 384
Four-Colour, 288
Four-Flow, 573
Friendship, 81
Gallai–Milgram, 507
Gallai–Roy, 361
Galvin, 468
Ghouila-Houri, 534
Grötzsch, 406, 568
Grinberg, 479
Gupta, 455
Hall, 419
Heawood, 293
Hoﬀman Circulation, 534
Jordan Curve, 244
Jordan–Schönﬂiess, 250
König–Egerváry, 201
König–Rado, 199
Kővári–Sós–Turán, 307
Kuratowski, 268
Lucchesi–Younger, 523
Mantel, 45
Map Colour, 281, 393
Matrix–Tree, 539
Max-Flow Min-Cut, 163
Menger (arc version), 170
Menger (directed vertex version), 218
Menger (edge version), 171, 216
Menger (undirected vertex version), 208
Minty Flow-Ratio, 560
Nash-Williams–Tutte, 570
Perfect, 216
Perfect Graph, 374
Petersen, 430
Rédei, 48, 54, 101
Reiman, 45
Richardson, 299
Robbins, 127

Schur, 314
Six-Flow, 576
Smith, 493
Sperner, 341
Steinitz, 268
Strong Perfect Graph, 376
Surface Classiﬁcation, 278
Sylvester–Gallai, 262
Szemerédi, 317
Tait, 289
Tree-width–Bramble Duality, 284
Turán, 301, 339
Tutte Perfect Matching, 430
Tutte Wheel, 226
Tutte–Berge, 428
Veblen, 56
Vizing, 457
Wagner, 269
thickness, 261
Thomson’s Principle, 546
thrackle, 249
threshold function, 347
top of stack, 139
topological sort, 44, 154
torus, 276
double, 277
total chromatic number, 470
total colouring, 470
tough
t-tough, 478
path-tough, 475
tough graph, 473
toughness, 478
tour of graph, 86
tournament, 32
Paley, 35
random, 338
Stockmeyer, 35
transitive, 43
traceable graph, 472
from a vertex, 474
hypotraceable, 476
trail in graph, 80
transitive digraph, 42
transitive graph, see vertex-transitive
transversal
of bramble, 283
of hypergraph, 504
transversal hypergraph, 506

Index
tree, 99
M -alternating, 437
M -covered, 437
f -tree, 498
x-tree, 100
APS-tree, 437
augmenting path search, 437
BFS-tree, 138
Borůvka–Kruskal, 194
breadth-ﬁrst search, 138
decomposition, 221
depth-ﬁrst search, 139
DFS-tree, 139
distance, 108
Gomory–Hu, 231
incrementing path search, 164
IPS-tree, 164
Jarnı́k–Prim, 147
optimal, 146
rooted, 100
search, 136
spanning, 105, 110
uniform, 104
triangle, 4
triangle-free graph, 45
triangulation, see plane triangulation
trivial graph, 3
TSP, see Problem, Travelling Salesman
Tutte matrix, 449
ultrahomogeneous graph, 77
unavoidable set of conﬁgurations, 401
uncrossing, 231
underlying
digraph, of network, 157
graph, of digraph, 32
simple graph, of graph, 47
unilateral digraph, 92
unimodular matrix, 539
totally, 35, 199, 515
union of graphs, 29
disjoint, 29
unit-distance graph, 37
rational, 37
real, 37
unlabelled graph, 14
value
of boolean formula, 181
of current ﬂow, 542

651

of ﬂow, 159
of linear program, 197
Vandermonde determinant, 381
variance of random variable, 342
vertex
of hypergraph, 21
covered, by matching, 414
cut, 117
essential, 418, 427
inessential, 427
insertable, 491
isolated, 7
of attachment of bridge, 263
of digraph, 31
of graph, 2
reachable, 90
separating, 119
simplicial, 236
vertex colouring, see colouring
vertex connectivity, see connectivity
vertex cut, 207
(x, y)-vertex-cut, 218
k-vertex cut, 207
xy-vertex-cut, 207
vertex weighting, 514
index-bounded, 514
vertex-transitive graph, 15
vertical graph of squared rectangle, 550
vine on path, 128
walk, 79
k-walk, 475
x-walk, 80
xy-walk, 79
closed, 80
directed, 90
random, 551
weakly reconstructible, 72
weight
of edge, 50
of set, 195
of subgraph, 50, 514
of vertex, 514
weight function, 538
weighted graph, 50
wheel, 46
width
of tree-decomposition, 240
tree-width, 240

Graduate Texts in Mathematics
(continued from page ii)
75 Hochschild. Basic Theory of Algebraic
Groups and Lie Algebras.
76 Iitaka. Algebraic Geometry.
77 Hecke. Lectures on the Theory of
Algebraic Numbers.
78 Burris/Sankappanavar. A Course in
Universal Algebra.
79 Walters. An Introduction to Ergodic
Theory.
80 Robinson. A Course in the Theory of
Groups. 2nd ed.
81 Forster. Lectures on Riemann Surfaces.
82 Bott/Tu. Differential Forms in Algebraic
Topology.
83 Washington. Introduction to Cyclotomic
Fields. 2nd ed.
84 Ireland/Rosen. A Classical Introduction
to Modern Number Theory. 2nd ed.
85 Edwards. Fourier Series. Vol. II. 2nd ed.
86 van Lint. Introduction to Coding
Theory. 2nd ed.
87 Brown. Cohomology of Groups.
88 Pierce. Associative Algebras.
89 Lang. Introduction to Algebraic and
Abelian Functions. 2nd ed.
90 Brøndsted. An Introduction to Convex
Polytopes.
91 Beardon. On the Geometry of Discrete
Groups.
92 Diestel. Sequences and Series in Banach
Spaces.
93 Dubrovin/Fomenko/Novikov. Modern
Geometry—Methods and Applications.
Part I. 2nd ed.
94 Warner. Foundations of Differentiable
Manifolds and Lie Groups.
95 Shiryaev. Probability. 2nd ed.
96 Conway. A Course in Functional
Analysis. 2nd ed.
97 Koblitz. Introduction to Elliptic Curves
and Modular Forms. 2nd ed.
98 Bröcker/Tom Dieck. Representations of
Compact Lie Groups.
99 Grove/Benson. Finite Reflection
Groups. 2nd ed.
100 Berg/Christensen/Ressel. Harmonic
Analysis on Semigroups: Theory of
Positive Definite and Related Functions.
101 Edwards. Galois Theory.
102 Varadarajan. Lie Groups, Lie Algebras
and Their Representations.
103 Lang. Complex Analysis. 3rd ed.
104 Dubrovin/Fomenko/Novikov. Modern
Geometry—Methods and Applications.
Part II.
105 Lang. SL2 (R).

106 Silverman. The Arithmetic of Elliptic
Curves.
107 Olver. Applications of Lie Groups to
Differential Equations. 2nd ed.
108 Range. Holomorphic Functions and
Integral Representations in Several
Complex Variables.
109 Lehto. Univalent Functions and
Teichmüller Spaces.
110 Lang. Algebraic Number Theory.
111 Husemöller. Elliptic Curves. 2nd ed.
112 Lang. Elliptic Functions.
113 Karatzas/Shreve. Brownian Motion
and Stochastic Calculus. 2nd ed.
114 Koblitz. A Course in Number Theory
and Cryptography. 2nd ed.
115 Berger/Gostiaux. Differential
Geometry: Manifolds, Curves, and
Surfaces.
116 Kelley/Srinivasan. Measure and
Integral. Vol. I.
117 J.-P. Serre. Algebraic Groups and Class
Fields.
118 Pedersen. Analysis Now.
119 Rotman. An Introduction to Algebraic
Topology.
120 Ziemer. Weakly Differentiable Funcitons:
Sobolev Spaces and Functions of
Bounded Variation.
121 Lang. Cyclotomic Fields I and II.
Combined 2nd ed.
122 Remmert. Theory of Complex Functions.
Readings in Mathematics.
123 Ebbinghaus/Hermes et al. Numbers.
Readings in Mathematics.
124 Dubrovin/Fomenko/Novikov. Modern
Geometry—Methods and Applications
Part III.
125 Berenstein/Gay. Complex Variables:
An Introduction.
126 Borel. Linear Algebraic Groups. 2nd ed.
127 Massey. A Basic Course in Algebraic
Topology.
128 Rauch. Partial Differential Equations.
129 Fulton/Harris. Representation Theory:
A First Course. Readings in Mathematics.
130 Dodson/Poston. Tensor Geometry.
131 Lam. A First Course in Noncommutative
Rings. 2nd ed.
132 Beardon. Iteration of Rational
Functions.
133 Harris. Algebraic Geometry: A First
Course.
134 Roman. Coding and Information Theory.
135 Roman. Advanced Linear Algebra.
3rd ed.

136 Adkins/Weintraub. Algebra:
An Approach via Module Theory.
137 Axler/Bourdon/Ramey. Harmonic
Function Theory. 2nd ed.
138 Cohen. A Course in Computational
Algebraic Number Theory.
139 Bredon. Topology and Geometry.
140 Aubin. Optima and Equilibria. An
Introduction to Nonlinear Analysis.
141 Becker/Weispfenning/Kredel.
Gröbner Bases. A Computational
Approach to Commutative Algebra.
142 Lang. Real and Functional Analysis.
3rd ed.
143 Doob, Measure Theory.
144 Dennis/Farb. Noncommutative Algebra.
145 Vick. Homology Theory. An Introduction
to Algebraic Topology. 2nd ed.
146 Bridges. Computability: A Mathematical
Sketchbook.
147 Rosenberg. Algebraic K-Theory and Its
Applications.
148 Rotman. An Introduction to the Theory
of Groups. 4th ed.
149 Ratcliffe. Foundations of Hyperbolic
Manifolds. 2nd ed.
150 Eisenbud. Commutative Algebra with a
View Toward Algebraic Geometry.
151 Silverman. Advanced Topics in the
Arithmetic of Elliptic Curves.
152 Ziegler. Lectures on Polytopes.
153 Fulton. Algebraic Topology: A First
Course.
154 Brown/Pearcy. An Introduction to
Analysis.
155 Kassel. Quantum Groups.
156 Kechris. Classical Descriptive Set
Theory.
157 Malliavin. Integration and Probability.
158 Roman. Field Theory.
159 Conway. Functions of One Complex
Variable II.
160 Lang. Differential and Riemannian
Manifolds.
161 Borwein/Erdélyi. Polynomials and
Polynomial Inequalities.
162 Alperin/Bell. Groups and
Representations.
163 Dixon/Mortimer. Permutation Groups.
164 Nathanson. Additive Number Theory:
The Classical Bases.
165 Nathanson. Additive Number Theory:
Inverse Problems and the Geometry of
Sumsets.
166 Sharpe. Differential Geometry: Cartan’s
Gencralization of Klein’s Erlangen
Program.
167 Morandi. Field and Galois Theory.

168 Ewald. Combinatorial Convexity and
Algebraic Geometry.
169 Bhatia. Matrix Analysis.
170 Bredon. Sheaf Theory. 2nd ed.
171 Petersen. Riemannian Geometry.
2nd ed.
172 Remmert. Classical Topics in Complex
Function Theory.
173 Diestel. Graph Theory. 2nd ed.
174 Bridges. Foundations of Real and
Abstract Analysis.
175 Lickorish. An Introduction to Knot
Theory.
176 Lee. Riemannian Manifolds.
177 Newman. Analytic Number Theory.
178 Clarke/Ledyaev/Stern/
Wolenski. Nonsmooth Analysis and
Control Theory.
179 Douglas. Banach Algebra Techniques in
Operator Theory. 2nd ed.
180 Srivastava. A Course on Borel Sets.
181 Kress. Numerical Analysis.
182 Walter. Ordinary Differential Equations.
183 Megginson. An Introduction to Banach
Space Theory.
184 Bollobas. Modern Graph Theory.
185 Cox/Little/O’Shea. Using Algebraic
Geometry. 2nd ed.
186 Ramakrishnan/Valenza. Fourier
Analysis on Number Fields.
187 Harris/Morrison. Moduli of Curves.
188 Goldblatt. Lectures on the Hyperreals:
An Introduction to Nonstandard
Analysis.
189 Lam. Lectures on Modules and Rings.
190 Esmonde/Murty. Problems in Algebraic
Number Theory. 2nd ed.
191 Lang. Fundamentals of Differential
Geometry.
192 Hirsch/Lacombe. Elements of
Functional Analysis.
193 Cohen. Advanced Topics in
Computational Number Theory.
194 Engel/Nagel. One-Parameter
Semigroups for Linear Evolution
Equations.
195 Nathanson. Elementary Methods in
Number Theory.
196 Osborne. Basic Homological Algebra.
197 Eisenbud/Harris. The Geometry of
Schemes.
198 Robert. A Course in p-adic Analysis.
199 Hedenmalm/Korenblum/Zhu. Theory
of Bergman Spaces.
200 Bao/Chern/Shen. An Introduction to
Riemann-Finsler Geometry.
201 Hindry/Silverman. Diophantine
Geometry: An Introduction.

202 Lee. Introduction to Topological
Manifolds.
203 Sagan. The Symmetric Group:
Representations, Combinatorial
Algorithms, and Symmetric Functions.
204 Escofier. Galois Theory.
205 Felix/Halperin/Thomas. Rational
Homotopy Theory. 2nd ed.
206 Murty. Problems in Analytic Number
Theory. Readings in Mathematics.
207 Godsil/Royle. Algebraic Graph Theory.
208 Cheney. Analysis for Applied
Mathematics.
209 Arveson. A Short Course on Spectral
Theory.
210 Rosen. Number Theory in Function
Fields.
211 Lang. Algebra. Revised 3rd ed.
212 Matouek. Lectures on Discrete
Geometry.
213 Fritzsche/Grauert. From Holomorphic
Functions to Complex Manifolds.
214 Jost. Partial Differential Equations.
2nd ed.
215 Goldschmidt. Algebraic Functions and
Projective Curves.
216 D. Serre. Matrices: Theory and
Applications.
217 Marker. Model Theory: An
Introduction.
218 Lee. Introduction to Smooth Manifolds.
219 Maclachlan/Reid. The Arithmetic of
Hyperbolic 3-Manifolds.
220 Nestruev. Smooth Manifolds and
Observables.
221 Grünbaum. Convex Polytopes. 2nd ed.
222 Hall. Lie Groups, Lie Algebras, and
Representations: An Elementary
Introduction.

223 Vretblad. Fourier Analysis and Its
Applications.
224 Walschap. Metric Structures in
Differential Geometry.
225 Bump. Lie Groups.
226 Zhu. Spaces of Holomorphic Functions in
the Unit Ball.
227 Miller/Sturmfels. Combinatorial
Commutative Algebra.
228 Diamond/Shurman. A First Course in
Modular Forms.
229 Eisenbud. The Geometry of Syzygies.
230 Stroock. An Introduction to Markov
Processes.
231 Björner/Brenti. Combinatorics of
Coxeter Groups.
232 Everest/Ward. An Introduction to
Number Theory.
233 Albiac/Kalton. Topics in Banach Space
Theory.
234 Jorgenson. Analysis and Probability.
235 Sepanski. Compact Lie Groups.
236 Garnett. Bounded Analytic Functions.
237 Martı́nez-Avendaño/Rosenthal. An
Introduction to Operators on the
Hardy-Hilbert Space.
238 Aigner, A Course in Enumeration.
239 Cohen, Number Theory, Vol. I.
240 Cohen, Number Theory, Vol. II.
241 Silverman. The Arithmetic of Dynamical
Systems.
242 Grillet. Abstract Algebra. 2nd ed.
243 Geoghegan. Topological Methods in
Group Theory.
244 Bondy/Murty. Graph Theory.
245 Gilman/Kra/Rodriguez. Complex
Analysis.
246 Kaniuth. A Course in Commutative
Banach Algebras.

